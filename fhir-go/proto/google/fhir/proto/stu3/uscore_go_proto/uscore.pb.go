//    Copyright 2018 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/stu3/uscore.proto

package uscore_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/stu3/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/stu3/datatypes_go_proto"
	metadatatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/stu3/metadatatypes_go_proto"
	resources_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/stu3/resources_go_proto"
	uscore_codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/stu3/uscore_codes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for US Core Allergies Profile.
// US Core Allergies Profile.
// See
// http://hl7.org/fhir/us/core/StructureDefinition/us-core-allergyintolerance
type UsCoreAllergyintolerance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External ids for this item
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// active | inactive | resolved
	ClinicalStatus *codes_go_proto.AllergyIntoleranceClinicalStatusCode `protobuf:"bytes,10,opt,name=clinical_status,json=clinicalStatus,proto3" json:"clinical_status,omitempty"`
	// unconfirmed | confirmed | refuted | entered-in-error
	VerificationStatus *codes_go_proto.AllergyIntoleranceVerificationStatusCode `protobuf:"bytes,11,opt,name=verification_status,json=verificationStatus,proto3" json:"verification_status,omitempty"`
	// allergy | intolerance - Underlying mechanism (if known)
	Type *codes_go_proto.AllergyIntoleranceTypeCode `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
	// food | medication | environment | biologic
	Category []*codes_go_proto.AllergyIntoleranceCategoryCode `protobuf:"bytes,13,rep,name=category,proto3" json:"category,omitempty"`
	// low | high | unable-to-assess
	Criticality *codes_go_proto.AllergyIntoleranceCriticalityCode `protobuf:"bytes,14,opt,name=criticality,proto3" json:"criticality,omitempty"`
	// Code that identifies the allergy or intolerance
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=code,proto3" json:"code,omitempty"`
	// Who the sensitivity is for
	Patient *datatypes_go_proto.Reference   `protobuf:"bytes,16,opt,name=patient,proto3" json:"patient,omitempty"`
	Onset   *UsCoreAllergyintolerance_Onset `protobuf:"bytes,17,opt,name=onset,proto3" json:"onset,omitempty"`
	// Date record was believed accurate
	AssertedDate *datatypes_go_proto.DateTime `protobuf:"bytes,18,opt,name=asserted_date,json=assertedDate,proto3" json:"asserted_date,omitempty"`
	// Who recorded the sensitivity
	Recorder *datatypes_go_proto.Reference `protobuf:"bytes,19,opt,name=recorder,proto3" json:"recorder,omitempty"`
	// Source of the information about the allergy
	Asserter *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=asserter,proto3" json:"asserter,omitempty"`
	// Date(/time) of last known occurrence of a reaction
	LastOccurrence *datatypes_go_proto.DateTime `protobuf:"bytes,21,opt,name=last_occurrence,json=lastOccurrence,proto3" json:"last_occurrence,omitempty"`
	// Additional text not captured in other fields
	Note     []*datatypes_go_proto.Annotation     `protobuf:"bytes,22,rep,name=note,proto3" json:"note,omitempty"`
	Reaction []*UsCoreAllergyintolerance_Reaction `protobuf:"bytes,23,rep,name=reaction,proto3" json:"reaction,omitempty"`
}

func (x *UsCoreAllergyintolerance) Reset() {
	*x = UsCoreAllergyintolerance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreAllergyintolerance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreAllergyintolerance) ProtoMessage() {}

func (x *UsCoreAllergyintolerance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreAllergyintolerance.ProtoReflect.Descriptor instead.
func (*UsCoreAllergyintolerance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{0}
}

func (x *UsCoreAllergyintolerance) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreAllergyintolerance) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UsCoreAllergyintolerance) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *UsCoreAllergyintolerance) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UsCoreAllergyintolerance) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *UsCoreAllergyintolerance) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *UsCoreAllergyintolerance) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreAllergyintolerance) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreAllergyintolerance) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *UsCoreAllergyintolerance) GetClinicalStatus() *codes_go_proto.AllergyIntoleranceClinicalStatusCode {
	if x != nil {
		return x.ClinicalStatus
	}
	return nil
}

func (x *UsCoreAllergyintolerance) GetVerificationStatus() *codes_go_proto.AllergyIntoleranceVerificationStatusCode {
	if x != nil {
		return x.VerificationStatus
	}
	return nil
}

func (x *UsCoreAllergyintolerance) GetType() *codes_go_proto.AllergyIntoleranceTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *UsCoreAllergyintolerance) GetCategory() []*codes_go_proto.AllergyIntoleranceCategoryCode {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *UsCoreAllergyintolerance) GetCriticality() *codes_go_proto.AllergyIntoleranceCriticalityCode {
	if x != nil {
		return x.Criticality
	}
	return nil
}

func (x *UsCoreAllergyintolerance) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *UsCoreAllergyintolerance) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *UsCoreAllergyintolerance) GetOnset() *UsCoreAllergyintolerance_Onset {
	if x != nil {
		return x.Onset
	}
	return nil
}

func (x *UsCoreAllergyintolerance) GetAssertedDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.AssertedDate
	}
	return nil
}

func (x *UsCoreAllergyintolerance) GetRecorder() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Recorder
	}
	return nil
}

func (x *UsCoreAllergyintolerance) GetAsserter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Asserter
	}
	return nil
}

func (x *UsCoreAllergyintolerance) GetLastOccurrence() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.LastOccurrence
	}
	return nil
}

func (x *UsCoreAllergyintolerance) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *UsCoreAllergyintolerance) GetReaction() []*UsCoreAllergyintolerance_Reaction {
	if x != nil {
		return x.Reaction
	}
	return nil
}

// Auto-generated from StructureDefinition for US Core Birth Sex Extension.
// Extension.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-birthsex
type PatientUSCoreBirthSexExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Value of extension
	ValueCode *uscore_codes_go_proto.UsCoreBirthSexCode `protobuf:"bytes,3,opt,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *PatientUSCoreBirthSexExtension) Reset() {
	*x = PatientUSCoreBirthSexExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientUSCoreBirthSexExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientUSCoreBirthSexExtension) ProtoMessage() {}

func (x *PatientUSCoreBirthSexExtension) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientUSCoreBirthSexExtension.ProtoReflect.Descriptor instead.
func (*PatientUSCoreBirthSexExtension) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{1}
}

func (x *PatientUSCoreBirthSexExtension) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientUSCoreBirthSexExtension) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PatientUSCoreBirthSexExtension) GetValueCode() *uscore_codes_go_proto.UsCoreBirthSexCode {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// Auto-generated from StructureDefinition for US Core CarePlan Profile.
// US Core CarePlan Profile.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-careplan
type UsCoreCareplan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Ids for this plan
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Protocol or definition
	Definition []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=definition,proto3" json:"definition,omitempty"`
	// Fulfills care plan
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,11,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// CarePlan replaced by this CarePlan
	Replaces []*datatypes_go_proto.Reference `protobuf:"bytes,12,rep,name=replaces,proto3" json:"replaces,omitempty"`
	// Part of referenced CarePlan
	PartOf []*datatypes_go_proto.Reference `protobuf:"bytes,13,rep,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	// draft | active | suspended | completed | entered-in-error | cancelled |
	// unknown
	Status *codes_go_proto.CarePlanStatusCode `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	// proposal | plan | order | option
	Intent *codes_go_proto.CarePlanIntentCode `protobuf:"bytes,15,opt,name=intent,proto3" json:"intent,omitempty"`
	// Type of plan
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,rep,name=category,proto3" json:"category,omitempty"`
	// Human-friendly name for the CarePlan
	Title *datatypes_go_proto.String `protobuf:"bytes,17,opt,name=title,proto3" json:"title,omitempty"`
	// Summary of nature of plan
	Description *datatypes_go_proto.String `protobuf:"bytes,18,opt,name=description,proto3" json:"description,omitempty"`
	// Who care plan is for
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,19,opt,name=subject,proto3" json:"subject,omitempty"`
	// Created in context of
	Context *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=context,proto3" json:"context,omitempty"`
	// Time period plan covers
	Period *datatypes_go_proto.Period `protobuf:"bytes,21,opt,name=period,proto3" json:"period,omitempty"`
	// Who is responsible for contents of the plan
	Author []*datatypes_go_proto.Reference `protobuf:"bytes,22,rep,name=author,proto3" json:"author,omitempty"`
	// Who's involved in plan?
	CareTeam []*datatypes_go_proto.Reference `protobuf:"bytes,23,rep,name=care_team,json=careTeam,proto3" json:"care_team,omitempty"`
	// Health issues this plan addresses
	Addresses []*datatypes_go_proto.Reference `protobuf:"bytes,24,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// Information considered as part of plan
	SupportingInfo []*datatypes_go_proto.Reference `protobuf:"bytes,25,rep,name=supporting_info,json=supportingInfo,proto3" json:"supporting_info,omitempty"`
	// Desired outcome of plan
	Goal     []*datatypes_go_proto.Reference `protobuf:"bytes,26,rep,name=goal,proto3" json:"goal,omitempty"`
	Activity []*UsCoreCareplan_Activity      `protobuf:"bytes,27,rep,name=activity,proto3" json:"activity,omitempty"`
	// Comments about the plan
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,28,rep,name=note,proto3" json:"note,omitempty"`
}

func (x *UsCoreCareplan) Reset() {
	*x = UsCoreCareplan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreCareplan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreCareplan) ProtoMessage() {}

func (x *UsCoreCareplan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreCareplan.ProtoReflect.Descriptor instead.
func (*UsCoreCareplan) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{2}
}

func (x *UsCoreCareplan) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreCareplan) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UsCoreCareplan) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *UsCoreCareplan) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UsCoreCareplan) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *UsCoreCareplan) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *UsCoreCareplan) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreCareplan) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreCareplan) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *UsCoreCareplan) GetDefinition() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *UsCoreCareplan) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *UsCoreCareplan) GetReplaces() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Replaces
	}
	return nil
}

func (x *UsCoreCareplan) GetPartOf() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *UsCoreCareplan) GetStatus() *codes_go_proto.CarePlanStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UsCoreCareplan) GetIntent() *codes_go_proto.CarePlanIntentCode {
	if x != nil {
		return x.Intent
	}
	return nil
}

func (x *UsCoreCareplan) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *UsCoreCareplan) GetTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *UsCoreCareplan) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UsCoreCareplan) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *UsCoreCareplan) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *UsCoreCareplan) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *UsCoreCareplan) GetAuthor() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *UsCoreCareplan) GetCareTeam() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.CareTeam
	}
	return nil
}

func (x *UsCoreCareplan) GetAddresses() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *UsCoreCareplan) GetSupportingInfo() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SupportingInfo
	}
	return nil
}

func (x *UsCoreCareplan) GetGoal() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Goal
	}
	return nil
}

func (x *UsCoreCareplan) GetActivity() []*UsCoreCareplan_Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *UsCoreCareplan) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

// Auto-generated from StructureDefinition for US Core CareTeam Profile.
// US Core CareTeam Profile.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-careteam
type UsCoreCareteam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Ids for this team
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// proposed | active | suspended | inactive | entered-in-error
	Status *codes_go_proto.CareTeamStatusCode `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// Type of team
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,rep,name=category,proto3" json:"category,omitempty"`
	// Name of the team, such as crisis assessment team
	Name *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	// Who care team is for
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=subject,proto3" json:"subject,omitempty"`
	// Encounter or episode associated with CareTeam
	Context *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=context,proto3" json:"context,omitempty"`
	// Time period team covers
	Period      *datatypes_go_proto.Period    `protobuf:"bytes,15,opt,name=period,proto3" json:"period,omitempty"`
	Participant []*UsCoreCareteam_Participant `protobuf:"bytes,16,rep,name=participant,proto3" json:"participant,omitempty"`
	// Why the care team exists
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,17,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Why the care team exists
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// Organization responsible for the care team
	ManagingOrganization []*datatypes_go_proto.Reference `protobuf:"bytes,19,rep,name=managing_organization,json=managingOrganization,proto3" json:"managing_organization,omitempty"`
	// Comments made about the CareTeam
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,20,rep,name=note,proto3" json:"note,omitempty"`
}

func (x *UsCoreCareteam) Reset() {
	*x = UsCoreCareteam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreCareteam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreCareteam) ProtoMessage() {}

func (x *UsCoreCareteam) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreCareteam.ProtoReflect.Descriptor instead.
func (*UsCoreCareteam) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{3}
}

func (x *UsCoreCareteam) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreCareteam) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UsCoreCareteam) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *UsCoreCareteam) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UsCoreCareteam) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *UsCoreCareteam) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *UsCoreCareteam) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreCareteam) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreCareteam) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *UsCoreCareteam) GetStatus() *codes_go_proto.CareTeamStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UsCoreCareteam) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *UsCoreCareteam) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UsCoreCareteam) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *UsCoreCareteam) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *UsCoreCareteam) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *UsCoreCareteam) GetParticipant() []*UsCoreCareteam_Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *UsCoreCareteam) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *UsCoreCareteam) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *UsCoreCareteam) GetManagingOrganization() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ManagingOrganization
	}
	return nil
}

func (x *UsCoreCareteam) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

// Auto-generated from StructureDefinition for US Core Condition Profile.
// US Core Condition Profile.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-condition
type UsCoreCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Ids for this condition
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// active | recurrence | inactive | remission | resolved
	ClinicalStatus *codes_go_proto.ConditionClinicalStatusCodesCode `protobuf:"bytes,10,opt,name=clinical_status,json=clinicalStatus,proto3" json:"clinical_status,omitempty"`
	// provisional | differential | confirmed | refuted | entered-in-error |
	// unknown
	VerificationStatus *codes_go_proto.ConditionVerificationStatusCode `protobuf:"bytes,11,opt,name=verification_status,json=verificationStatus,proto3" json:"verification_status,omitempty"`
	// problem-list-item | encounter-diagnosis
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	// Subjective severity of condition
	Severity *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=severity,proto3" json:"severity,omitempty"`
	// Identification of the condition, problem or diagnosis
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=code,proto3" json:"code,omitempty"`
	// Anatomical location, if relevant
	BodySite []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,rep,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// Who has the condition?
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=subject,proto3" json:"subject,omitempty"`
	// Encounter or episode when condition first asserted
	Context   *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=context,proto3" json:"context,omitempty"`
	Onset     *UsCoreCondition_Onset        `protobuf:"bytes,18,opt,name=onset,proto3" json:"onset,omitempty"`
	Abatement *UsCoreCondition_Abatement    `protobuf:"bytes,19,opt,name=abatement,proto3" json:"abatement,omitempty"`
	// Date record was believed accurate
	AssertedDate *datatypes_go_proto.DateTime `protobuf:"bytes,20,opt,name=asserted_date,json=assertedDate,proto3" json:"asserted_date,omitempty"`
	// Person who asserts this condition
	Asserter *datatypes_go_proto.Reference `protobuf:"bytes,21,opt,name=asserter,proto3" json:"asserter,omitempty"`
	Stage    *UsCoreCondition_Stage        `protobuf:"bytes,22,opt,name=stage,proto3" json:"stage,omitempty"`
	Evidence []*UsCoreCondition_Evidence   `protobuf:"bytes,23,rep,name=evidence,proto3" json:"evidence,omitempty"`
	// Additional information about the Condition
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,24,rep,name=note,proto3" json:"note,omitempty"`
}

func (x *UsCoreCondition) Reset() {
	*x = UsCoreCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreCondition) ProtoMessage() {}

func (x *UsCoreCondition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreCondition.ProtoReflect.Descriptor instead.
func (*UsCoreCondition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{4}
}

func (x *UsCoreCondition) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreCondition) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UsCoreCondition) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *UsCoreCondition) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UsCoreCondition) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *UsCoreCondition) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *UsCoreCondition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreCondition) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreCondition) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *UsCoreCondition) GetClinicalStatus() *codes_go_proto.ConditionClinicalStatusCodesCode {
	if x != nil {
		return x.ClinicalStatus
	}
	return nil
}

func (x *UsCoreCondition) GetVerificationStatus() *codes_go_proto.ConditionVerificationStatusCode {
	if x != nil {
		return x.VerificationStatus
	}
	return nil
}

func (x *UsCoreCondition) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *UsCoreCondition) GetSeverity() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *UsCoreCondition) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *UsCoreCondition) GetBodySite() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *UsCoreCondition) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *UsCoreCondition) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *UsCoreCondition) GetOnset() *UsCoreCondition_Onset {
	if x != nil {
		return x.Onset
	}
	return nil
}

func (x *UsCoreCondition) GetAbatement() *UsCoreCondition_Abatement {
	if x != nil {
		return x.Abatement
	}
	return nil
}

func (x *UsCoreCondition) GetAssertedDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.AssertedDate
	}
	return nil
}

func (x *UsCoreCondition) GetAsserter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Asserter
	}
	return nil
}

func (x *UsCoreCondition) GetStage() *UsCoreCondition_Stage {
	if x != nil {
		return x.Stage
	}
	return nil
}

func (x *UsCoreCondition) GetEvidence() []*UsCoreCondition_Evidence {
	if x != nil {
		return x.Evidence
	}
	return nil
}

func (x *UsCoreCondition) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

// Auto-generated from StructureDefinition for US Core Implanted Device Profile.
// US Core Implanted Device Profile.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-device
type UsCoreDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Instance identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Udi        *UsCoreDevice_Udi                `protobuf:"bytes,10,opt,name=udi,proto3" json:"udi,omitempty"`
	// active | inactive | entered-in-error | unknown
	Status *codes_go_proto.FHIRDeviceStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// What kind of device this is
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
	// Lot number of manufacture
	LotNumber *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=lot_number,json=lotNumber,proto3" json:"lot_number,omitempty"`
	// Name of device manufacturer
	Manufacturer *datatypes_go_proto.String `protobuf:"bytes,14,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// Date when the device was made
	ManufactureDate *datatypes_go_proto.DateTime `protobuf:"bytes,15,opt,name=manufacture_date,json=manufactureDate,proto3" json:"manufacture_date,omitempty"`
	// Date and time of expiry of this device (if applicable)
	ExpirationDate *datatypes_go_proto.DateTime `protobuf:"bytes,16,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	// Model id assigned by the manufacturer
	Model *datatypes_go_proto.String `protobuf:"bytes,17,opt,name=model,proto3" json:"model,omitempty"`
	// Version number (i.e. software)
	Version *datatypes_go_proto.String `protobuf:"bytes,18,opt,name=version,proto3" json:"version,omitempty"`
	// Patient to whom Device is affixed
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,19,opt,name=patient,proto3" json:"patient,omitempty"`
	// Organization responsible for device
	Owner *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=owner,proto3" json:"owner,omitempty"`
	// Details for human/organization for support
	Contact []*datatypes_go_proto.ContactPoint `protobuf:"bytes,21,rep,name=contact,proto3" json:"contact,omitempty"`
	// Where the resource is found
	Location *datatypes_go_proto.Reference `protobuf:"bytes,22,opt,name=location,proto3" json:"location,omitempty"`
	// Network address to contact device
	Url *datatypes_go_proto.Uri `protobuf:"bytes,23,opt,name=url,proto3" json:"url,omitempty"`
	// Device notes and comments
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,24,rep,name=note,proto3" json:"note,omitempty"`
	// Safety Characteristics of Device
	Safety []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,25,rep,name=safety,proto3" json:"safety,omitempty"`
}

func (x *UsCoreDevice) Reset() {
	*x = UsCoreDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreDevice) ProtoMessage() {}

func (x *UsCoreDevice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreDevice.ProtoReflect.Descriptor instead.
func (*UsCoreDevice) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{5}
}

func (x *UsCoreDevice) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreDevice) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UsCoreDevice) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *UsCoreDevice) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UsCoreDevice) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *UsCoreDevice) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *UsCoreDevice) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreDevice) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreDevice) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *UsCoreDevice) GetUdi() *UsCoreDevice_Udi {
	if x != nil {
		return x.Udi
	}
	return nil
}

func (x *UsCoreDevice) GetStatus() *codes_go_proto.FHIRDeviceStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UsCoreDevice) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *UsCoreDevice) GetLotNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.LotNumber
	}
	return nil
}

func (x *UsCoreDevice) GetManufacturer() *datatypes_go_proto.String {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *UsCoreDevice) GetManufactureDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.ManufactureDate
	}
	return nil
}

func (x *UsCoreDevice) GetExpirationDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *UsCoreDevice) GetModel() *datatypes_go_proto.String {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *UsCoreDevice) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *UsCoreDevice) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *UsCoreDevice) GetOwner() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *UsCoreDevice) GetContact() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *UsCoreDevice) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *UsCoreDevice) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *UsCoreDevice) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *UsCoreDevice) GetSafety() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Safety
	}
	return nil
}

// Auto-generated from StructureDefinition for US Core Diagnostic Report
// Profile. US Core Diagnostic Report Profile. See
// http://hl7.org/fhir/us/core/StructureDefinition/us-core-diagnosticreport
type UsCoreDiagnosticreport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier for report
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// What was requested
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// registered | partial | preliminary | final +
	Status *codes_go_proto.DiagnosticReportStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Service category
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=category,proto3" json:"category,omitempty"`
	// US Core Laboratory Report Order Code
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// The subject of the report - usually, but not always, the patient
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Health care event when test ordered
	Context   *datatypes_go_proto.Reference     `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	Effective *UsCoreDiagnosticreport_Effective `protobuf:"bytes,16,opt,name=effective,proto3" json:"effective,omitempty"`
	// DateTime this version was released
	Issued    *datatypes_go_proto.Instant         `protobuf:"bytes,17,opt,name=issued,proto3" json:"issued,omitempty"`
	Performer []*UsCoreDiagnosticreport_Performer `protobuf:"bytes,18,rep,name=performer,proto3" json:"performer,omitempty"`
	// Specimens this report is based on
	Specimen []*datatypes_go_proto.Reference `protobuf:"bytes,19,rep,name=specimen,proto3" json:"specimen,omitempty"`
	// Observations - simple, or complex nested groups
	Result []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=result,proto3" json:"result,omitempty"`
	// Reference to full details of imaging associated with the diagnostic report
	ImagingStudy []*datatypes_go_proto.Reference `protobuf:"bytes,21,rep,name=imaging_study,json=imagingStudy,proto3" json:"imaging_study,omitempty"`
	Image        []*UsCoreDiagnosticreport_Image `protobuf:"bytes,22,rep,name=image,proto3" json:"image,omitempty"`
	// Clinical Interpretation of test results
	Conclusion *datatypes_go_proto.String `protobuf:"bytes,23,opt,name=conclusion,proto3" json:"conclusion,omitempty"`
	// Codes for the conclusion
	CodedDiagnosis []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,rep,name=coded_diagnosis,json=codedDiagnosis,proto3" json:"coded_diagnosis,omitempty"`
	// Entire report as issued
	PresentedForm []*datatypes_go_proto.Attachment `protobuf:"bytes,25,rep,name=presented_form,json=presentedForm,proto3" json:"presented_form,omitempty"`
}

func (x *UsCoreDiagnosticreport) Reset() {
	*x = UsCoreDiagnosticreport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreDiagnosticreport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreDiagnosticreport) ProtoMessage() {}

func (x *UsCoreDiagnosticreport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreDiagnosticreport.ProtoReflect.Descriptor instead.
func (*UsCoreDiagnosticreport) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{6}
}

func (x *UsCoreDiagnosticreport) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreDiagnosticreport) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UsCoreDiagnosticreport) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *UsCoreDiagnosticreport) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UsCoreDiagnosticreport) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *UsCoreDiagnosticreport) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *UsCoreDiagnosticreport) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreDiagnosticreport) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreDiagnosticreport) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *UsCoreDiagnosticreport) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *UsCoreDiagnosticreport) GetStatus() *codes_go_proto.DiagnosticReportStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UsCoreDiagnosticreport) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *UsCoreDiagnosticreport) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *UsCoreDiagnosticreport) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *UsCoreDiagnosticreport) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *UsCoreDiagnosticreport) GetEffective() *UsCoreDiagnosticreport_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *UsCoreDiagnosticreport) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *UsCoreDiagnosticreport) GetPerformer() []*UsCoreDiagnosticreport_Performer {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *UsCoreDiagnosticreport) GetSpecimen() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *UsCoreDiagnosticreport) GetResult() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *UsCoreDiagnosticreport) GetImagingStudy() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ImagingStudy
	}
	return nil
}

func (x *UsCoreDiagnosticreport) GetImage() []*UsCoreDiagnosticreport_Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *UsCoreDiagnosticreport) GetConclusion() *datatypes_go_proto.String {
	if x != nil {
		return x.Conclusion
	}
	return nil
}

func (x *UsCoreDiagnosticreport) GetCodedDiagnosis() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.CodedDiagnosis
	}
	return nil
}

func (x *UsCoreDiagnosticreport) GetPresentedForm() []*datatypes_go_proto.Attachment {
	if x != nil {
		return x.PresentedForm
	}
	return nil
}

// Auto-generated from StructureDefinition for Email is a "direct" email.
// Email is a "direct" email.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-direct
type UsCoreDirectEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Value of extension
	ValueBoolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=value_boolean,json=valueBoolean,proto3" json:"value_boolean,omitempty"`
}

func (x *UsCoreDirectEmail) Reset() {
	*x = UsCoreDirectEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreDirectEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreDirectEmail) ProtoMessage() {}

func (x *UsCoreDirectEmail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreDirectEmail.ProtoReflect.Descriptor instead.
func (*UsCoreDirectEmail) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{7}
}

func (x *UsCoreDirectEmail) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreDirectEmail) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreDirectEmail) GetValueBoolean() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ValueBoolean
	}
	return nil
}

// Auto-generated from StructureDefinition for US Core DocumentReference
// Profile. US Core DocumentReference Profile. See
// http://hl7.org/fhir/us/core/StructureDefinition/us-core-documentreference
type UsCoreDocumentreference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Master Version Specific Identifier
	MasterIdentifier *datatypes_go_proto.Identifier `protobuf:"bytes,9,opt,name=master_identifier,json=masterIdentifier,proto3" json:"master_identifier,omitempty"`
	// Other identifiers for the document
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,10,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// current | superseded | entered-in-error
	Status *codes_go_proto.DocumentReferenceStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// preliminary | final | appended | amended | entered-in-error
	DocStatus *codes_go_proto.CompositionStatusCode `protobuf:"bytes,12,opt,name=doc_status,json=docStatus,proto3" json:"doc_status,omitempty"`
	// Kind of document (LOINC if possible)
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=type,proto3" json:"type,omitempty"`
	// Categorization of document
	ClassValue *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=class_value,json=class,proto3" json:"class_value,omitempty"`
	// Who/what is the subject of the document
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=subject,proto3" json:"subject,omitempty"`
	// Document creation time
	Created *datatypes_go_proto.DateTime `protobuf:"bytes,16,opt,name=created,proto3" json:"created,omitempty"`
	// When this document reference was created
	Indexed *datatypes_go_proto.Instant `protobuf:"bytes,17,opt,name=indexed,proto3" json:"indexed,omitempty"`
	// Who and/or what authored the document
	Author []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=author,proto3" json:"author,omitempty"`
	// Who/what authenticated the document
	Authenticator *datatypes_go_proto.Reference `protobuf:"bytes,19,opt,name=authenticator,proto3" json:"authenticator,omitempty"`
	// Organization which maintains the document
	Custodian *datatypes_go_proto.Reference        `protobuf:"bytes,20,opt,name=custodian,proto3" json:"custodian,omitempty"`
	RelatesTo []*UsCoreDocumentreference_RelatesTo `protobuf:"bytes,21,rep,name=relates_to,json=relatesTo,proto3" json:"relates_to,omitempty"`
	// Human-readable description (title)
	Description *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=description,proto3" json:"description,omitempty"`
	// Document security-tags
	SecurityLabel []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,rep,name=security_label,json=securityLabel,proto3" json:"security_label,omitempty"`
	Content       *UsCoreDocumentreference_Content      `protobuf:"bytes,24,opt,name=content,proto3" json:"content,omitempty"`
	Context       *UsCoreDocumentreference_Context      `protobuf:"bytes,25,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *UsCoreDocumentreference) Reset() {
	*x = UsCoreDocumentreference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreDocumentreference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreDocumentreference) ProtoMessage() {}

func (x *UsCoreDocumentreference) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreDocumentreference.ProtoReflect.Descriptor instead.
func (*UsCoreDocumentreference) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{8}
}

func (x *UsCoreDocumentreference) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreDocumentreference) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UsCoreDocumentreference) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *UsCoreDocumentreference) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UsCoreDocumentreference) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *UsCoreDocumentreference) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *UsCoreDocumentreference) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreDocumentreference) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreDocumentreference) GetMasterIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.MasterIdentifier
	}
	return nil
}

func (x *UsCoreDocumentreference) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *UsCoreDocumentreference) GetStatus() *codes_go_proto.DocumentReferenceStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UsCoreDocumentreference) GetDocStatus() *codes_go_proto.CompositionStatusCode {
	if x != nil {
		return x.DocStatus
	}
	return nil
}

func (x *UsCoreDocumentreference) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *UsCoreDocumentreference) GetClassValue() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ClassValue
	}
	return nil
}

func (x *UsCoreDocumentreference) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *UsCoreDocumentreference) GetCreated() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *UsCoreDocumentreference) GetIndexed() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Indexed
	}
	return nil
}

func (x *UsCoreDocumentreference) GetAuthor() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *UsCoreDocumentreference) GetAuthenticator() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Authenticator
	}
	return nil
}

func (x *UsCoreDocumentreference) GetCustodian() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Custodian
	}
	return nil
}

func (x *UsCoreDocumentreference) GetRelatesTo() []*UsCoreDocumentreference_RelatesTo {
	if x != nil {
		return x.RelatesTo
	}
	return nil
}

func (x *UsCoreDocumentreference) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UsCoreDocumentreference) GetSecurityLabel() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SecurityLabel
	}
	return nil
}

func (x *UsCoreDocumentreference) GetContent() *UsCoreDocumentreference_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *UsCoreDocumentreference) GetContext() *UsCoreDocumentreference_Context {
	if x != nil {
		return x.Context
	}
	return nil
}

// Auto-generated from StructureDefinition for US Core Encounter Profile.
// US Core Encounter Profile.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-encounter
type UsCoreEncounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifier(s) by which this encounter is known
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// planned | arrived | triaged | in-progress | onleave | finished | cancelled
	// +
	Status        *codes_go_proto.EncounterStatusCode `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	StatusHistory []*UsCoreEncounter_StatusHistory    `protobuf:"bytes,11,rep,name=status_history,json=statusHistory,proto3" json:"status_history,omitempty"`
	// inpatient | outpatient | ambulatory | emergency +
	ClassValue   *datatypes_go_proto.Coding      `protobuf:"bytes,12,opt,name=class_value,json=class,proto3" json:"class_value,omitempty"`
	ClassHistory []*UsCoreEncounter_ClassHistory `protobuf:"bytes,13,rep,name=class_history,json=classHistory,proto3" json:"class_history,omitempty"`
	// Specific type of encounter
	Type []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,rep,name=type,proto3" json:"type,omitempty"`
	// Indicates the urgency of the encounter
	Priority *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=priority,proto3" json:"priority,omitempty"`
	// The patient ro group present at the encounter
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=subject,proto3" json:"subject,omitempty"`
	// Episode(s) of care that this encounter should be recorded against
	EpisodeOfCare []*datatypes_go_proto.Reference `protobuf:"bytes,17,rep,name=episode_of_care,json=episodeOfCare,proto3" json:"episode_of_care,omitempty"`
	// The ReferralRequest that initiated this encounter
	IncomingReferral []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=incoming_referral,json=incomingReferral,proto3" json:"incoming_referral,omitempty"`
	Participant      []*UsCoreEncounter_Participant  `protobuf:"bytes,19,rep,name=participant,proto3" json:"participant,omitempty"`
	// The appointment that scheduled this encounter
	Appointment *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=appointment,proto3" json:"appointment,omitempty"`
	// The start and end time of the encounter
	Period *datatypes_go_proto.Period `protobuf:"bytes,21,opt,name=period,proto3" json:"period,omitempty"`
	// Quantity of time the encounter lasted (less time absent)
	Length *datatypes_go_proto.Duration `protobuf:"bytes,22,opt,name=length,proto3" json:"length,omitempty"`
	// Reason the encounter takes place (code)
	Reason    []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,rep,name=reason,proto3" json:"reason,omitempty"`
	Diagnosis []*UsCoreEncounter_Diagnosis          `protobuf:"bytes,24,rep,name=diagnosis,proto3" json:"diagnosis,omitempty"`
	// The set of accounts that may be used for billing for this Encounter
	Account         []*datatypes_go_proto.Reference  `protobuf:"bytes,25,rep,name=account,proto3" json:"account,omitempty"`
	Hospitalization *UsCoreEncounter_Hospitalization `protobuf:"bytes,26,opt,name=hospitalization,proto3" json:"hospitalization,omitempty"`
	Location        []*UsCoreEncounter_Location      `protobuf:"bytes,27,rep,name=location,proto3" json:"location,omitempty"`
	// The custodian organization of this Encounter record
	ServiceProvider *datatypes_go_proto.Reference `protobuf:"bytes,28,opt,name=service_provider,json=serviceProvider,proto3" json:"service_provider,omitempty"`
	// Another Encounter this encounter is part of
	PartOf *datatypes_go_proto.Reference `protobuf:"bytes,29,opt,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
}

func (x *UsCoreEncounter) Reset() {
	*x = UsCoreEncounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreEncounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreEncounter) ProtoMessage() {}

func (x *UsCoreEncounter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreEncounter.ProtoReflect.Descriptor instead.
func (*UsCoreEncounter) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{9}
}

func (x *UsCoreEncounter) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreEncounter) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UsCoreEncounter) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *UsCoreEncounter) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UsCoreEncounter) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *UsCoreEncounter) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *UsCoreEncounter) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreEncounter) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreEncounter) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *UsCoreEncounter) GetStatus() *codes_go_proto.EncounterStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UsCoreEncounter) GetStatusHistory() []*UsCoreEncounter_StatusHistory {
	if x != nil {
		return x.StatusHistory
	}
	return nil
}

func (x *UsCoreEncounter) GetClassValue() *datatypes_go_proto.Coding {
	if x != nil {
		return x.ClassValue
	}
	return nil
}

func (x *UsCoreEncounter) GetClassHistory() []*UsCoreEncounter_ClassHistory {
	if x != nil {
		return x.ClassHistory
	}
	return nil
}

func (x *UsCoreEncounter) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *UsCoreEncounter) GetPriority() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *UsCoreEncounter) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *UsCoreEncounter) GetEpisodeOfCare() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.EpisodeOfCare
	}
	return nil
}

func (x *UsCoreEncounter) GetIncomingReferral() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.IncomingReferral
	}
	return nil
}

func (x *UsCoreEncounter) GetParticipant() []*UsCoreEncounter_Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *UsCoreEncounter) GetAppointment() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Appointment
	}
	return nil
}

func (x *UsCoreEncounter) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *UsCoreEncounter) GetLength() *datatypes_go_proto.Duration {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *UsCoreEncounter) GetReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *UsCoreEncounter) GetDiagnosis() []*UsCoreEncounter_Diagnosis {
	if x != nil {
		return x.Diagnosis
	}
	return nil
}

func (x *UsCoreEncounter) GetAccount() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *UsCoreEncounter) GetHospitalization() *UsCoreEncounter_Hospitalization {
	if x != nil {
		return x.Hospitalization
	}
	return nil
}

func (x *UsCoreEncounter) GetLocation() []*UsCoreEncounter_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *UsCoreEncounter) GetServiceProvider() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ServiceProvider
	}
	return nil
}

func (x *UsCoreEncounter) GetPartOf() *datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

// Auto-generated from StructureDefinition for US Core ethnicity Extension.
// US Core ethnicity Extension.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity
type PatientUSCoreEthnicityExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Hispanic or Latino|Not Hispanic or Latino
	OmbCategory *datatypes_go_proto.Coding `protobuf:"bytes,4,opt,name=omb_category,json=ombCategory,proto3" json:"omb_category,omitempty"`
	// Extended ethnicity codes
	Detailed []*datatypes_go_proto.Coding `protobuf:"bytes,5,rep,name=detailed,proto3" json:"detailed,omitempty"`
	// ethnicity Text
	Text *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *PatientUSCoreEthnicityExtension) Reset() {
	*x = PatientUSCoreEthnicityExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientUSCoreEthnicityExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientUSCoreEthnicityExtension) ProtoMessage() {}

func (x *PatientUSCoreEthnicityExtension) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientUSCoreEthnicityExtension.ProtoReflect.Descriptor instead.
func (*PatientUSCoreEthnicityExtension) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{10}
}

func (x *PatientUSCoreEthnicityExtension) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientUSCoreEthnicityExtension) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PatientUSCoreEthnicityExtension) GetOmbCategory() *datatypes_go_proto.Coding {
	if x != nil {
		return x.OmbCategory
	}
	return nil
}

func (x *PatientUSCoreEthnicityExtension) GetDetailed() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Detailed
	}
	return nil
}

func (x *PatientUSCoreEthnicityExtension) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Auto-generated from StructureDefinition for US Core Goal Profile.
// US Core Goal Profile.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-goal
type UsCoreGoal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Ids for this goal
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// proposed | accepted | planned | in-progress | on-target | ahead-of-target |
	// behind-target | sustaining | achieved | on-hold | cancelled |
	// entered-in-error | rejected
	Status *codes_go_proto.GoalStatusCode `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// E.g. Treatment, dietary, behavioral, etc.
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,rep,name=category,proto3" json:"category,omitempty"`
	// high-priority | medium-priority | low-priority
	Priority *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=priority,proto3" json:"priority,omitempty"`
	// Code or text describing goal
	Description *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	// Who this goal is intended for
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	Start   *UsCoreGoal_Start             `protobuf:"bytes,15,opt,name=start,proto3" json:"start,omitempty"`
	Target  *UsCoreGoal_Target            `protobuf:"bytes,16,opt,name=target,proto3" json:"target,omitempty"`
	// When goal status took effect
	StatusDate *datatypes_go_proto.Date `protobuf:"bytes,17,opt,name=status_date,json=statusDate,proto3" json:"status_date,omitempty"`
	// Reason for current status
	StatusReason *datatypes_go_proto.String `protobuf:"bytes,18,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// Who's responsible for creating Goal?
	ExpressedBy *datatypes_go_proto.Reference `protobuf:"bytes,19,opt,name=expressed_by,json=expressedBy,proto3" json:"expressed_by,omitempty"`
	// Issues addressed by this goal
	Addresses []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// Comments about the goal
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,21,rep,name=note,proto3" json:"note,omitempty"`
	// What result was achieved regarding the goal?
	OutcomeCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,22,rep,name=outcome_code,json=outcomeCode,proto3" json:"outcome_code,omitempty"`
	// Observation that resulted from goal
	OutcomeReference []*datatypes_go_proto.Reference `protobuf:"bytes,23,rep,name=outcome_reference,json=outcomeReference,proto3" json:"outcome_reference,omitempty"`
}

func (x *UsCoreGoal) Reset() {
	*x = UsCoreGoal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreGoal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreGoal) ProtoMessage() {}

func (x *UsCoreGoal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreGoal.ProtoReflect.Descriptor instead.
func (*UsCoreGoal) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{11}
}

func (x *UsCoreGoal) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreGoal) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UsCoreGoal) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *UsCoreGoal) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UsCoreGoal) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *UsCoreGoal) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *UsCoreGoal) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreGoal) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreGoal) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *UsCoreGoal) GetStatus() *codes_go_proto.GoalStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UsCoreGoal) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *UsCoreGoal) GetPriority() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *UsCoreGoal) GetDescription() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UsCoreGoal) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *UsCoreGoal) GetStart() *UsCoreGoal_Start {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *UsCoreGoal) GetTarget() *UsCoreGoal_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *UsCoreGoal) GetStatusDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.StatusDate
	}
	return nil
}

func (x *UsCoreGoal) GetStatusReason() *datatypes_go_proto.String {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

func (x *UsCoreGoal) GetExpressedBy() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ExpressedBy
	}
	return nil
}

func (x *UsCoreGoal) GetAddresses() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *UsCoreGoal) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *UsCoreGoal) GetOutcomeCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.OutcomeCode
	}
	return nil
}

func (x *UsCoreGoal) GetOutcomeReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.OutcomeReference
	}
	return nil
}

// Auto-generated from StructureDefinition for US Core Immunization Profile.
// US Core Immunization Profile.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-immunization
type UsCoreImmunization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// completed | entered-in-error
	Status *codes_go_proto.ImmunizationStatusCodesCode `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// Flag for whether immunization was given
	NotGiven *datatypes_go_proto.Boolean `protobuf:"bytes,11,opt,name=not_given,json=notGiven,proto3" json:"not_given,omitempty"`
	// Vaccine Product Type (bind to CVX)
	VaccineCode *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=vaccine_code,json=vaccineCode,proto3" json:"vaccine_code,omitempty"`
	// Who was immunized
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=patient,proto3" json:"patient,omitempty"`
	// Encounter administered as part of
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Vaccination administration date
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,15,opt,name=date,proto3" json:"date,omitempty"`
	// Indicates context the data was recorded in
	PrimarySource *datatypes_go_proto.Boolean `protobuf:"bytes,16,opt,name=primary_source,json=primarySource,proto3" json:"primary_source,omitempty"`
	// Indicates the source of a secondarily reported record
	ReportOrigin *datatypes_go_proto.CodeableConcept `protobuf:"bytes,17,opt,name=report_origin,json=reportOrigin,proto3" json:"report_origin,omitempty"`
	// Where vaccination occurred
	Location *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=location,proto3" json:"location,omitempty"`
	// Vaccine manufacturer
	Manufacturer *datatypes_go_proto.Reference `protobuf:"bytes,19,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// Vaccine lot number
	LotNumber *datatypes_go_proto.String `protobuf:"bytes,20,opt,name=lot_number,json=lotNumber,proto3" json:"lot_number,omitempty"`
	// Vaccine expiration date
	ExpirationDate *datatypes_go_proto.Date `protobuf:"bytes,21,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	// Body site vaccine  was administered
	Site *datatypes_go_proto.CodeableConcept `protobuf:"bytes,22,opt,name=site,proto3" json:"site,omitempty"`
	// How vaccine entered body
	Route *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=route,proto3" json:"route,omitempty"`
	// Amount of vaccine administered
	DoseQuantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,24,opt,name=dose_quantity,json=doseQuantity,proto3" json:"dose_quantity,omitempty"`
	Practitioner []*UsCoreImmunization_Practitioner `protobuf:"bytes,25,rep,name=practitioner,proto3" json:"practitioner,omitempty"`
	// Vaccination notes
	Note                []*datatypes_go_proto.Annotation          `protobuf:"bytes,26,rep,name=note,proto3" json:"note,omitempty"`
	Explanation         *UsCoreImmunization_Explanation           `protobuf:"bytes,27,opt,name=explanation,proto3" json:"explanation,omitempty"`
	Reaction            []*UsCoreImmunization_Reaction            `protobuf:"bytes,28,rep,name=reaction,proto3" json:"reaction,omitempty"`
	VaccinationProtocol []*UsCoreImmunization_VaccinationProtocol `protobuf:"bytes,29,rep,name=vaccination_protocol,json=vaccinationProtocol,proto3" json:"vaccination_protocol,omitempty"`
}

func (x *UsCoreImmunization) Reset() {
	*x = UsCoreImmunization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreImmunization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreImmunization) ProtoMessage() {}

func (x *UsCoreImmunization) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreImmunization.ProtoReflect.Descriptor instead.
func (*UsCoreImmunization) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{12}
}

func (x *UsCoreImmunization) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreImmunization) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UsCoreImmunization) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *UsCoreImmunization) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UsCoreImmunization) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *UsCoreImmunization) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *UsCoreImmunization) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreImmunization) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreImmunization) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *UsCoreImmunization) GetStatus() *codes_go_proto.ImmunizationStatusCodesCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UsCoreImmunization) GetNotGiven() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.NotGiven
	}
	return nil
}

func (x *UsCoreImmunization) GetVaccineCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.VaccineCode
	}
	return nil
}

func (x *UsCoreImmunization) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *UsCoreImmunization) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *UsCoreImmunization) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *UsCoreImmunization) GetPrimarySource() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.PrimarySource
	}
	return nil
}

func (x *UsCoreImmunization) GetReportOrigin() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReportOrigin
	}
	return nil
}

func (x *UsCoreImmunization) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *UsCoreImmunization) GetManufacturer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *UsCoreImmunization) GetLotNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.LotNumber
	}
	return nil
}

func (x *UsCoreImmunization) GetExpirationDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *UsCoreImmunization) GetSite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *UsCoreImmunization) GetRoute() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *UsCoreImmunization) GetDoseQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.DoseQuantity
	}
	return nil
}

func (x *UsCoreImmunization) GetPractitioner() []*UsCoreImmunization_Practitioner {
	if x != nil {
		return x.Practitioner
	}
	return nil
}

func (x *UsCoreImmunization) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *UsCoreImmunization) GetExplanation() *UsCoreImmunization_Explanation {
	if x != nil {
		return x.Explanation
	}
	return nil
}

func (x *UsCoreImmunization) GetReaction() []*UsCoreImmunization_Reaction {
	if x != nil {
		return x.Reaction
	}
	return nil
}

func (x *UsCoreImmunization) GetVaccinationProtocol() []*UsCoreImmunization_VaccinationProtocol {
	if x != nil {
		return x.VaccinationProtocol
	}
	return nil
}

// Auto-generated from StructureDefinition for US Core Location Profile.
// US Core Location Profile.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-location
type UsCoreLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Unique code or number identifying the location to its users
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// active | suspended | inactive
	Status *codes_go_proto.LocationStatusCode `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// The Operational status of the location (typically only for a bed/room)
	OperationalStatus *datatypes_go_proto.Coding `protobuf:"bytes,11,opt,name=operational_status,json=operationalStatus,proto3" json:"operational_status,omitempty"`
	// Name of the location as used by humans
	Name *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	// A list of alternate names that the location is known as, or was known as in
	// the past
	Alias []*datatypes_go_proto.String `protobuf:"bytes,13,rep,name=alias,proto3" json:"alias,omitempty"`
	// Additional details about the location that could be displayed as further
	// information to identify the location beyond its name
	Description *datatypes_go_proto.String `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	// instance | kind
	Mode *codes_go_proto.LocationModeCode `protobuf:"bytes,15,opt,name=mode,proto3" json:"mode,omitempty"`
	// Type of function performed
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,opt,name=type,proto3" json:"type,omitempty"`
	// Contact details of the location
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,17,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// Physical location
	Address *datatypes_go_proto.Address `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	// Physical form of the location
	PhysicalType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,19,opt,name=physical_type,json=physicalType,proto3" json:"physical_type,omitempty"`
	Position     *UsCoreLocation_Position            `protobuf:"bytes,20,opt,name=position,proto3" json:"position,omitempty"`
	// Organization responsible for provisioning and upkeep
	ManagingOrganization *datatypes_go_proto.Reference `protobuf:"bytes,21,opt,name=managing_organization,json=managingOrganization,proto3" json:"managing_organization,omitempty"`
	// Another Location this one is physically part of
	PartOf *datatypes_go_proto.Reference `protobuf:"bytes,22,opt,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	// Technical endpoints providing access to services operated for the location
	Endpoint []*datatypes_go_proto.Reference `protobuf:"bytes,23,rep,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *UsCoreLocation) Reset() {
	*x = UsCoreLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreLocation) ProtoMessage() {}

func (x *UsCoreLocation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreLocation.ProtoReflect.Descriptor instead.
func (*UsCoreLocation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{13}
}

func (x *UsCoreLocation) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreLocation) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UsCoreLocation) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *UsCoreLocation) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UsCoreLocation) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *UsCoreLocation) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *UsCoreLocation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreLocation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreLocation) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *UsCoreLocation) GetStatus() *codes_go_proto.LocationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UsCoreLocation) GetOperationalStatus() *datatypes_go_proto.Coding {
	if x != nil {
		return x.OperationalStatus
	}
	return nil
}

func (x *UsCoreLocation) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UsCoreLocation) GetAlias() []*datatypes_go_proto.String {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *UsCoreLocation) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UsCoreLocation) GetMode() *codes_go_proto.LocationModeCode {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *UsCoreLocation) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *UsCoreLocation) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *UsCoreLocation) GetAddress() *datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *UsCoreLocation) GetPhysicalType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PhysicalType
	}
	return nil
}

func (x *UsCoreLocation) GetPosition() *UsCoreLocation_Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *UsCoreLocation) GetManagingOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ManagingOrganization
	}
	return nil
}

func (x *UsCoreLocation) GetPartOf() *datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *UsCoreLocation) GetEndpoint() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

// Auto-generated from StructureDefinition for US Core Medication Profile.
// US Core Medication Profile.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-medication
type UsCoreMedication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Codes that identify this medication
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,opt,name=code,proto3" json:"code,omitempty"`
	// active | inactive | entered-in-error
	Status *codes_go_proto.MedicationStatusCode `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// True if a brand
	IsBrand *datatypes_go_proto.Boolean `protobuf:"bytes,11,opt,name=is_brand,json=isBrand,proto3" json:"is_brand,omitempty"`
	// True if medication does not require a prescription
	IsOverTheCounter *datatypes_go_proto.Boolean `protobuf:"bytes,12,opt,name=is_over_the_counter,json=isOverTheCounter,proto3" json:"is_over_the_counter,omitempty"`
	// Manufacturer of the item
	Manufacturer *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// powder | tablets | capsule +
	Form         *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=form,proto3" json:"form,omitempty"`
	Ingredient   []*UsCoreMedication_Ingredient      `protobuf:"bytes,15,rep,name=ingredient,proto3" json:"ingredient,omitempty"`
	PackageValue *UsCoreMedication_Package           `protobuf:"bytes,16,opt,name=package_value,json=package,proto3" json:"package_value,omitempty"`
	// Picture of the medication
	Image []*datatypes_go_proto.Attachment `protobuf:"bytes,17,rep,name=image,proto3" json:"image,omitempty"`
}

func (x *UsCoreMedication) Reset() {
	*x = UsCoreMedication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreMedication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreMedication) ProtoMessage() {}

func (x *UsCoreMedication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreMedication.ProtoReflect.Descriptor instead.
func (*UsCoreMedication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{14}
}

func (x *UsCoreMedication) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreMedication) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UsCoreMedication) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *UsCoreMedication) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UsCoreMedication) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *UsCoreMedication) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *UsCoreMedication) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreMedication) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreMedication) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *UsCoreMedication) GetStatus() *codes_go_proto.MedicationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UsCoreMedication) GetIsBrand() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.IsBrand
	}
	return nil
}

func (x *UsCoreMedication) GetIsOverTheCounter() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.IsOverTheCounter
	}
	return nil
}

func (x *UsCoreMedication) GetManufacturer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *UsCoreMedication) GetForm() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Form
	}
	return nil
}

func (x *UsCoreMedication) GetIngredient() []*UsCoreMedication_Ingredient {
	if x != nil {
		return x.Ingredient
	}
	return nil
}

func (x *UsCoreMedication) GetPackageValue() *UsCoreMedication_Package {
	if x != nil {
		return x.PackageValue
	}
	return nil
}

func (x *UsCoreMedication) GetImage() []*datatypes_go_proto.Attachment {
	if x != nil {
		return x.Image
	}
	return nil
}

// Auto-generated from StructureDefinition for US Core Medication Request
// Profile. US Core Medication Request Profile. See
// http://hl7.org/fhir/us/core/StructureDefinition/us-core-medicationrequest
type UsCoreMedicationrequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External ids for this request
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Protocol or definition
	Definition []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=definition,proto3" json:"definition,omitempty"`
	// What request fulfills
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,11,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// Composite request this is part of
	GroupIdentifier *datatypes_go_proto.Identifier `protobuf:"bytes,12,opt,name=group_identifier,json=groupIdentifier,proto3" json:"group_identifier,omitempty"`
	// active | on-hold | cancelled | completed | entered-in-error | stopped |
	// draft | unknown
	Status *codes_go_proto.MedicationRequestStatusCode `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// proposal | plan | order | instance-order
	Intent *codes_go_proto.MedicationRequestIntentCode `protobuf:"bytes,14,opt,name=intent,proto3" json:"intent,omitempty"`
	// Type of medication usage
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=category,proto3" json:"category,omitempty"`
	// routine | urgent | stat | asap
	Priority   *codes_go_proto.MedicationRequestPriorityCode `protobuf:"bytes,16,opt,name=priority,proto3" json:"priority,omitempty"`
	Medication *UsCoreMedicationrequest_Medication           `protobuf:"bytes,17,opt,name=medication,proto3" json:"medication,omitempty"`
	// Who or group medication request is for
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=subject,proto3" json:"subject,omitempty"`
	// Created during encounter/admission/stay
	Context *datatypes_go_proto.Reference `protobuf:"bytes,19,opt,name=context,proto3" json:"context,omitempty"`
	// Information to support ordering of the medication
	SupportingInformation []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=supporting_information,json=supportingInformation,proto3" json:"supporting_information,omitempty"`
	// When request was initially authored
	AuthoredOn *datatypes_go_proto.DateTime       `protobuf:"bytes,21,opt,name=authored_on,json=authoredOn,proto3" json:"authored_on,omitempty"`
	Requester  *UsCoreMedicationrequest_Requester `protobuf:"bytes,22,opt,name=requester,proto3" json:"requester,omitempty"`
	// Person who entered the request
	Recorder *datatypes_go_proto.Reference `protobuf:"bytes,23,opt,name=recorder,proto3" json:"recorder,omitempty"`
	// Reason or indication for writing the prescription
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Condition or Observation that supports why the prescription is being
	// written
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,25,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// Information about the prescription
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,26,rep,name=note,proto3" json:"note,omitempty"`
	// How the medication should be taken
	DosageInstruction []*datatypes_go_proto.Dosage             `protobuf:"bytes,27,rep,name=dosage_instruction,json=dosageInstruction,proto3" json:"dosage_instruction,omitempty"`
	DispenseRequest   *UsCoreMedicationrequest_DispenseRequest `protobuf:"bytes,28,opt,name=dispense_request,json=dispenseRequest,proto3" json:"dispense_request,omitempty"`
	Substitution      *UsCoreMedicationrequest_Substitution    `protobuf:"bytes,29,opt,name=substitution,proto3" json:"substitution,omitempty"`
	// An order/prescription that is being replaced
	PriorPrescription *datatypes_go_proto.Reference `protobuf:"bytes,30,opt,name=prior_prescription,json=priorPrescription,proto3" json:"prior_prescription,omitempty"`
	// Clinical Issue with action
	DetectedIssue []*datatypes_go_proto.Reference `protobuf:"bytes,31,rep,name=detected_issue,json=detectedIssue,proto3" json:"detected_issue,omitempty"`
	// A list of events of interest in the lifecycle
	EventHistory []*datatypes_go_proto.Reference `protobuf:"bytes,32,rep,name=event_history,json=eventHistory,proto3" json:"event_history,omitempty"`
}

func (x *UsCoreMedicationrequest) Reset() {
	*x = UsCoreMedicationrequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreMedicationrequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreMedicationrequest) ProtoMessage() {}

func (x *UsCoreMedicationrequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreMedicationrequest.ProtoReflect.Descriptor instead.
func (*UsCoreMedicationrequest) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{15}
}

func (x *UsCoreMedicationrequest) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetDefinition() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetGroupIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.GroupIdentifier
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetStatus() *codes_go_proto.MedicationRequestStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetIntent() *codes_go_proto.MedicationRequestIntentCode {
	if x != nil {
		return x.Intent
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetPriority() *codes_go_proto.MedicationRequestPriorityCode {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetMedication() *UsCoreMedicationrequest_Medication {
	if x != nil {
		return x.Medication
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetSupportingInformation() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SupportingInformation
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetAuthoredOn() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.AuthoredOn
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetRequester() *UsCoreMedicationrequest_Requester {
	if x != nil {
		return x.Requester
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetRecorder() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Recorder
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetDosageInstruction() []*datatypes_go_proto.Dosage {
	if x != nil {
		return x.DosageInstruction
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetDispenseRequest() *UsCoreMedicationrequest_DispenseRequest {
	if x != nil {
		return x.DispenseRequest
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetSubstitution() *UsCoreMedicationrequest_Substitution {
	if x != nil {
		return x.Substitution
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetPriorPrescription() *datatypes_go_proto.Reference {
	if x != nil {
		return x.PriorPrescription
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetDetectedIssue() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.DetectedIssue
	}
	return nil
}

func (x *UsCoreMedicationrequest) GetEventHistory() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.EventHistory
	}
	return nil
}

// Auto-generated from StructureDefinition for US Core Medication Statement
// Profile. US Core Medication Statement Profile. See
// http://hl7.org/fhir/us/core/StructureDefinition/us-core-medicationstatement
type UsCoreMedicationstatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfils plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// Part of referenced event
	PartOf []*datatypes_go_proto.Reference `protobuf:"bytes,11,rep,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	// Encounter / Episode associated with MedicationStatement
	Context *datatypes_go_proto.Reference `protobuf:"bytes,12,opt,name=context,proto3" json:"context,omitempty"`
	// active | completed | entered-in-error | intended | stopped | on-hold
	Status *codes_go_proto.MedicationStatementStatusCode `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// Type of medication usage
	Category   *datatypes_go_proto.CodeableConcept   `protobuf:"bytes,14,opt,name=category,proto3" json:"category,omitempty"`
	Medication *UsCoreMedicationstatement_Medication `protobuf:"bytes,15,opt,name=medication,proto3" json:"medication,omitempty"`
	Effective  *UsCoreMedicationstatement_Effective  `protobuf:"bytes,16,opt,name=effective,proto3" json:"effective,omitempty"`
	// When the statement was asserted?
	DateAsserted *datatypes_go_proto.DateTime `protobuf:"bytes,17,opt,name=date_asserted,json=dateAsserted,proto3" json:"date_asserted,omitempty"`
	// Person or organization that provided the information about the taking of
	// this medication
	InformationSource *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=information_source,json=informationSource,proto3" json:"information_source,omitempty"`
	// Who is/was taking  the medication
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,19,opt,name=subject,proto3" json:"subject,omitempty"`
	// Additional supporting information
	DerivedFrom []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=derived_from,json=derivedFrom,proto3" json:"derived_from,omitempty"`
	// y | n | unk | na
	Taken *codes_go_proto.MedicationStatementTakenCode `protobuf:"bytes,21,opt,name=taken,proto3" json:"taken,omitempty"`
	// True if asserting medication was not given
	ReasonNotTaken []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,22,rep,name=reason_not_taken,json=reasonNotTaken,proto3" json:"reason_not_taken,omitempty"`
	// Reason for why the medication is being/was taken
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Condition or observation that supports why the medication is being/was
	// taken
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,24,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// Further information about the statement
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,25,rep,name=note,proto3" json:"note,omitempty"`
	// Details of how medication is/was taken or should be taken
	Dosage []*datatypes_go_proto.Dosage `protobuf:"bytes,26,rep,name=dosage,proto3" json:"dosage,omitempty"`
}

func (x *UsCoreMedicationstatement) Reset() {
	*x = UsCoreMedicationstatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreMedicationstatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreMedicationstatement) ProtoMessage() {}

func (x *UsCoreMedicationstatement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreMedicationstatement.ProtoReflect.Descriptor instead.
func (*UsCoreMedicationstatement) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{16}
}

func (x *UsCoreMedicationstatement) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreMedicationstatement) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UsCoreMedicationstatement) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *UsCoreMedicationstatement) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UsCoreMedicationstatement) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *UsCoreMedicationstatement) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *UsCoreMedicationstatement) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreMedicationstatement) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreMedicationstatement) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *UsCoreMedicationstatement) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *UsCoreMedicationstatement) GetPartOf() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *UsCoreMedicationstatement) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *UsCoreMedicationstatement) GetStatus() *codes_go_proto.MedicationStatementStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UsCoreMedicationstatement) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *UsCoreMedicationstatement) GetMedication() *UsCoreMedicationstatement_Medication {
	if x != nil {
		return x.Medication
	}
	return nil
}

func (x *UsCoreMedicationstatement) GetEffective() *UsCoreMedicationstatement_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *UsCoreMedicationstatement) GetDateAsserted() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.DateAsserted
	}
	return nil
}

func (x *UsCoreMedicationstatement) GetInformationSource() *datatypes_go_proto.Reference {
	if x != nil {
		return x.InformationSource
	}
	return nil
}

func (x *UsCoreMedicationstatement) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *UsCoreMedicationstatement) GetDerivedFrom() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.DerivedFrom
	}
	return nil
}

func (x *UsCoreMedicationstatement) GetTaken() *codes_go_proto.MedicationStatementTakenCode {
	if x != nil {
		return x.Taken
	}
	return nil
}

func (x *UsCoreMedicationstatement) GetReasonNotTaken() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonNotTaken
	}
	return nil
}

func (x *UsCoreMedicationstatement) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *UsCoreMedicationstatement) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *UsCoreMedicationstatement) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *UsCoreMedicationstatement) GetDosage() []*datatypes_go_proto.Dosage {
	if x != nil {
		return x.Dosage
	}
	return nil
}

// Auto-generated from StructureDefinition for US Core Result Observation.
// US Core Result Observation.
// See
// http://hl7.org/fhir/us/core/StructureDefinition/us-core-observationresults
type UsCoreObservationresults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// registered | preliminary | final | amended +
	Status *codes_go_proto.ObservationStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	// Laboratory Test Name
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what this is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Healthcare event during which this observation is made
	Context   *datatypes_go_proto.Reference       `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	Effective *UsCoreObservationresults_Effective `protobuf:"bytes,16,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,17,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *UsCoreObservationresults_Value `protobuf:"bytes,19,opt,name=value,proto3" json:"value,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about result
	Comment *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=comment,proto3" json:"comment,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference              `protobuf:"bytes,26,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange []*UsCoreObservationresults_ReferenceRange `protobuf:"bytes,27,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	Related        []*UsCoreObservationresults_Related        `protobuf:"bytes,28,rep,name=related,proto3" json:"related,omitempty"`
	Component      []*UsCoreObservationresults_Component      `protobuf:"bytes,29,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *UsCoreObservationresults) Reset() {
	*x = UsCoreObservationresults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreObservationresults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreObservationresults) ProtoMessage() {}

func (x *UsCoreObservationresults) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreObservationresults.ProtoReflect.Descriptor instead.
func (*UsCoreObservationresults) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{17}
}

func (x *UsCoreObservationresults) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreObservationresults) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UsCoreObservationresults) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *UsCoreObservationresults) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UsCoreObservationresults) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *UsCoreObservationresults) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *UsCoreObservationresults) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreObservationresults) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreObservationresults) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *UsCoreObservationresults) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *UsCoreObservationresults) GetStatus() *codes_go_proto.ObservationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UsCoreObservationresults) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *UsCoreObservationresults) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *UsCoreObservationresults) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *UsCoreObservationresults) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *UsCoreObservationresults) GetEffective() *UsCoreObservationresults_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *UsCoreObservationresults) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *UsCoreObservationresults) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *UsCoreObservationresults) GetValue() *UsCoreObservationresults_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UsCoreObservationresults) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *UsCoreObservationresults) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *UsCoreObservationresults) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *UsCoreObservationresults) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *UsCoreObservationresults) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *UsCoreObservationresults) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *UsCoreObservationresults) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *UsCoreObservationresults) GetReferenceRange() []*UsCoreObservationresults_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *UsCoreObservationresults) GetRelated() []*UsCoreObservationresults_Related {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *UsCoreObservationresults) GetComponent() []*UsCoreObservationresults_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// Auto-generated from StructureDefinition for US Core Organization Profile.
// US Core Organization Profile.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-organization
type UsCoreOrganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifies this organization  across multiple systems
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Whether the organization's record is still in active use
	Active *datatypes_go_proto.Boolean `protobuf:"bytes,10,opt,name=active,proto3" json:"active,omitempty"`
	// Kind of organization
	Type []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,rep,name=type,proto3" json:"type,omitempty"`
	// Name used for the organization
	Name *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	// A list of alternate names that the organization is known as, or was known
	// as in the past
	Alias []*datatypes_go_proto.String `protobuf:"bytes,13,rep,name=alias,proto3" json:"alias,omitempty"`
	// A contact detail for the organization
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,14,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// An address for the organization
	Address []*datatypes_go_proto.Address `protobuf:"bytes,15,rep,name=address,proto3" json:"address,omitempty"`
	// The organization of which this organization forms a part
	PartOf  *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	Contact []*UsCoreOrganization_Contact `protobuf:"bytes,17,rep,name=contact,proto3" json:"contact,omitempty"`
	// Technical endpoints providing access to services operated for the
	// organization
	Endpoint []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *UsCoreOrganization) Reset() {
	*x = UsCoreOrganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreOrganization) ProtoMessage() {}

func (x *UsCoreOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreOrganization.ProtoReflect.Descriptor instead.
func (*UsCoreOrganization) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{18}
}

func (x *UsCoreOrganization) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreOrganization) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UsCoreOrganization) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *UsCoreOrganization) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UsCoreOrganization) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *UsCoreOrganization) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *UsCoreOrganization) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreOrganization) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreOrganization) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *UsCoreOrganization) GetActive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *UsCoreOrganization) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *UsCoreOrganization) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UsCoreOrganization) GetAlias() []*datatypes_go_proto.String {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *UsCoreOrganization) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *UsCoreOrganization) GetAddress() []*datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *UsCoreOrganization) GetPartOf() *datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *UsCoreOrganization) GetContact() []*UsCoreOrganization_Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *UsCoreOrganization) GetEndpoint() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

// Auto-generated from StructureDefinition for US Core Patient Profile.
// US Core Patient Profile.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient
type UsCorePatient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// An identifier for this patient
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Whether this patient's record is in active use
	Active *datatypes_go_proto.Boolean `protobuf:"bytes,10,opt,name=active,proto3" json:"active,omitempty"`
	// A name associated with the patient
	Name []*datatypes_go_proto.HumanName `protobuf:"bytes,11,rep,name=name,proto3" json:"name,omitempty"`
	// A contact detail for the individual
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,12,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// male | female | other | unknown
	Gender *codes_go_proto.AdministrativeGenderCode `protobuf:"bytes,13,opt,name=gender,proto3" json:"gender,omitempty"`
	// The date of birth for the individual
	BirthDate *datatypes_go_proto.Date `protobuf:"bytes,14,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
	Deceased  *UsCorePatient_Deceased  `protobuf:"bytes,15,opt,name=deceased,proto3" json:"deceased,omitempty"`
	// Addresses for the individual
	Address []*datatypes_go_proto.Address `protobuf:"bytes,16,rep,name=address,proto3" json:"address,omitempty"`
	// Marital (civil) status of a patient
	MaritalStatus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,17,opt,name=marital_status,json=maritalStatus,proto3" json:"marital_status,omitempty"`
	MultipleBirth *UsCorePatient_MultipleBirth        `protobuf:"bytes,18,opt,name=multiple_birth,json=multipleBirth,proto3" json:"multiple_birth,omitempty"`
	// Image of the patient
	Photo         []*datatypes_go_proto.Attachment `protobuf:"bytes,19,rep,name=photo,proto3" json:"photo,omitempty"`
	Contact       []*UsCorePatient_Contact         `protobuf:"bytes,20,rep,name=contact,proto3" json:"contact,omitempty"`
	Communication []*UsCorePatient_Communication   `protobuf:"bytes,22,rep,name=communication,proto3" json:"communication,omitempty"`
	// Patient's nominated primary care provider
	GeneralPractitioner []*datatypes_go_proto.Reference `protobuf:"bytes,23,rep,name=general_practitioner,json=generalPractitioner,proto3" json:"general_practitioner,omitempty"`
	// Organization that is the custodian of the patient record
	ManagingOrganization *datatypes_go_proto.Reference `protobuf:"bytes,24,opt,name=managing_organization,json=managingOrganization,proto3" json:"managing_organization,omitempty"`
	Link                 []*UsCorePatient_Link         `protobuf:"bytes,25,rep,name=link,proto3" json:"link,omitempty"`
	// Extension
	Race *PatientUSCoreRaceExtension `protobuf:"bytes,26,opt,name=race,proto3" json:"race,omitempty"`
	// Extension
	Ethnicity *PatientUSCoreEthnicityExtension `protobuf:"bytes,27,opt,name=ethnicity,proto3" json:"ethnicity,omitempty"`
	// Extension
	Birthsex *uscore_codes_go_proto.UsCoreBirthSexCode `protobuf:"bytes,28,opt,name=birthsex,proto3" json:"birthsex,omitempty"`
}

func (x *UsCorePatient) Reset() {
	*x = UsCorePatient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCorePatient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCorePatient) ProtoMessage() {}

func (x *UsCorePatient) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCorePatient.ProtoReflect.Descriptor instead.
func (*UsCorePatient) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{19}
}

func (x *UsCorePatient) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCorePatient) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UsCorePatient) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *UsCorePatient) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UsCorePatient) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *UsCorePatient) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *UsCorePatient) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCorePatient) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCorePatient) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *UsCorePatient) GetActive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *UsCorePatient) GetName() []*datatypes_go_proto.HumanName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UsCorePatient) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *UsCorePatient) GetGender() *codes_go_proto.AdministrativeGenderCode {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *UsCorePatient) GetBirthDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.BirthDate
	}
	return nil
}

func (x *UsCorePatient) GetDeceased() *UsCorePatient_Deceased {
	if x != nil {
		return x.Deceased
	}
	return nil
}

func (x *UsCorePatient) GetAddress() []*datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *UsCorePatient) GetMaritalStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.MaritalStatus
	}
	return nil
}

func (x *UsCorePatient) GetMultipleBirth() *UsCorePatient_MultipleBirth {
	if x != nil {
		return x.MultipleBirth
	}
	return nil
}

func (x *UsCorePatient) GetPhoto() []*datatypes_go_proto.Attachment {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *UsCorePatient) GetContact() []*UsCorePatient_Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *UsCorePatient) GetCommunication() []*UsCorePatient_Communication {
	if x != nil {
		return x.Communication
	}
	return nil
}

func (x *UsCorePatient) GetGeneralPractitioner() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.GeneralPractitioner
	}
	return nil
}

func (x *UsCorePatient) GetManagingOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ManagingOrganization
	}
	return nil
}

func (x *UsCorePatient) GetLink() []*UsCorePatient_Link {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *UsCorePatient) GetRace() *PatientUSCoreRaceExtension {
	if x != nil {
		return x.Race
	}
	return nil
}

func (x *UsCorePatient) GetEthnicity() *PatientUSCoreEthnicityExtension {
	if x != nil {
		return x.Ethnicity
	}
	return nil
}

func (x *UsCorePatient) GetBirthsex() *uscore_codes_go_proto.UsCoreBirthSexCode {
	if x != nil {
		return x.Birthsex
	}
	return nil
}

// Auto-generated from StructureDefinition for US Core Practitioner.
// US Core Practitioner.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-practitioner
type UsCorePractitioner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A identifier for the person as this agent
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Whether this practitioner's record is in active use
	Active *datatypes_go_proto.Boolean `protobuf:"bytes,10,opt,name=active,proto3" json:"active,omitempty"`
	// The name(s) associated with the practitioner
	Name *datatypes_go_proto.HumanName `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// A contact detail for the practitioner (that apply to all roles)
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,12,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// Address(es) of the practitioner that are not role specific (typically home
	// address)
	Address []*datatypes_go_proto.Address `protobuf:"bytes,13,rep,name=address,proto3" json:"address,omitempty"`
	// male | female | other | unknown
	Gender *codes_go_proto.AdministrativeGenderCode `protobuf:"bytes,14,opt,name=gender,proto3" json:"gender,omitempty"`
	// The date  on which the practitioner was born
	BirthDate *datatypes_go_proto.Date `protobuf:"bytes,15,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
	// Image of the person
	Photo         []*datatypes_go_proto.Attachment    `protobuf:"bytes,16,rep,name=photo,proto3" json:"photo,omitempty"`
	Qualification []*UsCorePractitioner_Qualification `protobuf:"bytes,17,rep,name=qualification,proto3" json:"qualification,omitempty"`
	// A language the practitioner is able to use in patient communication
	Communication []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,rep,name=communication,proto3" json:"communication,omitempty"`
}

func (x *UsCorePractitioner) Reset() {
	*x = UsCorePractitioner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCorePractitioner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCorePractitioner) ProtoMessage() {}

func (x *UsCorePractitioner) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCorePractitioner.ProtoReflect.Descriptor instead.
func (*UsCorePractitioner) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{20}
}

func (x *UsCorePractitioner) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCorePractitioner) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UsCorePractitioner) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *UsCorePractitioner) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UsCorePractitioner) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *UsCorePractitioner) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *UsCorePractitioner) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCorePractitioner) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCorePractitioner) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *UsCorePractitioner) GetActive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *UsCorePractitioner) GetName() *datatypes_go_proto.HumanName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UsCorePractitioner) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *UsCorePractitioner) GetAddress() []*datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *UsCorePractitioner) GetGender() *codes_go_proto.AdministrativeGenderCode {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *UsCorePractitioner) GetBirthDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.BirthDate
	}
	return nil
}

func (x *UsCorePractitioner) GetPhoto() []*datatypes_go_proto.Attachment {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *UsCorePractitioner) GetQualification() []*UsCorePractitioner_Qualification {
	if x != nil {
		return x.Qualification
	}
	return nil
}

func (x *UsCorePractitioner) GetCommunication() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Communication
	}
	return nil
}

// Auto-generated from StructureDefinition for US Core PractitionerRole Profile.
// US Core PractitionerRole Profile.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-practitionerrole
type UsCorePractitionerrole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifiers that are specific to a role/location
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Whether this practitioner's record is in active use
	Active *datatypes_go_proto.Boolean `protobuf:"bytes,10,opt,name=active,proto3" json:"active,omitempty"`
	// The period during which the practitioner is authorized to perform in these
	// role(s)
	Period *datatypes_go_proto.Period `protobuf:"bytes,11,opt,name=period,proto3" json:"period,omitempty"`
	// Practitioner that is able to provide the defined services for the
	// organation
	Practitioner *datatypes_go_proto.Reference `protobuf:"bytes,12,opt,name=practitioner,proto3" json:"practitioner,omitempty"`
	// Organization where the roles are available
	Organization *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=organization,proto3" json:"organization,omitempty"`
	// Roles which this practitioner may perform
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=code,proto3" json:"code,omitempty"`
	// Specific specialty of the practitioner
	Specialty *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=specialty,proto3" json:"specialty,omitempty"`
	// The location(s) at which this practitioner provides care
	Location []*datatypes_go_proto.Reference `protobuf:"bytes,16,rep,name=location,proto3" json:"location,omitempty"`
	// The list of healthcare services that this worker provides for this role's
	// Organization/Location(s)
	HealthcareService []*datatypes_go_proto.Reference `protobuf:"bytes,17,rep,name=healthcare_service,json=healthcareService,proto3" json:"healthcare_service,omitempty"`
	// Contact details that are specific to the role/location/service
	Telecom       []*datatypes_go_proto.ContactPoint      `protobuf:"bytes,18,rep,name=telecom,proto3" json:"telecom,omitempty"`
	AvailableTime []*UsCorePractitionerrole_AvailableTime `protobuf:"bytes,19,rep,name=available_time,json=availableTime,proto3" json:"available_time,omitempty"`
	NotAvailable  []*UsCorePractitionerrole_NotAvailable  `protobuf:"bytes,20,rep,name=not_available,json=notAvailable,proto3" json:"not_available,omitempty"`
	// Description of availability exceptions
	AvailabilityExceptions *datatypes_go_proto.String `protobuf:"bytes,21,opt,name=availability_exceptions,json=availabilityExceptions,proto3" json:"availability_exceptions,omitempty"`
	// Technical endpoints providing access to services operated for the
	// practitioner with this role
	Endpoint []*datatypes_go_proto.Reference `protobuf:"bytes,22,rep,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *UsCorePractitionerrole) Reset() {
	*x = UsCorePractitionerrole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCorePractitionerrole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCorePractitionerrole) ProtoMessage() {}

func (x *UsCorePractitionerrole) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCorePractitionerrole.ProtoReflect.Descriptor instead.
func (*UsCorePractitionerrole) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{21}
}

func (x *UsCorePractitionerrole) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCorePractitionerrole) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UsCorePractitionerrole) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *UsCorePractitionerrole) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UsCorePractitionerrole) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *UsCorePractitionerrole) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *UsCorePractitionerrole) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCorePractitionerrole) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCorePractitionerrole) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *UsCorePractitionerrole) GetActive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *UsCorePractitionerrole) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *UsCorePractitionerrole) GetPractitioner() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Practitioner
	}
	return nil
}

func (x *UsCorePractitionerrole) GetOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *UsCorePractitionerrole) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *UsCorePractitionerrole) GetSpecialty() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Specialty
	}
	return nil
}

func (x *UsCorePractitionerrole) GetLocation() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *UsCorePractitionerrole) GetHealthcareService() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.HealthcareService
	}
	return nil
}

func (x *UsCorePractitionerrole) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *UsCorePractitionerrole) GetAvailableTime() []*UsCorePractitionerrole_AvailableTime {
	if x != nil {
		return x.AvailableTime
	}
	return nil
}

func (x *UsCorePractitionerrole) GetNotAvailable() []*UsCorePractitionerrole_NotAvailable {
	if x != nil {
		return x.NotAvailable
	}
	return nil
}

func (x *UsCorePractitionerrole) GetAvailabilityExceptions() *datatypes_go_proto.String {
	if x != nil {
		return x.AvailabilityExceptions
	}
	return nil
}

func (x *UsCorePractitionerrole) GetEndpoint() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

// Auto-generated from StructureDefinition for US Core Procedure Profile.
// US Core Procedure Profile.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-procedure
type UsCoreProcedure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Identifiers for this procedure
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Instantiates protocol or definition
	Definition []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=definition,proto3" json:"definition,omitempty"`
	// A request for this procedure
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,11,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// Part of referenced event
	PartOf []*datatypes_go_proto.Reference `protobuf:"bytes,12,rep,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	// preparation | in-progress | suspended | aborted | completed |
	// entered-in-error | unknown
	Status *codes_go_proto.EventStatusCode `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// True if procedure was not performed as scheduled
	NotDone *datatypes_go_proto.Boolean `protobuf:"bytes,14,opt,name=not_done,json=notDone,proto3" json:"not_done,omitempty"`
	// Reason procedure was not performed
	NotDoneReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=not_done_reason,json=notDoneReason,proto3" json:"not_done_reason,omitempty"`
	// Classification of the procedure
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,opt,name=category,proto3" json:"category,omitempty"`
	// SNOMED-CT | ICD-10 | CPT-4
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,17,opt,name=code,proto3" json:"code,omitempty"`
	// Who the procedure was performed on
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=subject,proto3" json:"subject,omitempty"`
	// Encounter or episode associated with the procedure
	Context   *datatypes_go_proto.Reference `protobuf:"bytes,19,opt,name=context,proto3" json:"context,omitempty"`
	Performed *UsCoreProcedure_Performed    `protobuf:"bytes,20,opt,name=performed,proto3" json:"performed,omitempty"`
	Performer []*UsCoreProcedure_Performer  `protobuf:"bytes,21,rep,name=performer,proto3" json:"performer,omitempty"`
	// Where the procedure happened
	Location *datatypes_go_proto.Reference `protobuf:"bytes,22,opt,name=location,proto3" json:"location,omitempty"`
	// Coded reason procedure performed
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Condition that is the reason the procedure performed
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,24,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// Target body sites
	BodySite []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,25,rep,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// The result of procedure
	Outcome *datatypes_go_proto.CodeableConcept `protobuf:"bytes,26,opt,name=outcome,proto3" json:"outcome,omitempty"`
	// Any report resulting from the procedure
	Report []*datatypes_go_proto.Reference `protobuf:"bytes,27,rep,name=report,proto3" json:"report,omitempty"`
	// Complication following the procedure
	Complication []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,28,rep,name=complication,proto3" json:"complication,omitempty"`
	// A condition that is a result of the procedure
	ComplicationDetail []*datatypes_go_proto.Reference `protobuf:"bytes,29,rep,name=complication_detail,json=complicationDetail,proto3" json:"complication_detail,omitempty"`
	// Instructions for follow up
	FollowUp []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,30,rep,name=follow_up,json=followUp,proto3" json:"follow_up,omitempty"`
	// Additional information about the procedure
	Note        []*datatypes_go_proto.Annotation `protobuf:"bytes,31,rep,name=note,proto3" json:"note,omitempty"`
	FocalDevice []*UsCoreProcedure_FocalDevice   `protobuf:"bytes,32,rep,name=focal_device,json=focalDevice,proto3" json:"focal_device,omitempty"`
	// Items used during procedure
	UsedReference []*datatypes_go_proto.Reference `protobuf:"bytes,33,rep,name=used_reference,json=usedReference,proto3" json:"used_reference,omitempty"`
	// Coded items used during the procedure
	UsedCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,34,rep,name=used_code,json=usedCode,proto3" json:"used_code,omitempty"`
}

func (x *UsCoreProcedure) Reset() {
	*x = UsCoreProcedure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreProcedure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreProcedure) ProtoMessage() {}

func (x *UsCoreProcedure) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreProcedure.ProtoReflect.Descriptor instead.
func (*UsCoreProcedure) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{22}
}

func (x *UsCoreProcedure) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreProcedure) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UsCoreProcedure) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *UsCoreProcedure) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UsCoreProcedure) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *UsCoreProcedure) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *UsCoreProcedure) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreProcedure) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreProcedure) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *UsCoreProcedure) GetDefinition() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *UsCoreProcedure) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *UsCoreProcedure) GetPartOf() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *UsCoreProcedure) GetStatus() *codes_go_proto.EventStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UsCoreProcedure) GetNotDone() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.NotDone
	}
	return nil
}

func (x *UsCoreProcedure) GetNotDoneReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.NotDoneReason
	}
	return nil
}

func (x *UsCoreProcedure) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *UsCoreProcedure) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *UsCoreProcedure) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *UsCoreProcedure) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *UsCoreProcedure) GetPerformed() *UsCoreProcedure_Performed {
	if x != nil {
		return x.Performed
	}
	return nil
}

func (x *UsCoreProcedure) GetPerformer() []*UsCoreProcedure_Performer {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *UsCoreProcedure) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *UsCoreProcedure) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *UsCoreProcedure) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *UsCoreProcedure) GetBodySite() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *UsCoreProcedure) GetOutcome() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *UsCoreProcedure) GetReport() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *UsCoreProcedure) GetComplication() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Complication
	}
	return nil
}

func (x *UsCoreProcedure) GetComplicationDetail() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ComplicationDetail
	}
	return nil
}

func (x *UsCoreProcedure) GetFollowUp() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.FollowUp
	}
	return nil
}

func (x *UsCoreProcedure) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *UsCoreProcedure) GetFocalDevice() []*UsCoreProcedure_FocalDevice {
	if x != nil {
		return x.FocalDevice
	}
	return nil
}

func (x *UsCoreProcedure) GetUsedReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.UsedReference
	}
	return nil
}

func (x *UsCoreProcedure) GetUsedCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.UsedCode
	}
	return nil
}

// Auto-generated from StructureDefinition for Profile-resource association
// extension. Resource that this profile is based on. See
// http://hl7.org/fhir/us/core/StructureDefinition/us-core-profile-link
type CapabilityStatementProfileResourceAssociationExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Value of extension
	ValueCode *codes_go_proto.ResourceTypeCode `protobuf:"bytes,3,opt,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *CapabilityStatementProfileResourceAssociationExtension) Reset() {
	*x = CapabilityStatementProfileResourceAssociationExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapabilityStatementProfileResourceAssociationExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityStatementProfileResourceAssociationExtension) ProtoMessage() {}

func (x *CapabilityStatementProfileResourceAssociationExtension) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityStatementProfileResourceAssociationExtension.ProtoReflect.Descriptor instead.
func (*CapabilityStatementProfileResourceAssociationExtension) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{23}
}

func (x *CapabilityStatementProfileResourceAssociationExtension) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CapabilityStatementProfileResourceAssociationExtension) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CapabilityStatementProfileResourceAssociationExtension) GetValueCode() *codes_go_proto.ResourceTypeCode {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// Auto-generated from StructureDefinition for US Core Race Extension.
// US Core Race Extension.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-race
type PatientUSCoreRaceExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// American Indian or Alaska Native|Asian|Black or African American|Native
	// Hawaiian or Other Pacific Islander|White
	OmbCategory []*datatypes_go_proto.Coding `protobuf:"bytes,4,rep,name=omb_category,json=ombCategory,proto3" json:"omb_category,omitempty"`
	// Extended race codes
	Detailed []*datatypes_go_proto.Coding `protobuf:"bytes,5,rep,name=detailed,proto3" json:"detailed,omitempty"`
	// Race Text
	Text *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *PatientUSCoreRaceExtension) Reset() {
	*x = PatientUSCoreRaceExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientUSCoreRaceExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientUSCoreRaceExtension) ProtoMessage() {}

func (x *PatientUSCoreRaceExtension) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientUSCoreRaceExtension.ProtoReflect.Descriptor instead.
func (*PatientUSCoreRaceExtension) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{24}
}

func (x *PatientUSCoreRaceExtension) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientUSCoreRaceExtension) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PatientUSCoreRaceExtension) GetOmbCategory() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.OmbCategory
	}
	return nil
}

func (x *PatientUSCoreRaceExtension) GetDetailed() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Detailed
	}
	return nil
}

func (x *PatientUSCoreRaceExtension) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Auto-generated from StructureDefinition for US Core Smoking Status
// Observation Profile. US Core Smoking Status Observation Profile. See
// http://hl7.org/fhir/us/core/StructureDefinition/us-core-smokingstatus
type UsCoreSmokingstatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// registered | preliminary | final | amended +
	Status *codes_go_proto.ObservationStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	// Smoking Status: LOINC 72166-2  = Tobacco smoking status NHIS
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what this is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Healthcare event during which this observation is made
	Context   *datatypes_go_proto.Reference  `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	Effective *UsCoreSmokingstatus_Effective `protobuf:"bytes,16,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,17,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *UsCoreSmokingstatus_Value      `protobuf:"bytes,19,opt,name=value,proto3" json:"value,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about result
	Comment *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=comment,proto3" json:"comment,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference         `protobuf:"bytes,26,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange []*UsCoreSmokingstatus_ReferenceRange `protobuf:"bytes,27,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	Related        []*UsCoreSmokingstatus_Related        `protobuf:"bytes,28,rep,name=related,proto3" json:"related,omitempty"`
	Component      []*UsCoreSmokingstatus_Component      `protobuf:"bytes,29,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *UsCoreSmokingstatus) Reset() {
	*x = UsCoreSmokingstatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreSmokingstatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreSmokingstatus) ProtoMessage() {}

func (x *UsCoreSmokingstatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreSmokingstatus.ProtoReflect.Descriptor instead.
func (*UsCoreSmokingstatus) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{25}
}

func (x *UsCoreSmokingstatus) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetStatus() *codes_go_proto.ObservationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetEffective() *UsCoreSmokingstatus_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetValue() *UsCoreSmokingstatus_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetReferenceRange() []*UsCoreSmokingstatus_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetRelated() []*UsCoreSmokingstatus_Related {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *UsCoreSmokingstatus) GetComponent() []*UsCoreSmokingstatus_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// When allergy or intolerance was identified
type UsCoreAllergyintolerance_Onset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Onset:
	//	*UsCoreAllergyintolerance_Onset_DateTime
	//	*UsCoreAllergyintolerance_Onset_Age
	//	*UsCoreAllergyintolerance_Onset_Period
	//	*UsCoreAllergyintolerance_Onset_Range
	//	*UsCoreAllergyintolerance_Onset_StringValue
	Onset isUsCoreAllergyintolerance_Onset_Onset `protobuf_oneof:"onset"`
}

func (x *UsCoreAllergyintolerance_Onset) Reset() {
	*x = UsCoreAllergyintolerance_Onset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreAllergyintolerance_Onset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreAllergyintolerance_Onset) ProtoMessage() {}

func (x *UsCoreAllergyintolerance_Onset) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreAllergyintolerance_Onset.ProtoReflect.Descriptor instead.
func (*UsCoreAllergyintolerance_Onset) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{0, 0}
}

func (m *UsCoreAllergyintolerance_Onset) GetOnset() isUsCoreAllergyintolerance_Onset_Onset {
	if m != nil {
		return m.Onset
	}
	return nil
}

func (x *UsCoreAllergyintolerance_Onset) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetOnset().(*UsCoreAllergyintolerance_Onset_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *UsCoreAllergyintolerance_Onset) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetOnset().(*UsCoreAllergyintolerance_Onset_Age); ok {
		return x.Age
	}
	return nil
}

func (x *UsCoreAllergyintolerance_Onset) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetOnset().(*UsCoreAllergyintolerance_Onset_Period); ok {
		return x.Period
	}
	return nil
}

func (x *UsCoreAllergyintolerance_Onset) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetOnset().(*UsCoreAllergyintolerance_Onset_Range); ok {
		return x.Range
	}
	return nil
}

func (x *UsCoreAllergyintolerance_Onset) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetOnset().(*UsCoreAllergyintolerance_Onset_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isUsCoreAllergyintolerance_Onset_Onset interface {
	isUsCoreAllergyintolerance_Onset_Onset()
}

type UsCoreAllergyintolerance_Onset_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type UsCoreAllergyintolerance_Onset_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,2,opt,name=age,proto3,oneof"`
}

type UsCoreAllergyintolerance_Onset_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,3,opt,name=period,proto3,oneof"`
}

type UsCoreAllergyintolerance_Onset_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,4,opt,name=range,proto3,oneof"`
}

type UsCoreAllergyintolerance_Onset_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=string_value,json=string,proto3,oneof"`
}

func (*UsCoreAllergyintolerance_Onset_DateTime) isUsCoreAllergyintolerance_Onset_Onset() {}

func (*UsCoreAllergyintolerance_Onset_Age) isUsCoreAllergyintolerance_Onset_Onset() {}

func (*UsCoreAllergyintolerance_Onset_Period) isUsCoreAllergyintolerance_Onset_Onset() {}

func (*UsCoreAllergyintolerance_Onset_Range) isUsCoreAllergyintolerance_Onset_Onset() {}

func (*UsCoreAllergyintolerance_Onset_StringValue) isUsCoreAllergyintolerance_Onset_Onset() {}

// Adverse Reaction Events linked to exposure to substance
type UsCoreAllergyintolerance_Reaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Specific substance or pharmaceutical product considered to be responsible
	// for event
	Substance *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=substance,proto3" json:"substance,omitempty"`
	// Clinical symptoms/signs associated with the Event
	Manifestation []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,rep,name=manifestation,proto3" json:"manifestation,omitempty"`
	// Description of the event as a whole
	Description *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// Date(/time) when manifestations showed
	Onset *datatypes_go_proto.DateTime `protobuf:"bytes,7,opt,name=onset,proto3" json:"onset,omitempty"`
	// mild | moderate | severe (of event as a whole)
	Severity *codes_go_proto.AllergyIntoleranceSeverityCode `protobuf:"bytes,8,opt,name=severity,proto3" json:"severity,omitempty"`
	// How the subject was exposed to the substance
	ExposureRoute *datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,opt,name=exposure_route,json=exposureRoute,proto3" json:"exposure_route,omitempty"`
	// Text about event not captured in other fields
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,10,rep,name=note,proto3" json:"note,omitempty"`
}

func (x *UsCoreAllergyintolerance_Reaction) Reset() {
	*x = UsCoreAllergyintolerance_Reaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreAllergyintolerance_Reaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreAllergyintolerance_Reaction) ProtoMessage() {}

func (x *UsCoreAllergyintolerance_Reaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreAllergyintolerance_Reaction.ProtoReflect.Descriptor instead.
func (*UsCoreAllergyintolerance_Reaction) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{0, 1}
}

func (x *UsCoreAllergyintolerance_Reaction) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreAllergyintolerance_Reaction) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreAllergyintolerance_Reaction) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreAllergyintolerance_Reaction) GetSubstance() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Substance
	}
	return nil
}

func (x *UsCoreAllergyintolerance_Reaction) GetManifestation() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Manifestation
	}
	return nil
}

func (x *UsCoreAllergyintolerance_Reaction) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UsCoreAllergyintolerance_Reaction) GetOnset() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Onset
	}
	return nil
}

func (x *UsCoreAllergyintolerance_Reaction) GetSeverity() *codes_go_proto.AllergyIntoleranceSeverityCode {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *UsCoreAllergyintolerance_Reaction) GetExposureRoute() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ExposureRoute
	}
	return nil
}

func (x *UsCoreAllergyintolerance_Reaction) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

// Action to occur as part of plan
type UsCoreCareplan_Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Results of the activity
	OutcomeCodeableConcept []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,rep,name=outcome_codeable_concept,json=outcomeCodeableConcept,proto3" json:"outcome_codeable_concept,omitempty"`
	// Appointment, Encounter, Procedure, etc.
	OutcomeReference []*datatypes_go_proto.Reference `protobuf:"bytes,5,rep,name=outcome_reference,json=outcomeReference,proto3" json:"outcome_reference,omitempty"`
	// Comments about the activity status/progress
	Progress []*datatypes_go_proto.Annotation `protobuf:"bytes,6,rep,name=progress,proto3" json:"progress,omitempty"`
	// Activity details defined in specific resource
	Reference *datatypes_go_proto.Reference   `protobuf:"bytes,7,opt,name=reference,proto3" json:"reference,omitempty"`
	Detail    *UsCoreCareplan_Activity_Detail `protobuf:"bytes,8,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *UsCoreCareplan_Activity) Reset() {
	*x = UsCoreCareplan_Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreCareplan_Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreCareplan_Activity) ProtoMessage() {}

func (x *UsCoreCareplan_Activity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreCareplan_Activity.ProtoReflect.Descriptor instead.
func (*UsCoreCareplan_Activity) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{2, 0}
}

func (x *UsCoreCareplan_Activity) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreCareplan_Activity) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreCareplan_Activity) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreCareplan_Activity) GetOutcomeCodeableConcept() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.OutcomeCodeableConcept
	}
	return nil
}

func (x *UsCoreCareplan_Activity) GetOutcomeReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.OutcomeReference
	}
	return nil
}

func (x *UsCoreCareplan_Activity) GetProgress() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *UsCoreCareplan_Activity) GetReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *UsCoreCareplan_Activity) GetDetail() *UsCoreCareplan_Activity_Detail {
	if x != nil {
		return x.Detail
	}
	return nil
}

// In-line definition of activity
type UsCoreCareplan_Activity_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// diet | drug | encounter | observation | procedure | supply | other
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	// Protocol or definition
	Definition *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=definition,proto3" json:"definition,omitempty"`
	// Detail type of activity
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
	// Why activity should be done or why activity was prohibited
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Condition triggering need for activity
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,8,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// Goals this activity relates to
	Goal []*datatypes_go_proto.Reference `protobuf:"bytes,9,rep,name=goal,proto3" json:"goal,omitempty"`
	// not-started | scheduled | in-progress | on-hold | completed | cancelled
	// | unknown
	Status *codes_go_proto.CarePlanActivityStatusCode `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// Reason for current status
	StatusReason *datatypes_go_proto.String `protobuf:"bytes,11,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// Do NOT do
	Prohibited *datatypes_go_proto.Boolean               `protobuf:"bytes,12,opt,name=prohibited,proto3" json:"prohibited,omitempty"`
	Scheduled  *UsCoreCareplan_Activity_Detail_Scheduled `protobuf:"bytes,13,opt,name=scheduled,proto3" json:"scheduled,omitempty"`
	// Where it should happen
	Location *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=location,proto3" json:"location,omitempty"`
	// Who will be responsible?
	Performer []*datatypes_go_proto.Reference         `protobuf:"bytes,15,rep,name=performer,proto3" json:"performer,omitempty"`
	Product   *UsCoreCareplan_Activity_Detail_Product `protobuf:"bytes,16,opt,name=product,proto3" json:"product,omitempty"`
	// How to consume/day?
	DailyAmount *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,17,opt,name=daily_amount,json=dailyAmount,proto3" json:"daily_amount,omitempty"`
	// How much to administer/supply/consume
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,18,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Extra info describing activity to perform
	Description *datatypes_go_proto.String `protobuf:"bytes,19,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UsCoreCareplan_Activity_Detail) Reset() {
	*x = UsCoreCareplan_Activity_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreCareplan_Activity_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreCareplan_Activity_Detail) ProtoMessage() {}

func (x *UsCoreCareplan_Activity_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreCareplan_Activity_Detail.ProtoReflect.Descriptor instead.
func (*UsCoreCareplan_Activity_Detail) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *UsCoreCareplan_Activity_Detail) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreCareplan_Activity_Detail) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreCareplan_Activity_Detail) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreCareplan_Activity_Detail) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *UsCoreCareplan_Activity_Detail) GetDefinition() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *UsCoreCareplan_Activity_Detail) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *UsCoreCareplan_Activity_Detail) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *UsCoreCareplan_Activity_Detail) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *UsCoreCareplan_Activity_Detail) GetGoal() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Goal
	}
	return nil
}

func (x *UsCoreCareplan_Activity_Detail) GetStatus() *codes_go_proto.CarePlanActivityStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UsCoreCareplan_Activity_Detail) GetStatusReason() *datatypes_go_proto.String {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

func (x *UsCoreCareplan_Activity_Detail) GetProhibited() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Prohibited
	}
	return nil
}

func (x *UsCoreCareplan_Activity_Detail) GetScheduled() *UsCoreCareplan_Activity_Detail_Scheduled {
	if x != nil {
		return x.Scheduled
	}
	return nil
}

func (x *UsCoreCareplan_Activity_Detail) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *UsCoreCareplan_Activity_Detail) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *UsCoreCareplan_Activity_Detail) GetProduct() *UsCoreCareplan_Activity_Detail_Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *UsCoreCareplan_Activity_Detail) GetDailyAmount() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.DailyAmount
	}
	return nil
}

func (x *UsCoreCareplan_Activity_Detail) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *UsCoreCareplan_Activity_Detail) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

// When activity is to occur
type UsCoreCareplan_Activity_Detail_Scheduled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Scheduled:
	//	*UsCoreCareplan_Activity_Detail_Scheduled_Timing
	//	*UsCoreCareplan_Activity_Detail_Scheduled_Period
	//	*UsCoreCareplan_Activity_Detail_Scheduled_StringValue
	Scheduled isUsCoreCareplan_Activity_Detail_Scheduled_Scheduled `protobuf_oneof:"scheduled"`
}

func (x *UsCoreCareplan_Activity_Detail_Scheduled) Reset() {
	*x = UsCoreCareplan_Activity_Detail_Scheduled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreCareplan_Activity_Detail_Scheduled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreCareplan_Activity_Detail_Scheduled) ProtoMessage() {}

func (x *UsCoreCareplan_Activity_Detail_Scheduled) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreCareplan_Activity_Detail_Scheduled.ProtoReflect.Descriptor instead.
func (*UsCoreCareplan_Activity_Detail_Scheduled) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{2, 0, 0, 0}
}

func (m *UsCoreCareplan_Activity_Detail_Scheduled) GetScheduled() isUsCoreCareplan_Activity_Detail_Scheduled_Scheduled {
	if m != nil {
		return m.Scheduled
	}
	return nil
}

func (x *UsCoreCareplan_Activity_Detail_Scheduled) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetScheduled().(*UsCoreCareplan_Activity_Detail_Scheduled_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *UsCoreCareplan_Activity_Detail_Scheduled) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetScheduled().(*UsCoreCareplan_Activity_Detail_Scheduled_Period); ok {
		return x.Period
	}
	return nil
}

func (x *UsCoreCareplan_Activity_Detail_Scheduled) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetScheduled().(*UsCoreCareplan_Activity_Detail_Scheduled_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isUsCoreCareplan_Activity_Detail_Scheduled_Scheduled interface {
	isUsCoreCareplan_Activity_Detail_Scheduled_Scheduled()
}

type UsCoreCareplan_Activity_Detail_Scheduled_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,1,opt,name=timing,proto3,oneof"`
}

type UsCoreCareplan_Activity_Detail_Scheduled_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

type UsCoreCareplan_Activity_Detail_Scheduled_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

func (*UsCoreCareplan_Activity_Detail_Scheduled_Timing) isUsCoreCareplan_Activity_Detail_Scheduled_Scheduled() {
}

func (*UsCoreCareplan_Activity_Detail_Scheduled_Period) isUsCoreCareplan_Activity_Detail_Scheduled_Scheduled() {
}

func (*UsCoreCareplan_Activity_Detail_Scheduled_StringValue) isUsCoreCareplan_Activity_Detail_Scheduled_Scheduled() {
}

// What is to be administered/supplied
type UsCoreCareplan_Activity_Detail_Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Product:
	//	*UsCoreCareplan_Activity_Detail_Product_CodeableConcept
	//	*UsCoreCareplan_Activity_Detail_Product_Reference
	Product isUsCoreCareplan_Activity_Detail_Product_Product `protobuf_oneof:"product"`
}

func (x *UsCoreCareplan_Activity_Detail_Product) Reset() {
	*x = UsCoreCareplan_Activity_Detail_Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreCareplan_Activity_Detail_Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreCareplan_Activity_Detail_Product) ProtoMessage() {}

func (x *UsCoreCareplan_Activity_Detail_Product) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreCareplan_Activity_Detail_Product.ProtoReflect.Descriptor instead.
func (*UsCoreCareplan_Activity_Detail_Product) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{2, 0, 0, 1}
}

func (m *UsCoreCareplan_Activity_Detail_Product) GetProduct() isUsCoreCareplan_Activity_Detail_Product_Product {
	if m != nil {
		return m.Product
	}
	return nil
}

func (x *UsCoreCareplan_Activity_Detail_Product) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetProduct().(*UsCoreCareplan_Activity_Detail_Product_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *UsCoreCareplan_Activity_Detail_Product) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetProduct().(*UsCoreCareplan_Activity_Detail_Product_Reference); ok {
		return x.Reference
	}
	return nil
}

type isUsCoreCareplan_Activity_Detail_Product_Product interface {
	isUsCoreCareplan_Activity_Detail_Product_Product()
}

type UsCoreCareplan_Activity_Detail_Product_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type UsCoreCareplan_Activity_Detail_Product_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*UsCoreCareplan_Activity_Detail_Product_CodeableConcept) isUsCoreCareplan_Activity_Detail_Product_Product() {
}

func (*UsCoreCareplan_Activity_Detail_Product_Reference) isUsCoreCareplan_Activity_Detail_Product_Product() {
}

// Members of the team
type UsCoreCareteam_Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of involvement
	Role *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	// Who is involved
	Member *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=member,proto3" json:"member,omitempty"`
	// Organization of the practitioner
	OnBehalfOf *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=on_behalf_of,json=onBehalfOf,proto3" json:"on_behalf_of,omitempty"`
	// Time period of participant
	Period *datatypes_go_proto.Period `protobuf:"bytes,7,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *UsCoreCareteam_Participant) Reset() {
	*x = UsCoreCareteam_Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreCareteam_Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreCareteam_Participant) ProtoMessage() {}

func (x *UsCoreCareteam_Participant) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreCareteam_Participant.ProtoReflect.Descriptor instead.
func (*UsCoreCareteam_Participant) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{3, 0}
}

func (x *UsCoreCareteam_Participant) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreCareteam_Participant) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreCareteam_Participant) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreCareteam_Participant) GetRole() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *UsCoreCareteam_Participant) GetMember() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *UsCoreCareteam_Participant) GetOnBehalfOf() *datatypes_go_proto.Reference {
	if x != nil {
		return x.OnBehalfOf
	}
	return nil
}

func (x *UsCoreCareteam_Participant) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// Estimated or actual date,  date-time, or age
type UsCoreCondition_Onset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Onset:
	//	*UsCoreCondition_Onset_DateTime
	//	*UsCoreCondition_Onset_Age
	//	*UsCoreCondition_Onset_Period
	//	*UsCoreCondition_Onset_Range
	//	*UsCoreCondition_Onset_StringValue
	Onset isUsCoreCondition_Onset_Onset `protobuf_oneof:"onset"`
}

func (x *UsCoreCondition_Onset) Reset() {
	*x = UsCoreCondition_Onset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreCondition_Onset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreCondition_Onset) ProtoMessage() {}

func (x *UsCoreCondition_Onset) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreCondition_Onset.ProtoReflect.Descriptor instead.
func (*UsCoreCondition_Onset) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{4, 0}
}

func (m *UsCoreCondition_Onset) GetOnset() isUsCoreCondition_Onset_Onset {
	if m != nil {
		return m.Onset
	}
	return nil
}

func (x *UsCoreCondition_Onset) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetOnset().(*UsCoreCondition_Onset_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *UsCoreCondition_Onset) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetOnset().(*UsCoreCondition_Onset_Age); ok {
		return x.Age
	}
	return nil
}

func (x *UsCoreCondition_Onset) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetOnset().(*UsCoreCondition_Onset_Period); ok {
		return x.Period
	}
	return nil
}

func (x *UsCoreCondition_Onset) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetOnset().(*UsCoreCondition_Onset_Range); ok {
		return x.Range
	}
	return nil
}

func (x *UsCoreCondition_Onset) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetOnset().(*UsCoreCondition_Onset_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isUsCoreCondition_Onset_Onset interface {
	isUsCoreCondition_Onset_Onset()
}

type UsCoreCondition_Onset_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type UsCoreCondition_Onset_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,2,opt,name=age,proto3,oneof"`
}

type UsCoreCondition_Onset_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,3,opt,name=period,proto3,oneof"`
}

type UsCoreCondition_Onset_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,4,opt,name=range,proto3,oneof"`
}

type UsCoreCondition_Onset_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=string_value,json=string,proto3,oneof"`
}

func (*UsCoreCondition_Onset_DateTime) isUsCoreCondition_Onset_Onset() {}

func (*UsCoreCondition_Onset_Age) isUsCoreCondition_Onset_Onset() {}

func (*UsCoreCondition_Onset_Period) isUsCoreCondition_Onset_Onset() {}

func (*UsCoreCondition_Onset_Range) isUsCoreCondition_Onset_Onset() {}

func (*UsCoreCondition_Onset_StringValue) isUsCoreCondition_Onset_Onset() {}

// If/when in resolution/remission
type UsCoreCondition_Abatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Abatement:
	//	*UsCoreCondition_Abatement_DateTime
	//	*UsCoreCondition_Abatement_Age
	//	*UsCoreCondition_Abatement_Boolean
	//	*UsCoreCondition_Abatement_Period
	//	*UsCoreCondition_Abatement_Range
	//	*UsCoreCondition_Abatement_StringValue
	Abatement isUsCoreCondition_Abatement_Abatement `protobuf_oneof:"abatement"`
}

func (x *UsCoreCondition_Abatement) Reset() {
	*x = UsCoreCondition_Abatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreCondition_Abatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreCondition_Abatement) ProtoMessage() {}

func (x *UsCoreCondition_Abatement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreCondition_Abatement.ProtoReflect.Descriptor instead.
func (*UsCoreCondition_Abatement) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{4, 1}
}

func (m *UsCoreCondition_Abatement) GetAbatement() isUsCoreCondition_Abatement_Abatement {
	if m != nil {
		return m.Abatement
	}
	return nil
}

func (x *UsCoreCondition_Abatement) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetAbatement().(*UsCoreCondition_Abatement_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *UsCoreCondition_Abatement) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetAbatement().(*UsCoreCondition_Abatement_Age); ok {
		return x.Age
	}
	return nil
}

func (x *UsCoreCondition_Abatement) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetAbatement().(*UsCoreCondition_Abatement_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *UsCoreCondition_Abatement) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetAbatement().(*UsCoreCondition_Abatement_Period); ok {
		return x.Period
	}
	return nil
}

func (x *UsCoreCondition_Abatement) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetAbatement().(*UsCoreCondition_Abatement_Range); ok {
		return x.Range
	}
	return nil
}

func (x *UsCoreCondition_Abatement) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetAbatement().(*UsCoreCondition_Abatement_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isUsCoreCondition_Abatement_Abatement interface {
	isUsCoreCondition_Abatement_Abatement()
}

type UsCoreCondition_Abatement_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type UsCoreCondition_Abatement_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,2,opt,name=age,proto3,oneof"`
}

type UsCoreCondition_Abatement_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=boolean,proto3,oneof"`
}

type UsCoreCondition_Abatement_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,4,opt,name=period,proto3,oneof"`
}

type UsCoreCondition_Abatement_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,5,opt,name=range,proto3,oneof"`
}

type UsCoreCondition_Abatement_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=string_value,json=string,proto3,oneof"`
}

func (*UsCoreCondition_Abatement_DateTime) isUsCoreCondition_Abatement_Abatement() {}

func (*UsCoreCondition_Abatement_Age) isUsCoreCondition_Abatement_Abatement() {}

func (*UsCoreCondition_Abatement_Boolean) isUsCoreCondition_Abatement_Abatement() {}

func (*UsCoreCondition_Abatement_Period) isUsCoreCondition_Abatement_Abatement() {}

func (*UsCoreCondition_Abatement_Range) isUsCoreCondition_Abatement_Abatement() {}

func (*UsCoreCondition_Abatement_StringValue) isUsCoreCondition_Abatement_Abatement() {}

// Stage/grade, usually assessed formally
type UsCoreCondition_Stage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Simple summary (disease specific)
	Summary *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
	// Formal record of assessment
	Assessment []*datatypes_go_proto.Reference `protobuf:"bytes,5,rep,name=assessment,proto3" json:"assessment,omitempty"`
}

func (x *UsCoreCondition_Stage) Reset() {
	*x = UsCoreCondition_Stage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreCondition_Stage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreCondition_Stage) ProtoMessage() {}

func (x *UsCoreCondition_Stage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreCondition_Stage.ProtoReflect.Descriptor instead.
func (*UsCoreCondition_Stage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{4, 2}
}

func (x *UsCoreCondition_Stage) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreCondition_Stage) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreCondition_Stage) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreCondition_Stage) GetSummary() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *UsCoreCondition_Stage) GetAssessment() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Assessment
	}
	return nil
}

// Supporting evidence
type UsCoreCondition_Evidence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Manifestation/symptom
	Code []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,rep,name=code,proto3" json:"code,omitempty"`
	// Supporting information found elsewhere
	Detail []*datatypes_go_proto.Reference `protobuf:"bytes,5,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *UsCoreCondition_Evidence) Reset() {
	*x = UsCoreCondition_Evidence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreCondition_Evidence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreCondition_Evidence) ProtoMessage() {}

func (x *UsCoreCondition_Evidence) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreCondition_Evidence.ProtoReflect.Descriptor instead.
func (*UsCoreCondition_Evidence) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{4, 3}
}

func (x *UsCoreCondition_Evidence) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreCondition_Evidence) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreCondition_Evidence) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreCondition_Evidence) GetCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *UsCoreCondition_Evidence) GetDetail() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Detail
	}
	return nil
}

// Unique Device Identifier (UDI) Barcode string
type UsCoreDevice_Udi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Mandatory fixed portion of UDI
	DeviceIdentifier *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=device_identifier,json=deviceIdentifier,proto3" json:"device_identifier,omitempty"`
	// Device Name as appears on UDI label
	Name *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Regional UDI authority
	Jurisdiction *datatypes_go_proto.Uri `protobuf:"bytes,6,opt,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	// UDI Human Readable Barcode String
	CarrierHrf *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=carrier_hrf,json=carrierHRF,proto3" json:"carrier_hrf,omitempty"`
	// UDI Machine Readable Barcode String
	CarrierAidc *datatypes_go_proto.Base64Binary `protobuf:"bytes,8,opt,name=carrier_aidc,json=carrierAIDC,proto3" json:"carrier_aidc,omitempty"`
	// UDI Issuing Organization
	Issuer *datatypes_go_proto.Uri `protobuf:"bytes,9,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// barcode | rfid | manual +
	EntryType *codes_go_proto.UDIEntryTypeCode `protobuf:"bytes,10,opt,name=entry_type,json=entryType,proto3" json:"entry_type,omitempty"`
}

func (x *UsCoreDevice_Udi) Reset() {
	*x = UsCoreDevice_Udi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreDevice_Udi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreDevice_Udi) ProtoMessage() {}

func (x *UsCoreDevice_Udi) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreDevice_Udi.ProtoReflect.Descriptor instead.
func (*UsCoreDevice_Udi) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{5, 0}
}

func (x *UsCoreDevice_Udi) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreDevice_Udi) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreDevice_Udi) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreDevice_Udi) GetDeviceIdentifier() *datatypes_go_proto.String {
	if x != nil {
		return x.DeviceIdentifier
	}
	return nil
}

func (x *UsCoreDevice_Udi) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UsCoreDevice_Udi) GetJurisdiction() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Jurisdiction
	}
	return nil
}

func (x *UsCoreDevice_Udi) GetCarrierHrf() *datatypes_go_proto.String {
	if x != nil {
		return x.CarrierHrf
	}
	return nil
}

func (x *UsCoreDevice_Udi) GetCarrierAidc() *datatypes_go_proto.Base64Binary {
	if x != nil {
		return x.CarrierAidc
	}
	return nil
}

func (x *UsCoreDevice_Udi) GetIssuer() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *UsCoreDevice_Udi) GetEntryType() *codes_go_proto.UDIEntryTypeCode {
	if x != nil {
		return x.EntryType
	}
	return nil
}

// Specimen Collection Datetime or Period
type UsCoreDiagnosticreport_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*UsCoreDiagnosticreport_Effective_DateTime
	//	*UsCoreDiagnosticreport_Effective_Period
	Effective isUsCoreDiagnosticreport_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *UsCoreDiagnosticreport_Effective) Reset() {
	*x = UsCoreDiagnosticreport_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreDiagnosticreport_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreDiagnosticreport_Effective) ProtoMessage() {}

func (x *UsCoreDiagnosticreport_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreDiagnosticreport_Effective.ProtoReflect.Descriptor instead.
func (*UsCoreDiagnosticreport_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{6, 0}
}

func (m *UsCoreDiagnosticreport_Effective) GetEffective() isUsCoreDiagnosticreport_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *UsCoreDiagnosticreport_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*UsCoreDiagnosticreport_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *UsCoreDiagnosticreport_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*UsCoreDiagnosticreport_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isUsCoreDiagnosticreport_Effective_Effective interface {
	isUsCoreDiagnosticreport_Effective_Effective()
}

type UsCoreDiagnosticreport_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type UsCoreDiagnosticreport_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*UsCoreDiagnosticreport_Effective_DateTime) isUsCoreDiagnosticreport_Effective_Effective() {}

func (*UsCoreDiagnosticreport_Effective_Period) isUsCoreDiagnosticreport_Effective_Effective() {}

// Participants in producing the report
type UsCoreDiagnosticreport_Performer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of performer
	Role *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	// Practitioner or Organization  participant
	Actor *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=actor,proto3" json:"actor,omitempty"`
}

func (x *UsCoreDiagnosticreport_Performer) Reset() {
	*x = UsCoreDiagnosticreport_Performer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreDiagnosticreport_Performer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreDiagnosticreport_Performer) ProtoMessage() {}

func (x *UsCoreDiagnosticreport_Performer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreDiagnosticreport_Performer.ProtoReflect.Descriptor instead.
func (*UsCoreDiagnosticreport_Performer) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{6, 1}
}

func (x *UsCoreDiagnosticreport_Performer) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreDiagnosticreport_Performer) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreDiagnosticreport_Performer) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreDiagnosticreport_Performer) GetRole() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *UsCoreDiagnosticreport_Performer) GetActor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Actor
	}
	return nil
}

// Key images associated with this report
type UsCoreDiagnosticreport_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Comment about the image (e.g. explanation)
	Comment *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	// Reference to the image source
	Link *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *UsCoreDiagnosticreport_Image) Reset() {
	*x = UsCoreDiagnosticreport_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreDiagnosticreport_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreDiagnosticreport_Image) ProtoMessage() {}

func (x *UsCoreDiagnosticreport_Image) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreDiagnosticreport_Image.ProtoReflect.Descriptor instead.
func (*UsCoreDiagnosticreport_Image) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{6, 2}
}

func (x *UsCoreDiagnosticreport_Image) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreDiagnosticreport_Image) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreDiagnosticreport_Image) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreDiagnosticreport_Image) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *UsCoreDiagnosticreport_Image) GetLink() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Link
	}
	return nil
}

// Relationships to other documents
type UsCoreDocumentreference_RelatesTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// replaces | transforms | signs | appends
	Code *codes_go_proto.DocumentRelationshipTypeCode `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Target of the relationship
	Target *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *UsCoreDocumentreference_RelatesTo) Reset() {
	*x = UsCoreDocumentreference_RelatesTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreDocumentreference_RelatesTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreDocumentreference_RelatesTo) ProtoMessage() {}

func (x *UsCoreDocumentreference_RelatesTo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreDocumentreference_RelatesTo.ProtoReflect.Descriptor instead.
func (*UsCoreDocumentreference_RelatesTo) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{8, 0}
}

func (x *UsCoreDocumentreference_RelatesTo) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreDocumentreference_RelatesTo) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreDocumentreference_RelatesTo) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreDocumentreference_RelatesTo) GetCode() *codes_go_proto.DocumentRelationshipTypeCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *UsCoreDocumentreference_RelatesTo) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

// Document referenced
type UsCoreDocumentreference_Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Where to access the document
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,4,opt,name=attachment,proto3" json:"attachment,omitempty"`
	// Format/content rules for the document
	Format *datatypes_go_proto.Coding `protobuf:"bytes,5,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *UsCoreDocumentreference_Content) Reset() {
	*x = UsCoreDocumentreference_Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreDocumentreference_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreDocumentreference_Content) ProtoMessage() {}

func (x *UsCoreDocumentreference_Content) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreDocumentreference_Content.ProtoReflect.Descriptor instead.
func (*UsCoreDocumentreference_Content) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{8, 1}
}

func (x *UsCoreDocumentreference_Content) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreDocumentreference_Content) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreDocumentreference_Content) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreDocumentreference_Content) GetAttachment() *datatypes_go_proto.Attachment {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *UsCoreDocumentreference_Content) GetFormat() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Format
	}
	return nil
}

// Clinical context of document
type UsCoreDocumentreference_Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Context of the document  content
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Main clinical acts documented
	Event []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,rep,name=event,proto3" json:"event,omitempty"`
	// Time of service that is being documented
	Period *datatypes_go_proto.Period `protobuf:"bytes,6,opt,name=period,proto3" json:"period,omitempty"`
	// Kind of facility where patient was seen
	FacilityType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=facility_type,json=facilityType,proto3" json:"facility_type,omitempty"`
	// Additional details about where the content was created (e.g. clinical
	// specialty)
	PracticeSetting *datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,opt,name=practice_setting,json=practiceSetting,proto3" json:"practice_setting,omitempty"`
	// Patient demographics from source
	SourcePatientInfo *datatypes_go_proto.Reference              `protobuf:"bytes,9,opt,name=source_patient_info,json=sourcePatientInfo,proto3" json:"source_patient_info,omitempty"`
	Related           []*UsCoreDocumentreference_Context_Related `protobuf:"bytes,10,rep,name=related,proto3" json:"related,omitempty"`
}

func (x *UsCoreDocumentreference_Context) Reset() {
	*x = UsCoreDocumentreference_Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreDocumentreference_Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreDocumentreference_Context) ProtoMessage() {}

func (x *UsCoreDocumentreference_Context) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreDocumentreference_Context.ProtoReflect.Descriptor instead.
func (*UsCoreDocumentreference_Context) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{8, 2}
}

func (x *UsCoreDocumentreference_Context) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreDocumentreference_Context) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreDocumentreference_Context) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreDocumentreference_Context) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *UsCoreDocumentreference_Context) GetEvent() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *UsCoreDocumentreference_Context) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *UsCoreDocumentreference_Context) GetFacilityType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.FacilityType
	}
	return nil
}

func (x *UsCoreDocumentreference_Context) GetPracticeSetting() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PracticeSetting
	}
	return nil
}

func (x *UsCoreDocumentreference_Context) GetSourcePatientInfo() *datatypes_go_proto.Reference {
	if x != nil {
		return x.SourcePatientInfo
	}
	return nil
}

func (x *UsCoreDocumentreference_Context) GetRelated() []*UsCoreDocumentreference_Context_Related {
	if x != nil {
		return x.Related
	}
	return nil
}

// Related identifiers or resources
type UsCoreDocumentreference_Context_Related struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifier of related objects or events
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Related Resource
	Ref *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *UsCoreDocumentreference_Context_Related) Reset() {
	*x = UsCoreDocumentreference_Context_Related{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreDocumentreference_Context_Related) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreDocumentreference_Context_Related) ProtoMessage() {}

func (x *UsCoreDocumentreference_Context_Related) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreDocumentreference_Context_Related.ProtoReflect.Descriptor instead.
func (*UsCoreDocumentreference_Context_Related) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{8, 2, 0}
}

func (x *UsCoreDocumentreference_Context_Related) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreDocumentreference_Context_Related) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreDocumentreference_Context_Related) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreDocumentreference_Context_Related) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *UsCoreDocumentreference_Context_Related) GetRef() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Ref
	}
	return nil
}

// List of past encounter statuses
type UsCoreEncounter_StatusHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// planned | arrived | triaged | in-progress | onleave | finished |
	// cancelled +
	Status *codes_go_proto.EncounterStatusCode `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// The time that the episode was in the specified status
	Period *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *UsCoreEncounter_StatusHistory) Reset() {
	*x = UsCoreEncounter_StatusHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreEncounter_StatusHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreEncounter_StatusHistory) ProtoMessage() {}

func (x *UsCoreEncounter_StatusHistory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreEncounter_StatusHistory.ProtoReflect.Descriptor instead.
func (*UsCoreEncounter_StatusHistory) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{9, 0}
}

func (x *UsCoreEncounter_StatusHistory) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreEncounter_StatusHistory) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreEncounter_StatusHistory) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreEncounter_StatusHistory) GetStatus() *codes_go_proto.EncounterStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UsCoreEncounter_StatusHistory) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// List of past encounter classes
type UsCoreEncounter_ClassHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// inpatient | outpatient | ambulatory | emergency +
	ClassValue *datatypes_go_proto.Coding `protobuf:"bytes,4,opt,name=class_value,json=class,proto3" json:"class_value,omitempty"`
	// The time that the episode was in the specified class
	Period *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *UsCoreEncounter_ClassHistory) Reset() {
	*x = UsCoreEncounter_ClassHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreEncounter_ClassHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreEncounter_ClassHistory) ProtoMessage() {}

func (x *UsCoreEncounter_ClassHistory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreEncounter_ClassHistory.ProtoReflect.Descriptor instead.
func (*UsCoreEncounter_ClassHistory) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{9, 1}
}

func (x *UsCoreEncounter_ClassHistory) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreEncounter_ClassHistory) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreEncounter_ClassHistory) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreEncounter_ClassHistory) GetClassValue() *datatypes_go_proto.Coding {
	if x != nil {
		return x.ClassValue
	}
	return nil
}

func (x *UsCoreEncounter_ClassHistory) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// List of participants involved in the encounter
type UsCoreEncounter_Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Role of participant in encounter
	Type []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,rep,name=type,proto3" json:"type,omitempty"`
	// Period of time during the encounter that the participant participated
	Period *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
	// Persons involved in the encounter other than the patient
	Individual *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=individual,proto3" json:"individual,omitempty"`
}

func (x *UsCoreEncounter_Participant) Reset() {
	*x = UsCoreEncounter_Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreEncounter_Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreEncounter_Participant) ProtoMessage() {}

func (x *UsCoreEncounter_Participant) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreEncounter_Participant.ProtoReflect.Descriptor instead.
func (*UsCoreEncounter_Participant) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{9, 2}
}

func (x *UsCoreEncounter_Participant) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreEncounter_Participant) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreEncounter_Participant) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreEncounter_Participant) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *UsCoreEncounter_Participant) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *UsCoreEncounter_Participant) GetIndividual() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Individual
	}
	return nil
}

// The list of diagnosis relevant to this encounter
type UsCoreEncounter_Diagnosis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Reason the encounter takes place (resource)
	Condition *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`
	// Role that this diagnosis has within the encounter (e.g. admission,
	// billing, discharge …)
	Role *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
	// Ranking of the diagnosis (for each role type)
	Rank *datatypes_go_proto.PositiveInt `protobuf:"bytes,6,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (x *UsCoreEncounter_Diagnosis) Reset() {
	*x = UsCoreEncounter_Diagnosis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreEncounter_Diagnosis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreEncounter_Diagnosis) ProtoMessage() {}

func (x *UsCoreEncounter_Diagnosis) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreEncounter_Diagnosis.ProtoReflect.Descriptor instead.
func (*UsCoreEncounter_Diagnosis) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{9, 3}
}

func (x *UsCoreEncounter_Diagnosis) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreEncounter_Diagnosis) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreEncounter_Diagnosis) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreEncounter_Diagnosis) GetCondition() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *UsCoreEncounter_Diagnosis) GetRole() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *UsCoreEncounter_Diagnosis) GetRank() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Rank
	}
	return nil
}

// Details about the admission to a healthcare service
type UsCoreEncounter_Hospitalization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Pre-admission identifier
	PreAdmissionIdentifier *datatypes_go_proto.Identifier `protobuf:"bytes,4,opt,name=pre_admission_identifier,json=preAdmissionIdentifier,proto3" json:"pre_admission_identifier,omitempty"`
	// The location from which the patient came before admission
	Origin *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=origin,proto3" json:"origin,omitempty"`
	// From where patient was admitted (physician referral, transfer)
	AdmitSource *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=admit_source,json=admitSource,proto3" json:"admit_source,omitempty"`
	// The type of hospital re-admission that has occurred (if any). If the
	// value is absent, then this is not identified as a readmission
	ReAdmission *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=re_admission,json=reAdmission,proto3" json:"re_admission,omitempty"`
	// Diet preferences reported by the patient
	DietPreference []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,rep,name=diet_preference,json=dietPreference,proto3" json:"diet_preference,omitempty"`
	// Special courtesies (VIP, board member)
	SpecialCourtesy []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,rep,name=special_courtesy,json=specialCourtesy,proto3" json:"special_courtesy,omitempty"`
	// Wheelchair, translator, stretcher, etc.
	SpecialArrangement []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,rep,name=special_arrangement,json=specialArrangement,proto3" json:"special_arrangement,omitempty"`
	// Location to which the patient is discharged
	Destination *datatypes_go_proto.Reference `protobuf:"bytes,11,opt,name=destination,proto3" json:"destination,omitempty"`
	// Category or kind of location after discharge
	DischargeDisposition *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=discharge_disposition,json=dischargeDisposition,proto3" json:"discharge_disposition,omitempty"`
}

func (x *UsCoreEncounter_Hospitalization) Reset() {
	*x = UsCoreEncounter_Hospitalization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreEncounter_Hospitalization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreEncounter_Hospitalization) ProtoMessage() {}

func (x *UsCoreEncounter_Hospitalization) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreEncounter_Hospitalization.ProtoReflect.Descriptor instead.
func (*UsCoreEncounter_Hospitalization) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{9, 4}
}

func (x *UsCoreEncounter_Hospitalization) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreEncounter_Hospitalization) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreEncounter_Hospitalization) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreEncounter_Hospitalization) GetPreAdmissionIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.PreAdmissionIdentifier
	}
	return nil
}

func (x *UsCoreEncounter_Hospitalization) GetOrigin() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *UsCoreEncounter_Hospitalization) GetAdmitSource() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AdmitSource
	}
	return nil
}

func (x *UsCoreEncounter_Hospitalization) GetReAdmission() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReAdmission
	}
	return nil
}

func (x *UsCoreEncounter_Hospitalization) GetDietPreference() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DietPreference
	}
	return nil
}

func (x *UsCoreEncounter_Hospitalization) GetSpecialCourtesy() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SpecialCourtesy
	}
	return nil
}

func (x *UsCoreEncounter_Hospitalization) GetSpecialArrangement() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SpecialArrangement
	}
	return nil
}

func (x *UsCoreEncounter_Hospitalization) GetDestination() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *UsCoreEncounter_Hospitalization) GetDischargeDisposition() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DischargeDisposition
	}
	return nil
}

// List of locations where the patient has been
type UsCoreEncounter_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Location the encounter takes place
	Location *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	// planned | active | reserved | completed
	Status *codes_go_proto.EncounterLocationStatusCode `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// Time period during which the patient was present at the location
	Period *datatypes_go_proto.Period `protobuf:"bytes,6,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *UsCoreEncounter_Location) Reset() {
	*x = UsCoreEncounter_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreEncounter_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreEncounter_Location) ProtoMessage() {}

func (x *UsCoreEncounter_Location) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreEncounter_Location.ProtoReflect.Descriptor instead.
func (*UsCoreEncounter_Location) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{9, 5}
}

func (x *UsCoreEncounter_Location) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreEncounter_Location) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreEncounter_Location) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreEncounter_Location) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *UsCoreEncounter_Location) GetStatus() *codes_go_proto.EncounterLocationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UsCoreEncounter_Location) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// When goal pursuit begins
type UsCoreGoal_Start struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Start:
	//	*UsCoreGoal_Start_Date
	//	*UsCoreGoal_Start_CodeableConcept
	Start isUsCoreGoal_Start_Start `protobuf_oneof:"start"`
}

func (x *UsCoreGoal_Start) Reset() {
	*x = UsCoreGoal_Start{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreGoal_Start) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreGoal_Start) ProtoMessage() {}

func (x *UsCoreGoal_Start) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreGoal_Start.ProtoReflect.Descriptor instead.
func (*UsCoreGoal_Start) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{11, 0}
}

func (m *UsCoreGoal_Start) GetStart() isUsCoreGoal_Start_Start {
	if m != nil {
		return m.Start
	}
	return nil
}

func (x *UsCoreGoal_Start) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetStart().(*UsCoreGoal_Start_Date); ok {
		return x.Date
	}
	return nil
}

func (x *UsCoreGoal_Start) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetStart().(*UsCoreGoal_Start_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isUsCoreGoal_Start_Start interface {
	isUsCoreGoal_Start_Start()
}

type UsCoreGoal_Start_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type UsCoreGoal_Start_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*UsCoreGoal_Start_Date) isUsCoreGoal_Start_Start() {}

func (*UsCoreGoal_Start_CodeableConcept) isUsCoreGoal_Start_Start() {}

// Target outcome for the goal
type UsCoreGoal_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The parameter whose value is being tracked
	Measure *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=measure,proto3" json:"measure,omitempty"`
	Detail  *UsCoreGoal_Target_Detail           `protobuf:"bytes,5,opt,name=detail,proto3" json:"detail,omitempty"`
	Due     *UsCoreGoal_Target_Due              `protobuf:"bytes,6,opt,name=due,proto3" json:"due,omitempty"`
}

func (x *UsCoreGoal_Target) Reset() {
	*x = UsCoreGoal_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreGoal_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreGoal_Target) ProtoMessage() {}

func (x *UsCoreGoal_Target) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreGoal_Target.ProtoReflect.Descriptor instead.
func (*UsCoreGoal_Target) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{11, 1}
}

func (x *UsCoreGoal_Target) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreGoal_Target) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreGoal_Target) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreGoal_Target) GetMeasure() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Measure
	}
	return nil
}

func (x *UsCoreGoal_Target) GetDetail() *UsCoreGoal_Target_Detail {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *UsCoreGoal_Target) GetDue() *UsCoreGoal_Target_Due {
	if x != nil {
		return x.Due
	}
	return nil
}

// The target value to be achieved
type UsCoreGoal_Target_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Detail:
	//	*UsCoreGoal_Target_Detail_Quantity
	//	*UsCoreGoal_Target_Detail_Range
	//	*UsCoreGoal_Target_Detail_CodeableConcept
	Detail isUsCoreGoal_Target_Detail_Detail `protobuf_oneof:"detail"`
}

func (x *UsCoreGoal_Target_Detail) Reset() {
	*x = UsCoreGoal_Target_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreGoal_Target_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreGoal_Target_Detail) ProtoMessage() {}

func (x *UsCoreGoal_Target_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreGoal_Target_Detail.ProtoReflect.Descriptor instead.
func (*UsCoreGoal_Target_Detail) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{11, 1, 0}
}

func (m *UsCoreGoal_Target_Detail) GetDetail() isUsCoreGoal_Target_Detail_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *UsCoreGoal_Target_Detail) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetDetail().(*UsCoreGoal_Target_Detail_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *UsCoreGoal_Target_Detail) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetDetail().(*UsCoreGoal_Target_Detail_Range); ok {
		return x.Range
	}
	return nil
}

func (x *UsCoreGoal_Target_Detail) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetDetail().(*UsCoreGoal_Target_Detail_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isUsCoreGoal_Target_Detail_Detail interface {
	isUsCoreGoal_Target_Detail_Detail()
}

type UsCoreGoal_Target_Detail_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type UsCoreGoal_Target_Detail_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

type UsCoreGoal_Target_Detail_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*UsCoreGoal_Target_Detail_Quantity) isUsCoreGoal_Target_Detail_Detail() {}

func (*UsCoreGoal_Target_Detail_Range) isUsCoreGoal_Target_Detail_Detail() {}

func (*UsCoreGoal_Target_Detail_CodeableConcept) isUsCoreGoal_Target_Detail_Detail() {}

// Reach goal on or before
type UsCoreGoal_Target_Due struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Due:
	//	*UsCoreGoal_Target_Due_Date
	//	*UsCoreGoal_Target_Due_Duration
	Due isUsCoreGoal_Target_Due_Due `protobuf_oneof:"due"`
}

func (x *UsCoreGoal_Target_Due) Reset() {
	*x = UsCoreGoal_Target_Due{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreGoal_Target_Due) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreGoal_Target_Due) ProtoMessage() {}

func (x *UsCoreGoal_Target_Due) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreGoal_Target_Due.ProtoReflect.Descriptor instead.
func (*UsCoreGoal_Target_Due) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{11, 1, 1}
}

func (m *UsCoreGoal_Target_Due) GetDue() isUsCoreGoal_Target_Due_Due {
	if m != nil {
		return m.Due
	}
	return nil
}

func (x *UsCoreGoal_Target_Due) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetDue().(*UsCoreGoal_Target_Due_Date); ok {
		return x.Date
	}
	return nil
}

func (x *UsCoreGoal_Target_Due) GetDuration() *datatypes_go_proto.Duration {
	if x, ok := x.GetDue().(*UsCoreGoal_Target_Due_Duration); ok {
		return x.Duration
	}
	return nil
}

type isUsCoreGoal_Target_Due_Due interface {
	isUsCoreGoal_Target_Due_Due()
}

type UsCoreGoal_Target_Due_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type UsCoreGoal_Target_Due_Duration struct {
	Duration *datatypes_go_proto.Duration `protobuf:"bytes,2,opt,name=duration,proto3,oneof"`
}

func (*UsCoreGoal_Target_Due_Date) isUsCoreGoal_Target_Due_Due() {}

func (*UsCoreGoal_Target_Due_Duration) isUsCoreGoal_Target_Due_Due() {}

// Who performed event
type UsCoreImmunization_Practitioner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// What type of performance was done
	Role *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	// Individual who was performing
	Actor *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=actor,proto3" json:"actor,omitempty"`
}

func (x *UsCoreImmunization_Practitioner) Reset() {
	*x = UsCoreImmunization_Practitioner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreImmunization_Practitioner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreImmunization_Practitioner) ProtoMessage() {}

func (x *UsCoreImmunization_Practitioner) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreImmunization_Practitioner.ProtoReflect.Descriptor instead.
func (*UsCoreImmunization_Practitioner) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{12, 0}
}

func (x *UsCoreImmunization_Practitioner) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreImmunization_Practitioner) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreImmunization_Practitioner) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreImmunization_Practitioner) GetRole() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *UsCoreImmunization_Practitioner) GetActor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Actor
	}
	return nil
}

// Administration/non-administration reasons
type UsCoreImmunization_Explanation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Why immunization occurred
	Reason []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,rep,name=reason,proto3" json:"reason,omitempty"`
	// Why immunization did not occur
	ReasonNotGiven []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,rep,name=reason_not_given,json=reasonNotGiven,proto3" json:"reason_not_given,omitempty"`
}

func (x *UsCoreImmunization_Explanation) Reset() {
	*x = UsCoreImmunization_Explanation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreImmunization_Explanation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreImmunization_Explanation) ProtoMessage() {}

func (x *UsCoreImmunization_Explanation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreImmunization_Explanation.ProtoReflect.Descriptor instead.
func (*UsCoreImmunization_Explanation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{12, 1}
}

func (x *UsCoreImmunization_Explanation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreImmunization_Explanation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreImmunization_Explanation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreImmunization_Explanation) GetReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *UsCoreImmunization_Explanation) GetReasonNotGiven() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonNotGiven
	}
	return nil
}

// Details of a reaction that follows immunization
type UsCoreImmunization_Reaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// When reaction started
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	// Additional information on reaction
	Detail *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=detail,proto3" json:"detail,omitempty"`
	// Indicates self-reported reaction
	Reported *datatypes_go_proto.Boolean `protobuf:"bytes,6,opt,name=reported,proto3" json:"reported,omitempty"`
}

func (x *UsCoreImmunization_Reaction) Reset() {
	*x = UsCoreImmunization_Reaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreImmunization_Reaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreImmunization_Reaction) ProtoMessage() {}

func (x *UsCoreImmunization_Reaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreImmunization_Reaction.ProtoReflect.Descriptor instead.
func (*UsCoreImmunization_Reaction) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{12, 2}
}

func (x *UsCoreImmunization_Reaction) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreImmunization_Reaction) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreImmunization_Reaction) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreImmunization_Reaction) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *UsCoreImmunization_Reaction) GetDetail() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *UsCoreImmunization_Reaction) GetReported() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Reported
	}
	return nil
}

// What protocol was followed
type UsCoreImmunization_VaccinationProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Dose number within series
	DoseSequence *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=dose_sequence,json=doseSequence,proto3" json:"dose_sequence,omitempty"`
	// Details of vaccine protocol
	Description *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Who is responsible for protocol
	Authority *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=authority,proto3" json:"authority,omitempty"`
	// Name of vaccine series
	Series *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=series,proto3" json:"series,omitempty"`
	// Recommended number of doses for immunity
	SeriesDoses *datatypes_go_proto.PositiveInt `protobuf:"bytes,8,opt,name=series_doses,json=seriesDoses,proto3" json:"series_doses,omitempty"`
	// Disease immunized against
	TargetDisease []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,rep,name=target_disease,json=targetDisease,proto3" json:"target_disease,omitempty"`
	// Indicates if dose counts towards immunity
	DoseStatus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,opt,name=dose_status,json=doseStatus,proto3" json:"dose_status,omitempty"`
	// Why dose does (not) count
	DoseStatusReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=dose_status_reason,json=doseStatusReason,proto3" json:"dose_status_reason,omitempty"`
}

func (x *UsCoreImmunization_VaccinationProtocol) Reset() {
	*x = UsCoreImmunization_VaccinationProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreImmunization_VaccinationProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreImmunization_VaccinationProtocol) ProtoMessage() {}

func (x *UsCoreImmunization_VaccinationProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreImmunization_VaccinationProtocol.ProtoReflect.Descriptor instead.
func (*UsCoreImmunization_VaccinationProtocol) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{12, 3}
}

func (x *UsCoreImmunization_VaccinationProtocol) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreImmunization_VaccinationProtocol) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreImmunization_VaccinationProtocol) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreImmunization_VaccinationProtocol) GetDoseSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.DoseSequence
	}
	return nil
}

func (x *UsCoreImmunization_VaccinationProtocol) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UsCoreImmunization_VaccinationProtocol) GetAuthority() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *UsCoreImmunization_VaccinationProtocol) GetSeries() *datatypes_go_proto.String {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *UsCoreImmunization_VaccinationProtocol) GetSeriesDoses() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.SeriesDoses
	}
	return nil
}

func (x *UsCoreImmunization_VaccinationProtocol) GetTargetDisease() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.TargetDisease
	}
	return nil
}

func (x *UsCoreImmunization_VaccinationProtocol) GetDoseStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DoseStatus
	}
	return nil
}

func (x *UsCoreImmunization_VaccinationProtocol) GetDoseStatusReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DoseStatusReason
	}
	return nil
}

// The absolute geographic location
type UsCoreLocation_Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Longitude with WGS84 datum
	Longitude *datatypes_go_proto.Decimal `protobuf:"bytes,4,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// Latitude with WGS84 datum
	Latitude *datatypes_go_proto.Decimal `protobuf:"bytes,5,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// Altitude with WGS84 datum
	Altitude *datatypes_go_proto.Decimal `protobuf:"bytes,6,opt,name=altitude,proto3" json:"altitude,omitempty"`
}

func (x *UsCoreLocation_Position) Reset() {
	*x = UsCoreLocation_Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreLocation_Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreLocation_Position) ProtoMessage() {}

func (x *UsCoreLocation_Position) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreLocation_Position.ProtoReflect.Descriptor instead.
func (*UsCoreLocation_Position) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{13, 0}
}

func (x *UsCoreLocation_Position) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreLocation_Position) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreLocation_Position) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreLocation_Position) GetLongitude() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Longitude
	}
	return nil
}

func (x *UsCoreLocation_Position) GetLatitude() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Latitude
	}
	return nil
}

func (x *UsCoreLocation_Position) GetAltitude() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Altitude
	}
	return nil
}

// Active or inactive ingredient
type UsCoreMedication_Ingredient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Item              *UsCoreMedication_Ingredient_Item `protobuf:"bytes,4,opt,name=item,proto3" json:"item,omitempty"`
	// Active ingredient indicator
	IsActive *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// Quantity of ingredient present
	Amount *datatypes_go_proto.Ratio `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *UsCoreMedication_Ingredient) Reset() {
	*x = UsCoreMedication_Ingredient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreMedication_Ingredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreMedication_Ingredient) ProtoMessage() {}

func (x *UsCoreMedication_Ingredient) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreMedication_Ingredient.ProtoReflect.Descriptor instead.
func (*UsCoreMedication_Ingredient) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{14, 0}
}

func (x *UsCoreMedication_Ingredient) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreMedication_Ingredient) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreMedication_Ingredient) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreMedication_Ingredient) GetItem() *UsCoreMedication_Ingredient_Item {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *UsCoreMedication_Ingredient) GetIsActive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.IsActive
	}
	return nil
}

func (x *UsCoreMedication_Ingredient) GetAmount() *datatypes_go_proto.Ratio {
	if x != nil {
		return x.Amount
	}
	return nil
}

// Details about packaged medications
type UsCoreMedication_Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// E.g. box, vial, blister-pack
	Container *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=container,proto3" json:"container,omitempty"`
	Content   []*UsCoreMedication_Package_Content `protobuf:"bytes,5,rep,name=content,proto3" json:"content,omitempty"`
	Batch     []*UsCoreMedication_Package_Batch   `protobuf:"bytes,6,rep,name=batch,proto3" json:"batch,omitempty"`
}

func (x *UsCoreMedication_Package) Reset() {
	*x = UsCoreMedication_Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreMedication_Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreMedication_Package) ProtoMessage() {}

func (x *UsCoreMedication_Package) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreMedication_Package.ProtoReflect.Descriptor instead.
func (*UsCoreMedication_Package) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{14, 1}
}

func (x *UsCoreMedication_Package) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreMedication_Package) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreMedication_Package) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreMedication_Package) GetContainer() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *UsCoreMedication_Package) GetContent() []*UsCoreMedication_Package_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *UsCoreMedication_Package) GetBatch() []*UsCoreMedication_Package_Batch {
	if x != nil {
		return x.Batch
	}
	return nil
}

// The product contained
type UsCoreMedication_Ingredient_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Item:
	//	*UsCoreMedication_Ingredient_Item_CodeableConcept
	//	*UsCoreMedication_Ingredient_Item_Reference
	Item isUsCoreMedication_Ingredient_Item_Item `protobuf_oneof:"item"`
}

func (x *UsCoreMedication_Ingredient_Item) Reset() {
	*x = UsCoreMedication_Ingredient_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreMedication_Ingredient_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreMedication_Ingredient_Item) ProtoMessage() {}

func (x *UsCoreMedication_Ingredient_Item) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreMedication_Ingredient_Item.ProtoReflect.Descriptor instead.
func (*UsCoreMedication_Ingredient_Item) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{14, 0, 0}
}

func (m *UsCoreMedication_Ingredient_Item) GetItem() isUsCoreMedication_Ingredient_Item_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (x *UsCoreMedication_Ingredient_Item) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetItem().(*UsCoreMedication_Ingredient_Item_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *UsCoreMedication_Ingredient_Item) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetItem().(*UsCoreMedication_Ingredient_Item_Reference); ok {
		return x.Reference
	}
	return nil
}

type isUsCoreMedication_Ingredient_Item_Item interface {
	isUsCoreMedication_Ingredient_Item_Item()
}

type UsCoreMedication_Ingredient_Item_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type UsCoreMedication_Ingredient_Item_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*UsCoreMedication_Ingredient_Item_CodeableConcept) isUsCoreMedication_Ingredient_Item_Item() {}

func (*UsCoreMedication_Ingredient_Item_Reference) isUsCoreMedication_Ingredient_Item_Item() {}

// What is  in the package
type UsCoreMedication_Package_Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension        `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Item              *UsCoreMedication_Package_Content_Item `protobuf:"bytes,4,opt,name=item,proto3" json:"item,omitempty"`
	// Quantity present in the package
	Amount *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *UsCoreMedication_Package_Content) Reset() {
	*x = UsCoreMedication_Package_Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreMedication_Package_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreMedication_Package_Content) ProtoMessage() {}

func (x *UsCoreMedication_Package_Content) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreMedication_Package_Content.ProtoReflect.Descriptor instead.
func (*UsCoreMedication_Package_Content) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{14, 1, 0}
}

func (x *UsCoreMedication_Package_Content) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreMedication_Package_Content) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreMedication_Package_Content) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreMedication_Package_Content) GetItem() *UsCoreMedication_Package_Content_Item {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *UsCoreMedication_Package_Content) GetAmount() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Amount
	}
	return nil
}

// Identifies a single production run
type UsCoreMedication_Package_Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifier assigned to batch
	LotNumber *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=lot_number,json=lotNumber,proto3" json:"lot_number,omitempty"`
	// When batch will expire
	ExpirationDate *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
}

func (x *UsCoreMedication_Package_Batch) Reset() {
	*x = UsCoreMedication_Package_Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreMedication_Package_Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreMedication_Package_Batch) ProtoMessage() {}

func (x *UsCoreMedication_Package_Batch) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreMedication_Package_Batch.ProtoReflect.Descriptor instead.
func (*UsCoreMedication_Package_Batch) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{14, 1, 1}
}

func (x *UsCoreMedication_Package_Batch) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreMedication_Package_Batch) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreMedication_Package_Batch) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreMedication_Package_Batch) GetLotNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.LotNumber
	}
	return nil
}

func (x *UsCoreMedication_Package_Batch) GetExpirationDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

// The item in the package
type UsCoreMedication_Package_Content_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Item:
	//	*UsCoreMedication_Package_Content_Item_CodeableConcept
	//	*UsCoreMedication_Package_Content_Item_Reference
	Item isUsCoreMedication_Package_Content_Item_Item `protobuf_oneof:"item"`
}

func (x *UsCoreMedication_Package_Content_Item) Reset() {
	*x = UsCoreMedication_Package_Content_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreMedication_Package_Content_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreMedication_Package_Content_Item) ProtoMessage() {}

func (x *UsCoreMedication_Package_Content_Item) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreMedication_Package_Content_Item.ProtoReflect.Descriptor instead.
func (*UsCoreMedication_Package_Content_Item) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{14, 1, 0, 0}
}

func (m *UsCoreMedication_Package_Content_Item) GetItem() isUsCoreMedication_Package_Content_Item_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (x *UsCoreMedication_Package_Content_Item) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetItem().(*UsCoreMedication_Package_Content_Item_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *UsCoreMedication_Package_Content_Item) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetItem().(*UsCoreMedication_Package_Content_Item_Reference); ok {
		return x.Reference
	}
	return nil
}

type isUsCoreMedication_Package_Content_Item_Item interface {
	isUsCoreMedication_Package_Content_Item_Item()
}

type UsCoreMedication_Package_Content_Item_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type UsCoreMedication_Package_Content_Item_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*UsCoreMedication_Package_Content_Item_CodeableConcept) isUsCoreMedication_Package_Content_Item_Item() {
}

func (*UsCoreMedication_Package_Content_Item_Reference) isUsCoreMedication_Package_Content_Item_Item() {
}

// Medication to be taken
type UsCoreMedicationrequest_Medication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Medication:
	//	*UsCoreMedicationrequest_Medication_CodeableConcept
	//	*UsCoreMedicationrequest_Medication_Reference
	Medication isUsCoreMedicationrequest_Medication_Medication `protobuf_oneof:"medication"`
}

func (x *UsCoreMedicationrequest_Medication) Reset() {
	*x = UsCoreMedicationrequest_Medication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreMedicationrequest_Medication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreMedicationrequest_Medication) ProtoMessage() {}

func (x *UsCoreMedicationrequest_Medication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreMedicationrequest_Medication.ProtoReflect.Descriptor instead.
func (*UsCoreMedicationrequest_Medication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{15, 0}
}

func (m *UsCoreMedicationrequest_Medication) GetMedication() isUsCoreMedicationrequest_Medication_Medication {
	if m != nil {
		return m.Medication
	}
	return nil
}

func (x *UsCoreMedicationrequest_Medication) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetMedication().(*UsCoreMedicationrequest_Medication_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *UsCoreMedicationrequest_Medication) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetMedication().(*UsCoreMedicationrequest_Medication_Reference); ok {
		return x.Reference
	}
	return nil
}

type isUsCoreMedicationrequest_Medication_Medication interface {
	isUsCoreMedicationrequest_Medication_Medication()
}

type UsCoreMedicationrequest_Medication_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type UsCoreMedicationrequest_Medication_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*UsCoreMedicationrequest_Medication_CodeableConcept) isUsCoreMedicationrequest_Medication_Medication() {
}

func (*UsCoreMedicationrequest_Medication_Reference) isUsCoreMedicationrequest_Medication_Medication() {
}

// Who/What requested the Request
type UsCoreMedicationrequest_Requester struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Who ordered the initial medication(s)
	Agent *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=agent,proto3" json:"agent,omitempty"`
	// Organization agent is acting for
	OnBehalfOf *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=on_behalf_of,json=onBehalfOf,proto3" json:"on_behalf_of,omitempty"`
}

func (x *UsCoreMedicationrequest_Requester) Reset() {
	*x = UsCoreMedicationrequest_Requester{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreMedicationrequest_Requester) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreMedicationrequest_Requester) ProtoMessage() {}

func (x *UsCoreMedicationrequest_Requester) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreMedicationrequest_Requester.ProtoReflect.Descriptor instead.
func (*UsCoreMedicationrequest_Requester) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{15, 1}
}

func (x *UsCoreMedicationrequest_Requester) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreMedicationrequest_Requester) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreMedicationrequest_Requester) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreMedicationrequest_Requester) GetAgent() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *UsCoreMedicationrequest_Requester) GetOnBehalfOf() *datatypes_go_proto.Reference {
	if x != nil {
		return x.OnBehalfOf
	}
	return nil
}

// Medication supply authorization
type UsCoreMedicationrequest_DispenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Time period supply is authorized for
	ValidityPeriod *datatypes_go_proto.Period `protobuf:"bytes,4,opt,name=validity_period,json=validityPeriod,proto3" json:"validity_period,omitempty"`
	// Number of refills authorized
	NumberOfRepeatsAllowed *datatypes_go_proto.PositiveInt `protobuf:"bytes,5,opt,name=number_of_repeats_allowed,json=numberOfRepeatsAllowed,proto3" json:"number_of_repeats_allowed,omitempty"`
	// Amount of medication to supply per dispense
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Number of days supply per dispense
	ExpectedSupplyDuration *datatypes_go_proto.Duration `protobuf:"bytes,7,opt,name=expected_supply_duration,json=expectedSupplyDuration,proto3" json:"expected_supply_duration,omitempty"`
	// Intended dispenser
	Performer *datatypes_go_proto.Reference `protobuf:"bytes,8,opt,name=performer,proto3" json:"performer,omitempty"`
}

func (x *UsCoreMedicationrequest_DispenseRequest) Reset() {
	*x = UsCoreMedicationrequest_DispenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreMedicationrequest_DispenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreMedicationrequest_DispenseRequest) ProtoMessage() {}

func (x *UsCoreMedicationrequest_DispenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreMedicationrequest_DispenseRequest.ProtoReflect.Descriptor instead.
func (*UsCoreMedicationrequest_DispenseRequest) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{15, 2}
}

func (x *UsCoreMedicationrequest_DispenseRequest) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreMedicationrequest_DispenseRequest) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreMedicationrequest_DispenseRequest) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreMedicationrequest_DispenseRequest) GetValidityPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.ValidityPeriod
	}
	return nil
}

func (x *UsCoreMedicationrequest_DispenseRequest) GetNumberOfRepeatsAllowed() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.NumberOfRepeatsAllowed
	}
	return nil
}

func (x *UsCoreMedicationrequest_DispenseRequest) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *UsCoreMedicationrequest_DispenseRequest) GetExpectedSupplyDuration() *datatypes_go_proto.Duration {
	if x != nil {
		return x.ExpectedSupplyDuration
	}
	return nil
}

func (x *UsCoreMedicationrequest_DispenseRequest) GetPerformer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

// Any restrictions on medication substitution
type UsCoreMedicationrequest_Substitution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Whether substitution is allowed or not
	Allowed *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=allowed,proto3" json:"allowed,omitempty"`
	// Why should (not) substitution be made
	Reason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *UsCoreMedicationrequest_Substitution) Reset() {
	*x = UsCoreMedicationrequest_Substitution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreMedicationrequest_Substitution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreMedicationrequest_Substitution) ProtoMessage() {}

func (x *UsCoreMedicationrequest_Substitution) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreMedicationrequest_Substitution.ProtoReflect.Descriptor instead.
func (*UsCoreMedicationrequest_Substitution) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{15, 3}
}

func (x *UsCoreMedicationrequest_Substitution) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreMedicationrequest_Substitution) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreMedicationrequest_Substitution) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreMedicationrequest_Substitution) GetAllowed() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Allowed
	}
	return nil
}

func (x *UsCoreMedicationrequest_Substitution) GetReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Reason
	}
	return nil
}

// What medication was taken
type UsCoreMedicationstatement_Medication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Medication:
	//	*UsCoreMedicationstatement_Medication_CodeableConcept
	//	*UsCoreMedicationstatement_Medication_Reference
	Medication isUsCoreMedicationstatement_Medication_Medication `protobuf_oneof:"medication"`
}

func (x *UsCoreMedicationstatement_Medication) Reset() {
	*x = UsCoreMedicationstatement_Medication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreMedicationstatement_Medication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreMedicationstatement_Medication) ProtoMessage() {}

func (x *UsCoreMedicationstatement_Medication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreMedicationstatement_Medication.ProtoReflect.Descriptor instead.
func (*UsCoreMedicationstatement_Medication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{16, 0}
}

func (m *UsCoreMedicationstatement_Medication) GetMedication() isUsCoreMedicationstatement_Medication_Medication {
	if m != nil {
		return m.Medication
	}
	return nil
}

func (x *UsCoreMedicationstatement_Medication) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetMedication().(*UsCoreMedicationstatement_Medication_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *UsCoreMedicationstatement_Medication) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetMedication().(*UsCoreMedicationstatement_Medication_Reference); ok {
		return x.Reference
	}
	return nil
}

type isUsCoreMedicationstatement_Medication_Medication interface {
	isUsCoreMedicationstatement_Medication_Medication()
}

type UsCoreMedicationstatement_Medication_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type UsCoreMedicationstatement_Medication_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*UsCoreMedicationstatement_Medication_CodeableConcept) isUsCoreMedicationstatement_Medication_Medication() {
}

func (*UsCoreMedicationstatement_Medication_Reference) isUsCoreMedicationstatement_Medication_Medication() {
}

// The date/time or interval when the medication was taken
type UsCoreMedicationstatement_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*UsCoreMedicationstatement_Effective_DateTime
	//	*UsCoreMedicationstatement_Effective_Period
	Effective isUsCoreMedicationstatement_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *UsCoreMedicationstatement_Effective) Reset() {
	*x = UsCoreMedicationstatement_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreMedicationstatement_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreMedicationstatement_Effective) ProtoMessage() {}

func (x *UsCoreMedicationstatement_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreMedicationstatement_Effective.ProtoReflect.Descriptor instead.
func (*UsCoreMedicationstatement_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{16, 1}
}

func (m *UsCoreMedicationstatement_Effective) GetEffective() isUsCoreMedicationstatement_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *UsCoreMedicationstatement_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*UsCoreMedicationstatement_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *UsCoreMedicationstatement_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*UsCoreMedicationstatement_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isUsCoreMedicationstatement_Effective_Effective interface {
	isUsCoreMedicationstatement_Effective_Effective()
}

type UsCoreMedicationstatement_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type UsCoreMedicationstatement_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*UsCoreMedicationstatement_Effective_DateTime) isUsCoreMedicationstatement_Effective_Effective() {
}

func (*UsCoreMedicationstatement_Effective_Period) isUsCoreMedicationstatement_Effective_Effective() {
}

// Clinically relevant time/time-period for observation
type UsCoreObservationresults_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*UsCoreObservationresults_Effective_DateTime
	//	*UsCoreObservationresults_Effective_Period
	Effective isUsCoreObservationresults_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *UsCoreObservationresults_Effective) Reset() {
	*x = UsCoreObservationresults_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreObservationresults_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreObservationresults_Effective) ProtoMessage() {}

func (x *UsCoreObservationresults_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreObservationresults_Effective.ProtoReflect.Descriptor instead.
func (*UsCoreObservationresults_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{17, 0}
}

func (m *UsCoreObservationresults_Effective) GetEffective() isUsCoreObservationresults_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *UsCoreObservationresults_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*UsCoreObservationresults_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *UsCoreObservationresults_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*UsCoreObservationresults_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isUsCoreObservationresults_Effective_Effective interface {
	isUsCoreObservationresults_Effective_Effective()
}

type UsCoreObservationresults_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type UsCoreObservationresults_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*UsCoreObservationresults_Effective_DateTime) isUsCoreObservationresults_Effective_Effective() {
}

func (*UsCoreObservationresults_Effective_Period) isUsCoreObservationresults_Effective_Effective() {}

// Result Value
type UsCoreObservationresults_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*UsCoreObservationresults_Value_Quantity
	//	*UsCoreObservationresults_Value_CodeableConcept
	//	*UsCoreObservationresults_Value_StringValue
	//	*UsCoreObservationresults_Value_Boolean
	//	*UsCoreObservationresults_Value_Range
	//	*UsCoreObservationresults_Value_Ratio
	//	*UsCoreObservationresults_Value_SampledData
	//	*UsCoreObservationresults_Value_Attachment
	//	*UsCoreObservationresults_Value_Time
	//	*UsCoreObservationresults_Value_DateTime
	//	*UsCoreObservationresults_Value_Period
	Value isUsCoreObservationresults_Value_Value `protobuf_oneof:"value"`
}

func (x *UsCoreObservationresults_Value) Reset() {
	*x = UsCoreObservationresults_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreObservationresults_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreObservationresults_Value) ProtoMessage() {}

func (x *UsCoreObservationresults_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreObservationresults_Value.ProtoReflect.Descriptor instead.
func (*UsCoreObservationresults_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{17, 1}
}

func (m *UsCoreObservationresults_Value) GetValue() isUsCoreObservationresults_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *UsCoreObservationresults_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*UsCoreObservationresults_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *UsCoreObservationresults_Value) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetValue().(*UsCoreObservationresults_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *UsCoreObservationresults_Value) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetValue().(*UsCoreObservationresults_Value_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *UsCoreObservationresults_Value) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetValue().(*UsCoreObservationresults_Value_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *UsCoreObservationresults_Value) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetValue().(*UsCoreObservationresults_Value_Range); ok {
		return x.Range
	}
	return nil
}

func (x *UsCoreObservationresults_Value) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetValue().(*UsCoreObservationresults_Value_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *UsCoreObservationresults_Value) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetValue().(*UsCoreObservationresults_Value_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *UsCoreObservationresults_Value) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetValue().(*UsCoreObservationresults_Value_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *UsCoreObservationresults_Value) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetValue().(*UsCoreObservationresults_Value_Time); ok {
		return x.Time
	}
	return nil
}

func (x *UsCoreObservationresults_Value) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetValue().(*UsCoreObservationresults_Value_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *UsCoreObservationresults_Value) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetValue().(*UsCoreObservationresults_Value_Period); ok {
		return x.Period
	}
	return nil
}

type isUsCoreObservationresults_Value_Value interface {
	isUsCoreObservationresults_Value_Value()
}

type UsCoreObservationresults_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type UsCoreObservationresults_Value_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type UsCoreObservationresults_Value_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type UsCoreObservationresults_Value_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=boolean,proto3,oneof"`
}

type UsCoreObservationresults_Value_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,5,opt,name=range,proto3,oneof"`
}

type UsCoreObservationresults_Value_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,6,opt,name=ratio,proto3,oneof"`
}

type UsCoreObservationresults_Value_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,7,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type UsCoreObservationresults_Value_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,8,opt,name=attachment,proto3,oneof"`
}

type UsCoreObservationresults_Value_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,9,opt,name=time,proto3,oneof"`
}

type UsCoreObservationresults_Value_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,10,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type UsCoreObservationresults_Value_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,11,opt,name=period,proto3,oneof"`
}

func (*UsCoreObservationresults_Value_Quantity) isUsCoreObservationresults_Value_Value() {}

func (*UsCoreObservationresults_Value_CodeableConcept) isUsCoreObservationresults_Value_Value() {}

func (*UsCoreObservationresults_Value_StringValue) isUsCoreObservationresults_Value_Value() {}

func (*UsCoreObservationresults_Value_Boolean) isUsCoreObservationresults_Value_Value() {}

func (*UsCoreObservationresults_Value_Range) isUsCoreObservationresults_Value_Value() {}

func (*UsCoreObservationresults_Value_Ratio) isUsCoreObservationresults_Value_Value() {}

func (*UsCoreObservationresults_Value_SampledData) isUsCoreObservationresults_Value_Value() {}

func (*UsCoreObservationresults_Value_Attachment) isUsCoreObservationresults_Value_Value() {}

func (*UsCoreObservationresults_Value_Time) isUsCoreObservationresults_Value_Value() {}

func (*UsCoreObservationresults_Value_DateTime) isUsCoreObservationresults_Value_Value() {}

func (*UsCoreObservationresults_Value_Period) isUsCoreObservationresults_Value_Value() {}

// Provides guide for interpretation
type UsCoreObservationresults_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Low Range, if relevant
	Low *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// High Range, if relevant
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Reference range qualifier
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Reference range population
	AppliesTo []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
	// Applicable age range, if relevant
	Age *datatypes_go_proto.Range `protobuf:"bytes,8,opt,name=age,proto3" json:"age,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *UsCoreObservationresults_ReferenceRange) Reset() {
	*x = UsCoreObservationresults_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreObservationresults_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreObservationresults_ReferenceRange) ProtoMessage() {}

func (x *UsCoreObservationresults_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreObservationresults_ReferenceRange.ProtoReflect.Descriptor instead.
func (*UsCoreObservationresults_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{17, 2}
}

func (x *UsCoreObservationresults_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreObservationresults_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreObservationresults_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreObservationresults_ReferenceRange) GetLow() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *UsCoreObservationresults_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *UsCoreObservationresults_ReferenceRange) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *UsCoreObservationresults_ReferenceRange) GetAppliesTo() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AppliesTo
	}
	return nil
}

func (x *UsCoreObservationresults_ReferenceRange) GetAge() *datatypes_go_proto.Range {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *UsCoreObservationresults_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Resource related to this observation
type UsCoreObservationresults_Related struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// has-member | derived-from | sequel-to | replaces | qualified-by |
	// interfered-by
	Type *codes_go_proto.ObservationRelationshipTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Resource that is related to this one
	Target *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *UsCoreObservationresults_Related) Reset() {
	*x = UsCoreObservationresults_Related{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreObservationresults_Related) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreObservationresults_Related) ProtoMessage() {}

func (x *UsCoreObservationresults_Related) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreObservationresults_Related.ProtoReflect.Descriptor instead.
func (*UsCoreObservationresults_Related) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{17, 3}
}

func (x *UsCoreObservationresults_Related) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreObservationresults_Related) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreObservationresults_Related) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreObservationresults_Related) GetType() *codes_go_proto.ObservationRelationshipTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *UsCoreObservationresults_Related) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

// Component results
type UsCoreObservationresults_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept       `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *UsCoreObservationresults_Component_Value `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*UsCoreObservationresults_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *UsCoreObservationresults_Component) Reset() {
	*x = UsCoreObservationresults_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreObservationresults_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreObservationresults_Component) ProtoMessage() {}

func (x *UsCoreObservationresults_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreObservationresults_Component.ProtoReflect.Descriptor instead.
func (*UsCoreObservationresults_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{17, 4}
}

func (x *UsCoreObservationresults_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreObservationresults_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreObservationresults_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreObservationresults_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *UsCoreObservationresults_Component) GetValue() *UsCoreObservationresults_Component_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UsCoreObservationresults_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *UsCoreObservationresults_Component) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *UsCoreObservationresults_Component) GetReferenceRange() []*UsCoreObservationresults_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Actual component result
type UsCoreObservationresults_Component_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*UsCoreObservationresults_Component_Value_Quantity
	//	*UsCoreObservationresults_Component_Value_CodeableConcept
	//	*UsCoreObservationresults_Component_Value_StringValue
	//	*UsCoreObservationresults_Component_Value_Range
	//	*UsCoreObservationresults_Component_Value_Ratio
	//	*UsCoreObservationresults_Component_Value_SampledData
	//	*UsCoreObservationresults_Component_Value_Attachment
	//	*UsCoreObservationresults_Component_Value_Time
	//	*UsCoreObservationresults_Component_Value_DateTime
	//	*UsCoreObservationresults_Component_Value_Period
	Value isUsCoreObservationresults_Component_Value_Value `protobuf_oneof:"value"`
}

func (x *UsCoreObservationresults_Component_Value) Reset() {
	*x = UsCoreObservationresults_Component_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreObservationresults_Component_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreObservationresults_Component_Value) ProtoMessage() {}

func (x *UsCoreObservationresults_Component_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreObservationresults_Component_Value.ProtoReflect.Descriptor instead.
func (*UsCoreObservationresults_Component_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{17, 4, 0}
}

func (m *UsCoreObservationresults_Component_Value) GetValue() isUsCoreObservationresults_Component_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *UsCoreObservationresults_Component_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*UsCoreObservationresults_Component_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *UsCoreObservationresults_Component_Value) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetValue().(*UsCoreObservationresults_Component_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *UsCoreObservationresults_Component_Value) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetValue().(*UsCoreObservationresults_Component_Value_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *UsCoreObservationresults_Component_Value) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetValue().(*UsCoreObservationresults_Component_Value_Range); ok {
		return x.Range
	}
	return nil
}

func (x *UsCoreObservationresults_Component_Value) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetValue().(*UsCoreObservationresults_Component_Value_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *UsCoreObservationresults_Component_Value) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetValue().(*UsCoreObservationresults_Component_Value_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *UsCoreObservationresults_Component_Value) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetValue().(*UsCoreObservationresults_Component_Value_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *UsCoreObservationresults_Component_Value) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetValue().(*UsCoreObservationresults_Component_Value_Time); ok {
		return x.Time
	}
	return nil
}

func (x *UsCoreObservationresults_Component_Value) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetValue().(*UsCoreObservationresults_Component_Value_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *UsCoreObservationresults_Component_Value) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetValue().(*UsCoreObservationresults_Component_Value_Period); ok {
		return x.Period
	}
	return nil
}

type isUsCoreObservationresults_Component_Value_Value interface {
	isUsCoreObservationresults_Component_Value_Value()
}

type UsCoreObservationresults_Component_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type UsCoreObservationresults_Component_Value_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type UsCoreObservationresults_Component_Value_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type UsCoreObservationresults_Component_Value_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,4,opt,name=range,proto3,oneof"`
}

type UsCoreObservationresults_Component_Value_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,5,opt,name=ratio,proto3,oneof"`
}

type UsCoreObservationresults_Component_Value_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,6,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type UsCoreObservationresults_Component_Value_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,7,opt,name=attachment,proto3,oneof"`
}

type UsCoreObservationresults_Component_Value_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,8,opt,name=time,proto3,oneof"`
}

type UsCoreObservationresults_Component_Value_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,9,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type UsCoreObservationresults_Component_Value_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,10,opt,name=period,proto3,oneof"`
}

func (*UsCoreObservationresults_Component_Value_Quantity) isUsCoreObservationresults_Component_Value_Value() {
}

func (*UsCoreObservationresults_Component_Value_CodeableConcept) isUsCoreObservationresults_Component_Value_Value() {
}

func (*UsCoreObservationresults_Component_Value_StringValue) isUsCoreObservationresults_Component_Value_Value() {
}

func (*UsCoreObservationresults_Component_Value_Range) isUsCoreObservationresults_Component_Value_Value() {
}

func (*UsCoreObservationresults_Component_Value_Ratio) isUsCoreObservationresults_Component_Value_Value() {
}

func (*UsCoreObservationresults_Component_Value_SampledData) isUsCoreObservationresults_Component_Value_Value() {
}

func (*UsCoreObservationresults_Component_Value_Attachment) isUsCoreObservationresults_Component_Value_Value() {
}

func (*UsCoreObservationresults_Component_Value_Time) isUsCoreObservationresults_Component_Value_Value() {
}

func (*UsCoreObservationresults_Component_Value_DateTime) isUsCoreObservationresults_Component_Value_Value() {
}

func (*UsCoreObservationresults_Component_Value_Period) isUsCoreObservationresults_Component_Value_Value() {
}

// Contact for the organization for a certain purpose
type UsCoreOrganization_Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The type of contact
	Purpose *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=purpose,proto3" json:"purpose,omitempty"`
	// A name associated with the contact
	Name *datatypes_go_proto.HumanName `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Contact details (telephone, email, etc.)  for a contact
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,6,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// Visiting or postal addresses for the contact
	Address *datatypes_go_proto.Address `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *UsCoreOrganization_Contact) Reset() {
	*x = UsCoreOrganization_Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreOrganization_Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreOrganization_Contact) ProtoMessage() {}

func (x *UsCoreOrganization_Contact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreOrganization_Contact.ProtoReflect.Descriptor instead.
func (*UsCoreOrganization_Contact) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{18, 0}
}

func (x *UsCoreOrganization_Contact) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreOrganization_Contact) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreOrganization_Contact) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreOrganization_Contact) GetPurpose() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Purpose
	}
	return nil
}

func (x *UsCoreOrganization_Contact) GetName() *datatypes_go_proto.HumanName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UsCoreOrganization_Contact) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *UsCoreOrganization_Contact) GetAddress() *datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

// Indicates if the individual is deceased or not
type UsCorePatient_Deceased struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Deceased:
	//	*UsCorePatient_Deceased_Boolean
	//	*UsCorePatient_Deceased_DateTime
	Deceased isUsCorePatient_Deceased_Deceased `protobuf_oneof:"deceased"`
}

func (x *UsCorePatient_Deceased) Reset() {
	*x = UsCorePatient_Deceased{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCorePatient_Deceased) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCorePatient_Deceased) ProtoMessage() {}

func (x *UsCorePatient_Deceased) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCorePatient_Deceased.ProtoReflect.Descriptor instead.
func (*UsCorePatient_Deceased) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{19, 0}
}

func (m *UsCorePatient_Deceased) GetDeceased() isUsCorePatient_Deceased_Deceased {
	if m != nil {
		return m.Deceased
	}
	return nil
}

func (x *UsCorePatient_Deceased) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetDeceased().(*UsCorePatient_Deceased_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *UsCorePatient_Deceased) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetDeceased().(*UsCorePatient_Deceased_DateTime); ok {
		return x.DateTime
	}
	return nil
}

type isUsCorePatient_Deceased_Deceased interface {
	isUsCorePatient_Deceased_Deceased()
}

type UsCorePatient_Deceased_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type UsCorePatient_Deceased_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3,oneof"`
}

func (*UsCorePatient_Deceased_Boolean) isUsCorePatient_Deceased_Deceased() {}

func (*UsCorePatient_Deceased_DateTime) isUsCorePatient_Deceased_Deceased() {}

// Whether patient is part of a multiple birth
type UsCorePatient_MultipleBirth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MultipleBirth:
	//	*UsCorePatient_MultipleBirth_Boolean
	//	*UsCorePatient_MultipleBirth_Integer
	MultipleBirth isUsCorePatient_MultipleBirth_MultipleBirth `protobuf_oneof:"multiple_birth"`
}

func (x *UsCorePatient_MultipleBirth) Reset() {
	*x = UsCorePatient_MultipleBirth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCorePatient_MultipleBirth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCorePatient_MultipleBirth) ProtoMessage() {}

func (x *UsCorePatient_MultipleBirth) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCorePatient_MultipleBirth.ProtoReflect.Descriptor instead.
func (*UsCorePatient_MultipleBirth) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{19, 1}
}

func (m *UsCorePatient_MultipleBirth) GetMultipleBirth() isUsCorePatient_MultipleBirth_MultipleBirth {
	if m != nil {
		return m.MultipleBirth
	}
	return nil
}

func (x *UsCorePatient_MultipleBirth) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetMultipleBirth().(*UsCorePatient_MultipleBirth_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *UsCorePatient_MultipleBirth) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetMultipleBirth().(*UsCorePatient_MultipleBirth_Integer); ok {
		return x.Integer
	}
	return nil
}

type isUsCorePatient_MultipleBirth_MultipleBirth interface {
	isUsCorePatient_MultipleBirth_MultipleBirth()
}

type UsCorePatient_MultipleBirth_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type UsCorePatient_MultipleBirth_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,2,opt,name=integer,proto3,oneof"`
}

func (*UsCorePatient_MultipleBirth_Boolean) isUsCorePatient_MultipleBirth_MultipleBirth() {}

func (*UsCorePatient_MultipleBirth_Integer) isUsCorePatient_MultipleBirth_MultipleBirth() {}

// A contact party (e.g. guardian, partner, friend) for the patient
type UsCorePatient_Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The kind of relationship
	Relationship []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,rep,name=relationship,proto3" json:"relationship,omitempty"`
	// A name associated with the contact person
	Name *datatypes_go_proto.HumanName `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// A contact detail for the person
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,6,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// Address for the contact person
	Address *datatypes_go_proto.Address `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	// male | female | other | unknown
	Gender *codes_go_proto.AdministrativeGenderCode `protobuf:"bytes,8,opt,name=gender,proto3" json:"gender,omitempty"`
	// Organization that is associated with the contact
	Organization *datatypes_go_proto.Reference `protobuf:"bytes,9,opt,name=organization,proto3" json:"organization,omitempty"`
	// The period during which this contact person or organization is valid to
	// be contacted relating to this patient
	Period *datatypes_go_proto.Period `protobuf:"bytes,10,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *UsCorePatient_Contact) Reset() {
	*x = UsCorePatient_Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCorePatient_Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCorePatient_Contact) ProtoMessage() {}

func (x *UsCorePatient_Contact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCorePatient_Contact.ProtoReflect.Descriptor instead.
func (*UsCorePatient_Contact) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{19, 2}
}

func (x *UsCorePatient_Contact) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCorePatient_Contact) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCorePatient_Contact) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCorePatient_Contact) GetRelationship() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *UsCorePatient_Contact) GetName() *datatypes_go_proto.HumanName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UsCorePatient_Contact) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *UsCorePatient_Contact) GetAddress() *datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *UsCorePatient_Contact) GetGender() *codes_go_proto.AdministrativeGenderCode {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *UsCorePatient_Contact) GetOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *UsCorePatient_Contact) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// A list of Languages which may be used to communicate with the patient about
// his or her health
type UsCorePatient_Communication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The language which can be used to communicate with the patient about his
	// or her health
	Language *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Language preference indicator
	Preferred *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=preferred,proto3" json:"preferred,omitempty"`
}

func (x *UsCorePatient_Communication) Reset() {
	*x = UsCorePatient_Communication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCorePatient_Communication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCorePatient_Communication) ProtoMessage() {}

func (x *UsCorePatient_Communication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCorePatient_Communication.ProtoReflect.Descriptor instead.
func (*UsCorePatient_Communication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{19, 3}
}

func (x *UsCorePatient_Communication) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCorePatient_Communication) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCorePatient_Communication) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCorePatient_Communication) GetLanguage() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UsCorePatient_Communication) GetPreferred() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Preferred
	}
	return nil
}

// Link to another patient resource that concerns the same actual person
type UsCorePatient_Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The other patient or related person resource that the link refers to
	Other *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=other,proto3" json:"other,omitempty"`
	// replaced-by | replaces | refer | seealso - type of link
	Type *codes_go_proto.LinkTypeCode `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *UsCorePatient_Link) Reset() {
	*x = UsCorePatient_Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCorePatient_Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCorePatient_Link) ProtoMessage() {}

func (x *UsCorePatient_Link) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCorePatient_Link.ProtoReflect.Descriptor instead.
func (*UsCorePatient_Link) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{19, 4}
}

func (x *UsCorePatient_Link) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCorePatient_Link) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCorePatient_Link) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCorePatient_Link) GetOther() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Other
	}
	return nil
}

func (x *UsCorePatient_Link) GetType() *codes_go_proto.LinkTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

// Qualifications obtained by training and certification
type UsCorePractitioner_Qualification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// An identifier for this qualification for the practitioner
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,4,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Coded representation of the qualification
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	// Period during which the qualification is valid
	Period *datatypes_go_proto.Period `protobuf:"bytes,6,opt,name=period,proto3" json:"period,omitempty"`
	// Organization that regulates and issues the qualification
	Issuer *datatypes_go_proto.Reference `protobuf:"bytes,7,opt,name=issuer,proto3" json:"issuer,omitempty"`
}

func (x *UsCorePractitioner_Qualification) Reset() {
	*x = UsCorePractitioner_Qualification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCorePractitioner_Qualification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCorePractitioner_Qualification) ProtoMessage() {}

func (x *UsCorePractitioner_Qualification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCorePractitioner_Qualification.ProtoReflect.Descriptor instead.
func (*UsCorePractitioner_Qualification) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{20, 0}
}

func (x *UsCorePractitioner_Qualification) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCorePractitioner_Qualification) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCorePractitioner_Qualification) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCorePractitioner_Qualification) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *UsCorePractitioner_Qualification) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *UsCorePractitioner_Qualification) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *UsCorePractitioner_Qualification) GetIssuer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Issuer
	}
	return nil
}

// Times the Service Site is available
type UsCorePractitionerrole_AvailableTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// mon | tue | wed | thu | fri | sat | sun
	DaysOfWeek []*datatypes_go_proto.DaysOfWeekCode `protobuf:"bytes,4,rep,name=days_of_week,json=daysOfWeek,proto3" json:"days_of_week,omitempty"`
	// Always available? e.g. 24 hour service
	AllDay *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=all_day,json=allDay,proto3" json:"all_day,omitempty"`
	// Opening time of day (ignored if allDay = true)
	AvailableStartTime *datatypes_go_proto.Time `protobuf:"bytes,6,opt,name=available_start_time,json=availableStartTime,proto3" json:"available_start_time,omitempty"`
	// Closing time of day (ignored if allDay = true)
	AvailableEndTime *datatypes_go_proto.Time `protobuf:"bytes,7,opt,name=available_end_time,json=availableEndTime,proto3" json:"available_end_time,omitempty"`
}

func (x *UsCorePractitionerrole_AvailableTime) Reset() {
	*x = UsCorePractitionerrole_AvailableTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCorePractitionerrole_AvailableTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCorePractitionerrole_AvailableTime) ProtoMessage() {}

func (x *UsCorePractitionerrole_AvailableTime) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCorePractitionerrole_AvailableTime.ProtoReflect.Descriptor instead.
func (*UsCorePractitionerrole_AvailableTime) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{21, 0}
}

func (x *UsCorePractitionerrole_AvailableTime) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCorePractitionerrole_AvailableTime) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCorePractitionerrole_AvailableTime) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCorePractitionerrole_AvailableTime) GetDaysOfWeek() []*datatypes_go_proto.DaysOfWeekCode {
	if x != nil {
		return x.DaysOfWeek
	}
	return nil
}

func (x *UsCorePractitionerrole_AvailableTime) GetAllDay() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.AllDay
	}
	return nil
}

func (x *UsCorePractitionerrole_AvailableTime) GetAvailableStartTime() *datatypes_go_proto.Time {
	if x != nil {
		return x.AvailableStartTime
	}
	return nil
}

func (x *UsCorePractitionerrole_AvailableTime) GetAvailableEndTime() *datatypes_go_proto.Time {
	if x != nil {
		return x.AvailableEndTime
	}
	return nil
}

// Not available during this time due to provided reason
type UsCorePractitionerrole_NotAvailable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Reason presented to the user explaining why time not available
	Description *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Service not availablefrom this date
	During *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=during,proto3" json:"during,omitempty"`
}

func (x *UsCorePractitionerrole_NotAvailable) Reset() {
	*x = UsCorePractitionerrole_NotAvailable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCorePractitionerrole_NotAvailable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCorePractitionerrole_NotAvailable) ProtoMessage() {}

func (x *UsCorePractitionerrole_NotAvailable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCorePractitionerrole_NotAvailable.ProtoReflect.Descriptor instead.
func (*UsCorePractitionerrole_NotAvailable) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{21, 1}
}

func (x *UsCorePractitionerrole_NotAvailable) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCorePractitionerrole_NotAvailable) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCorePractitionerrole_NotAvailable) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCorePractitionerrole_NotAvailable) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UsCorePractitionerrole_NotAvailable) GetDuring() *datatypes_go_proto.Period {
	if x != nil {
		return x.During
	}
	return nil
}

// Date/Period the procedure was performed
type UsCoreProcedure_Performed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Performed:
	//	*UsCoreProcedure_Performed_DateTime
	//	*UsCoreProcedure_Performed_Period
	Performed isUsCoreProcedure_Performed_Performed `protobuf_oneof:"performed"`
}

func (x *UsCoreProcedure_Performed) Reset() {
	*x = UsCoreProcedure_Performed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreProcedure_Performed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreProcedure_Performed) ProtoMessage() {}

func (x *UsCoreProcedure_Performed) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreProcedure_Performed.ProtoReflect.Descriptor instead.
func (*UsCoreProcedure_Performed) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{22, 0}
}

func (m *UsCoreProcedure_Performed) GetPerformed() isUsCoreProcedure_Performed_Performed {
	if m != nil {
		return m.Performed
	}
	return nil
}

func (x *UsCoreProcedure_Performed) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetPerformed().(*UsCoreProcedure_Performed_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *UsCoreProcedure_Performed) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetPerformed().(*UsCoreProcedure_Performed_Period); ok {
		return x.Period
	}
	return nil
}

type isUsCoreProcedure_Performed_Performed interface {
	isUsCoreProcedure_Performed_Performed()
}

type UsCoreProcedure_Performed_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type UsCoreProcedure_Performed_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*UsCoreProcedure_Performed_DateTime) isUsCoreProcedure_Performed_Performed() {}

func (*UsCoreProcedure_Performed_Period) isUsCoreProcedure_Performed_Performed() {}

// The people who performed the procedure
type UsCoreProcedure_Performer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The role the actor was in
	Role *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	// The reference to the practitioner
	Actor *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=actor,proto3" json:"actor,omitempty"`
	// Organization the device or practitioner was acting for
	OnBehalfOf *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=on_behalf_of,json=onBehalfOf,proto3" json:"on_behalf_of,omitempty"`
}

func (x *UsCoreProcedure_Performer) Reset() {
	*x = UsCoreProcedure_Performer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreProcedure_Performer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreProcedure_Performer) ProtoMessage() {}

func (x *UsCoreProcedure_Performer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreProcedure_Performer.ProtoReflect.Descriptor instead.
func (*UsCoreProcedure_Performer) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{22, 1}
}

func (x *UsCoreProcedure_Performer) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreProcedure_Performer) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreProcedure_Performer) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreProcedure_Performer) GetRole() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *UsCoreProcedure_Performer) GetActor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *UsCoreProcedure_Performer) GetOnBehalfOf() *datatypes_go_proto.Reference {
	if x != nil {
		return x.OnBehalfOf
	}
	return nil
}

// Device changed in procedure
type UsCoreProcedure_FocalDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Kind of change to device
	Action *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	// Device that was changed
	Manipulated *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=manipulated,proto3" json:"manipulated,omitempty"`
}

func (x *UsCoreProcedure_FocalDevice) Reset() {
	*x = UsCoreProcedure_FocalDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreProcedure_FocalDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreProcedure_FocalDevice) ProtoMessage() {}

func (x *UsCoreProcedure_FocalDevice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreProcedure_FocalDevice.ProtoReflect.Descriptor instead.
func (*UsCoreProcedure_FocalDevice) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{22, 2}
}

func (x *UsCoreProcedure_FocalDevice) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreProcedure_FocalDevice) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreProcedure_FocalDevice) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreProcedure_FocalDevice) GetAction() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *UsCoreProcedure_FocalDevice) GetManipulated() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Manipulated
	}
	return nil
}

// Clinically relevant time/time-period for observation
type UsCoreSmokingstatus_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*UsCoreSmokingstatus_Effective_DateTime
	//	*UsCoreSmokingstatus_Effective_Period
	Effective isUsCoreSmokingstatus_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *UsCoreSmokingstatus_Effective) Reset() {
	*x = UsCoreSmokingstatus_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreSmokingstatus_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreSmokingstatus_Effective) ProtoMessage() {}

func (x *UsCoreSmokingstatus_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreSmokingstatus_Effective.ProtoReflect.Descriptor instead.
func (*UsCoreSmokingstatus_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{25, 0}
}

func (m *UsCoreSmokingstatus_Effective) GetEffective() isUsCoreSmokingstatus_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *UsCoreSmokingstatus_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*UsCoreSmokingstatus_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *UsCoreSmokingstatus_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*UsCoreSmokingstatus_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isUsCoreSmokingstatus_Effective_Effective interface {
	isUsCoreSmokingstatus_Effective_Effective()
}

type UsCoreSmokingstatus_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type UsCoreSmokingstatus_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*UsCoreSmokingstatus_Effective_DateTime) isUsCoreSmokingstatus_Effective_Effective() {}

func (*UsCoreSmokingstatus_Effective_Period) isUsCoreSmokingstatus_Effective_Effective() {}

// Coded Responses from Smoking Status Value Set
type UsCoreSmokingstatus_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*UsCoreSmokingstatus_Value_CodeableConcept
	Value isUsCoreSmokingstatus_Value_Value `protobuf_oneof:"value"`
}

func (x *UsCoreSmokingstatus_Value) Reset() {
	*x = UsCoreSmokingstatus_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreSmokingstatus_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreSmokingstatus_Value) ProtoMessage() {}

func (x *UsCoreSmokingstatus_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreSmokingstatus_Value.ProtoReflect.Descriptor instead.
func (*UsCoreSmokingstatus_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{25, 1}
}

func (m *UsCoreSmokingstatus_Value) GetValue() isUsCoreSmokingstatus_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *UsCoreSmokingstatus_Value) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetValue().(*UsCoreSmokingstatus_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isUsCoreSmokingstatus_Value_Value interface {
	isUsCoreSmokingstatus_Value_Value()
}

type UsCoreSmokingstatus_Value_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*UsCoreSmokingstatus_Value_CodeableConcept) isUsCoreSmokingstatus_Value_Value() {}

// Provides guide for interpretation
type UsCoreSmokingstatus_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Low Range, if relevant
	Low *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// High Range, if relevant
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Reference range qualifier
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Reference range population
	AppliesTo []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
	// Applicable age range, if relevant
	Age *datatypes_go_proto.Range `protobuf:"bytes,8,opt,name=age,proto3" json:"age,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *UsCoreSmokingstatus_ReferenceRange) Reset() {
	*x = UsCoreSmokingstatus_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreSmokingstatus_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreSmokingstatus_ReferenceRange) ProtoMessage() {}

func (x *UsCoreSmokingstatus_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreSmokingstatus_ReferenceRange.ProtoReflect.Descriptor instead.
func (*UsCoreSmokingstatus_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{25, 2}
}

func (x *UsCoreSmokingstatus_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreSmokingstatus_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreSmokingstatus_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreSmokingstatus_ReferenceRange) GetLow() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *UsCoreSmokingstatus_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *UsCoreSmokingstatus_ReferenceRange) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *UsCoreSmokingstatus_ReferenceRange) GetAppliesTo() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AppliesTo
	}
	return nil
}

func (x *UsCoreSmokingstatus_ReferenceRange) GetAge() *datatypes_go_proto.Range {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *UsCoreSmokingstatus_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Resource related to this observation
type UsCoreSmokingstatus_Related struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// has-member | derived-from | sequel-to | replaces | qualified-by |
	// interfered-by
	Type *codes_go_proto.ObservationRelationshipTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Resource that is related to this one
	Target *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *UsCoreSmokingstatus_Related) Reset() {
	*x = UsCoreSmokingstatus_Related{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreSmokingstatus_Related) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreSmokingstatus_Related) ProtoMessage() {}

func (x *UsCoreSmokingstatus_Related) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreSmokingstatus_Related.ProtoReflect.Descriptor instead.
func (*UsCoreSmokingstatus_Related) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{25, 3}
}

func (x *UsCoreSmokingstatus_Related) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreSmokingstatus_Related) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreSmokingstatus_Related) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreSmokingstatus_Related) GetType() *codes_go_proto.ObservationRelationshipTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *UsCoreSmokingstatus_Related) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

// Component results
type UsCoreSmokingstatus_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept  `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *UsCoreSmokingstatus_Component_Value `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*UsCoreSmokingstatus_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *UsCoreSmokingstatus_Component) Reset() {
	*x = UsCoreSmokingstatus_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreSmokingstatus_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreSmokingstatus_Component) ProtoMessage() {}

func (x *UsCoreSmokingstatus_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreSmokingstatus_Component.ProtoReflect.Descriptor instead.
func (*UsCoreSmokingstatus_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{25, 4}
}

func (x *UsCoreSmokingstatus_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreSmokingstatus_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreSmokingstatus_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreSmokingstatus_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *UsCoreSmokingstatus_Component) GetValue() *UsCoreSmokingstatus_Component_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UsCoreSmokingstatus_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *UsCoreSmokingstatus_Component) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *UsCoreSmokingstatus_Component) GetReferenceRange() []*UsCoreSmokingstatus_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Actual component result
type UsCoreSmokingstatus_Component_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*UsCoreSmokingstatus_Component_Value_Quantity
	//	*UsCoreSmokingstatus_Component_Value_CodeableConcept
	//	*UsCoreSmokingstatus_Component_Value_StringValue
	//	*UsCoreSmokingstatus_Component_Value_Range
	//	*UsCoreSmokingstatus_Component_Value_Ratio
	//	*UsCoreSmokingstatus_Component_Value_SampledData
	//	*UsCoreSmokingstatus_Component_Value_Attachment
	//	*UsCoreSmokingstatus_Component_Value_Time
	//	*UsCoreSmokingstatus_Component_Value_DateTime
	//	*UsCoreSmokingstatus_Component_Value_Period
	Value isUsCoreSmokingstatus_Component_Value_Value `protobuf_oneof:"value"`
}

func (x *UsCoreSmokingstatus_Component_Value) Reset() {
	*x = UsCoreSmokingstatus_Component_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreSmokingstatus_Component_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreSmokingstatus_Component_Value) ProtoMessage() {}

func (x *UsCoreSmokingstatus_Component_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreSmokingstatus_Component_Value.ProtoReflect.Descriptor instead.
func (*UsCoreSmokingstatus_Component_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP(), []int{25, 4, 0}
}

func (m *UsCoreSmokingstatus_Component_Value) GetValue() isUsCoreSmokingstatus_Component_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *UsCoreSmokingstatus_Component_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*UsCoreSmokingstatus_Component_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *UsCoreSmokingstatus_Component_Value) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetValue().(*UsCoreSmokingstatus_Component_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *UsCoreSmokingstatus_Component_Value) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetValue().(*UsCoreSmokingstatus_Component_Value_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *UsCoreSmokingstatus_Component_Value) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetValue().(*UsCoreSmokingstatus_Component_Value_Range); ok {
		return x.Range
	}
	return nil
}

func (x *UsCoreSmokingstatus_Component_Value) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetValue().(*UsCoreSmokingstatus_Component_Value_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *UsCoreSmokingstatus_Component_Value) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetValue().(*UsCoreSmokingstatus_Component_Value_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *UsCoreSmokingstatus_Component_Value) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetValue().(*UsCoreSmokingstatus_Component_Value_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *UsCoreSmokingstatus_Component_Value) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetValue().(*UsCoreSmokingstatus_Component_Value_Time); ok {
		return x.Time
	}
	return nil
}

func (x *UsCoreSmokingstatus_Component_Value) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetValue().(*UsCoreSmokingstatus_Component_Value_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *UsCoreSmokingstatus_Component_Value) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetValue().(*UsCoreSmokingstatus_Component_Value_Period); ok {
		return x.Period
	}
	return nil
}

type isUsCoreSmokingstatus_Component_Value_Value interface {
	isUsCoreSmokingstatus_Component_Value_Value()
}

type UsCoreSmokingstatus_Component_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type UsCoreSmokingstatus_Component_Value_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type UsCoreSmokingstatus_Component_Value_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type UsCoreSmokingstatus_Component_Value_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,4,opt,name=range,proto3,oneof"`
}

type UsCoreSmokingstatus_Component_Value_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,5,opt,name=ratio,proto3,oneof"`
}

type UsCoreSmokingstatus_Component_Value_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,6,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type UsCoreSmokingstatus_Component_Value_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,7,opt,name=attachment,proto3,oneof"`
}

type UsCoreSmokingstatus_Component_Value_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,8,opt,name=time,proto3,oneof"`
}

type UsCoreSmokingstatus_Component_Value_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,9,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type UsCoreSmokingstatus_Component_Value_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,10,opt,name=period,proto3,oneof"`
}

func (*UsCoreSmokingstatus_Component_Value_Quantity) isUsCoreSmokingstatus_Component_Value_Value() {}

func (*UsCoreSmokingstatus_Component_Value_CodeableConcept) isUsCoreSmokingstatus_Component_Value_Value() {
}

func (*UsCoreSmokingstatus_Component_Value_StringValue) isUsCoreSmokingstatus_Component_Value_Value() {
}

func (*UsCoreSmokingstatus_Component_Value_Range) isUsCoreSmokingstatus_Component_Value_Value() {}

func (*UsCoreSmokingstatus_Component_Value_Ratio) isUsCoreSmokingstatus_Component_Value_Value() {}

func (*UsCoreSmokingstatus_Component_Value_SampledData) isUsCoreSmokingstatus_Component_Value_Value() {
}

func (*UsCoreSmokingstatus_Component_Value_Attachment) isUsCoreSmokingstatus_Component_Value_Value() {
}

func (*UsCoreSmokingstatus_Component_Value_Time) isUsCoreSmokingstatus_Component_Value_Value() {}

func (*UsCoreSmokingstatus_Component_Value_DateTime) isUsCoreSmokingstatus_Component_Value_Value() {}

func (*UsCoreSmokingstatus_Component_Value_Period) isUsCoreSmokingstatus_Component_Value_Value() {}

var File_proto_google_fhir_proto_stu3_uscore_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_stu3_uscore_proto_rawDesc = []byte{
	0x0a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x75, 0x33, 0x2f, 0x75,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x75, 0x33, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x73, 0x74, 0x75, 0x33, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x73, 0x74, 0x75, 0x33, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x73, 0x74, 0x75, 0x33, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x73, 0x74, 0x75, 0x33, 0x2f, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa6, 0x17, 0x0a, 0x18, 0x55, 0x73, 0x43,
	0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x65, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x79, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c,
	0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x12,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67,
	0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x5b,
	0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c,
	0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0b,
	0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x50, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f,
	0x72, 0x65, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4f, 0x6e, 0x73, 0x65, 0x74, 0x52, 0x05, 0x6f, 0x6e, 0x73, 0x65,
	0x74, 0x12, 0x45, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65,
	0x72, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1f, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x71, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65,
	0x72, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x32, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x63, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x56,
	0x0a, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72,
	0x65, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xbb, 0x02, 0x0a, 0x05, 0x4f, 0x6e, 0x73, 0x65, 0x74,
	0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2f, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61,
	0x67, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x35, 0x0a, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x6f,
	0x6e, 0x73, 0x65, 0x74, 0x1a, 0xc1, 0x05, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x0d, 0x6d,
	0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49,
	0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x4e, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x12, 0x36, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x3a, 0x96, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x41,
	0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x22, 0xe3, 0x02, 0x0a, 0x1e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x53, 0x43,
	0x6f, 0x72, 0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x53, 0x65, 0x78, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x53,
	0x65, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x3a, 0x83, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x73, 0x65, 0x78, 0x22, 0xe3, 0x28, 0x0a, 0x0e, 0x55, 0x73, 0x43, 0x6f,
	0x72, 0x65, 0x43, 0x61, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x3d,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x6a, 0x0a,
	0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x27, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x50, 0x6c, 0x61, 0x6e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x0a, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x08, 0x62, 0x61, 0x73,
	0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x07,
	0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x4d, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x08, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f,
	0x66, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74,
	0x4f, 0x66, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a,
	0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0xc8, 0x01, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x82, 0x01, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2,
	0xbe, 0xc0, 0xa4, 0x07, 0x76, 0x77, 0x68, 0x65, 0x72, 0x65, 0x28, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3d, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x63, 0x61, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x27, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x3d, 0x27, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6c, 0x61, 0x6e,
	0x27, 0x29, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x36, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x8d, 0x01, 0x0a, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x52, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x65,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08,
	0x63, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x50, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x0f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x19, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x1a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0a, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x04, 0x47,
	0x6f, 0x61, 0x6c, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x77, 0x0a, 0x08, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x29, 0xf2,
	0xbe, 0xc0, 0xa4, 0x07, 0x23, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a, 0xeb, 0x15, 0x0a, 0x08, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x18, 0x6f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x16, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x5e, 0x0a,
	0x11, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x10, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x8a, 0x02,
	0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0xc8, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x41, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x14, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x04, 0x54, 0x61, 0x73, 0x6b, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x56, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0xba, 0x0f, 0x0a, 0x06,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x82,
	0x01, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x3f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x50, 0x6c,
	0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x48, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x67, 0x6f, 0x61,
	0x6c, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0a, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x04, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x52, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x43, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69,
	0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x68,
	0x69, 0x62, 0x69, 0x74, 0x65, 0x64, 0x12, 0x5f, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x52, 0x09, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x93, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x52, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x49, 0x0a, 0x0c, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xd4, 0x01, 0x0a, 0x09, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8,
	0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x1a,
	0xd6, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x54, 0x0a, 0x10, 0x63,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00,
	0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x12, 0x62, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x3a, 0x82, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43,
	0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d,
	0x63, 0x6f, 0x72, 0x65, 0x2d, 0x63, 0x61, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x22, 0xa2, 0x11,
	0x0a, 0x0e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x72, 0x65, 0x74, 0x65, 0x61, 0x6d,
	0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42,
	0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x50, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x45, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0xa1, 0x01, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f,
	0x72, 0x65, 0x43, 0x61, 0x72, 0x65, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x42, 0x4a, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe,
	0xc0, 0xa4, 0x07, 0x3e, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x4f, 0x66, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20,
	0x28, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x28,
	0x29, 0x20, 0x69, 0x73, 0x20, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0x29, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12,
	0x48, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x15, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a, 0xae, 0x04, 0x0a,
	0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x4a, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x0c,
	0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x6f, 0x66, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x6e, 0x42, 0x65, 0x68,
	0x61, 0x6c, 0x66, 0x4f, 0x66, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x82, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x30, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x63, 0x61, 0x72, 0x65, 0x74, 0x65,
	0x61, 0x6d, 0x22, 0x9c, 0x1b, 0x0a, 0x0f, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x61, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x70, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a,
	0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53,
	0x69, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d,
	0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x44, 0x0a, 0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4f, 0x6e, 0x73, 0x65, 0x74, 0x52, 0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x09,
	0x61, 0x62, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x62, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45,
	0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x71, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x32, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x08,
	0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x73, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x2d, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x27, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20,
	0x6f, 0x72, 0x20, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x75, 0x0a,
	0x08, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x26, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x08, 0x65, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x18, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a, 0xbb, 0x02, 0x0a,
	0x05, 0x4f, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x1a, 0x80, 0x03, 0x0a, 0x09, 0x41,
	0x62, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x03, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x62, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x61, 0x62, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x92, 0x03,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x82, 0x01,
	0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x3f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x43, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x1a, 0xd5, 0x02, 0x0a, 0x08, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x49, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x3a, 0x84, 0x01, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x41,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x8f, 0x13, 0x0a, 0x0c, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61,
	0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x43, 0x0a,
	0x03, 0x75, 0x64, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x64, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x75,
	0x64, 0x69, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x48, 0x49, 0x52,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a,
	0x0a, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0c,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x12, 0x4b, 0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0f, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a,
	0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x38,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x4d, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x3f, 0x0a,
	0x06, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x1a, 0x92,
	0x05, 0x0a, 0x03, 0x55, 0x64, 0x69, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x11, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6a, 0x75,
	0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0c, 0x6a,
	0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x63,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x68, 0x72, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0a, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x48, 0x52, 0x46, 0x12, 0x47, 0x0a, 0x0c,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x61, 0x69, 0x64, 0x63, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x41, 0x49, 0x44, 0x43, 0x12, 0x33, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0a, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x44, 0x49, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x7e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x3e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x22, 0xdc, 0x17, 0x0a, 0x16, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2a,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xc3, 0x01, 0x0a, 0x08, 0x62, 0x61,
	0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x84, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74,
	0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12,
	0x52, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5f, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x09, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x12, 0x4c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x11, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x6f, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x27, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0f, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x12, 0x4b, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72,
	0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50,
	0x0a, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x12, 0x49, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x1a, 0x9b, 0x01, 0x0a, 0x09,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xf0, 0x02, 0x0a, 0x09, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x63, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x2a, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0xce, 0x02, 0x0a,
	0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x11, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x3a, 0x92, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x48, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72,
	0x65, 0x2d, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0xce, 0x02, 0x0a, 0x11, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x3a,
	0x81, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x3e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x22, 0xc9, 0x1e, 0x0a, 0x17, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a,
	0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x11, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x10, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x4c, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x50, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x8b, 0x01, 0x0a, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x50, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x6d, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x24, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x64,
	0x69, 0x61, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x12, 0x59, 0x0a, 0x0a, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x52, 0x09, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x5a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xfa, 0x02, 0x0a, 0x09, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x58, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1d,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0xd0, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x36, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x1a, 0xcd, 0x08, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09,
	0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x4c, 0x0a, 0x0d, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x0c, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x52,
	0x0a, 0x10, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x0f, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x60, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x0d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5a, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x1a, 0xd5, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x03, 0x72, 0x65, 0x66, 0x3a, 0x94, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x49, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22,
	0xa1, 0x29, 0x0a, 0x0f, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5d, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73,
	0x43, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x0b, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x5a,
	0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x43, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5e, 0x0a, 0x0f, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x61, 0x72, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x13, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52, 0x0d, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x12, 0x65, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x15, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x12, 0x56, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43,
	0x6f, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x11, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x3f, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x50, 0x0a, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73,
	0x43, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x12, 0x4a, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x62,
	0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x73, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x60, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x4f, 0x66,
	0x1a, 0xdf, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x1a, 0xd5, 0x02, 0x0a, 0x0c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0x9c, 0x03, 0x0a, 0x0b, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x55, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x0a, 0x69,
	0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x1a, 0xab, 0x03, 0x0a, 0x09, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x24, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x37,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x1a, 0xc8, 0x07, 0x0a, 0x0f, 0x48, 0x6f, 0x73, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5c,
	0x0a, 0x18, 0x70, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x16, 0x70, 0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x74,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x50, 0x0a, 0x0f, 0x64, 0x69, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x0e, 0x64, 0x69, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x52, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75,
	0x72, 0x74, 0x65, 0x73, 0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x72, 0x74, 0x65, 0x73, 0x79, 0x12, 0x58, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x12, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x53, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x64, 0x69,
	0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0xa7, 0x03, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x14, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x84, 0x01, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x22, 0xd4, 0x03, 0x0a, 0x1f, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x55,
	0x53, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0c, 0x6f, 0x6d, 0x62, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0b,
	0x6f, 0x6d, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x08, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x3a, 0x84, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65,
	0x2d, 0x65, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x22, 0xdf, 0x16, 0x0a, 0x0a, 0x55,
	0x73, 0x43, 0x6f, 0x72, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x43, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x89, 0x01, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x47, 0x6f,
	0x61, 0x6c, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x45, 0xf2, 0xbe, 0xc0, 0xa4, 0x07,
	0x3f, 0x28, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x78, 0x0a, 0x0c,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x32, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x42, 0x79, 0x12, 0xb8, 0x01, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x77, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75,
	0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x61, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x11, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0xa2, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x1a, 0x90, 0x06,
	0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x07, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x49,
	0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x47,
	0x6f, 0x61, 0x6c, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x40, 0x0a, 0x03, 0x64, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x2e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x2e, 0x44, 0x75, 0x65, 0x52, 0x03, 0x64, 0x75, 0x65, 0x1a, 0xe7, 0x01, 0x0a, 0x06,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x54, 0x0a,
	0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x88, 0x01, 0x0a, 0x03, 0x44, 0x75, 0x65, 0x12, 0x32, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x3e, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x64, 0x75, 0x65,
	0x3a, 0x7a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x47, 0x6f, 0x61, 0x6c, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x67, 0x6f, 0x61, 0x6c, 0x22, 0xd5, 0x21, 0x0a,
	0x12, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x53,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x08, 0x6e, 0x6f, 0x74, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x12, 0x92, 0x01, 0x0a, 0x0c, 0x76, 0x61,
	0x63, 0x63, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x46, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x3a, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x28, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3d, 0x27, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x73, 0x69, 0x64, 0x2f, 0x6e, 0x64, 0x63, 0x27, 0x29, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28,
	0x29, 0x52, 0x0b, 0x76, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x50,
	0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x50, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x4e, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x4c, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x4d,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a,
	0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0a, 0x6c, 0x6f, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x6c, 0x6f,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0e,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b,
	0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x64, 0x6f,
	0x73, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x64, 0x6f, 0x73, 0x65, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x5c, 0x0a, 0x0c, 0x70, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x0c, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x1a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x59, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43,
	0x6f, 0x72, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x78, 0x70,
	0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x72, 0x0a, 0x14, 0x76, 0x61,
	0x63, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x13, 0x76, 0x61, 0x63, 0x63, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0xe1,
	0x02, 0x0a, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12,
	0x51, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x18, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x1a, 0xe4, 0x02, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x4e, 0x6f, 0x74, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x1a, 0x8e, 0x03, 0x0a, 0x08, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x4c, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x11, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3b, 0x0a,
	0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x1a, 0xba, 0x06, 0x0a, 0x13, 0x56,
	0x61, 0x63, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0d, 0x64, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0x52, 0x0c, 0x64, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x40, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x53, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x46,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x64, 0x6f, 0x73, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x44, 0x6f, 0x73, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x0b, 0x64, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x64, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x55, 0x0a, 0x12, 0x64, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x8a, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x49, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x44,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc9, 0x10, 0x0a, 0x0e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x34, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c,
	0x65, 0x63, 0x6f, 0x6d, 0x12, 0x39, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x4c, 0x0a, 0x0d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x0c, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x15, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f,
	0x6f, 0x66, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x74, 0x4f, 0x66, 0x12, 0x4d, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x1a, 0x96, 0x03, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x3b,
	0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x3a, 0x82, 0x01, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xd5, 0x19, 0x0a, 0x10, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x07, 0x69, 0x73, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74,
	0x68, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x52, 0x10, 0x69, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x68, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x3b,
	0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x54, 0x0a, 0x0a, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x51, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x07, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0xee,
	0x04, 0x0a, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x55, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x3c, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x08, 0x69, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xd0, 0x01, 0x0a,
	0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x54, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x62, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x1f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x1a,
	0xbd, 0x0a, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x05, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x1a, 0xac, 0x04, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x12, 0x3e, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xc1, 0x01, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x54, 0x0a,
	0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x12, 0x53, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x10, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01,
	0x42, 0x06, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x1a, 0xd4, 0x02, 0x0a, 0x05, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0a, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x3a,
	0x86, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x32, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd1, 0x23, 0x0a, 0x17, 0x55, 0x73, 0x43,
	0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x6f, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x2c, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x8e, 0x01, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x50, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61,
	0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f,
	0x6e, 0x12, 0x4d, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x53, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x53, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x51, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x63, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72,
	0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x68, 0x0a, 0x16, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x15, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x65, 0x64,
	0x5f, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x12,
	0xe1, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73,
	0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x42,
	0x86, 0x01, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x7a, 0x28, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x28, 0x29, 0x2e, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x28, 0x29, 0x20, 0x69, 0x73, 0x20, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x28, 0x29, 0x20, 0x69, 0x73, 0x20, 0x50, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x6f,
	0x6e, 0x42, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x4f, 0x66, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x28, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x6e, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x20, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x36, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x64, 0x6f, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x11, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f,
	0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x11, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x0e, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x12, 0x58, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x10, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0xcd, 0x01, 0x0a, 0x0a,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x10, 0x63, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x12, 0x53, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x10, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0c, 0x0a,
	0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xfa, 0x02, 0x0a, 0x09,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x05,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x18,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x57, 0x0a, 0x0c, 0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x6f, 0x66, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x6e,
	0x42, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x4f, 0x66, 0x1a, 0xf2, 0x04, 0x0a, 0x0f, 0x44, 0x69, 0x73,
	0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x47, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x5e, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x73, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74,
	0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x5a, 0x0a, 0x18,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x16, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x1a, 0xd5, 0x02,
	0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x41, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x94, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x49, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xbf, 0x15, 0x0a,
	0x19, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x8e, 0x01, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x50, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62,
	0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0xab, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f,
	0x6f, 0x66, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x6f, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x18, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x12, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x74, 0x4f, 0x66, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09,
	0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x45,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x55, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x65, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x96, 0x01, 0x0a, 0x12, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x44, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x54,
	0x0a, 0x0c, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x52, 0x0a, 0x05, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x61, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x05, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x51, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x48, 0x0a, 0x0b, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x6e, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x20, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x19, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x36, 0x0a,
	0x06, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x64,
	0x6f, 0x73, 0x61, 0x67, 0x65, 0x1a, 0xcd, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x53, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x10, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x9b, 0x01, 0x0a, 0x09, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x3a, 0x98, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x4b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xfa,
	0x2f, 0x0a, 0x18, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xd6, 0x01, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64,
	0x5f, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x97, 0x01, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74,
	0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12,
	0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xb6,
	0x01, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x71, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x65, 0x77, 0x68, 0x65, 0x72, 0x65, 0x28, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3d, 0x27, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x27, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x3d, 0x27, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x27, 0x29, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5f,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x8d, 0x01, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73,
	0x43, 0x6f, 0x72, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x42, 0x32, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2c, 0x28, 0x24, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61,
	0x73, 0x20, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x29, 0x2e, 0x74, 0x6f, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x28, 0x29, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x29, 0x20,
	0x3e, 0x3d, 0x20, 0x38, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x37, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x44, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x12, 0x99, 0x02, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72,
	0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0xc9, 0x01, 0xf2, 0xbe, 0xc0, 0xa4,
	0x07, 0x6b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x2e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x2e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x20, 0x3d, 0x20, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x73, 0x6e, 0x6f,
	0x6d, 0x65, 0x64, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x73, 0x63, 0x74, 0x27, 0xf2, 0xbe, 0xc0,
	0xa4, 0x07, 0x52, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20,
	0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x3d, 0x20, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x6f, 0x66, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x2e, 0x6f, 0x72, 0x67, 0x27, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x12,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44,
	0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79,
	0x53, 0x69, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65,
	0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x12, 0x59, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x9f, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x34, 0xf2, 0xbe, 0xc0,
	0xa4, 0x07, 0x2e, 0x6c, 0x6f, 0x77, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20,
	0x6f, 0x72, 0x20, 0x68, 0x69, 0x67, 0x68, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0x20, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x53, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43,
	0x6f, 0x72, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x07, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x1a, 0x9b, 0x01, 0x0a, 0x09, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8,
	0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a,
	0xd8, 0x05, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x10, 0x63, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f,
	0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12,
	0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x3b, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x35, 0x0a, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48,
	0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xb3, 0x04, 0x0a, 0x0e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x3a, 0x0a, 0x04, 0x68, 0x69,
	0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x74,
	0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x12, 0x2f, 0x0a, 0x03, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x1a, 0x96, 0x03, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x7b, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x40, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x15, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0x9d, 0x0a, 0x0a, 0x09, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x57, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64,
	0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x69, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x9b, 0x05, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00,
	0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x8f, 0x01, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x4a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xd3, 0x0e, 0x0a, 0x12,
	0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61,
	0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x67, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x27, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x1b, 0x77, 0x68, 0x65, 0x72, 0x65, 0x28,
	0x75, 0x73, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x68, 0x6f, 0x6d, 0x65, 0x27, 0x29, 0x2e, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x28, 0x29, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x62,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x27, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x1b, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x28, 0x75, 0x73, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x68, 0x6f, 0x6d, 0x65, 0x27,
	0x29, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x4e, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74,
	0x4f, 0x66, 0x12, 0x4d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73,
	0x43, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x12, 0x4d, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x1a, 0xc1, 0x03, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x41, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x74, 0x65, 0x6c,
	0x65, 0x63, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x39, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x3a, 0x8a, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x44, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d,
	0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xb9, 0x20, 0x0a, 0x0d, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x3d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x50,
	0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x3b, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a,
	0x08, 0x64, 0x65, 0x63, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x63, 0x65, 0x61, 0x73, 0x65, 0x64,
	0x52, 0x08, 0x64, 0x65, 0x63, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4e, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5b, 0x0a, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x52, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x42, 0x69, 0x72,
	0x74, 0x68, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x9e, 0x01, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x54,
	0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x4e, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x5a, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x73, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x14, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x24, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0x52, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x15, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x12, 0x8b, 0x01, 0x0a, 0x04, 0x72, 0x61, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x63, 0x65, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x42, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x3c, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73,
	0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x72, 0x61, 0x63, 0x65, 0x52, 0x04, 0x72, 0x61, 0x63, 0x65,
	0x12, 0x9f, 0x01, 0x0a, 0x09, 0x65, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x74, 0x68, 0x6e,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x47,
	0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x65, 0x74,
	0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x52, 0x09, 0x65, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x8f, 0x01, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x73, 0x65, 0x78, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x53, 0x65, 0x78, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x46, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72,
	0x65, 0x2d, 0x62, 0x69, 0x72, 0x74, 0x68, 0x73, 0x65, 0x78, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x73, 0x65, 0x78, 0x1a, 0x9c, 0x01, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x65, 0x61, 0x73, 0x65,
	0x64, 0x12, 0x3b, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x3f,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x65, 0x61,
	0x73, 0x65, 0x64, 0x1a, 0xa3, 0x01, 0x0a, 0x0d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x12, 0x3b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x1a, 0xa8, 0x05, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6d,
	0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x07,
	0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x39, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x59, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x1a, 0xde, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x1a, 0xec, 0x02, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x5f, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x26, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x05, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x3a, 0x80, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x15, 0x10, 0x16, 0x22, 0xad, 0x0e,
	0x0a, 0x12, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3e, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12,
	0x39, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x5f, 0x0a, 0x0d, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43,
	0x6f, 0x72, 0x65, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x2e,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0d,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xe2, 0x03, 0x0a, 0x0d,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x4d, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x3a, 0x8a, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x34, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65,
	0x2d, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x22, 0xc9, 0x14,
	0x0a, 0x16, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x36, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x59, 0x0a, 0x0c, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0x52, 0x0c, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x12,
	0x59, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x4d,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a,
	0x12, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x11, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65,
	0x63, 0x6f, 0x6d, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x64, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72,
	0x65, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x72, 0x6f, 0x6c,
	0x65, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x0d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x61,
	0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x57, 0x0a, 0x17, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x16, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0xf2, 0x03, 0x0a, 0x0d, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48,
	0x0a, 0x0c, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61,
	0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x64, 0x61,
	0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x5f,
	0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x06, 0x61, 0x6c, 0x6c, 0x44,
	0x61, 0x79, 0x12, 0x4e, 0x0a, 0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x12,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x10, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xd3,
	0x02, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x06,
	0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x64, 0x75,
	0x72, 0x69, 0x6e, 0x67, 0x3a, 0x92, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x48, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xbf, 0x1e, 0x0a, 0x0f, 0x55, 0x73,
	0x43, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x2a, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x86, 0x01, 0x0a, 0x0a, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x43, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x77, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x39, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61,
	0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x7a, 0x0a, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x5f, 0x6f, 0x66, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x3e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x18, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3a, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x52, 0x07, 0x6e, 0x6f, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x6e,
	0x6f, 0x74, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x6e,
	0x6f, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x6e,
	0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x20, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x44,
	0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x19, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79,
	0x53, 0x69, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07,
	0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x16, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x10, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4b, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x1d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x44, 0x0a, 0x09,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x75, 0x70, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x55, 0x70, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x66, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72,
	0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x6f, 0x63, 0x61, 0x6c,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x66, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x75, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x2b,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x75, 0x73, 0x65,
	0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x1a, 0x9b, 0x01, 0x0a, 0x09, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48,
	0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x1a, 0xf6,
	0x03, 0x0a, 0x09, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x8f, 0x01, 0x0a,
	0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x56, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x57,
	0x0a, 0x0c, 0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x6f, 0x66, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x6e, 0x42,
	0x65, 0x68, 0x61, 0x6c, 0x66, 0x4f, 0x66, 0x1a, 0xea, 0x02, 0x0a, 0x0b, 0x46, 0x6f, 0x63, 0x61,
	0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x0b, 0x6d,
	0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x12, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x3a, 0x84, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72,
	0x65, 0x2d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x22, 0xfc, 0x02, 0x0a, 0x36,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x3a, 0x87, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0xc9, 0x03, 0x0a, 0x1a, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x63, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0c, 0x6f, 0x6d,
	0x62, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x0b, 0x6f, 0x6d, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x3a, 0x0a,
	0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x3a, 0x7f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72,
	0x65, 0x2d, 0x72, 0x61, 0x63, 0x65, 0x22, 0xfc, 0x27, 0x0a, 0x13, 0x55, 0x73, 0x43, 0x6f, 0x72,
	0x65, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xd6, 0x01, 0x0a, 0x08, 0x62, 0x61,
	0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x97, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e,
	0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64,
	0x4f, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x43, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5f, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f,
	0x66, 0x43, 0x61, 0x72, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x54,
	0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f,
	0x72, 0x65, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x44, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x50, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x6d, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x55, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x44, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62,
	0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x59, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x6d, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x34, 0xf2, 0xbe, 0xc0, 0xa4, 0x07,
	0x2e, 0x6c, 0x6f, 0x77, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x68, 0x69, 0x67, 0x68, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f,
	0x72, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52,
	0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x4e, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72,
	0x65, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x54, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43,
	0x6f, 0x72, 0x65, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a, 0x9b, 0x01, 0x0a, 0x09, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x1a, 0x6e, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x10,
	0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48,
	0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0xb3, 0x04, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x03, 0x6c, 0x6f, 0x77,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x03,
	0x6c, 0x6f, 0x77, 0x12, 0x3a, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12,
	0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0a,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x54, 0x6f, 0x12, 0x2f, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x96, 0x03, 0x0a, 0x07, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x7b, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x40, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x1a, 0x93, 0x0a, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x12,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x6d,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x9b, 0x05, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x8a, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x45,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x73, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x6d, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x75, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x75, 0x33, 0x2f, 0x75,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6,
	0xb0, 0xb5, 0x07, 0x02, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_stu3_uscore_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_stu3_uscore_proto_rawDescData = file_proto_google_fhir_proto_stu3_uscore_proto_rawDesc
)

func file_proto_google_fhir_proto_stu3_uscore_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_stu3_uscore_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_stu3_uscore_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_stu3_uscore_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_stu3_uscore_proto_rawDescData
}

var file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes = make([]protoimpl.MessageInfo, 96)
var file_proto_google_fhir_proto_stu3_uscore_proto_goTypes = []interface{}{
	(*UsCoreAllergyintolerance)(nil),                                // 0: google.fhir.stu3.uscore.UsCoreAllergyintolerance
	(*PatientUSCoreBirthSexExtension)(nil),                          // 1: google.fhir.stu3.uscore.PatientUSCoreBirthSexExtension
	(*UsCoreCareplan)(nil),                                          // 2: google.fhir.stu3.uscore.UsCoreCareplan
	(*UsCoreCareteam)(nil),                                          // 3: google.fhir.stu3.uscore.UsCoreCareteam
	(*UsCoreCondition)(nil),                                         // 4: google.fhir.stu3.uscore.UsCoreCondition
	(*UsCoreDevice)(nil),                                            // 5: google.fhir.stu3.uscore.UsCoreDevice
	(*UsCoreDiagnosticreport)(nil),                                  // 6: google.fhir.stu3.uscore.UsCoreDiagnosticreport
	(*UsCoreDirectEmail)(nil),                                       // 7: google.fhir.stu3.uscore.UsCoreDirectEmail
	(*UsCoreDocumentreference)(nil),                                 // 8: google.fhir.stu3.uscore.UsCoreDocumentreference
	(*UsCoreEncounter)(nil),                                         // 9: google.fhir.stu3.uscore.UsCoreEncounter
	(*PatientUSCoreEthnicityExtension)(nil),                         // 10: google.fhir.stu3.uscore.PatientUSCoreEthnicityExtension
	(*UsCoreGoal)(nil),                                              // 11: google.fhir.stu3.uscore.UsCoreGoal
	(*UsCoreImmunization)(nil),                                      // 12: google.fhir.stu3.uscore.UsCoreImmunization
	(*UsCoreLocation)(nil),                                          // 13: google.fhir.stu3.uscore.UsCoreLocation
	(*UsCoreMedication)(nil),                                        // 14: google.fhir.stu3.uscore.UsCoreMedication
	(*UsCoreMedicationrequest)(nil),                                 // 15: google.fhir.stu3.uscore.UsCoreMedicationrequest
	(*UsCoreMedicationstatement)(nil),                               // 16: google.fhir.stu3.uscore.UsCoreMedicationstatement
	(*UsCoreObservationresults)(nil),                                // 17: google.fhir.stu3.uscore.UsCoreObservationresults
	(*UsCoreOrganization)(nil),                                      // 18: google.fhir.stu3.uscore.UsCoreOrganization
	(*UsCorePatient)(nil),                                           // 19: google.fhir.stu3.uscore.UsCorePatient
	(*UsCorePractitioner)(nil),                                      // 20: google.fhir.stu3.uscore.UsCorePractitioner
	(*UsCorePractitionerrole)(nil),                                  // 21: google.fhir.stu3.uscore.UsCorePractitionerrole
	(*UsCoreProcedure)(nil),                                         // 22: google.fhir.stu3.uscore.UsCoreProcedure
	(*CapabilityStatementProfileResourceAssociationExtension)(nil),  // 23: google.fhir.stu3.uscore.CapabilityStatementProfileResourceAssociationExtension
	(*PatientUSCoreRaceExtension)(nil),                              // 24: google.fhir.stu3.uscore.PatientUSCoreRaceExtension
	(*UsCoreSmokingstatus)(nil),                                     // 25: google.fhir.stu3.uscore.UsCoreSmokingstatus
	(*UsCoreAllergyintolerance_Onset)(nil),                          // 26: google.fhir.stu3.uscore.UsCoreAllergyintolerance.Onset
	(*UsCoreAllergyintolerance_Reaction)(nil),                       // 27: google.fhir.stu3.uscore.UsCoreAllergyintolerance.Reaction
	(*UsCoreCareplan_Activity)(nil),                                 // 28: google.fhir.stu3.uscore.UsCoreCareplan.Activity
	(*UsCoreCareplan_Activity_Detail)(nil),                          // 29: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail
	(*UsCoreCareplan_Activity_Detail_Scheduled)(nil),                // 30: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.Scheduled
	(*UsCoreCareplan_Activity_Detail_Product)(nil),                  // 31: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.Product
	(*UsCoreCareteam_Participant)(nil),                              // 32: google.fhir.stu3.uscore.UsCoreCareteam.Participant
	(*UsCoreCondition_Onset)(nil),                                   // 33: google.fhir.stu3.uscore.UsCoreCondition.Onset
	(*UsCoreCondition_Abatement)(nil),                               // 34: google.fhir.stu3.uscore.UsCoreCondition.Abatement
	(*UsCoreCondition_Stage)(nil),                                   // 35: google.fhir.stu3.uscore.UsCoreCondition.Stage
	(*UsCoreCondition_Evidence)(nil),                                // 36: google.fhir.stu3.uscore.UsCoreCondition.Evidence
	(*UsCoreDevice_Udi)(nil),                                        // 37: google.fhir.stu3.uscore.UsCoreDevice.Udi
	(*UsCoreDiagnosticreport_Effective)(nil),                        // 38: google.fhir.stu3.uscore.UsCoreDiagnosticreport.Effective
	(*UsCoreDiagnosticreport_Performer)(nil),                        // 39: google.fhir.stu3.uscore.UsCoreDiagnosticreport.Performer
	(*UsCoreDiagnosticreport_Image)(nil),                            // 40: google.fhir.stu3.uscore.UsCoreDiagnosticreport.Image
	(*UsCoreDocumentreference_RelatesTo)(nil),                       // 41: google.fhir.stu3.uscore.UsCoreDocumentreference.RelatesTo
	(*UsCoreDocumentreference_Content)(nil),                         // 42: google.fhir.stu3.uscore.UsCoreDocumentreference.Content
	(*UsCoreDocumentreference_Context)(nil),                         // 43: google.fhir.stu3.uscore.UsCoreDocumentreference.Context
	(*UsCoreDocumentreference_Context_Related)(nil),                 // 44: google.fhir.stu3.uscore.UsCoreDocumentreference.Context.Related
	(*UsCoreEncounter_StatusHistory)(nil),                           // 45: google.fhir.stu3.uscore.UsCoreEncounter.StatusHistory
	(*UsCoreEncounter_ClassHistory)(nil),                            // 46: google.fhir.stu3.uscore.UsCoreEncounter.ClassHistory
	(*UsCoreEncounter_Participant)(nil),                             // 47: google.fhir.stu3.uscore.UsCoreEncounter.Participant
	(*UsCoreEncounter_Diagnosis)(nil),                               // 48: google.fhir.stu3.uscore.UsCoreEncounter.Diagnosis
	(*UsCoreEncounter_Hospitalization)(nil),                         // 49: google.fhir.stu3.uscore.UsCoreEncounter.Hospitalization
	(*UsCoreEncounter_Location)(nil),                                // 50: google.fhir.stu3.uscore.UsCoreEncounter.Location
	(*UsCoreGoal_Start)(nil),                                        // 51: google.fhir.stu3.uscore.UsCoreGoal.Start
	(*UsCoreGoal_Target)(nil),                                       // 52: google.fhir.stu3.uscore.UsCoreGoal.Target
	(*UsCoreGoal_Target_Detail)(nil),                                // 53: google.fhir.stu3.uscore.UsCoreGoal.Target.Detail
	(*UsCoreGoal_Target_Due)(nil),                                   // 54: google.fhir.stu3.uscore.UsCoreGoal.Target.Due
	(*UsCoreImmunization_Practitioner)(nil),                         // 55: google.fhir.stu3.uscore.UsCoreImmunization.Practitioner
	(*UsCoreImmunization_Explanation)(nil),                          // 56: google.fhir.stu3.uscore.UsCoreImmunization.Explanation
	(*UsCoreImmunization_Reaction)(nil),                             // 57: google.fhir.stu3.uscore.UsCoreImmunization.Reaction
	(*UsCoreImmunization_VaccinationProtocol)(nil),                  // 58: google.fhir.stu3.uscore.UsCoreImmunization.VaccinationProtocol
	(*UsCoreLocation_Position)(nil),                                 // 59: google.fhir.stu3.uscore.UsCoreLocation.Position
	(*UsCoreMedication_Ingredient)(nil),                             // 60: google.fhir.stu3.uscore.UsCoreMedication.Ingredient
	(*UsCoreMedication_Package)(nil),                                // 61: google.fhir.stu3.uscore.UsCoreMedication.Package
	(*UsCoreMedication_Ingredient_Item)(nil),                        // 62: google.fhir.stu3.uscore.UsCoreMedication.Ingredient.Item
	(*UsCoreMedication_Package_Content)(nil),                        // 63: google.fhir.stu3.uscore.UsCoreMedication.Package.Content
	(*UsCoreMedication_Package_Batch)(nil),                          // 64: google.fhir.stu3.uscore.UsCoreMedication.Package.Batch
	(*UsCoreMedication_Package_Content_Item)(nil),                   // 65: google.fhir.stu3.uscore.UsCoreMedication.Package.Content.Item
	(*UsCoreMedicationrequest_Medication)(nil),                      // 66: google.fhir.stu3.uscore.UsCoreMedicationrequest.Medication
	(*UsCoreMedicationrequest_Requester)(nil),                       // 67: google.fhir.stu3.uscore.UsCoreMedicationrequest.Requester
	(*UsCoreMedicationrequest_DispenseRequest)(nil),                 // 68: google.fhir.stu3.uscore.UsCoreMedicationrequest.DispenseRequest
	(*UsCoreMedicationrequest_Substitution)(nil),                    // 69: google.fhir.stu3.uscore.UsCoreMedicationrequest.Substitution
	(*UsCoreMedicationstatement_Medication)(nil),                    // 70: google.fhir.stu3.uscore.UsCoreMedicationstatement.Medication
	(*UsCoreMedicationstatement_Effective)(nil),                     // 71: google.fhir.stu3.uscore.UsCoreMedicationstatement.Effective
	(*UsCoreObservationresults_Effective)(nil),                      // 72: google.fhir.stu3.uscore.UsCoreObservationresults.Effective
	(*UsCoreObservationresults_Value)(nil),                          // 73: google.fhir.stu3.uscore.UsCoreObservationresults.Value
	(*UsCoreObservationresults_ReferenceRange)(nil),                 // 74: google.fhir.stu3.uscore.UsCoreObservationresults.ReferenceRange
	(*UsCoreObservationresults_Related)(nil),                        // 75: google.fhir.stu3.uscore.UsCoreObservationresults.Related
	(*UsCoreObservationresults_Component)(nil),                      // 76: google.fhir.stu3.uscore.UsCoreObservationresults.Component
	(*UsCoreObservationresults_Component_Value)(nil),                // 77: google.fhir.stu3.uscore.UsCoreObservationresults.Component.Value
	(*UsCoreOrganization_Contact)(nil),                              // 78: google.fhir.stu3.uscore.UsCoreOrganization.Contact
	(*UsCorePatient_Deceased)(nil),                                  // 79: google.fhir.stu3.uscore.UsCorePatient.Deceased
	(*UsCorePatient_MultipleBirth)(nil),                             // 80: google.fhir.stu3.uscore.UsCorePatient.MultipleBirth
	(*UsCorePatient_Contact)(nil),                                   // 81: google.fhir.stu3.uscore.UsCorePatient.Contact
	(*UsCorePatient_Communication)(nil),                             // 82: google.fhir.stu3.uscore.UsCorePatient.Communication
	(*UsCorePatient_Link)(nil),                                      // 83: google.fhir.stu3.uscore.UsCorePatient.Link
	(*UsCorePractitioner_Qualification)(nil),                        // 84: google.fhir.stu3.uscore.UsCorePractitioner.Qualification
	(*UsCorePractitionerrole_AvailableTime)(nil),                    // 85: google.fhir.stu3.uscore.UsCorePractitionerrole.AvailableTime
	(*UsCorePractitionerrole_NotAvailable)(nil),                     // 86: google.fhir.stu3.uscore.UsCorePractitionerrole.NotAvailable
	(*UsCoreProcedure_Performed)(nil),                               // 87: google.fhir.stu3.uscore.UsCoreProcedure.Performed
	(*UsCoreProcedure_Performer)(nil),                               // 88: google.fhir.stu3.uscore.UsCoreProcedure.Performer
	(*UsCoreProcedure_FocalDevice)(nil),                             // 89: google.fhir.stu3.uscore.UsCoreProcedure.FocalDevice
	(*UsCoreSmokingstatus_Effective)(nil),                           // 90: google.fhir.stu3.uscore.UsCoreSmokingstatus.Effective
	(*UsCoreSmokingstatus_Value)(nil),                               // 91: google.fhir.stu3.uscore.UsCoreSmokingstatus.Value
	(*UsCoreSmokingstatus_ReferenceRange)(nil),                      // 92: google.fhir.stu3.uscore.UsCoreSmokingstatus.ReferenceRange
	(*UsCoreSmokingstatus_Related)(nil),                             // 93: google.fhir.stu3.uscore.UsCoreSmokingstatus.Related
	(*UsCoreSmokingstatus_Component)(nil),                           // 94: google.fhir.stu3.uscore.UsCoreSmokingstatus.Component
	(*UsCoreSmokingstatus_Component_Value)(nil),                     // 95: google.fhir.stu3.uscore.UsCoreSmokingstatus.Component.Value
	(*datatypes_go_proto.Id)(nil),                                   // 96: google.fhir.stu3.proto.Id
	(*datatypes_go_proto.Meta)(nil),                                 // 97: google.fhir.stu3.proto.Meta
	(*datatypes_go_proto.Uri)(nil),                                  // 98: google.fhir.stu3.proto.Uri
	(*datatypes_go_proto.LanguageCode)(nil),                         // 99: google.fhir.stu3.proto.LanguageCode
	(*metadatatypes_go_proto.Narrative)(nil),                        // 100: google.fhir.stu3.proto.Narrative
	(*resources_go_proto.ContainedResource)(nil),                    // 101: google.fhir.stu3.proto.ContainedResource
	(*datatypes_go_proto.Extension)(nil),                            // 102: google.fhir.stu3.proto.Extension
	(*datatypes_go_proto.Identifier)(nil),                           // 103: google.fhir.stu3.proto.Identifier
	(*codes_go_proto.AllergyIntoleranceClinicalStatusCode)(nil),     // 104: google.fhir.stu3.proto.AllergyIntoleranceClinicalStatusCode
	(*codes_go_proto.AllergyIntoleranceVerificationStatusCode)(nil), // 105: google.fhir.stu3.proto.AllergyIntoleranceVerificationStatusCode
	(*codes_go_proto.AllergyIntoleranceTypeCode)(nil),               // 106: google.fhir.stu3.proto.AllergyIntoleranceTypeCode
	(*codes_go_proto.AllergyIntoleranceCategoryCode)(nil),           // 107: google.fhir.stu3.proto.AllergyIntoleranceCategoryCode
	(*codes_go_proto.AllergyIntoleranceCriticalityCode)(nil),        // 108: google.fhir.stu3.proto.AllergyIntoleranceCriticalityCode
	(*datatypes_go_proto.CodeableConcept)(nil),                      // 109: google.fhir.stu3.proto.CodeableConcept
	(*datatypes_go_proto.Reference)(nil),                            // 110: google.fhir.stu3.proto.Reference
	(*datatypes_go_proto.DateTime)(nil),                             // 111: google.fhir.stu3.proto.DateTime
	(*datatypes_go_proto.Annotation)(nil),                           // 112: google.fhir.stu3.proto.Annotation
	(*datatypes_go_proto.String)(nil),                               // 113: google.fhir.stu3.proto.String
	(*uscore_codes_go_proto.UsCoreBirthSexCode)(nil),                // 114: google.fhir.stu3.uscore.UsCoreBirthSexCode
	(*codes_go_proto.CarePlanStatusCode)(nil),                       // 115: google.fhir.stu3.proto.CarePlanStatusCode
	(*codes_go_proto.CarePlanIntentCode)(nil),                       // 116: google.fhir.stu3.proto.CarePlanIntentCode
	(*datatypes_go_proto.Period)(nil),                               // 117: google.fhir.stu3.proto.Period
	(*codes_go_proto.CareTeamStatusCode)(nil),                       // 118: google.fhir.stu3.proto.CareTeamStatusCode
	(*codes_go_proto.ConditionClinicalStatusCodesCode)(nil),         // 119: google.fhir.stu3.proto.ConditionClinicalStatusCodesCode
	(*codes_go_proto.ConditionVerificationStatusCode)(nil),          // 120: google.fhir.stu3.proto.ConditionVerificationStatusCode
	(*codes_go_proto.FHIRDeviceStatusCode)(nil),                     // 121: google.fhir.stu3.proto.FHIRDeviceStatusCode
	(*datatypes_go_proto.ContactPoint)(nil),                         // 122: google.fhir.stu3.proto.ContactPoint
	(*codes_go_proto.DiagnosticReportStatusCode)(nil),               // 123: google.fhir.stu3.proto.DiagnosticReportStatusCode
	(*datatypes_go_proto.Instant)(nil),                              // 124: google.fhir.stu3.proto.Instant
	(*datatypes_go_proto.Attachment)(nil),                           // 125: google.fhir.stu3.proto.Attachment
	(*datatypes_go_proto.Boolean)(nil),                              // 126: google.fhir.stu3.proto.Boolean
	(*codes_go_proto.DocumentReferenceStatusCode)(nil),              // 127: google.fhir.stu3.proto.DocumentReferenceStatusCode
	(*codes_go_proto.CompositionStatusCode)(nil),                    // 128: google.fhir.stu3.proto.CompositionStatusCode
	(*codes_go_proto.EncounterStatusCode)(nil),                      // 129: google.fhir.stu3.proto.EncounterStatusCode
	(*datatypes_go_proto.Coding)(nil),                               // 130: google.fhir.stu3.proto.Coding
	(*datatypes_go_proto.Duration)(nil),                             // 131: google.fhir.stu3.proto.Duration
	(*codes_go_proto.GoalStatusCode)(nil),                           // 132: google.fhir.stu3.proto.GoalStatusCode
	(*datatypes_go_proto.Date)(nil),                                 // 133: google.fhir.stu3.proto.Date
	(*codes_go_proto.ImmunizationStatusCodesCode)(nil),              // 134: google.fhir.stu3.proto.ImmunizationStatusCodesCode
	(*datatypes_go_proto.SimpleQuantity)(nil),                       // 135: google.fhir.stu3.proto.SimpleQuantity
	(*codes_go_proto.LocationStatusCode)(nil),                       // 136: google.fhir.stu3.proto.LocationStatusCode
	(*codes_go_proto.LocationModeCode)(nil),                         // 137: google.fhir.stu3.proto.LocationModeCode
	(*datatypes_go_proto.Address)(nil),                              // 138: google.fhir.stu3.proto.Address
	(*codes_go_proto.MedicationStatusCode)(nil),                     // 139: google.fhir.stu3.proto.MedicationStatusCode
	(*codes_go_proto.MedicationRequestStatusCode)(nil),              // 140: google.fhir.stu3.proto.MedicationRequestStatusCode
	(*codes_go_proto.MedicationRequestIntentCode)(nil),              // 141: google.fhir.stu3.proto.MedicationRequestIntentCode
	(*codes_go_proto.MedicationRequestPriorityCode)(nil),            // 142: google.fhir.stu3.proto.MedicationRequestPriorityCode
	(*datatypes_go_proto.Dosage)(nil),                               // 143: google.fhir.stu3.proto.Dosage
	(*codes_go_proto.MedicationStatementStatusCode)(nil),            // 144: google.fhir.stu3.proto.MedicationStatementStatusCode
	(*codes_go_proto.MedicationStatementTakenCode)(nil),             // 145: google.fhir.stu3.proto.MedicationStatementTakenCode
	(*codes_go_proto.ObservationStatusCode)(nil),                    // 146: google.fhir.stu3.proto.ObservationStatusCode
	(*datatypes_go_proto.HumanName)(nil),                            // 147: google.fhir.stu3.proto.HumanName
	(*codes_go_proto.AdministrativeGenderCode)(nil),                 // 148: google.fhir.stu3.proto.AdministrativeGenderCode
	(*codes_go_proto.EventStatusCode)(nil),                          // 149: google.fhir.stu3.proto.EventStatusCode
	(*codes_go_proto.ResourceTypeCode)(nil),                         // 150: google.fhir.stu3.proto.ResourceTypeCode
	(*datatypes_go_proto.Age)(nil),                                  // 151: google.fhir.stu3.proto.Age
	(*datatypes_go_proto.Range)(nil),                                // 152: google.fhir.stu3.proto.Range
	(*codes_go_proto.AllergyIntoleranceSeverityCode)(nil),           // 153: google.fhir.stu3.proto.AllergyIntoleranceSeverityCode
	(*codes_go_proto.CarePlanActivityStatusCode)(nil),               // 154: google.fhir.stu3.proto.CarePlanActivityStatusCode
	(*datatypes_go_proto.Timing)(nil),                               // 155: google.fhir.stu3.proto.Timing
	(*datatypes_go_proto.Base64Binary)(nil),                         // 156: google.fhir.stu3.proto.Base64Binary
	(*codes_go_proto.UDIEntryTypeCode)(nil),                         // 157: google.fhir.stu3.proto.UDIEntryTypeCode
	(*codes_go_proto.DocumentRelationshipTypeCode)(nil),             // 158: google.fhir.stu3.proto.DocumentRelationshipTypeCode
	(*datatypes_go_proto.PositiveInt)(nil),                          // 159: google.fhir.stu3.proto.PositiveInt
	(*codes_go_proto.EncounterLocationStatusCode)(nil),              // 160: google.fhir.stu3.proto.EncounterLocationStatusCode
	(*datatypes_go_proto.Quantity)(nil),                             // 161: google.fhir.stu3.proto.Quantity
	(*datatypes_go_proto.Decimal)(nil),                              // 162: google.fhir.stu3.proto.Decimal
	(*datatypes_go_proto.Ratio)(nil),                                // 163: google.fhir.stu3.proto.Ratio
	(*datatypes_go_proto.SampledData)(nil),                          // 164: google.fhir.stu3.proto.SampledData
	(*datatypes_go_proto.Time)(nil),                                 // 165: google.fhir.stu3.proto.Time
	(*codes_go_proto.ObservationRelationshipTypeCode)(nil),          // 166: google.fhir.stu3.proto.ObservationRelationshipTypeCode
	(*datatypes_go_proto.Integer)(nil),                              // 167: google.fhir.stu3.proto.Integer
	(*codes_go_proto.LinkTypeCode)(nil),                             // 168: google.fhir.stu3.proto.LinkTypeCode
	(*datatypes_go_proto.DaysOfWeekCode)(nil),                       // 169: google.fhir.stu3.proto.DaysOfWeekCode
}
var file_proto_google_fhir_proto_stu3_uscore_proto_depIdxs = []int32{
	96,  // 0: google.fhir.stu3.uscore.UsCoreAllergyintolerance.id:type_name -> google.fhir.stu3.proto.Id
	97,  // 1: google.fhir.stu3.uscore.UsCoreAllergyintolerance.meta:type_name -> google.fhir.stu3.proto.Meta
	98,  // 2: google.fhir.stu3.uscore.UsCoreAllergyintolerance.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	99,  // 3: google.fhir.stu3.uscore.UsCoreAllergyintolerance.language:type_name -> google.fhir.stu3.proto.LanguageCode
	100, // 4: google.fhir.stu3.uscore.UsCoreAllergyintolerance.text:type_name -> google.fhir.stu3.proto.Narrative
	101, // 5: google.fhir.stu3.uscore.UsCoreAllergyintolerance.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	102, // 6: google.fhir.stu3.uscore.UsCoreAllergyintolerance.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 7: google.fhir.stu3.uscore.UsCoreAllergyintolerance.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	103, // 8: google.fhir.stu3.uscore.UsCoreAllergyintolerance.identifier:type_name -> google.fhir.stu3.proto.Identifier
	104, // 9: google.fhir.stu3.uscore.UsCoreAllergyintolerance.clinical_status:type_name -> google.fhir.stu3.proto.AllergyIntoleranceClinicalStatusCode
	105, // 10: google.fhir.stu3.uscore.UsCoreAllergyintolerance.verification_status:type_name -> google.fhir.stu3.proto.AllergyIntoleranceVerificationStatusCode
	106, // 11: google.fhir.stu3.uscore.UsCoreAllergyintolerance.type:type_name -> google.fhir.stu3.proto.AllergyIntoleranceTypeCode
	107, // 12: google.fhir.stu3.uscore.UsCoreAllergyintolerance.category:type_name -> google.fhir.stu3.proto.AllergyIntoleranceCategoryCode
	108, // 13: google.fhir.stu3.uscore.UsCoreAllergyintolerance.criticality:type_name -> google.fhir.stu3.proto.AllergyIntoleranceCriticalityCode
	109, // 14: google.fhir.stu3.uscore.UsCoreAllergyintolerance.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 15: google.fhir.stu3.uscore.UsCoreAllergyintolerance.patient:type_name -> google.fhir.stu3.proto.Reference
	26,  // 16: google.fhir.stu3.uscore.UsCoreAllergyintolerance.onset:type_name -> google.fhir.stu3.uscore.UsCoreAllergyintolerance.Onset
	111, // 17: google.fhir.stu3.uscore.UsCoreAllergyintolerance.asserted_date:type_name -> google.fhir.stu3.proto.DateTime
	110, // 18: google.fhir.stu3.uscore.UsCoreAllergyintolerance.recorder:type_name -> google.fhir.stu3.proto.Reference
	110, // 19: google.fhir.stu3.uscore.UsCoreAllergyintolerance.asserter:type_name -> google.fhir.stu3.proto.Reference
	111, // 20: google.fhir.stu3.uscore.UsCoreAllergyintolerance.last_occurrence:type_name -> google.fhir.stu3.proto.DateTime
	112, // 21: google.fhir.stu3.uscore.UsCoreAllergyintolerance.note:type_name -> google.fhir.stu3.proto.Annotation
	27,  // 22: google.fhir.stu3.uscore.UsCoreAllergyintolerance.reaction:type_name -> google.fhir.stu3.uscore.UsCoreAllergyintolerance.Reaction
	113, // 23: google.fhir.stu3.uscore.PatientUSCoreBirthSexExtension.id:type_name -> google.fhir.stu3.proto.String
	102, // 24: google.fhir.stu3.uscore.PatientUSCoreBirthSexExtension.extension:type_name -> google.fhir.stu3.proto.Extension
	114, // 25: google.fhir.stu3.uscore.PatientUSCoreBirthSexExtension.value_code:type_name -> google.fhir.stu3.uscore.UsCoreBirthSexCode
	96,  // 26: google.fhir.stu3.uscore.UsCoreCareplan.id:type_name -> google.fhir.stu3.proto.Id
	97,  // 27: google.fhir.stu3.uscore.UsCoreCareplan.meta:type_name -> google.fhir.stu3.proto.Meta
	98,  // 28: google.fhir.stu3.uscore.UsCoreCareplan.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	99,  // 29: google.fhir.stu3.uscore.UsCoreCareplan.language:type_name -> google.fhir.stu3.proto.LanguageCode
	100, // 30: google.fhir.stu3.uscore.UsCoreCareplan.text:type_name -> google.fhir.stu3.proto.Narrative
	101, // 31: google.fhir.stu3.uscore.UsCoreCareplan.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	102, // 32: google.fhir.stu3.uscore.UsCoreCareplan.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 33: google.fhir.stu3.uscore.UsCoreCareplan.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	103, // 34: google.fhir.stu3.uscore.UsCoreCareplan.identifier:type_name -> google.fhir.stu3.proto.Identifier
	110, // 35: google.fhir.stu3.uscore.UsCoreCareplan.definition:type_name -> google.fhir.stu3.proto.Reference
	110, // 36: google.fhir.stu3.uscore.UsCoreCareplan.based_on:type_name -> google.fhir.stu3.proto.Reference
	110, // 37: google.fhir.stu3.uscore.UsCoreCareplan.replaces:type_name -> google.fhir.stu3.proto.Reference
	110, // 38: google.fhir.stu3.uscore.UsCoreCareplan.part_of:type_name -> google.fhir.stu3.proto.Reference
	115, // 39: google.fhir.stu3.uscore.UsCoreCareplan.status:type_name -> google.fhir.stu3.proto.CarePlanStatusCode
	116, // 40: google.fhir.stu3.uscore.UsCoreCareplan.intent:type_name -> google.fhir.stu3.proto.CarePlanIntentCode
	109, // 41: google.fhir.stu3.uscore.UsCoreCareplan.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	113, // 42: google.fhir.stu3.uscore.UsCoreCareplan.title:type_name -> google.fhir.stu3.proto.String
	113, // 43: google.fhir.stu3.uscore.UsCoreCareplan.description:type_name -> google.fhir.stu3.proto.String
	110, // 44: google.fhir.stu3.uscore.UsCoreCareplan.subject:type_name -> google.fhir.stu3.proto.Reference
	110, // 45: google.fhir.stu3.uscore.UsCoreCareplan.context:type_name -> google.fhir.stu3.proto.Reference
	117, // 46: google.fhir.stu3.uscore.UsCoreCareplan.period:type_name -> google.fhir.stu3.proto.Period
	110, // 47: google.fhir.stu3.uscore.UsCoreCareplan.author:type_name -> google.fhir.stu3.proto.Reference
	110, // 48: google.fhir.stu3.uscore.UsCoreCareplan.care_team:type_name -> google.fhir.stu3.proto.Reference
	110, // 49: google.fhir.stu3.uscore.UsCoreCareplan.addresses:type_name -> google.fhir.stu3.proto.Reference
	110, // 50: google.fhir.stu3.uscore.UsCoreCareplan.supporting_info:type_name -> google.fhir.stu3.proto.Reference
	110, // 51: google.fhir.stu3.uscore.UsCoreCareplan.goal:type_name -> google.fhir.stu3.proto.Reference
	28,  // 52: google.fhir.stu3.uscore.UsCoreCareplan.activity:type_name -> google.fhir.stu3.uscore.UsCoreCareplan.Activity
	112, // 53: google.fhir.stu3.uscore.UsCoreCareplan.note:type_name -> google.fhir.stu3.proto.Annotation
	96,  // 54: google.fhir.stu3.uscore.UsCoreCareteam.id:type_name -> google.fhir.stu3.proto.Id
	97,  // 55: google.fhir.stu3.uscore.UsCoreCareteam.meta:type_name -> google.fhir.stu3.proto.Meta
	98,  // 56: google.fhir.stu3.uscore.UsCoreCareteam.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	99,  // 57: google.fhir.stu3.uscore.UsCoreCareteam.language:type_name -> google.fhir.stu3.proto.LanguageCode
	100, // 58: google.fhir.stu3.uscore.UsCoreCareteam.text:type_name -> google.fhir.stu3.proto.Narrative
	101, // 59: google.fhir.stu3.uscore.UsCoreCareteam.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	102, // 60: google.fhir.stu3.uscore.UsCoreCareteam.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 61: google.fhir.stu3.uscore.UsCoreCareteam.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	103, // 62: google.fhir.stu3.uscore.UsCoreCareteam.identifier:type_name -> google.fhir.stu3.proto.Identifier
	118, // 63: google.fhir.stu3.uscore.UsCoreCareteam.status:type_name -> google.fhir.stu3.proto.CareTeamStatusCode
	109, // 64: google.fhir.stu3.uscore.UsCoreCareteam.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	113, // 65: google.fhir.stu3.uscore.UsCoreCareteam.name:type_name -> google.fhir.stu3.proto.String
	110, // 66: google.fhir.stu3.uscore.UsCoreCareteam.subject:type_name -> google.fhir.stu3.proto.Reference
	110, // 67: google.fhir.stu3.uscore.UsCoreCareteam.context:type_name -> google.fhir.stu3.proto.Reference
	117, // 68: google.fhir.stu3.uscore.UsCoreCareteam.period:type_name -> google.fhir.stu3.proto.Period
	32,  // 69: google.fhir.stu3.uscore.UsCoreCareteam.participant:type_name -> google.fhir.stu3.uscore.UsCoreCareteam.Participant
	109, // 70: google.fhir.stu3.uscore.UsCoreCareteam.reason_code:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 71: google.fhir.stu3.uscore.UsCoreCareteam.reason_reference:type_name -> google.fhir.stu3.proto.Reference
	110, // 72: google.fhir.stu3.uscore.UsCoreCareteam.managing_organization:type_name -> google.fhir.stu3.proto.Reference
	112, // 73: google.fhir.stu3.uscore.UsCoreCareteam.note:type_name -> google.fhir.stu3.proto.Annotation
	96,  // 74: google.fhir.stu3.uscore.UsCoreCondition.id:type_name -> google.fhir.stu3.proto.Id
	97,  // 75: google.fhir.stu3.uscore.UsCoreCondition.meta:type_name -> google.fhir.stu3.proto.Meta
	98,  // 76: google.fhir.stu3.uscore.UsCoreCondition.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	99,  // 77: google.fhir.stu3.uscore.UsCoreCondition.language:type_name -> google.fhir.stu3.proto.LanguageCode
	100, // 78: google.fhir.stu3.uscore.UsCoreCondition.text:type_name -> google.fhir.stu3.proto.Narrative
	101, // 79: google.fhir.stu3.uscore.UsCoreCondition.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	102, // 80: google.fhir.stu3.uscore.UsCoreCondition.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 81: google.fhir.stu3.uscore.UsCoreCondition.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	103, // 82: google.fhir.stu3.uscore.UsCoreCondition.identifier:type_name -> google.fhir.stu3.proto.Identifier
	119, // 83: google.fhir.stu3.uscore.UsCoreCondition.clinical_status:type_name -> google.fhir.stu3.proto.ConditionClinicalStatusCodesCode
	120, // 84: google.fhir.stu3.uscore.UsCoreCondition.verification_status:type_name -> google.fhir.stu3.proto.ConditionVerificationStatusCode
	109, // 85: google.fhir.stu3.uscore.UsCoreCondition.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 86: google.fhir.stu3.uscore.UsCoreCondition.severity:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 87: google.fhir.stu3.uscore.UsCoreCondition.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 88: google.fhir.stu3.uscore.UsCoreCondition.body_site:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 89: google.fhir.stu3.uscore.UsCoreCondition.subject:type_name -> google.fhir.stu3.proto.Reference
	110, // 90: google.fhir.stu3.uscore.UsCoreCondition.context:type_name -> google.fhir.stu3.proto.Reference
	33,  // 91: google.fhir.stu3.uscore.UsCoreCondition.onset:type_name -> google.fhir.stu3.uscore.UsCoreCondition.Onset
	34,  // 92: google.fhir.stu3.uscore.UsCoreCondition.abatement:type_name -> google.fhir.stu3.uscore.UsCoreCondition.Abatement
	111, // 93: google.fhir.stu3.uscore.UsCoreCondition.asserted_date:type_name -> google.fhir.stu3.proto.DateTime
	110, // 94: google.fhir.stu3.uscore.UsCoreCondition.asserter:type_name -> google.fhir.stu3.proto.Reference
	35,  // 95: google.fhir.stu3.uscore.UsCoreCondition.stage:type_name -> google.fhir.stu3.uscore.UsCoreCondition.Stage
	36,  // 96: google.fhir.stu3.uscore.UsCoreCondition.evidence:type_name -> google.fhir.stu3.uscore.UsCoreCondition.Evidence
	112, // 97: google.fhir.stu3.uscore.UsCoreCondition.note:type_name -> google.fhir.stu3.proto.Annotation
	96,  // 98: google.fhir.stu3.uscore.UsCoreDevice.id:type_name -> google.fhir.stu3.proto.Id
	97,  // 99: google.fhir.stu3.uscore.UsCoreDevice.meta:type_name -> google.fhir.stu3.proto.Meta
	98,  // 100: google.fhir.stu3.uscore.UsCoreDevice.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	99,  // 101: google.fhir.stu3.uscore.UsCoreDevice.language:type_name -> google.fhir.stu3.proto.LanguageCode
	100, // 102: google.fhir.stu3.uscore.UsCoreDevice.text:type_name -> google.fhir.stu3.proto.Narrative
	101, // 103: google.fhir.stu3.uscore.UsCoreDevice.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	102, // 104: google.fhir.stu3.uscore.UsCoreDevice.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 105: google.fhir.stu3.uscore.UsCoreDevice.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	103, // 106: google.fhir.stu3.uscore.UsCoreDevice.identifier:type_name -> google.fhir.stu3.proto.Identifier
	37,  // 107: google.fhir.stu3.uscore.UsCoreDevice.udi:type_name -> google.fhir.stu3.uscore.UsCoreDevice.Udi
	121, // 108: google.fhir.stu3.uscore.UsCoreDevice.status:type_name -> google.fhir.stu3.proto.FHIRDeviceStatusCode
	109, // 109: google.fhir.stu3.uscore.UsCoreDevice.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	113, // 110: google.fhir.stu3.uscore.UsCoreDevice.lot_number:type_name -> google.fhir.stu3.proto.String
	113, // 111: google.fhir.stu3.uscore.UsCoreDevice.manufacturer:type_name -> google.fhir.stu3.proto.String
	111, // 112: google.fhir.stu3.uscore.UsCoreDevice.manufacture_date:type_name -> google.fhir.stu3.proto.DateTime
	111, // 113: google.fhir.stu3.uscore.UsCoreDevice.expiration_date:type_name -> google.fhir.stu3.proto.DateTime
	113, // 114: google.fhir.stu3.uscore.UsCoreDevice.model:type_name -> google.fhir.stu3.proto.String
	113, // 115: google.fhir.stu3.uscore.UsCoreDevice.version:type_name -> google.fhir.stu3.proto.String
	110, // 116: google.fhir.stu3.uscore.UsCoreDevice.patient:type_name -> google.fhir.stu3.proto.Reference
	110, // 117: google.fhir.stu3.uscore.UsCoreDevice.owner:type_name -> google.fhir.stu3.proto.Reference
	122, // 118: google.fhir.stu3.uscore.UsCoreDevice.contact:type_name -> google.fhir.stu3.proto.ContactPoint
	110, // 119: google.fhir.stu3.uscore.UsCoreDevice.location:type_name -> google.fhir.stu3.proto.Reference
	98,  // 120: google.fhir.stu3.uscore.UsCoreDevice.url:type_name -> google.fhir.stu3.proto.Uri
	112, // 121: google.fhir.stu3.uscore.UsCoreDevice.note:type_name -> google.fhir.stu3.proto.Annotation
	109, // 122: google.fhir.stu3.uscore.UsCoreDevice.safety:type_name -> google.fhir.stu3.proto.CodeableConcept
	96,  // 123: google.fhir.stu3.uscore.UsCoreDiagnosticreport.id:type_name -> google.fhir.stu3.proto.Id
	97,  // 124: google.fhir.stu3.uscore.UsCoreDiagnosticreport.meta:type_name -> google.fhir.stu3.proto.Meta
	98,  // 125: google.fhir.stu3.uscore.UsCoreDiagnosticreport.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	99,  // 126: google.fhir.stu3.uscore.UsCoreDiagnosticreport.language:type_name -> google.fhir.stu3.proto.LanguageCode
	100, // 127: google.fhir.stu3.uscore.UsCoreDiagnosticreport.text:type_name -> google.fhir.stu3.proto.Narrative
	101, // 128: google.fhir.stu3.uscore.UsCoreDiagnosticreport.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	102, // 129: google.fhir.stu3.uscore.UsCoreDiagnosticreport.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 130: google.fhir.stu3.uscore.UsCoreDiagnosticreport.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	103, // 131: google.fhir.stu3.uscore.UsCoreDiagnosticreport.identifier:type_name -> google.fhir.stu3.proto.Identifier
	110, // 132: google.fhir.stu3.uscore.UsCoreDiagnosticreport.based_on:type_name -> google.fhir.stu3.proto.Reference
	123, // 133: google.fhir.stu3.uscore.UsCoreDiagnosticreport.status:type_name -> google.fhir.stu3.proto.DiagnosticReportStatusCode
	109, // 134: google.fhir.stu3.uscore.UsCoreDiagnosticreport.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 135: google.fhir.stu3.uscore.UsCoreDiagnosticreport.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 136: google.fhir.stu3.uscore.UsCoreDiagnosticreport.subject:type_name -> google.fhir.stu3.proto.Reference
	110, // 137: google.fhir.stu3.uscore.UsCoreDiagnosticreport.context:type_name -> google.fhir.stu3.proto.Reference
	38,  // 138: google.fhir.stu3.uscore.UsCoreDiagnosticreport.effective:type_name -> google.fhir.stu3.uscore.UsCoreDiagnosticreport.Effective
	124, // 139: google.fhir.stu3.uscore.UsCoreDiagnosticreport.issued:type_name -> google.fhir.stu3.proto.Instant
	39,  // 140: google.fhir.stu3.uscore.UsCoreDiagnosticreport.performer:type_name -> google.fhir.stu3.uscore.UsCoreDiagnosticreport.Performer
	110, // 141: google.fhir.stu3.uscore.UsCoreDiagnosticreport.specimen:type_name -> google.fhir.stu3.proto.Reference
	110, // 142: google.fhir.stu3.uscore.UsCoreDiagnosticreport.result:type_name -> google.fhir.stu3.proto.Reference
	110, // 143: google.fhir.stu3.uscore.UsCoreDiagnosticreport.imaging_study:type_name -> google.fhir.stu3.proto.Reference
	40,  // 144: google.fhir.stu3.uscore.UsCoreDiagnosticreport.image:type_name -> google.fhir.stu3.uscore.UsCoreDiagnosticreport.Image
	113, // 145: google.fhir.stu3.uscore.UsCoreDiagnosticreport.conclusion:type_name -> google.fhir.stu3.proto.String
	109, // 146: google.fhir.stu3.uscore.UsCoreDiagnosticreport.coded_diagnosis:type_name -> google.fhir.stu3.proto.CodeableConcept
	125, // 147: google.fhir.stu3.uscore.UsCoreDiagnosticreport.presented_form:type_name -> google.fhir.stu3.proto.Attachment
	113, // 148: google.fhir.stu3.uscore.UsCoreDirectEmail.id:type_name -> google.fhir.stu3.proto.String
	102, // 149: google.fhir.stu3.uscore.UsCoreDirectEmail.extension:type_name -> google.fhir.stu3.proto.Extension
	126, // 150: google.fhir.stu3.uscore.UsCoreDirectEmail.value_boolean:type_name -> google.fhir.stu3.proto.Boolean
	96,  // 151: google.fhir.stu3.uscore.UsCoreDocumentreference.id:type_name -> google.fhir.stu3.proto.Id
	97,  // 152: google.fhir.stu3.uscore.UsCoreDocumentreference.meta:type_name -> google.fhir.stu3.proto.Meta
	98,  // 153: google.fhir.stu3.uscore.UsCoreDocumentreference.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	99,  // 154: google.fhir.stu3.uscore.UsCoreDocumentreference.language:type_name -> google.fhir.stu3.proto.LanguageCode
	100, // 155: google.fhir.stu3.uscore.UsCoreDocumentreference.text:type_name -> google.fhir.stu3.proto.Narrative
	101, // 156: google.fhir.stu3.uscore.UsCoreDocumentreference.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	102, // 157: google.fhir.stu3.uscore.UsCoreDocumentreference.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 158: google.fhir.stu3.uscore.UsCoreDocumentreference.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	103, // 159: google.fhir.stu3.uscore.UsCoreDocumentreference.master_identifier:type_name -> google.fhir.stu3.proto.Identifier
	103, // 160: google.fhir.stu3.uscore.UsCoreDocumentreference.identifier:type_name -> google.fhir.stu3.proto.Identifier
	127, // 161: google.fhir.stu3.uscore.UsCoreDocumentreference.status:type_name -> google.fhir.stu3.proto.DocumentReferenceStatusCode
	128, // 162: google.fhir.stu3.uscore.UsCoreDocumentreference.doc_status:type_name -> google.fhir.stu3.proto.CompositionStatusCode
	109, // 163: google.fhir.stu3.uscore.UsCoreDocumentreference.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 164: google.fhir.stu3.uscore.UsCoreDocumentreference.class_value:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 165: google.fhir.stu3.uscore.UsCoreDocumentreference.subject:type_name -> google.fhir.stu3.proto.Reference
	111, // 166: google.fhir.stu3.uscore.UsCoreDocumentreference.created:type_name -> google.fhir.stu3.proto.DateTime
	124, // 167: google.fhir.stu3.uscore.UsCoreDocumentreference.indexed:type_name -> google.fhir.stu3.proto.Instant
	110, // 168: google.fhir.stu3.uscore.UsCoreDocumentreference.author:type_name -> google.fhir.stu3.proto.Reference
	110, // 169: google.fhir.stu3.uscore.UsCoreDocumentreference.authenticator:type_name -> google.fhir.stu3.proto.Reference
	110, // 170: google.fhir.stu3.uscore.UsCoreDocumentreference.custodian:type_name -> google.fhir.stu3.proto.Reference
	41,  // 171: google.fhir.stu3.uscore.UsCoreDocumentreference.relates_to:type_name -> google.fhir.stu3.uscore.UsCoreDocumentreference.RelatesTo
	113, // 172: google.fhir.stu3.uscore.UsCoreDocumentreference.description:type_name -> google.fhir.stu3.proto.String
	109, // 173: google.fhir.stu3.uscore.UsCoreDocumentreference.security_label:type_name -> google.fhir.stu3.proto.CodeableConcept
	42,  // 174: google.fhir.stu3.uscore.UsCoreDocumentreference.content:type_name -> google.fhir.stu3.uscore.UsCoreDocumentreference.Content
	43,  // 175: google.fhir.stu3.uscore.UsCoreDocumentreference.context:type_name -> google.fhir.stu3.uscore.UsCoreDocumentreference.Context
	96,  // 176: google.fhir.stu3.uscore.UsCoreEncounter.id:type_name -> google.fhir.stu3.proto.Id
	97,  // 177: google.fhir.stu3.uscore.UsCoreEncounter.meta:type_name -> google.fhir.stu3.proto.Meta
	98,  // 178: google.fhir.stu3.uscore.UsCoreEncounter.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	99,  // 179: google.fhir.stu3.uscore.UsCoreEncounter.language:type_name -> google.fhir.stu3.proto.LanguageCode
	100, // 180: google.fhir.stu3.uscore.UsCoreEncounter.text:type_name -> google.fhir.stu3.proto.Narrative
	101, // 181: google.fhir.stu3.uscore.UsCoreEncounter.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	102, // 182: google.fhir.stu3.uscore.UsCoreEncounter.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 183: google.fhir.stu3.uscore.UsCoreEncounter.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	103, // 184: google.fhir.stu3.uscore.UsCoreEncounter.identifier:type_name -> google.fhir.stu3.proto.Identifier
	129, // 185: google.fhir.stu3.uscore.UsCoreEncounter.status:type_name -> google.fhir.stu3.proto.EncounterStatusCode
	45,  // 186: google.fhir.stu3.uscore.UsCoreEncounter.status_history:type_name -> google.fhir.stu3.uscore.UsCoreEncounter.StatusHistory
	130, // 187: google.fhir.stu3.uscore.UsCoreEncounter.class_value:type_name -> google.fhir.stu3.proto.Coding
	46,  // 188: google.fhir.stu3.uscore.UsCoreEncounter.class_history:type_name -> google.fhir.stu3.uscore.UsCoreEncounter.ClassHistory
	109, // 189: google.fhir.stu3.uscore.UsCoreEncounter.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 190: google.fhir.stu3.uscore.UsCoreEncounter.priority:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 191: google.fhir.stu3.uscore.UsCoreEncounter.subject:type_name -> google.fhir.stu3.proto.Reference
	110, // 192: google.fhir.stu3.uscore.UsCoreEncounter.episode_of_care:type_name -> google.fhir.stu3.proto.Reference
	110, // 193: google.fhir.stu3.uscore.UsCoreEncounter.incoming_referral:type_name -> google.fhir.stu3.proto.Reference
	47,  // 194: google.fhir.stu3.uscore.UsCoreEncounter.participant:type_name -> google.fhir.stu3.uscore.UsCoreEncounter.Participant
	110, // 195: google.fhir.stu3.uscore.UsCoreEncounter.appointment:type_name -> google.fhir.stu3.proto.Reference
	117, // 196: google.fhir.stu3.uscore.UsCoreEncounter.period:type_name -> google.fhir.stu3.proto.Period
	131, // 197: google.fhir.stu3.uscore.UsCoreEncounter.length:type_name -> google.fhir.stu3.proto.Duration
	109, // 198: google.fhir.stu3.uscore.UsCoreEncounter.reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	48,  // 199: google.fhir.stu3.uscore.UsCoreEncounter.diagnosis:type_name -> google.fhir.stu3.uscore.UsCoreEncounter.Diagnosis
	110, // 200: google.fhir.stu3.uscore.UsCoreEncounter.account:type_name -> google.fhir.stu3.proto.Reference
	49,  // 201: google.fhir.stu3.uscore.UsCoreEncounter.hospitalization:type_name -> google.fhir.stu3.uscore.UsCoreEncounter.Hospitalization
	50,  // 202: google.fhir.stu3.uscore.UsCoreEncounter.location:type_name -> google.fhir.stu3.uscore.UsCoreEncounter.Location
	110, // 203: google.fhir.stu3.uscore.UsCoreEncounter.service_provider:type_name -> google.fhir.stu3.proto.Reference
	110, // 204: google.fhir.stu3.uscore.UsCoreEncounter.part_of:type_name -> google.fhir.stu3.proto.Reference
	113, // 205: google.fhir.stu3.uscore.PatientUSCoreEthnicityExtension.id:type_name -> google.fhir.stu3.proto.String
	102, // 206: google.fhir.stu3.uscore.PatientUSCoreEthnicityExtension.extension:type_name -> google.fhir.stu3.proto.Extension
	130, // 207: google.fhir.stu3.uscore.PatientUSCoreEthnicityExtension.omb_category:type_name -> google.fhir.stu3.proto.Coding
	130, // 208: google.fhir.stu3.uscore.PatientUSCoreEthnicityExtension.detailed:type_name -> google.fhir.stu3.proto.Coding
	113, // 209: google.fhir.stu3.uscore.PatientUSCoreEthnicityExtension.text:type_name -> google.fhir.stu3.proto.String
	96,  // 210: google.fhir.stu3.uscore.UsCoreGoal.id:type_name -> google.fhir.stu3.proto.Id
	97,  // 211: google.fhir.stu3.uscore.UsCoreGoal.meta:type_name -> google.fhir.stu3.proto.Meta
	98,  // 212: google.fhir.stu3.uscore.UsCoreGoal.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	99,  // 213: google.fhir.stu3.uscore.UsCoreGoal.language:type_name -> google.fhir.stu3.proto.LanguageCode
	100, // 214: google.fhir.stu3.uscore.UsCoreGoal.text:type_name -> google.fhir.stu3.proto.Narrative
	101, // 215: google.fhir.stu3.uscore.UsCoreGoal.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	102, // 216: google.fhir.stu3.uscore.UsCoreGoal.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 217: google.fhir.stu3.uscore.UsCoreGoal.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	103, // 218: google.fhir.stu3.uscore.UsCoreGoal.identifier:type_name -> google.fhir.stu3.proto.Identifier
	132, // 219: google.fhir.stu3.uscore.UsCoreGoal.status:type_name -> google.fhir.stu3.proto.GoalStatusCode
	109, // 220: google.fhir.stu3.uscore.UsCoreGoal.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 221: google.fhir.stu3.uscore.UsCoreGoal.priority:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 222: google.fhir.stu3.uscore.UsCoreGoal.description:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 223: google.fhir.stu3.uscore.UsCoreGoal.subject:type_name -> google.fhir.stu3.proto.Reference
	51,  // 224: google.fhir.stu3.uscore.UsCoreGoal.start:type_name -> google.fhir.stu3.uscore.UsCoreGoal.Start
	52,  // 225: google.fhir.stu3.uscore.UsCoreGoal.target:type_name -> google.fhir.stu3.uscore.UsCoreGoal.Target
	133, // 226: google.fhir.stu3.uscore.UsCoreGoal.status_date:type_name -> google.fhir.stu3.proto.Date
	113, // 227: google.fhir.stu3.uscore.UsCoreGoal.status_reason:type_name -> google.fhir.stu3.proto.String
	110, // 228: google.fhir.stu3.uscore.UsCoreGoal.expressed_by:type_name -> google.fhir.stu3.proto.Reference
	110, // 229: google.fhir.stu3.uscore.UsCoreGoal.addresses:type_name -> google.fhir.stu3.proto.Reference
	112, // 230: google.fhir.stu3.uscore.UsCoreGoal.note:type_name -> google.fhir.stu3.proto.Annotation
	109, // 231: google.fhir.stu3.uscore.UsCoreGoal.outcome_code:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 232: google.fhir.stu3.uscore.UsCoreGoal.outcome_reference:type_name -> google.fhir.stu3.proto.Reference
	96,  // 233: google.fhir.stu3.uscore.UsCoreImmunization.id:type_name -> google.fhir.stu3.proto.Id
	97,  // 234: google.fhir.stu3.uscore.UsCoreImmunization.meta:type_name -> google.fhir.stu3.proto.Meta
	98,  // 235: google.fhir.stu3.uscore.UsCoreImmunization.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	99,  // 236: google.fhir.stu3.uscore.UsCoreImmunization.language:type_name -> google.fhir.stu3.proto.LanguageCode
	100, // 237: google.fhir.stu3.uscore.UsCoreImmunization.text:type_name -> google.fhir.stu3.proto.Narrative
	101, // 238: google.fhir.stu3.uscore.UsCoreImmunization.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	102, // 239: google.fhir.stu3.uscore.UsCoreImmunization.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 240: google.fhir.stu3.uscore.UsCoreImmunization.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	103, // 241: google.fhir.stu3.uscore.UsCoreImmunization.identifier:type_name -> google.fhir.stu3.proto.Identifier
	134, // 242: google.fhir.stu3.uscore.UsCoreImmunization.status:type_name -> google.fhir.stu3.proto.ImmunizationStatusCodesCode
	126, // 243: google.fhir.stu3.uscore.UsCoreImmunization.not_given:type_name -> google.fhir.stu3.proto.Boolean
	109, // 244: google.fhir.stu3.uscore.UsCoreImmunization.vaccine_code:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 245: google.fhir.stu3.uscore.UsCoreImmunization.patient:type_name -> google.fhir.stu3.proto.Reference
	110, // 246: google.fhir.stu3.uscore.UsCoreImmunization.encounter:type_name -> google.fhir.stu3.proto.Reference
	111, // 247: google.fhir.stu3.uscore.UsCoreImmunization.date:type_name -> google.fhir.stu3.proto.DateTime
	126, // 248: google.fhir.stu3.uscore.UsCoreImmunization.primary_source:type_name -> google.fhir.stu3.proto.Boolean
	109, // 249: google.fhir.stu3.uscore.UsCoreImmunization.report_origin:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 250: google.fhir.stu3.uscore.UsCoreImmunization.location:type_name -> google.fhir.stu3.proto.Reference
	110, // 251: google.fhir.stu3.uscore.UsCoreImmunization.manufacturer:type_name -> google.fhir.stu3.proto.Reference
	113, // 252: google.fhir.stu3.uscore.UsCoreImmunization.lot_number:type_name -> google.fhir.stu3.proto.String
	133, // 253: google.fhir.stu3.uscore.UsCoreImmunization.expiration_date:type_name -> google.fhir.stu3.proto.Date
	109, // 254: google.fhir.stu3.uscore.UsCoreImmunization.site:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 255: google.fhir.stu3.uscore.UsCoreImmunization.route:type_name -> google.fhir.stu3.proto.CodeableConcept
	135, // 256: google.fhir.stu3.uscore.UsCoreImmunization.dose_quantity:type_name -> google.fhir.stu3.proto.SimpleQuantity
	55,  // 257: google.fhir.stu3.uscore.UsCoreImmunization.practitioner:type_name -> google.fhir.stu3.uscore.UsCoreImmunization.Practitioner
	112, // 258: google.fhir.stu3.uscore.UsCoreImmunization.note:type_name -> google.fhir.stu3.proto.Annotation
	56,  // 259: google.fhir.stu3.uscore.UsCoreImmunization.explanation:type_name -> google.fhir.stu3.uscore.UsCoreImmunization.Explanation
	57,  // 260: google.fhir.stu3.uscore.UsCoreImmunization.reaction:type_name -> google.fhir.stu3.uscore.UsCoreImmunization.Reaction
	58,  // 261: google.fhir.stu3.uscore.UsCoreImmunization.vaccination_protocol:type_name -> google.fhir.stu3.uscore.UsCoreImmunization.VaccinationProtocol
	96,  // 262: google.fhir.stu3.uscore.UsCoreLocation.id:type_name -> google.fhir.stu3.proto.Id
	97,  // 263: google.fhir.stu3.uscore.UsCoreLocation.meta:type_name -> google.fhir.stu3.proto.Meta
	98,  // 264: google.fhir.stu3.uscore.UsCoreLocation.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	99,  // 265: google.fhir.stu3.uscore.UsCoreLocation.language:type_name -> google.fhir.stu3.proto.LanguageCode
	100, // 266: google.fhir.stu3.uscore.UsCoreLocation.text:type_name -> google.fhir.stu3.proto.Narrative
	101, // 267: google.fhir.stu3.uscore.UsCoreLocation.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	102, // 268: google.fhir.stu3.uscore.UsCoreLocation.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 269: google.fhir.stu3.uscore.UsCoreLocation.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	103, // 270: google.fhir.stu3.uscore.UsCoreLocation.identifier:type_name -> google.fhir.stu3.proto.Identifier
	136, // 271: google.fhir.stu3.uscore.UsCoreLocation.status:type_name -> google.fhir.stu3.proto.LocationStatusCode
	130, // 272: google.fhir.stu3.uscore.UsCoreLocation.operational_status:type_name -> google.fhir.stu3.proto.Coding
	113, // 273: google.fhir.stu3.uscore.UsCoreLocation.name:type_name -> google.fhir.stu3.proto.String
	113, // 274: google.fhir.stu3.uscore.UsCoreLocation.alias:type_name -> google.fhir.stu3.proto.String
	113, // 275: google.fhir.stu3.uscore.UsCoreLocation.description:type_name -> google.fhir.stu3.proto.String
	137, // 276: google.fhir.stu3.uscore.UsCoreLocation.mode:type_name -> google.fhir.stu3.proto.LocationModeCode
	109, // 277: google.fhir.stu3.uscore.UsCoreLocation.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	122, // 278: google.fhir.stu3.uscore.UsCoreLocation.telecom:type_name -> google.fhir.stu3.proto.ContactPoint
	138, // 279: google.fhir.stu3.uscore.UsCoreLocation.address:type_name -> google.fhir.stu3.proto.Address
	109, // 280: google.fhir.stu3.uscore.UsCoreLocation.physical_type:type_name -> google.fhir.stu3.proto.CodeableConcept
	59,  // 281: google.fhir.stu3.uscore.UsCoreLocation.position:type_name -> google.fhir.stu3.uscore.UsCoreLocation.Position
	110, // 282: google.fhir.stu3.uscore.UsCoreLocation.managing_organization:type_name -> google.fhir.stu3.proto.Reference
	110, // 283: google.fhir.stu3.uscore.UsCoreLocation.part_of:type_name -> google.fhir.stu3.proto.Reference
	110, // 284: google.fhir.stu3.uscore.UsCoreLocation.endpoint:type_name -> google.fhir.stu3.proto.Reference
	96,  // 285: google.fhir.stu3.uscore.UsCoreMedication.id:type_name -> google.fhir.stu3.proto.Id
	97,  // 286: google.fhir.stu3.uscore.UsCoreMedication.meta:type_name -> google.fhir.stu3.proto.Meta
	98,  // 287: google.fhir.stu3.uscore.UsCoreMedication.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	99,  // 288: google.fhir.stu3.uscore.UsCoreMedication.language:type_name -> google.fhir.stu3.proto.LanguageCode
	100, // 289: google.fhir.stu3.uscore.UsCoreMedication.text:type_name -> google.fhir.stu3.proto.Narrative
	101, // 290: google.fhir.stu3.uscore.UsCoreMedication.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	102, // 291: google.fhir.stu3.uscore.UsCoreMedication.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 292: google.fhir.stu3.uscore.UsCoreMedication.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	109, // 293: google.fhir.stu3.uscore.UsCoreMedication.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	139, // 294: google.fhir.stu3.uscore.UsCoreMedication.status:type_name -> google.fhir.stu3.proto.MedicationStatusCode
	126, // 295: google.fhir.stu3.uscore.UsCoreMedication.is_brand:type_name -> google.fhir.stu3.proto.Boolean
	126, // 296: google.fhir.stu3.uscore.UsCoreMedication.is_over_the_counter:type_name -> google.fhir.stu3.proto.Boolean
	110, // 297: google.fhir.stu3.uscore.UsCoreMedication.manufacturer:type_name -> google.fhir.stu3.proto.Reference
	109, // 298: google.fhir.stu3.uscore.UsCoreMedication.form:type_name -> google.fhir.stu3.proto.CodeableConcept
	60,  // 299: google.fhir.stu3.uscore.UsCoreMedication.ingredient:type_name -> google.fhir.stu3.uscore.UsCoreMedication.Ingredient
	61,  // 300: google.fhir.stu3.uscore.UsCoreMedication.package_value:type_name -> google.fhir.stu3.uscore.UsCoreMedication.Package
	125, // 301: google.fhir.stu3.uscore.UsCoreMedication.image:type_name -> google.fhir.stu3.proto.Attachment
	96,  // 302: google.fhir.stu3.uscore.UsCoreMedicationrequest.id:type_name -> google.fhir.stu3.proto.Id
	97,  // 303: google.fhir.stu3.uscore.UsCoreMedicationrequest.meta:type_name -> google.fhir.stu3.proto.Meta
	98,  // 304: google.fhir.stu3.uscore.UsCoreMedicationrequest.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	99,  // 305: google.fhir.stu3.uscore.UsCoreMedicationrequest.language:type_name -> google.fhir.stu3.proto.LanguageCode
	100, // 306: google.fhir.stu3.uscore.UsCoreMedicationrequest.text:type_name -> google.fhir.stu3.proto.Narrative
	101, // 307: google.fhir.stu3.uscore.UsCoreMedicationrequest.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	102, // 308: google.fhir.stu3.uscore.UsCoreMedicationrequest.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 309: google.fhir.stu3.uscore.UsCoreMedicationrequest.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	103, // 310: google.fhir.stu3.uscore.UsCoreMedicationrequest.identifier:type_name -> google.fhir.stu3.proto.Identifier
	110, // 311: google.fhir.stu3.uscore.UsCoreMedicationrequest.definition:type_name -> google.fhir.stu3.proto.Reference
	110, // 312: google.fhir.stu3.uscore.UsCoreMedicationrequest.based_on:type_name -> google.fhir.stu3.proto.Reference
	103, // 313: google.fhir.stu3.uscore.UsCoreMedicationrequest.group_identifier:type_name -> google.fhir.stu3.proto.Identifier
	140, // 314: google.fhir.stu3.uscore.UsCoreMedicationrequest.status:type_name -> google.fhir.stu3.proto.MedicationRequestStatusCode
	141, // 315: google.fhir.stu3.uscore.UsCoreMedicationrequest.intent:type_name -> google.fhir.stu3.proto.MedicationRequestIntentCode
	109, // 316: google.fhir.stu3.uscore.UsCoreMedicationrequest.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	142, // 317: google.fhir.stu3.uscore.UsCoreMedicationrequest.priority:type_name -> google.fhir.stu3.proto.MedicationRequestPriorityCode
	66,  // 318: google.fhir.stu3.uscore.UsCoreMedicationrequest.medication:type_name -> google.fhir.stu3.uscore.UsCoreMedicationrequest.Medication
	110, // 319: google.fhir.stu3.uscore.UsCoreMedicationrequest.subject:type_name -> google.fhir.stu3.proto.Reference
	110, // 320: google.fhir.stu3.uscore.UsCoreMedicationrequest.context:type_name -> google.fhir.stu3.proto.Reference
	110, // 321: google.fhir.stu3.uscore.UsCoreMedicationrequest.supporting_information:type_name -> google.fhir.stu3.proto.Reference
	111, // 322: google.fhir.stu3.uscore.UsCoreMedicationrequest.authored_on:type_name -> google.fhir.stu3.proto.DateTime
	67,  // 323: google.fhir.stu3.uscore.UsCoreMedicationrequest.requester:type_name -> google.fhir.stu3.uscore.UsCoreMedicationrequest.Requester
	110, // 324: google.fhir.stu3.uscore.UsCoreMedicationrequest.recorder:type_name -> google.fhir.stu3.proto.Reference
	109, // 325: google.fhir.stu3.uscore.UsCoreMedicationrequest.reason_code:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 326: google.fhir.stu3.uscore.UsCoreMedicationrequest.reason_reference:type_name -> google.fhir.stu3.proto.Reference
	112, // 327: google.fhir.stu3.uscore.UsCoreMedicationrequest.note:type_name -> google.fhir.stu3.proto.Annotation
	143, // 328: google.fhir.stu3.uscore.UsCoreMedicationrequest.dosage_instruction:type_name -> google.fhir.stu3.proto.Dosage
	68,  // 329: google.fhir.stu3.uscore.UsCoreMedicationrequest.dispense_request:type_name -> google.fhir.stu3.uscore.UsCoreMedicationrequest.DispenseRequest
	69,  // 330: google.fhir.stu3.uscore.UsCoreMedicationrequest.substitution:type_name -> google.fhir.stu3.uscore.UsCoreMedicationrequest.Substitution
	110, // 331: google.fhir.stu3.uscore.UsCoreMedicationrequest.prior_prescription:type_name -> google.fhir.stu3.proto.Reference
	110, // 332: google.fhir.stu3.uscore.UsCoreMedicationrequest.detected_issue:type_name -> google.fhir.stu3.proto.Reference
	110, // 333: google.fhir.stu3.uscore.UsCoreMedicationrequest.event_history:type_name -> google.fhir.stu3.proto.Reference
	96,  // 334: google.fhir.stu3.uscore.UsCoreMedicationstatement.id:type_name -> google.fhir.stu3.proto.Id
	97,  // 335: google.fhir.stu3.uscore.UsCoreMedicationstatement.meta:type_name -> google.fhir.stu3.proto.Meta
	98,  // 336: google.fhir.stu3.uscore.UsCoreMedicationstatement.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	99,  // 337: google.fhir.stu3.uscore.UsCoreMedicationstatement.language:type_name -> google.fhir.stu3.proto.LanguageCode
	100, // 338: google.fhir.stu3.uscore.UsCoreMedicationstatement.text:type_name -> google.fhir.stu3.proto.Narrative
	101, // 339: google.fhir.stu3.uscore.UsCoreMedicationstatement.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	102, // 340: google.fhir.stu3.uscore.UsCoreMedicationstatement.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 341: google.fhir.stu3.uscore.UsCoreMedicationstatement.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	103, // 342: google.fhir.stu3.uscore.UsCoreMedicationstatement.identifier:type_name -> google.fhir.stu3.proto.Identifier
	110, // 343: google.fhir.stu3.uscore.UsCoreMedicationstatement.based_on:type_name -> google.fhir.stu3.proto.Reference
	110, // 344: google.fhir.stu3.uscore.UsCoreMedicationstatement.part_of:type_name -> google.fhir.stu3.proto.Reference
	110, // 345: google.fhir.stu3.uscore.UsCoreMedicationstatement.context:type_name -> google.fhir.stu3.proto.Reference
	144, // 346: google.fhir.stu3.uscore.UsCoreMedicationstatement.status:type_name -> google.fhir.stu3.proto.MedicationStatementStatusCode
	109, // 347: google.fhir.stu3.uscore.UsCoreMedicationstatement.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	70,  // 348: google.fhir.stu3.uscore.UsCoreMedicationstatement.medication:type_name -> google.fhir.stu3.uscore.UsCoreMedicationstatement.Medication
	71,  // 349: google.fhir.stu3.uscore.UsCoreMedicationstatement.effective:type_name -> google.fhir.stu3.uscore.UsCoreMedicationstatement.Effective
	111, // 350: google.fhir.stu3.uscore.UsCoreMedicationstatement.date_asserted:type_name -> google.fhir.stu3.proto.DateTime
	110, // 351: google.fhir.stu3.uscore.UsCoreMedicationstatement.information_source:type_name -> google.fhir.stu3.proto.Reference
	110, // 352: google.fhir.stu3.uscore.UsCoreMedicationstatement.subject:type_name -> google.fhir.stu3.proto.Reference
	110, // 353: google.fhir.stu3.uscore.UsCoreMedicationstatement.derived_from:type_name -> google.fhir.stu3.proto.Reference
	145, // 354: google.fhir.stu3.uscore.UsCoreMedicationstatement.taken:type_name -> google.fhir.stu3.proto.MedicationStatementTakenCode
	109, // 355: google.fhir.stu3.uscore.UsCoreMedicationstatement.reason_not_taken:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 356: google.fhir.stu3.uscore.UsCoreMedicationstatement.reason_code:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 357: google.fhir.stu3.uscore.UsCoreMedicationstatement.reason_reference:type_name -> google.fhir.stu3.proto.Reference
	112, // 358: google.fhir.stu3.uscore.UsCoreMedicationstatement.note:type_name -> google.fhir.stu3.proto.Annotation
	143, // 359: google.fhir.stu3.uscore.UsCoreMedicationstatement.dosage:type_name -> google.fhir.stu3.proto.Dosage
	96,  // 360: google.fhir.stu3.uscore.UsCoreObservationresults.id:type_name -> google.fhir.stu3.proto.Id
	97,  // 361: google.fhir.stu3.uscore.UsCoreObservationresults.meta:type_name -> google.fhir.stu3.proto.Meta
	98,  // 362: google.fhir.stu3.uscore.UsCoreObservationresults.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	99,  // 363: google.fhir.stu3.uscore.UsCoreObservationresults.language:type_name -> google.fhir.stu3.proto.LanguageCode
	100, // 364: google.fhir.stu3.uscore.UsCoreObservationresults.text:type_name -> google.fhir.stu3.proto.Narrative
	101, // 365: google.fhir.stu3.uscore.UsCoreObservationresults.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	102, // 366: google.fhir.stu3.uscore.UsCoreObservationresults.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 367: google.fhir.stu3.uscore.UsCoreObservationresults.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	103, // 368: google.fhir.stu3.uscore.UsCoreObservationresults.identifier:type_name -> google.fhir.stu3.proto.Identifier
	110, // 369: google.fhir.stu3.uscore.UsCoreObservationresults.based_on:type_name -> google.fhir.stu3.proto.Reference
	146, // 370: google.fhir.stu3.uscore.UsCoreObservationresults.status:type_name -> google.fhir.stu3.proto.ObservationStatusCode
	109, // 371: google.fhir.stu3.uscore.UsCoreObservationresults.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 372: google.fhir.stu3.uscore.UsCoreObservationresults.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 373: google.fhir.stu3.uscore.UsCoreObservationresults.subject:type_name -> google.fhir.stu3.proto.Reference
	110, // 374: google.fhir.stu3.uscore.UsCoreObservationresults.context:type_name -> google.fhir.stu3.proto.Reference
	72,  // 375: google.fhir.stu3.uscore.UsCoreObservationresults.effective:type_name -> google.fhir.stu3.uscore.UsCoreObservationresults.Effective
	124, // 376: google.fhir.stu3.uscore.UsCoreObservationresults.issued:type_name -> google.fhir.stu3.proto.Instant
	110, // 377: google.fhir.stu3.uscore.UsCoreObservationresults.performer:type_name -> google.fhir.stu3.proto.Reference
	73,  // 378: google.fhir.stu3.uscore.UsCoreObservationresults.value:type_name -> google.fhir.stu3.uscore.UsCoreObservationresults.Value
	109, // 379: google.fhir.stu3.uscore.UsCoreObservationresults.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 380: google.fhir.stu3.uscore.UsCoreObservationresults.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	113, // 381: google.fhir.stu3.uscore.UsCoreObservationresults.comment:type_name -> google.fhir.stu3.proto.String
	109, // 382: google.fhir.stu3.uscore.UsCoreObservationresults.body_site:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 383: google.fhir.stu3.uscore.UsCoreObservationresults.method:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 384: google.fhir.stu3.uscore.UsCoreObservationresults.specimen:type_name -> google.fhir.stu3.proto.Reference
	110, // 385: google.fhir.stu3.uscore.UsCoreObservationresults.device:type_name -> google.fhir.stu3.proto.Reference
	74,  // 386: google.fhir.stu3.uscore.UsCoreObservationresults.reference_range:type_name -> google.fhir.stu3.uscore.UsCoreObservationresults.ReferenceRange
	75,  // 387: google.fhir.stu3.uscore.UsCoreObservationresults.related:type_name -> google.fhir.stu3.uscore.UsCoreObservationresults.Related
	76,  // 388: google.fhir.stu3.uscore.UsCoreObservationresults.component:type_name -> google.fhir.stu3.uscore.UsCoreObservationresults.Component
	96,  // 389: google.fhir.stu3.uscore.UsCoreOrganization.id:type_name -> google.fhir.stu3.proto.Id
	97,  // 390: google.fhir.stu3.uscore.UsCoreOrganization.meta:type_name -> google.fhir.stu3.proto.Meta
	98,  // 391: google.fhir.stu3.uscore.UsCoreOrganization.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	99,  // 392: google.fhir.stu3.uscore.UsCoreOrganization.language:type_name -> google.fhir.stu3.proto.LanguageCode
	100, // 393: google.fhir.stu3.uscore.UsCoreOrganization.text:type_name -> google.fhir.stu3.proto.Narrative
	101, // 394: google.fhir.stu3.uscore.UsCoreOrganization.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	102, // 395: google.fhir.stu3.uscore.UsCoreOrganization.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 396: google.fhir.stu3.uscore.UsCoreOrganization.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	103, // 397: google.fhir.stu3.uscore.UsCoreOrganization.identifier:type_name -> google.fhir.stu3.proto.Identifier
	126, // 398: google.fhir.stu3.uscore.UsCoreOrganization.active:type_name -> google.fhir.stu3.proto.Boolean
	109, // 399: google.fhir.stu3.uscore.UsCoreOrganization.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	113, // 400: google.fhir.stu3.uscore.UsCoreOrganization.name:type_name -> google.fhir.stu3.proto.String
	113, // 401: google.fhir.stu3.uscore.UsCoreOrganization.alias:type_name -> google.fhir.stu3.proto.String
	122, // 402: google.fhir.stu3.uscore.UsCoreOrganization.telecom:type_name -> google.fhir.stu3.proto.ContactPoint
	138, // 403: google.fhir.stu3.uscore.UsCoreOrganization.address:type_name -> google.fhir.stu3.proto.Address
	110, // 404: google.fhir.stu3.uscore.UsCoreOrganization.part_of:type_name -> google.fhir.stu3.proto.Reference
	78,  // 405: google.fhir.stu3.uscore.UsCoreOrganization.contact:type_name -> google.fhir.stu3.uscore.UsCoreOrganization.Contact
	110, // 406: google.fhir.stu3.uscore.UsCoreOrganization.endpoint:type_name -> google.fhir.stu3.proto.Reference
	96,  // 407: google.fhir.stu3.uscore.UsCorePatient.id:type_name -> google.fhir.stu3.proto.Id
	97,  // 408: google.fhir.stu3.uscore.UsCorePatient.meta:type_name -> google.fhir.stu3.proto.Meta
	98,  // 409: google.fhir.stu3.uscore.UsCorePatient.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	99,  // 410: google.fhir.stu3.uscore.UsCorePatient.language:type_name -> google.fhir.stu3.proto.LanguageCode
	100, // 411: google.fhir.stu3.uscore.UsCorePatient.text:type_name -> google.fhir.stu3.proto.Narrative
	101, // 412: google.fhir.stu3.uscore.UsCorePatient.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	102, // 413: google.fhir.stu3.uscore.UsCorePatient.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 414: google.fhir.stu3.uscore.UsCorePatient.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	103, // 415: google.fhir.stu3.uscore.UsCorePatient.identifier:type_name -> google.fhir.stu3.proto.Identifier
	126, // 416: google.fhir.stu3.uscore.UsCorePatient.active:type_name -> google.fhir.stu3.proto.Boolean
	147, // 417: google.fhir.stu3.uscore.UsCorePatient.name:type_name -> google.fhir.stu3.proto.HumanName
	122, // 418: google.fhir.stu3.uscore.UsCorePatient.telecom:type_name -> google.fhir.stu3.proto.ContactPoint
	148, // 419: google.fhir.stu3.uscore.UsCorePatient.gender:type_name -> google.fhir.stu3.proto.AdministrativeGenderCode
	133, // 420: google.fhir.stu3.uscore.UsCorePatient.birth_date:type_name -> google.fhir.stu3.proto.Date
	79,  // 421: google.fhir.stu3.uscore.UsCorePatient.deceased:type_name -> google.fhir.stu3.uscore.UsCorePatient.Deceased
	138, // 422: google.fhir.stu3.uscore.UsCorePatient.address:type_name -> google.fhir.stu3.proto.Address
	109, // 423: google.fhir.stu3.uscore.UsCorePatient.marital_status:type_name -> google.fhir.stu3.proto.CodeableConcept
	80,  // 424: google.fhir.stu3.uscore.UsCorePatient.multiple_birth:type_name -> google.fhir.stu3.uscore.UsCorePatient.MultipleBirth
	125, // 425: google.fhir.stu3.uscore.UsCorePatient.photo:type_name -> google.fhir.stu3.proto.Attachment
	81,  // 426: google.fhir.stu3.uscore.UsCorePatient.contact:type_name -> google.fhir.stu3.uscore.UsCorePatient.Contact
	82,  // 427: google.fhir.stu3.uscore.UsCorePatient.communication:type_name -> google.fhir.stu3.uscore.UsCorePatient.Communication
	110, // 428: google.fhir.stu3.uscore.UsCorePatient.general_practitioner:type_name -> google.fhir.stu3.proto.Reference
	110, // 429: google.fhir.stu3.uscore.UsCorePatient.managing_organization:type_name -> google.fhir.stu3.proto.Reference
	83,  // 430: google.fhir.stu3.uscore.UsCorePatient.link:type_name -> google.fhir.stu3.uscore.UsCorePatient.Link
	24,  // 431: google.fhir.stu3.uscore.UsCorePatient.race:type_name -> google.fhir.stu3.uscore.PatientUSCoreRaceExtension
	10,  // 432: google.fhir.stu3.uscore.UsCorePatient.ethnicity:type_name -> google.fhir.stu3.uscore.PatientUSCoreEthnicityExtension
	114, // 433: google.fhir.stu3.uscore.UsCorePatient.birthsex:type_name -> google.fhir.stu3.uscore.UsCoreBirthSexCode
	96,  // 434: google.fhir.stu3.uscore.UsCorePractitioner.id:type_name -> google.fhir.stu3.proto.Id
	97,  // 435: google.fhir.stu3.uscore.UsCorePractitioner.meta:type_name -> google.fhir.stu3.proto.Meta
	98,  // 436: google.fhir.stu3.uscore.UsCorePractitioner.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	99,  // 437: google.fhir.stu3.uscore.UsCorePractitioner.language:type_name -> google.fhir.stu3.proto.LanguageCode
	100, // 438: google.fhir.stu3.uscore.UsCorePractitioner.text:type_name -> google.fhir.stu3.proto.Narrative
	101, // 439: google.fhir.stu3.uscore.UsCorePractitioner.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	102, // 440: google.fhir.stu3.uscore.UsCorePractitioner.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 441: google.fhir.stu3.uscore.UsCorePractitioner.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	103, // 442: google.fhir.stu3.uscore.UsCorePractitioner.identifier:type_name -> google.fhir.stu3.proto.Identifier
	126, // 443: google.fhir.stu3.uscore.UsCorePractitioner.active:type_name -> google.fhir.stu3.proto.Boolean
	147, // 444: google.fhir.stu3.uscore.UsCorePractitioner.name:type_name -> google.fhir.stu3.proto.HumanName
	122, // 445: google.fhir.stu3.uscore.UsCorePractitioner.telecom:type_name -> google.fhir.stu3.proto.ContactPoint
	138, // 446: google.fhir.stu3.uscore.UsCorePractitioner.address:type_name -> google.fhir.stu3.proto.Address
	148, // 447: google.fhir.stu3.uscore.UsCorePractitioner.gender:type_name -> google.fhir.stu3.proto.AdministrativeGenderCode
	133, // 448: google.fhir.stu3.uscore.UsCorePractitioner.birth_date:type_name -> google.fhir.stu3.proto.Date
	125, // 449: google.fhir.stu3.uscore.UsCorePractitioner.photo:type_name -> google.fhir.stu3.proto.Attachment
	84,  // 450: google.fhir.stu3.uscore.UsCorePractitioner.qualification:type_name -> google.fhir.stu3.uscore.UsCorePractitioner.Qualification
	109, // 451: google.fhir.stu3.uscore.UsCorePractitioner.communication:type_name -> google.fhir.stu3.proto.CodeableConcept
	96,  // 452: google.fhir.stu3.uscore.UsCorePractitionerrole.id:type_name -> google.fhir.stu3.proto.Id
	97,  // 453: google.fhir.stu3.uscore.UsCorePractitionerrole.meta:type_name -> google.fhir.stu3.proto.Meta
	98,  // 454: google.fhir.stu3.uscore.UsCorePractitionerrole.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	99,  // 455: google.fhir.stu3.uscore.UsCorePractitionerrole.language:type_name -> google.fhir.stu3.proto.LanguageCode
	100, // 456: google.fhir.stu3.uscore.UsCorePractitionerrole.text:type_name -> google.fhir.stu3.proto.Narrative
	101, // 457: google.fhir.stu3.uscore.UsCorePractitionerrole.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	102, // 458: google.fhir.stu3.uscore.UsCorePractitionerrole.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 459: google.fhir.stu3.uscore.UsCorePractitionerrole.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	103, // 460: google.fhir.stu3.uscore.UsCorePractitionerrole.identifier:type_name -> google.fhir.stu3.proto.Identifier
	126, // 461: google.fhir.stu3.uscore.UsCorePractitionerrole.active:type_name -> google.fhir.stu3.proto.Boolean
	117, // 462: google.fhir.stu3.uscore.UsCorePractitionerrole.period:type_name -> google.fhir.stu3.proto.Period
	110, // 463: google.fhir.stu3.uscore.UsCorePractitionerrole.practitioner:type_name -> google.fhir.stu3.proto.Reference
	110, // 464: google.fhir.stu3.uscore.UsCorePractitionerrole.organization:type_name -> google.fhir.stu3.proto.Reference
	109, // 465: google.fhir.stu3.uscore.UsCorePractitionerrole.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 466: google.fhir.stu3.uscore.UsCorePractitionerrole.specialty:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 467: google.fhir.stu3.uscore.UsCorePractitionerrole.location:type_name -> google.fhir.stu3.proto.Reference
	110, // 468: google.fhir.stu3.uscore.UsCorePractitionerrole.healthcare_service:type_name -> google.fhir.stu3.proto.Reference
	122, // 469: google.fhir.stu3.uscore.UsCorePractitionerrole.telecom:type_name -> google.fhir.stu3.proto.ContactPoint
	85,  // 470: google.fhir.stu3.uscore.UsCorePractitionerrole.available_time:type_name -> google.fhir.stu3.uscore.UsCorePractitionerrole.AvailableTime
	86,  // 471: google.fhir.stu3.uscore.UsCorePractitionerrole.not_available:type_name -> google.fhir.stu3.uscore.UsCorePractitionerrole.NotAvailable
	113, // 472: google.fhir.stu3.uscore.UsCorePractitionerrole.availability_exceptions:type_name -> google.fhir.stu3.proto.String
	110, // 473: google.fhir.stu3.uscore.UsCorePractitionerrole.endpoint:type_name -> google.fhir.stu3.proto.Reference
	96,  // 474: google.fhir.stu3.uscore.UsCoreProcedure.id:type_name -> google.fhir.stu3.proto.Id
	97,  // 475: google.fhir.stu3.uscore.UsCoreProcedure.meta:type_name -> google.fhir.stu3.proto.Meta
	98,  // 476: google.fhir.stu3.uscore.UsCoreProcedure.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	99,  // 477: google.fhir.stu3.uscore.UsCoreProcedure.language:type_name -> google.fhir.stu3.proto.LanguageCode
	100, // 478: google.fhir.stu3.uscore.UsCoreProcedure.text:type_name -> google.fhir.stu3.proto.Narrative
	101, // 479: google.fhir.stu3.uscore.UsCoreProcedure.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	102, // 480: google.fhir.stu3.uscore.UsCoreProcedure.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 481: google.fhir.stu3.uscore.UsCoreProcedure.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	103, // 482: google.fhir.stu3.uscore.UsCoreProcedure.identifier:type_name -> google.fhir.stu3.proto.Identifier
	110, // 483: google.fhir.stu3.uscore.UsCoreProcedure.definition:type_name -> google.fhir.stu3.proto.Reference
	110, // 484: google.fhir.stu3.uscore.UsCoreProcedure.based_on:type_name -> google.fhir.stu3.proto.Reference
	110, // 485: google.fhir.stu3.uscore.UsCoreProcedure.part_of:type_name -> google.fhir.stu3.proto.Reference
	149, // 486: google.fhir.stu3.uscore.UsCoreProcedure.status:type_name -> google.fhir.stu3.proto.EventStatusCode
	126, // 487: google.fhir.stu3.uscore.UsCoreProcedure.not_done:type_name -> google.fhir.stu3.proto.Boolean
	109, // 488: google.fhir.stu3.uscore.UsCoreProcedure.not_done_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 489: google.fhir.stu3.uscore.UsCoreProcedure.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 490: google.fhir.stu3.uscore.UsCoreProcedure.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 491: google.fhir.stu3.uscore.UsCoreProcedure.subject:type_name -> google.fhir.stu3.proto.Reference
	110, // 492: google.fhir.stu3.uscore.UsCoreProcedure.context:type_name -> google.fhir.stu3.proto.Reference
	87,  // 493: google.fhir.stu3.uscore.UsCoreProcedure.performed:type_name -> google.fhir.stu3.uscore.UsCoreProcedure.Performed
	88,  // 494: google.fhir.stu3.uscore.UsCoreProcedure.performer:type_name -> google.fhir.stu3.uscore.UsCoreProcedure.Performer
	110, // 495: google.fhir.stu3.uscore.UsCoreProcedure.location:type_name -> google.fhir.stu3.proto.Reference
	109, // 496: google.fhir.stu3.uscore.UsCoreProcedure.reason_code:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 497: google.fhir.stu3.uscore.UsCoreProcedure.reason_reference:type_name -> google.fhir.stu3.proto.Reference
	109, // 498: google.fhir.stu3.uscore.UsCoreProcedure.body_site:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 499: google.fhir.stu3.uscore.UsCoreProcedure.outcome:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 500: google.fhir.stu3.uscore.UsCoreProcedure.report:type_name -> google.fhir.stu3.proto.Reference
	109, // 501: google.fhir.stu3.uscore.UsCoreProcedure.complication:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 502: google.fhir.stu3.uscore.UsCoreProcedure.complication_detail:type_name -> google.fhir.stu3.proto.Reference
	109, // 503: google.fhir.stu3.uscore.UsCoreProcedure.follow_up:type_name -> google.fhir.stu3.proto.CodeableConcept
	112, // 504: google.fhir.stu3.uscore.UsCoreProcedure.note:type_name -> google.fhir.stu3.proto.Annotation
	89,  // 505: google.fhir.stu3.uscore.UsCoreProcedure.focal_device:type_name -> google.fhir.stu3.uscore.UsCoreProcedure.FocalDevice
	110, // 506: google.fhir.stu3.uscore.UsCoreProcedure.used_reference:type_name -> google.fhir.stu3.proto.Reference
	109, // 507: google.fhir.stu3.uscore.UsCoreProcedure.used_code:type_name -> google.fhir.stu3.proto.CodeableConcept
	113, // 508: google.fhir.stu3.uscore.CapabilityStatementProfileResourceAssociationExtension.id:type_name -> google.fhir.stu3.proto.String
	102, // 509: google.fhir.stu3.uscore.CapabilityStatementProfileResourceAssociationExtension.extension:type_name -> google.fhir.stu3.proto.Extension
	150, // 510: google.fhir.stu3.uscore.CapabilityStatementProfileResourceAssociationExtension.value_code:type_name -> google.fhir.stu3.proto.ResourceTypeCode
	113, // 511: google.fhir.stu3.uscore.PatientUSCoreRaceExtension.id:type_name -> google.fhir.stu3.proto.String
	102, // 512: google.fhir.stu3.uscore.PatientUSCoreRaceExtension.extension:type_name -> google.fhir.stu3.proto.Extension
	130, // 513: google.fhir.stu3.uscore.PatientUSCoreRaceExtension.omb_category:type_name -> google.fhir.stu3.proto.Coding
	130, // 514: google.fhir.stu3.uscore.PatientUSCoreRaceExtension.detailed:type_name -> google.fhir.stu3.proto.Coding
	113, // 515: google.fhir.stu3.uscore.PatientUSCoreRaceExtension.text:type_name -> google.fhir.stu3.proto.String
	96,  // 516: google.fhir.stu3.uscore.UsCoreSmokingstatus.id:type_name -> google.fhir.stu3.proto.Id
	97,  // 517: google.fhir.stu3.uscore.UsCoreSmokingstatus.meta:type_name -> google.fhir.stu3.proto.Meta
	98,  // 518: google.fhir.stu3.uscore.UsCoreSmokingstatus.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	99,  // 519: google.fhir.stu3.uscore.UsCoreSmokingstatus.language:type_name -> google.fhir.stu3.proto.LanguageCode
	100, // 520: google.fhir.stu3.uscore.UsCoreSmokingstatus.text:type_name -> google.fhir.stu3.proto.Narrative
	101, // 521: google.fhir.stu3.uscore.UsCoreSmokingstatus.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	102, // 522: google.fhir.stu3.uscore.UsCoreSmokingstatus.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 523: google.fhir.stu3.uscore.UsCoreSmokingstatus.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	103, // 524: google.fhir.stu3.uscore.UsCoreSmokingstatus.identifier:type_name -> google.fhir.stu3.proto.Identifier
	110, // 525: google.fhir.stu3.uscore.UsCoreSmokingstatus.based_on:type_name -> google.fhir.stu3.proto.Reference
	146, // 526: google.fhir.stu3.uscore.UsCoreSmokingstatus.status:type_name -> google.fhir.stu3.proto.ObservationStatusCode
	109, // 527: google.fhir.stu3.uscore.UsCoreSmokingstatus.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 528: google.fhir.stu3.uscore.UsCoreSmokingstatus.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 529: google.fhir.stu3.uscore.UsCoreSmokingstatus.subject:type_name -> google.fhir.stu3.proto.Reference
	110, // 530: google.fhir.stu3.uscore.UsCoreSmokingstatus.context:type_name -> google.fhir.stu3.proto.Reference
	90,  // 531: google.fhir.stu3.uscore.UsCoreSmokingstatus.effective:type_name -> google.fhir.stu3.uscore.UsCoreSmokingstatus.Effective
	124, // 532: google.fhir.stu3.uscore.UsCoreSmokingstatus.issued:type_name -> google.fhir.stu3.proto.Instant
	110, // 533: google.fhir.stu3.uscore.UsCoreSmokingstatus.performer:type_name -> google.fhir.stu3.proto.Reference
	91,  // 534: google.fhir.stu3.uscore.UsCoreSmokingstatus.value:type_name -> google.fhir.stu3.uscore.UsCoreSmokingstatus.Value
	109, // 535: google.fhir.stu3.uscore.UsCoreSmokingstatus.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 536: google.fhir.stu3.uscore.UsCoreSmokingstatus.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	113, // 537: google.fhir.stu3.uscore.UsCoreSmokingstatus.comment:type_name -> google.fhir.stu3.proto.String
	109, // 538: google.fhir.stu3.uscore.UsCoreSmokingstatus.body_site:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 539: google.fhir.stu3.uscore.UsCoreSmokingstatus.method:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 540: google.fhir.stu3.uscore.UsCoreSmokingstatus.specimen:type_name -> google.fhir.stu3.proto.Reference
	110, // 541: google.fhir.stu3.uscore.UsCoreSmokingstatus.device:type_name -> google.fhir.stu3.proto.Reference
	92,  // 542: google.fhir.stu3.uscore.UsCoreSmokingstatus.reference_range:type_name -> google.fhir.stu3.uscore.UsCoreSmokingstatus.ReferenceRange
	93,  // 543: google.fhir.stu3.uscore.UsCoreSmokingstatus.related:type_name -> google.fhir.stu3.uscore.UsCoreSmokingstatus.Related
	94,  // 544: google.fhir.stu3.uscore.UsCoreSmokingstatus.component:type_name -> google.fhir.stu3.uscore.UsCoreSmokingstatus.Component
	111, // 545: google.fhir.stu3.uscore.UsCoreAllergyintolerance.Onset.date_time:type_name -> google.fhir.stu3.proto.DateTime
	151, // 546: google.fhir.stu3.uscore.UsCoreAllergyintolerance.Onset.age:type_name -> google.fhir.stu3.proto.Age
	117, // 547: google.fhir.stu3.uscore.UsCoreAllergyintolerance.Onset.period:type_name -> google.fhir.stu3.proto.Period
	152, // 548: google.fhir.stu3.uscore.UsCoreAllergyintolerance.Onset.range:type_name -> google.fhir.stu3.proto.Range
	113, // 549: google.fhir.stu3.uscore.UsCoreAllergyintolerance.Onset.string_value:type_name -> google.fhir.stu3.proto.String
	113, // 550: google.fhir.stu3.uscore.UsCoreAllergyintolerance.Reaction.id:type_name -> google.fhir.stu3.proto.String
	102, // 551: google.fhir.stu3.uscore.UsCoreAllergyintolerance.Reaction.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 552: google.fhir.stu3.uscore.UsCoreAllergyintolerance.Reaction.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	109, // 553: google.fhir.stu3.uscore.UsCoreAllergyintolerance.Reaction.substance:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 554: google.fhir.stu3.uscore.UsCoreAllergyintolerance.Reaction.manifestation:type_name -> google.fhir.stu3.proto.CodeableConcept
	113, // 555: google.fhir.stu3.uscore.UsCoreAllergyintolerance.Reaction.description:type_name -> google.fhir.stu3.proto.String
	111, // 556: google.fhir.stu3.uscore.UsCoreAllergyintolerance.Reaction.onset:type_name -> google.fhir.stu3.proto.DateTime
	153, // 557: google.fhir.stu3.uscore.UsCoreAllergyintolerance.Reaction.severity:type_name -> google.fhir.stu3.proto.AllergyIntoleranceSeverityCode
	109, // 558: google.fhir.stu3.uscore.UsCoreAllergyintolerance.Reaction.exposure_route:type_name -> google.fhir.stu3.proto.CodeableConcept
	112, // 559: google.fhir.stu3.uscore.UsCoreAllergyintolerance.Reaction.note:type_name -> google.fhir.stu3.proto.Annotation
	113, // 560: google.fhir.stu3.uscore.UsCoreCareplan.Activity.id:type_name -> google.fhir.stu3.proto.String
	102, // 561: google.fhir.stu3.uscore.UsCoreCareplan.Activity.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 562: google.fhir.stu3.uscore.UsCoreCareplan.Activity.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	109, // 563: google.fhir.stu3.uscore.UsCoreCareplan.Activity.outcome_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 564: google.fhir.stu3.uscore.UsCoreCareplan.Activity.outcome_reference:type_name -> google.fhir.stu3.proto.Reference
	112, // 565: google.fhir.stu3.uscore.UsCoreCareplan.Activity.progress:type_name -> google.fhir.stu3.proto.Annotation
	110, // 566: google.fhir.stu3.uscore.UsCoreCareplan.Activity.reference:type_name -> google.fhir.stu3.proto.Reference
	29,  // 567: google.fhir.stu3.uscore.UsCoreCareplan.Activity.detail:type_name -> google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail
	113, // 568: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.id:type_name -> google.fhir.stu3.proto.String
	102, // 569: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 570: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	109, // 571: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 572: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.definition:type_name -> google.fhir.stu3.proto.Reference
	109, // 573: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 574: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.reason_code:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 575: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.reason_reference:type_name -> google.fhir.stu3.proto.Reference
	110, // 576: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.goal:type_name -> google.fhir.stu3.proto.Reference
	154, // 577: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.status:type_name -> google.fhir.stu3.proto.CarePlanActivityStatusCode
	113, // 578: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.status_reason:type_name -> google.fhir.stu3.proto.String
	126, // 579: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.prohibited:type_name -> google.fhir.stu3.proto.Boolean
	30,  // 580: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.scheduled:type_name -> google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.Scheduled
	110, // 581: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.location:type_name -> google.fhir.stu3.proto.Reference
	110, // 582: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.performer:type_name -> google.fhir.stu3.proto.Reference
	31,  // 583: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.product:type_name -> google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.Product
	135, // 584: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.daily_amount:type_name -> google.fhir.stu3.proto.SimpleQuantity
	135, // 585: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.quantity:type_name -> google.fhir.stu3.proto.SimpleQuantity
	113, // 586: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.description:type_name -> google.fhir.stu3.proto.String
	155, // 587: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.Scheduled.timing:type_name -> google.fhir.stu3.proto.Timing
	117, // 588: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.Scheduled.period:type_name -> google.fhir.stu3.proto.Period
	113, // 589: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.Scheduled.string_value:type_name -> google.fhir.stu3.proto.String
	109, // 590: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.Product.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 591: google.fhir.stu3.uscore.UsCoreCareplan.Activity.Detail.Product.reference:type_name -> google.fhir.stu3.proto.Reference
	113, // 592: google.fhir.stu3.uscore.UsCoreCareteam.Participant.id:type_name -> google.fhir.stu3.proto.String
	102, // 593: google.fhir.stu3.uscore.UsCoreCareteam.Participant.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 594: google.fhir.stu3.uscore.UsCoreCareteam.Participant.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	109, // 595: google.fhir.stu3.uscore.UsCoreCareteam.Participant.role:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 596: google.fhir.stu3.uscore.UsCoreCareteam.Participant.member:type_name -> google.fhir.stu3.proto.Reference
	110, // 597: google.fhir.stu3.uscore.UsCoreCareteam.Participant.on_behalf_of:type_name -> google.fhir.stu3.proto.Reference
	117, // 598: google.fhir.stu3.uscore.UsCoreCareteam.Participant.period:type_name -> google.fhir.stu3.proto.Period
	111, // 599: google.fhir.stu3.uscore.UsCoreCondition.Onset.date_time:type_name -> google.fhir.stu3.proto.DateTime
	151, // 600: google.fhir.stu3.uscore.UsCoreCondition.Onset.age:type_name -> google.fhir.stu3.proto.Age
	117, // 601: google.fhir.stu3.uscore.UsCoreCondition.Onset.period:type_name -> google.fhir.stu3.proto.Period
	152, // 602: google.fhir.stu3.uscore.UsCoreCondition.Onset.range:type_name -> google.fhir.stu3.proto.Range
	113, // 603: google.fhir.stu3.uscore.UsCoreCondition.Onset.string_value:type_name -> google.fhir.stu3.proto.String
	111, // 604: google.fhir.stu3.uscore.UsCoreCondition.Abatement.date_time:type_name -> google.fhir.stu3.proto.DateTime
	151, // 605: google.fhir.stu3.uscore.UsCoreCondition.Abatement.age:type_name -> google.fhir.stu3.proto.Age
	126, // 606: google.fhir.stu3.uscore.UsCoreCondition.Abatement.boolean:type_name -> google.fhir.stu3.proto.Boolean
	117, // 607: google.fhir.stu3.uscore.UsCoreCondition.Abatement.period:type_name -> google.fhir.stu3.proto.Period
	152, // 608: google.fhir.stu3.uscore.UsCoreCondition.Abatement.range:type_name -> google.fhir.stu3.proto.Range
	113, // 609: google.fhir.stu3.uscore.UsCoreCondition.Abatement.string_value:type_name -> google.fhir.stu3.proto.String
	113, // 610: google.fhir.stu3.uscore.UsCoreCondition.Stage.id:type_name -> google.fhir.stu3.proto.String
	102, // 611: google.fhir.stu3.uscore.UsCoreCondition.Stage.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 612: google.fhir.stu3.uscore.UsCoreCondition.Stage.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	109, // 613: google.fhir.stu3.uscore.UsCoreCondition.Stage.summary:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 614: google.fhir.stu3.uscore.UsCoreCondition.Stage.assessment:type_name -> google.fhir.stu3.proto.Reference
	113, // 615: google.fhir.stu3.uscore.UsCoreCondition.Evidence.id:type_name -> google.fhir.stu3.proto.String
	102, // 616: google.fhir.stu3.uscore.UsCoreCondition.Evidence.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 617: google.fhir.stu3.uscore.UsCoreCondition.Evidence.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	109, // 618: google.fhir.stu3.uscore.UsCoreCondition.Evidence.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 619: google.fhir.stu3.uscore.UsCoreCondition.Evidence.detail:type_name -> google.fhir.stu3.proto.Reference
	113, // 620: google.fhir.stu3.uscore.UsCoreDevice.Udi.id:type_name -> google.fhir.stu3.proto.String
	102, // 621: google.fhir.stu3.uscore.UsCoreDevice.Udi.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 622: google.fhir.stu3.uscore.UsCoreDevice.Udi.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	113, // 623: google.fhir.stu3.uscore.UsCoreDevice.Udi.device_identifier:type_name -> google.fhir.stu3.proto.String
	113, // 624: google.fhir.stu3.uscore.UsCoreDevice.Udi.name:type_name -> google.fhir.stu3.proto.String
	98,  // 625: google.fhir.stu3.uscore.UsCoreDevice.Udi.jurisdiction:type_name -> google.fhir.stu3.proto.Uri
	113, // 626: google.fhir.stu3.uscore.UsCoreDevice.Udi.carrier_hrf:type_name -> google.fhir.stu3.proto.String
	156, // 627: google.fhir.stu3.uscore.UsCoreDevice.Udi.carrier_aidc:type_name -> google.fhir.stu3.proto.Base64Binary
	98,  // 628: google.fhir.stu3.uscore.UsCoreDevice.Udi.issuer:type_name -> google.fhir.stu3.proto.Uri
	157, // 629: google.fhir.stu3.uscore.UsCoreDevice.Udi.entry_type:type_name -> google.fhir.stu3.proto.UDIEntryTypeCode
	111, // 630: google.fhir.stu3.uscore.UsCoreDiagnosticreport.Effective.date_time:type_name -> google.fhir.stu3.proto.DateTime
	117, // 631: google.fhir.stu3.uscore.UsCoreDiagnosticreport.Effective.period:type_name -> google.fhir.stu3.proto.Period
	113, // 632: google.fhir.stu3.uscore.UsCoreDiagnosticreport.Performer.id:type_name -> google.fhir.stu3.proto.String
	102, // 633: google.fhir.stu3.uscore.UsCoreDiagnosticreport.Performer.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 634: google.fhir.stu3.uscore.UsCoreDiagnosticreport.Performer.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	109, // 635: google.fhir.stu3.uscore.UsCoreDiagnosticreport.Performer.role:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 636: google.fhir.stu3.uscore.UsCoreDiagnosticreport.Performer.actor:type_name -> google.fhir.stu3.proto.Reference
	113, // 637: google.fhir.stu3.uscore.UsCoreDiagnosticreport.Image.id:type_name -> google.fhir.stu3.proto.String
	102, // 638: google.fhir.stu3.uscore.UsCoreDiagnosticreport.Image.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 639: google.fhir.stu3.uscore.UsCoreDiagnosticreport.Image.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	113, // 640: google.fhir.stu3.uscore.UsCoreDiagnosticreport.Image.comment:type_name -> google.fhir.stu3.proto.String
	110, // 641: google.fhir.stu3.uscore.UsCoreDiagnosticreport.Image.link:type_name -> google.fhir.stu3.proto.Reference
	113, // 642: google.fhir.stu3.uscore.UsCoreDocumentreference.RelatesTo.id:type_name -> google.fhir.stu3.proto.String
	102, // 643: google.fhir.stu3.uscore.UsCoreDocumentreference.RelatesTo.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 644: google.fhir.stu3.uscore.UsCoreDocumentreference.RelatesTo.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	158, // 645: google.fhir.stu3.uscore.UsCoreDocumentreference.RelatesTo.code:type_name -> google.fhir.stu3.proto.DocumentRelationshipTypeCode
	110, // 646: google.fhir.stu3.uscore.UsCoreDocumentreference.RelatesTo.target:type_name -> google.fhir.stu3.proto.Reference
	113, // 647: google.fhir.stu3.uscore.UsCoreDocumentreference.Content.id:type_name -> google.fhir.stu3.proto.String
	102, // 648: google.fhir.stu3.uscore.UsCoreDocumentreference.Content.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 649: google.fhir.stu3.uscore.UsCoreDocumentreference.Content.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	125, // 650: google.fhir.stu3.uscore.UsCoreDocumentreference.Content.attachment:type_name -> google.fhir.stu3.proto.Attachment
	130, // 651: google.fhir.stu3.uscore.UsCoreDocumentreference.Content.format:type_name -> google.fhir.stu3.proto.Coding
	113, // 652: google.fhir.stu3.uscore.UsCoreDocumentreference.Context.id:type_name -> google.fhir.stu3.proto.String
	102, // 653: google.fhir.stu3.uscore.UsCoreDocumentreference.Context.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 654: google.fhir.stu3.uscore.UsCoreDocumentreference.Context.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	110, // 655: google.fhir.stu3.uscore.UsCoreDocumentreference.Context.encounter:type_name -> google.fhir.stu3.proto.Reference
	109, // 656: google.fhir.stu3.uscore.UsCoreDocumentreference.Context.event:type_name -> google.fhir.stu3.proto.CodeableConcept
	117, // 657: google.fhir.stu3.uscore.UsCoreDocumentreference.Context.period:type_name -> google.fhir.stu3.proto.Period
	109, // 658: google.fhir.stu3.uscore.UsCoreDocumentreference.Context.facility_type:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 659: google.fhir.stu3.uscore.UsCoreDocumentreference.Context.practice_setting:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 660: google.fhir.stu3.uscore.UsCoreDocumentreference.Context.source_patient_info:type_name -> google.fhir.stu3.proto.Reference
	44,  // 661: google.fhir.stu3.uscore.UsCoreDocumentreference.Context.related:type_name -> google.fhir.stu3.uscore.UsCoreDocumentreference.Context.Related
	113, // 662: google.fhir.stu3.uscore.UsCoreDocumentreference.Context.Related.id:type_name -> google.fhir.stu3.proto.String
	102, // 663: google.fhir.stu3.uscore.UsCoreDocumentreference.Context.Related.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 664: google.fhir.stu3.uscore.UsCoreDocumentreference.Context.Related.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	103, // 665: google.fhir.stu3.uscore.UsCoreDocumentreference.Context.Related.identifier:type_name -> google.fhir.stu3.proto.Identifier
	110, // 666: google.fhir.stu3.uscore.UsCoreDocumentreference.Context.Related.ref:type_name -> google.fhir.stu3.proto.Reference
	113, // 667: google.fhir.stu3.uscore.UsCoreEncounter.StatusHistory.id:type_name -> google.fhir.stu3.proto.String
	102, // 668: google.fhir.stu3.uscore.UsCoreEncounter.StatusHistory.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 669: google.fhir.stu3.uscore.UsCoreEncounter.StatusHistory.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	129, // 670: google.fhir.stu3.uscore.UsCoreEncounter.StatusHistory.status:type_name -> google.fhir.stu3.proto.EncounterStatusCode
	117, // 671: google.fhir.stu3.uscore.UsCoreEncounter.StatusHistory.period:type_name -> google.fhir.stu3.proto.Period
	113, // 672: google.fhir.stu3.uscore.UsCoreEncounter.ClassHistory.id:type_name -> google.fhir.stu3.proto.String
	102, // 673: google.fhir.stu3.uscore.UsCoreEncounter.ClassHistory.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 674: google.fhir.stu3.uscore.UsCoreEncounter.ClassHistory.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	130, // 675: google.fhir.stu3.uscore.UsCoreEncounter.ClassHistory.class_value:type_name -> google.fhir.stu3.proto.Coding
	117, // 676: google.fhir.stu3.uscore.UsCoreEncounter.ClassHistory.period:type_name -> google.fhir.stu3.proto.Period
	113, // 677: google.fhir.stu3.uscore.UsCoreEncounter.Participant.id:type_name -> google.fhir.stu3.proto.String
	102, // 678: google.fhir.stu3.uscore.UsCoreEncounter.Participant.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 679: google.fhir.stu3.uscore.UsCoreEncounter.Participant.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	109, // 680: google.fhir.stu3.uscore.UsCoreEncounter.Participant.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	117, // 681: google.fhir.stu3.uscore.UsCoreEncounter.Participant.period:type_name -> google.fhir.stu3.proto.Period
	110, // 682: google.fhir.stu3.uscore.UsCoreEncounter.Participant.individual:type_name -> google.fhir.stu3.proto.Reference
	113, // 683: google.fhir.stu3.uscore.UsCoreEncounter.Diagnosis.id:type_name -> google.fhir.stu3.proto.String
	102, // 684: google.fhir.stu3.uscore.UsCoreEncounter.Diagnosis.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 685: google.fhir.stu3.uscore.UsCoreEncounter.Diagnosis.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	110, // 686: google.fhir.stu3.uscore.UsCoreEncounter.Diagnosis.condition:type_name -> google.fhir.stu3.proto.Reference
	109, // 687: google.fhir.stu3.uscore.UsCoreEncounter.Diagnosis.role:type_name -> google.fhir.stu3.proto.CodeableConcept
	159, // 688: google.fhir.stu3.uscore.UsCoreEncounter.Diagnosis.rank:type_name -> google.fhir.stu3.proto.PositiveInt
	113, // 689: google.fhir.stu3.uscore.UsCoreEncounter.Hospitalization.id:type_name -> google.fhir.stu3.proto.String
	102, // 690: google.fhir.stu3.uscore.UsCoreEncounter.Hospitalization.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 691: google.fhir.stu3.uscore.UsCoreEncounter.Hospitalization.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	103, // 692: google.fhir.stu3.uscore.UsCoreEncounter.Hospitalization.pre_admission_identifier:type_name -> google.fhir.stu3.proto.Identifier
	110, // 693: google.fhir.stu3.uscore.UsCoreEncounter.Hospitalization.origin:type_name -> google.fhir.stu3.proto.Reference
	109, // 694: google.fhir.stu3.uscore.UsCoreEncounter.Hospitalization.admit_source:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 695: google.fhir.stu3.uscore.UsCoreEncounter.Hospitalization.re_admission:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 696: google.fhir.stu3.uscore.UsCoreEncounter.Hospitalization.diet_preference:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 697: google.fhir.stu3.uscore.UsCoreEncounter.Hospitalization.special_courtesy:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 698: google.fhir.stu3.uscore.UsCoreEncounter.Hospitalization.special_arrangement:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 699: google.fhir.stu3.uscore.UsCoreEncounter.Hospitalization.destination:type_name -> google.fhir.stu3.proto.Reference
	109, // 700: google.fhir.stu3.uscore.UsCoreEncounter.Hospitalization.discharge_disposition:type_name -> google.fhir.stu3.proto.CodeableConcept
	113, // 701: google.fhir.stu3.uscore.UsCoreEncounter.Location.id:type_name -> google.fhir.stu3.proto.String
	102, // 702: google.fhir.stu3.uscore.UsCoreEncounter.Location.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 703: google.fhir.stu3.uscore.UsCoreEncounter.Location.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	110, // 704: google.fhir.stu3.uscore.UsCoreEncounter.Location.location:type_name -> google.fhir.stu3.proto.Reference
	160, // 705: google.fhir.stu3.uscore.UsCoreEncounter.Location.status:type_name -> google.fhir.stu3.proto.EncounterLocationStatusCode
	117, // 706: google.fhir.stu3.uscore.UsCoreEncounter.Location.period:type_name -> google.fhir.stu3.proto.Period
	133, // 707: google.fhir.stu3.uscore.UsCoreGoal.Start.date:type_name -> google.fhir.stu3.proto.Date
	109, // 708: google.fhir.stu3.uscore.UsCoreGoal.Start.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	113, // 709: google.fhir.stu3.uscore.UsCoreGoal.Target.id:type_name -> google.fhir.stu3.proto.String
	102, // 710: google.fhir.stu3.uscore.UsCoreGoal.Target.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 711: google.fhir.stu3.uscore.UsCoreGoal.Target.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	109, // 712: google.fhir.stu3.uscore.UsCoreGoal.Target.measure:type_name -> google.fhir.stu3.proto.CodeableConcept
	53,  // 713: google.fhir.stu3.uscore.UsCoreGoal.Target.detail:type_name -> google.fhir.stu3.uscore.UsCoreGoal.Target.Detail
	54,  // 714: google.fhir.stu3.uscore.UsCoreGoal.Target.due:type_name -> google.fhir.stu3.uscore.UsCoreGoal.Target.Due
	161, // 715: google.fhir.stu3.uscore.UsCoreGoal.Target.Detail.quantity:type_name -> google.fhir.stu3.proto.Quantity
	152, // 716: google.fhir.stu3.uscore.UsCoreGoal.Target.Detail.range:type_name -> google.fhir.stu3.proto.Range
	109, // 717: google.fhir.stu3.uscore.UsCoreGoal.Target.Detail.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	133, // 718: google.fhir.stu3.uscore.UsCoreGoal.Target.Due.date:type_name -> google.fhir.stu3.proto.Date
	131, // 719: google.fhir.stu3.uscore.UsCoreGoal.Target.Due.duration:type_name -> google.fhir.stu3.proto.Duration
	113, // 720: google.fhir.stu3.uscore.UsCoreImmunization.Practitioner.id:type_name -> google.fhir.stu3.proto.String
	102, // 721: google.fhir.stu3.uscore.UsCoreImmunization.Practitioner.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 722: google.fhir.stu3.uscore.UsCoreImmunization.Practitioner.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	109, // 723: google.fhir.stu3.uscore.UsCoreImmunization.Practitioner.role:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 724: google.fhir.stu3.uscore.UsCoreImmunization.Practitioner.actor:type_name -> google.fhir.stu3.proto.Reference
	113, // 725: google.fhir.stu3.uscore.UsCoreImmunization.Explanation.id:type_name -> google.fhir.stu3.proto.String
	102, // 726: google.fhir.stu3.uscore.UsCoreImmunization.Explanation.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 727: google.fhir.stu3.uscore.UsCoreImmunization.Explanation.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	109, // 728: google.fhir.stu3.uscore.UsCoreImmunization.Explanation.reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 729: google.fhir.stu3.uscore.UsCoreImmunization.Explanation.reason_not_given:type_name -> google.fhir.stu3.proto.CodeableConcept
	113, // 730: google.fhir.stu3.uscore.UsCoreImmunization.Reaction.id:type_name -> google.fhir.stu3.proto.String
	102, // 731: google.fhir.stu3.uscore.UsCoreImmunization.Reaction.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 732: google.fhir.stu3.uscore.UsCoreImmunization.Reaction.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	111, // 733: google.fhir.stu3.uscore.UsCoreImmunization.Reaction.date:type_name -> google.fhir.stu3.proto.DateTime
	110, // 734: google.fhir.stu3.uscore.UsCoreImmunization.Reaction.detail:type_name -> google.fhir.stu3.proto.Reference
	126, // 735: google.fhir.stu3.uscore.UsCoreImmunization.Reaction.reported:type_name -> google.fhir.stu3.proto.Boolean
	113, // 736: google.fhir.stu3.uscore.UsCoreImmunization.VaccinationProtocol.id:type_name -> google.fhir.stu3.proto.String
	102, // 737: google.fhir.stu3.uscore.UsCoreImmunization.VaccinationProtocol.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 738: google.fhir.stu3.uscore.UsCoreImmunization.VaccinationProtocol.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	159, // 739: google.fhir.stu3.uscore.UsCoreImmunization.VaccinationProtocol.dose_sequence:type_name -> google.fhir.stu3.proto.PositiveInt
	113, // 740: google.fhir.stu3.uscore.UsCoreImmunization.VaccinationProtocol.description:type_name -> google.fhir.stu3.proto.String
	110, // 741: google.fhir.stu3.uscore.UsCoreImmunization.VaccinationProtocol.authority:type_name -> google.fhir.stu3.proto.Reference
	113, // 742: google.fhir.stu3.uscore.UsCoreImmunization.VaccinationProtocol.series:type_name -> google.fhir.stu3.proto.String
	159, // 743: google.fhir.stu3.uscore.UsCoreImmunization.VaccinationProtocol.series_doses:type_name -> google.fhir.stu3.proto.PositiveInt
	109, // 744: google.fhir.stu3.uscore.UsCoreImmunization.VaccinationProtocol.target_disease:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 745: google.fhir.stu3.uscore.UsCoreImmunization.VaccinationProtocol.dose_status:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 746: google.fhir.stu3.uscore.UsCoreImmunization.VaccinationProtocol.dose_status_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	113, // 747: google.fhir.stu3.uscore.UsCoreLocation.Position.id:type_name -> google.fhir.stu3.proto.String
	102, // 748: google.fhir.stu3.uscore.UsCoreLocation.Position.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 749: google.fhir.stu3.uscore.UsCoreLocation.Position.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	162, // 750: google.fhir.stu3.uscore.UsCoreLocation.Position.longitude:type_name -> google.fhir.stu3.proto.Decimal
	162, // 751: google.fhir.stu3.uscore.UsCoreLocation.Position.latitude:type_name -> google.fhir.stu3.proto.Decimal
	162, // 752: google.fhir.stu3.uscore.UsCoreLocation.Position.altitude:type_name -> google.fhir.stu3.proto.Decimal
	113, // 753: google.fhir.stu3.uscore.UsCoreMedication.Ingredient.id:type_name -> google.fhir.stu3.proto.String
	102, // 754: google.fhir.stu3.uscore.UsCoreMedication.Ingredient.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 755: google.fhir.stu3.uscore.UsCoreMedication.Ingredient.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	62,  // 756: google.fhir.stu3.uscore.UsCoreMedication.Ingredient.item:type_name -> google.fhir.stu3.uscore.UsCoreMedication.Ingredient.Item
	126, // 757: google.fhir.stu3.uscore.UsCoreMedication.Ingredient.is_active:type_name -> google.fhir.stu3.proto.Boolean
	163, // 758: google.fhir.stu3.uscore.UsCoreMedication.Ingredient.amount:type_name -> google.fhir.stu3.proto.Ratio
	113, // 759: google.fhir.stu3.uscore.UsCoreMedication.Package.id:type_name -> google.fhir.stu3.proto.String
	102, // 760: google.fhir.stu3.uscore.UsCoreMedication.Package.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 761: google.fhir.stu3.uscore.UsCoreMedication.Package.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	109, // 762: google.fhir.stu3.uscore.UsCoreMedication.Package.container:type_name -> google.fhir.stu3.proto.CodeableConcept
	63,  // 763: google.fhir.stu3.uscore.UsCoreMedication.Package.content:type_name -> google.fhir.stu3.uscore.UsCoreMedication.Package.Content
	64,  // 764: google.fhir.stu3.uscore.UsCoreMedication.Package.batch:type_name -> google.fhir.stu3.uscore.UsCoreMedication.Package.Batch
	109, // 765: google.fhir.stu3.uscore.UsCoreMedication.Ingredient.Item.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 766: google.fhir.stu3.uscore.UsCoreMedication.Ingredient.Item.reference:type_name -> google.fhir.stu3.proto.Reference
	113, // 767: google.fhir.stu3.uscore.UsCoreMedication.Package.Content.id:type_name -> google.fhir.stu3.proto.String
	102, // 768: google.fhir.stu3.uscore.UsCoreMedication.Package.Content.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 769: google.fhir.stu3.uscore.UsCoreMedication.Package.Content.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	65,  // 770: google.fhir.stu3.uscore.UsCoreMedication.Package.Content.item:type_name -> google.fhir.stu3.uscore.UsCoreMedication.Package.Content.Item
	135, // 771: google.fhir.stu3.uscore.UsCoreMedication.Package.Content.amount:type_name -> google.fhir.stu3.proto.SimpleQuantity
	113, // 772: google.fhir.stu3.uscore.UsCoreMedication.Package.Batch.id:type_name -> google.fhir.stu3.proto.String
	102, // 773: google.fhir.stu3.uscore.UsCoreMedication.Package.Batch.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 774: google.fhir.stu3.uscore.UsCoreMedication.Package.Batch.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	113, // 775: google.fhir.stu3.uscore.UsCoreMedication.Package.Batch.lot_number:type_name -> google.fhir.stu3.proto.String
	111, // 776: google.fhir.stu3.uscore.UsCoreMedication.Package.Batch.expiration_date:type_name -> google.fhir.stu3.proto.DateTime
	109, // 777: google.fhir.stu3.uscore.UsCoreMedication.Package.Content.Item.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 778: google.fhir.stu3.uscore.UsCoreMedication.Package.Content.Item.reference:type_name -> google.fhir.stu3.proto.Reference
	109, // 779: google.fhir.stu3.uscore.UsCoreMedicationrequest.Medication.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 780: google.fhir.stu3.uscore.UsCoreMedicationrequest.Medication.reference:type_name -> google.fhir.stu3.proto.Reference
	113, // 781: google.fhir.stu3.uscore.UsCoreMedicationrequest.Requester.id:type_name -> google.fhir.stu3.proto.String
	102, // 782: google.fhir.stu3.uscore.UsCoreMedicationrequest.Requester.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 783: google.fhir.stu3.uscore.UsCoreMedicationrequest.Requester.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	110, // 784: google.fhir.stu3.uscore.UsCoreMedicationrequest.Requester.agent:type_name -> google.fhir.stu3.proto.Reference
	110, // 785: google.fhir.stu3.uscore.UsCoreMedicationrequest.Requester.on_behalf_of:type_name -> google.fhir.stu3.proto.Reference
	113, // 786: google.fhir.stu3.uscore.UsCoreMedicationrequest.DispenseRequest.id:type_name -> google.fhir.stu3.proto.String
	102, // 787: google.fhir.stu3.uscore.UsCoreMedicationrequest.DispenseRequest.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 788: google.fhir.stu3.uscore.UsCoreMedicationrequest.DispenseRequest.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	117, // 789: google.fhir.stu3.uscore.UsCoreMedicationrequest.DispenseRequest.validity_period:type_name -> google.fhir.stu3.proto.Period
	159, // 790: google.fhir.stu3.uscore.UsCoreMedicationrequest.DispenseRequest.number_of_repeats_allowed:type_name -> google.fhir.stu3.proto.PositiveInt
	135, // 791: google.fhir.stu3.uscore.UsCoreMedicationrequest.DispenseRequest.quantity:type_name -> google.fhir.stu3.proto.SimpleQuantity
	131, // 792: google.fhir.stu3.uscore.UsCoreMedicationrequest.DispenseRequest.expected_supply_duration:type_name -> google.fhir.stu3.proto.Duration
	110, // 793: google.fhir.stu3.uscore.UsCoreMedicationrequest.DispenseRequest.performer:type_name -> google.fhir.stu3.proto.Reference
	113, // 794: google.fhir.stu3.uscore.UsCoreMedicationrequest.Substitution.id:type_name -> google.fhir.stu3.proto.String
	102, // 795: google.fhir.stu3.uscore.UsCoreMedicationrequest.Substitution.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 796: google.fhir.stu3.uscore.UsCoreMedicationrequest.Substitution.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	126, // 797: google.fhir.stu3.uscore.UsCoreMedicationrequest.Substitution.allowed:type_name -> google.fhir.stu3.proto.Boolean
	109, // 798: google.fhir.stu3.uscore.UsCoreMedicationrequest.Substitution.reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 799: google.fhir.stu3.uscore.UsCoreMedicationstatement.Medication.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 800: google.fhir.stu3.uscore.UsCoreMedicationstatement.Medication.reference:type_name -> google.fhir.stu3.proto.Reference
	111, // 801: google.fhir.stu3.uscore.UsCoreMedicationstatement.Effective.date_time:type_name -> google.fhir.stu3.proto.DateTime
	117, // 802: google.fhir.stu3.uscore.UsCoreMedicationstatement.Effective.period:type_name -> google.fhir.stu3.proto.Period
	111, // 803: google.fhir.stu3.uscore.UsCoreObservationresults.Effective.date_time:type_name -> google.fhir.stu3.proto.DateTime
	117, // 804: google.fhir.stu3.uscore.UsCoreObservationresults.Effective.period:type_name -> google.fhir.stu3.proto.Period
	161, // 805: google.fhir.stu3.uscore.UsCoreObservationresults.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	109, // 806: google.fhir.stu3.uscore.UsCoreObservationresults.Value.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	113, // 807: google.fhir.stu3.uscore.UsCoreObservationresults.Value.string_value:type_name -> google.fhir.stu3.proto.String
	126, // 808: google.fhir.stu3.uscore.UsCoreObservationresults.Value.boolean:type_name -> google.fhir.stu3.proto.Boolean
	152, // 809: google.fhir.stu3.uscore.UsCoreObservationresults.Value.range:type_name -> google.fhir.stu3.proto.Range
	163, // 810: google.fhir.stu3.uscore.UsCoreObservationresults.Value.ratio:type_name -> google.fhir.stu3.proto.Ratio
	164, // 811: google.fhir.stu3.uscore.UsCoreObservationresults.Value.sampled_data:type_name -> google.fhir.stu3.proto.SampledData
	125, // 812: google.fhir.stu3.uscore.UsCoreObservationresults.Value.attachment:type_name -> google.fhir.stu3.proto.Attachment
	165, // 813: google.fhir.stu3.uscore.UsCoreObservationresults.Value.time:type_name -> google.fhir.stu3.proto.Time
	111, // 814: google.fhir.stu3.uscore.UsCoreObservationresults.Value.date_time:type_name -> google.fhir.stu3.proto.DateTime
	117, // 815: google.fhir.stu3.uscore.UsCoreObservationresults.Value.period:type_name -> google.fhir.stu3.proto.Period
	113, // 816: google.fhir.stu3.uscore.UsCoreObservationresults.ReferenceRange.id:type_name -> google.fhir.stu3.proto.String
	102, // 817: google.fhir.stu3.uscore.UsCoreObservationresults.ReferenceRange.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 818: google.fhir.stu3.uscore.UsCoreObservationresults.ReferenceRange.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	135, // 819: google.fhir.stu3.uscore.UsCoreObservationresults.ReferenceRange.low:type_name -> google.fhir.stu3.proto.SimpleQuantity
	135, // 820: google.fhir.stu3.uscore.UsCoreObservationresults.ReferenceRange.high:type_name -> google.fhir.stu3.proto.SimpleQuantity
	109, // 821: google.fhir.stu3.uscore.UsCoreObservationresults.ReferenceRange.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 822: google.fhir.stu3.uscore.UsCoreObservationresults.ReferenceRange.applies_to:type_name -> google.fhir.stu3.proto.CodeableConcept
	152, // 823: google.fhir.stu3.uscore.UsCoreObservationresults.ReferenceRange.age:type_name -> google.fhir.stu3.proto.Range
	113, // 824: google.fhir.stu3.uscore.UsCoreObservationresults.ReferenceRange.text:type_name -> google.fhir.stu3.proto.String
	113, // 825: google.fhir.stu3.uscore.UsCoreObservationresults.Related.id:type_name -> google.fhir.stu3.proto.String
	102, // 826: google.fhir.stu3.uscore.UsCoreObservationresults.Related.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 827: google.fhir.stu3.uscore.UsCoreObservationresults.Related.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	166, // 828: google.fhir.stu3.uscore.UsCoreObservationresults.Related.type:type_name -> google.fhir.stu3.proto.ObservationRelationshipTypeCode
	110, // 829: google.fhir.stu3.uscore.UsCoreObservationresults.Related.target:type_name -> google.fhir.stu3.proto.Reference
	113, // 830: google.fhir.stu3.uscore.UsCoreObservationresults.Component.id:type_name -> google.fhir.stu3.proto.String
	102, // 831: google.fhir.stu3.uscore.UsCoreObservationresults.Component.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 832: google.fhir.stu3.uscore.UsCoreObservationresults.Component.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	109, // 833: google.fhir.stu3.uscore.UsCoreObservationresults.Component.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	77,  // 834: google.fhir.stu3.uscore.UsCoreObservationresults.Component.value:type_name -> google.fhir.stu3.uscore.UsCoreObservationresults.Component.Value
	109, // 835: google.fhir.stu3.uscore.UsCoreObservationresults.Component.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 836: google.fhir.stu3.uscore.UsCoreObservationresults.Component.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	74,  // 837: google.fhir.stu3.uscore.UsCoreObservationresults.Component.reference_range:type_name -> google.fhir.stu3.uscore.UsCoreObservationresults.ReferenceRange
	161, // 838: google.fhir.stu3.uscore.UsCoreObservationresults.Component.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	109, // 839: google.fhir.stu3.uscore.UsCoreObservationresults.Component.Value.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	113, // 840: google.fhir.stu3.uscore.UsCoreObservationresults.Component.Value.string_value:type_name -> google.fhir.stu3.proto.String
	152, // 841: google.fhir.stu3.uscore.UsCoreObservationresults.Component.Value.range:type_name -> google.fhir.stu3.proto.Range
	163, // 842: google.fhir.stu3.uscore.UsCoreObservationresults.Component.Value.ratio:type_name -> google.fhir.stu3.proto.Ratio
	164, // 843: google.fhir.stu3.uscore.UsCoreObservationresults.Component.Value.sampled_data:type_name -> google.fhir.stu3.proto.SampledData
	125, // 844: google.fhir.stu3.uscore.UsCoreObservationresults.Component.Value.attachment:type_name -> google.fhir.stu3.proto.Attachment
	165, // 845: google.fhir.stu3.uscore.UsCoreObservationresults.Component.Value.time:type_name -> google.fhir.stu3.proto.Time
	111, // 846: google.fhir.stu3.uscore.UsCoreObservationresults.Component.Value.date_time:type_name -> google.fhir.stu3.proto.DateTime
	117, // 847: google.fhir.stu3.uscore.UsCoreObservationresults.Component.Value.period:type_name -> google.fhir.stu3.proto.Period
	113, // 848: google.fhir.stu3.uscore.UsCoreOrganization.Contact.id:type_name -> google.fhir.stu3.proto.String
	102, // 849: google.fhir.stu3.uscore.UsCoreOrganization.Contact.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 850: google.fhir.stu3.uscore.UsCoreOrganization.Contact.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	109, // 851: google.fhir.stu3.uscore.UsCoreOrganization.Contact.purpose:type_name -> google.fhir.stu3.proto.CodeableConcept
	147, // 852: google.fhir.stu3.uscore.UsCoreOrganization.Contact.name:type_name -> google.fhir.stu3.proto.HumanName
	122, // 853: google.fhir.stu3.uscore.UsCoreOrganization.Contact.telecom:type_name -> google.fhir.stu3.proto.ContactPoint
	138, // 854: google.fhir.stu3.uscore.UsCoreOrganization.Contact.address:type_name -> google.fhir.stu3.proto.Address
	126, // 855: google.fhir.stu3.uscore.UsCorePatient.Deceased.boolean:type_name -> google.fhir.stu3.proto.Boolean
	111, // 856: google.fhir.stu3.uscore.UsCorePatient.Deceased.date_time:type_name -> google.fhir.stu3.proto.DateTime
	126, // 857: google.fhir.stu3.uscore.UsCorePatient.MultipleBirth.boolean:type_name -> google.fhir.stu3.proto.Boolean
	167, // 858: google.fhir.stu3.uscore.UsCorePatient.MultipleBirth.integer:type_name -> google.fhir.stu3.proto.Integer
	113, // 859: google.fhir.stu3.uscore.UsCorePatient.Contact.id:type_name -> google.fhir.stu3.proto.String
	102, // 860: google.fhir.stu3.uscore.UsCorePatient.Contact.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 861: google.fhir.stu3.uscore.UsCorePatient.Contact.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	109, // 862: google.fhir.stu3.uscore.UsCorePatient.Contact.relationship:type_name -> google.fhir.stu3.proto.CodeableConcept
	147, // 863: google.fhir.stu3.uscore.UsCorePatient.Contact.name:type_name -> google.fhir.stu3.proto.HumanName
	122, // 864: google.fhir.stu3.uscore.UsCorePatient.Contact.telecom:type_name -> google.fhir.stu3.proto.ContactPoint
	138, // 865: google.fhir.stu3.uscore.UsCorePatient.Contact.address:type_name -> google.fhir.stu3.proto.Address
	148, // 866: google.fhir.stu3.uscore.UsCorePatient.Contact.gender:type_name -> google.fhir.stu3.proto.AdministrativeGenderCode
	110, // 867: google.fhir.stu3.uscore.UsCorePatient.Contact.organization:type_name -> google.fhir.stu3.proto.Reference
	117, // 868: google.fhir.stu3.uscore.UsCorePatient.Contact.period:type_name -> google.fhir.stu3.proto.Period
	113, // 869: google.fhir.stu3.uscore.UsCorePatient.Communication.id:type_name -> google.fhir.stu3.proto.String
	102, // 870: google.fhir.stu3.uscore.UsCorePatient.Communication.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 871: google.fhir.stu3.uscore.UsCorePatient.Communication.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	109, // 872: google.fhir.stu3.uscore.UsCorePatient.Communication.language:type_name -> google.fhir.stu3.proto.CodeableConcept
	126, // 873: google.fhir.stu3.uscore.UsCorePatient.Communication.preferred:type_name -> google.fhir.stu3.proto.Boolean
	113, // 874: google.fhir.stu3.uscore.UsCorePatient.Link.id:type_name -> google.fhir.stu3.proto.String
	102, // 875: google.fhir.stu3.uscore.UsCorePatient.Link.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 876: google.fhir.stu3.uscore.UsCorePatient.Link.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	110, // 877: google.fhir.stu3.uscore.UsCorePatient.Link.other:type_name -> google.fhir.stu3.proto.Reference
	168, // 878: google.fhir.stu3.uscore.UsCorePatient.Link.type:type_name -> google.fhir.stu3.proto.LinkTypeCode
	113, // 879: google.fhir.stu3.uscore.UsCorePractitioner.Qualification.id:type_name -> google.fhir.stu3.proto.String
	102, // 880: google.fhir.stu3.uscore.UsCorePractitioner.Qualification.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 881: google.fhir.stu3.uscore.UsCorePractitioner.Qualification.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	103, // 882: google.fhir.stu3.uscore.UsCorePractitioner.Qualification.identifier:type_name -> google.fhir.stu3.proto.Identifier
	109, // 883: google.fhir.stu3.uscore.UsCorePractitioner.Qualification.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	117, // 884: google.fhir.stu3.uscore.UsCorePractitioner.Qualification.period:type_name -> google.fhir.stu3.proto.Period
	110, // 885: google.fhir.stu3.uscore.UsCorePractitioner.Qualification.issuer:type_name -> google.fhir.stu3.proto.Reference
	113, // 886: google.fhir.stu3.uscore.UsCorePractitionerrole.AvailableTime.id:type_name -> google.fhir.stu3.proto.String
	102, // 887: google.fhir.stu3.uscore.UsCorePractitionerrole.AvailableTime.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 888: google.fhir.stu3.uscore.UsCorePractitionerrole.AvailableTime.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	169, // 889: google.fhir.stu3.uscore.UsCorePractitionerrole.AvailableTime.days_of_week:type_name -> google.fhir.stu3.proto.DaysOfWeekCode
	126, // 890: google.fhir.stu3.uscore.UsCorePractitionerrole.AvailableTime.all_day:type_name -> google.fhir.stu3.proto.Boolean
	165, // 891: google.fhir.stu3.uscore.UsCorePractitionerrole.AvailableTime.available_start_time:type_name -> google.fhir.stu3.proto.Time
	165, // 892: google.fhir.stu3.uscore.UsCorePractitionerrole.AvailableTime.available_end_time:type_name -> google.fhir.stu3.proto.Time
	113, // 893: google.fhir.stu3.uscore.UsCorePractitionerrole.NotAvailable.id:type_name -> google.fhir.stu3.proto.String
	102, // 894: google.fhir.stu3.uscore.UsCorePractitionerrole.NotAvailable.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 895: google.fhir.stu3.uscore.UsCorePractitionerrole.NotAvailable.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	113, // 896: google.fhir.stu3.uscore.UsCorePractitionerrole.NotAvailable.description:type_name -> google.fhir.stu3.proto.String
	117, // 897: google.fhir.stu3.uscore.UsCorePractitionerrole.NotAvailable.during:type_name -> google.fhir.stu3.proto.Period
	111, // 898: google.fhir.stu3.uscore.UsCoreProcedure.Performed.date_time:type_name -> google.fhir.stu3.proto.DateTime
	117, // 899: google.fhir.stu3.uscore.UsCoreProcedure.Performed.period:type_name -> google.fhir.stu3.proto.Period
	113, // 900: google.fhir.stu3.uscore.UsCoreProcedure.Performer.id:type_name -> google.fhir.stu3.proto.String
	102, // 901: google.fhir.stu3.uscore.UsCoreProcedure.Performer.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 902: google.fhir.stu3.uscore.UsCoreProcedure.Performer.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	109, // 903: google.fhir.stu3.uscore.UsCoreProcedure.Performer.role:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 904: google.fhir.stu3.uscore.UsCoreProcedure.Performer.actor:type_name -> google.fhir.stu3.proto.Reference
	110, // 905: google.fhir.stu3.uscore.UsCoreProcedure.Performer.on_behalf_of:type_name -> google.fhir.stu3.proto.Reference
	113, // 906: google.fhir.stu3.uscore.UsCoreProcedure.FocalDevice.id:type_name -> google.fhir.stu3.proto.String
	102, // 907: google.fhir.stu3.uscore.UsCoreProcedure.FocalDevice.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 908: google.fhir.stu3.uscore.UsCoreProcedure.FocalDevice.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	109, // 909: google.fhir.stu3.uscore.UsCoreProcedure.FocalDevice.action:type_name -> google.fhir.stu3.proto.CodeableConcept
	110, // 910: google.fhir.stu3.uscore.UsCoreProcedure.FocalDevice.manipulated:type_name -> google.fhir.stu3.proto.Reference
	111, // 911: google.fhir.stu3.uscore.UsCoreSmokingstatus.Effective.date_time:type_name -> google.fhir.stu3.proto.DateTime
	117, // 912: google.fhir.stu3.uscore.UsCoreSmokingstatus.Effective.period:type_name -> google.fhir.stu3.proto.Period
	109, // 913: google.fhir.stu3.uscore.UsCoreSmokingstatus.Value.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	113, // 914: google.fhir.stu3.uscore.UsCoreSmokingstatus.ReferenceRange.id:type_name -> google.fhir.stu3.proto.String
	102, // 915: google.fhir.stu3.uscore.UsCoreSmokingstatus.ReferenceRange.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 916: google.fhir.stu3.uscore.UsCoreSmokingstatus.ReferenceRange.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	135, // 917: google.fhir.stu3.uscore.UsCoreSmokingstatus.ReferenceRange.low:type_name -> google.fhir.stu3.proto.SimpleQuantity
	135, // 918: google.fhir.stu3.uscore.UsCoreSmokingstatus.ReferenceRange.high:type_name -> google.fhir.stu3.proto.SimpleQuantity
	109, // 919: google.fhir.stu3.uscore.UsCoreSmokingstatus.ReferenceRange.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 920: google.fhir.stu3.uscore.UsCoreSmokingstatus.ReferenceRange.applies_to:type_name -> google.fhir.stu3.proto.CodeableConcept
	152, // 921: google.fhir.stu3.uscore.UsCoreSmokingstatus.ReferenceRange.age:type_name -> google.fhir.stu3.proto.Range
	113, // 922: google.fhir.stu3.uscore.UsCoreSmokingstatus.ReferenceRange.text:type_name -> google.fhir.stu3.proto.String
	113, // 923: google.fhir.stu3.uscore.UsCoreSmokingstatus.Related.id:type_name -> google.fhir.stu3.proto.String
	102, // 924: google.fhir.stu3.uscore.UsCoreSmokingstatus.Related.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 925: google.fhir.stu3.uscore.UsCoreSmokingstatus.Related.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	166, // 926: google.fhir.stu3.uscore.UsCoreSmokingstatus.Related.type:type_name -> google.fhir.stu3.proto.ObservationRelationshipTypeCode
	110, // 927: google.fhir.stu3.uscore.UsCoreSmokingstatus.Related.target:type_name -> google.fhir.stu3.proto.Reference
	113, // 928: google.fhir.stu3.uscore.UsCoreSmokingstatus.Component.id:type_name -> google.fhir.stu3.proto.String
	102, // 929: google.fhir.stu3.uscore.UsCoreSmokingstatus.Component.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 930: google.fhir.stu3.uscore.UsCoreSmokingstatus.Component.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	109, // 931: google.fhir.stu3.uscore.UsCoreSmokingstatus.Component.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	95,  // 932: google.fhir.stu3.uscore.UsCoreSmokingstatus.Component.value:type_name -> google.fhir.stu3.uscore.UsCoreSmokingstatus.Component.Value
	109, // 933: google.fhir.stu3.uscore.UsCoreSmokingstatus.Component.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	109, // 934: google.fhir.stu3.uscore.UsCoreSmokingstatus.Component.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	92,  // 935: google.fhir.stu3.uscore.UsCoreSmokingstatus.Component.reference_range:type_name -> google.fhir.stu3.uscore.UsCoreSmokingstatus.ReferenceRange
	161, // 936: google.fhir.stu3.uscore.UsCoreSmokingstatus.Component.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	109, // 937: google.fhir.stu3.uscore.UsCoreSmokingstatus.Component.Value.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	113, // 938: google.fhir.stu3.uscore.UsCoreSmokingstatus.Component.Value.string_value:type_name -> google.fhir.stu3.proto.String
	152, // 939: google.fhir.stu3.uscore.UsCoreSmokingstatus.Component.Value.range:type_name -> google.fhir.stu3.proto.Range
	163, // 940: google.fhir.stu3.uscore.UsCoreSmokingstatus.Component.Value.ratio:type_name -> google.fhir.stu3.proto.Ratio
	164, // 941: google.fhir.stu3.uscore.UsCoreSmokingstatus.Component.Value.sampled_data:type_name -> google.fhir.stu3.proto.SampledData
	125, // 942: google.fhir.stu3.uscore.UsCoreSmokingstatus.Component.Value.attachment:type_name -> google.fhir.stu3.proto.Attachment
	165, // 943: google.fhir.stu3.uscore.UsCoreSmokingstatus.Component.Value.time:type_name -> google.fhir.stu3.proto.Time
	111, // 944: google.fhir.stu3.uscore.UsCoreSmokingstatus.Component.Value.date_time:type_name -> google.fhir.stu3.proto.DateTime
	117, // 945: google.fhir.stu3.uscore.UsCoreSmokingstatus.Component.Value.period:type_name -> google.fhir.stu3.proto.Period
	946, // [946:946] is the sub-list for method output_type
	946, // [946:946] is the sub-list for method input_type
	946, // [946:946] is the sub-list for extension type_name
	946, // [946:946] is the sub-list for extension extendee
	0,   // [0:946] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_stu3_uscore_proto_init() }
func file_proto_google_fhir_proto_stu3_uscore_proto_init() {
	if File_proto_google_fhir_proto_stu3_uscore_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreAllergyintolerance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientUSCoreBirthSexExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreCareplan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreCareteam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreDiagnosticreport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreDirectEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreDocumentreference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreEncounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientUSCoreEthnicityExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreGoal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreImmunization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreMedication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreMedicationrequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreMedicationstatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreObservationresults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreOrganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCorePatient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCorePractitioner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCorePractitionerrole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreProcedure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilityStatementProfileResourceAssociationExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientUSCoreRaceExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreSmokingstatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreAllergyintolerance_Onset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreAllergyintolerance_Reaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreCareplan_Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreCareplan_Activity_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreCareplan_Activity_Detail_Scheduled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreCareplan_Activity_Detail_Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreCareteam_Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreCondition_Onset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreCondition_Abatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreCondition_Stage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreCondition_Evidence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreDevice_Udi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreDiagnosticreport_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreDiagnosticreport_Performer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreDiagnosticreport_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreDocumentreference_RelatesTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreDocumentreference_Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreDocumentreference_Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreDocumentreference_Context_Related); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreEncounter_StatusHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreEncounter_ClassHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreEncounter_Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreEncounter_Diagnosis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreEncounter_Hospitalization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreEncounter_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreGoal_Start); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreGoal_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreGoal_Target_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreGoal_Target_Due); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreImmunization_Practitioner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreImmunization_Explanation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreImmunization_Reaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreImmunization_VaccinationProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreLocation_Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreMedication_Ingredient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreMedication_Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreMedication_Ingredient_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreMedication_Package_Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreMedication_Package_Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreMedication_Package_Content_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreMedicationrequest_Medication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreMedicationrequest_Requester); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreMedicationrequest_DispenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreMedicationrequest_Substitution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreMedicationstatement_Medication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreMedicationstatement_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreObservationresults_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreObservationresults_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreObservationresults_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreObservationresults_Related); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreObservationresults_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreObservationresults_Component_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreOrganization_Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCorePatient_Deceased); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCorePatient_MultipleBirth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCorePatient_Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCorePatient_Communication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCorePatient_Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCorePractitioner_Qualification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCorePractitionerrole_AvailableTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCorePractitionerrole_NotAvailable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreProcedure_Performed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreProcedure_Performer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreProcedure_FocalDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreSmokingstatus_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreSmokingstatus_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreSmokingstatus_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreSmokingstatus_Related); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreSmokingstatus_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreSmokingstatus_Component_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*UsCoreAllergyintolerance_Onset_DateTime)(nil),
		(*UsCoreAllergyintolerance_Onset_Age)(nil),
		(*UsCoreAllergyintolerance_Onset_Period)(nil),
		(*UsCoreAllergyintolerance_Onset_Range)(nil),
		(*UsCoreAllergyintolerance_Onset_StringValue)(nil),
	}
	file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*UsCoreCareplan_Activity_Detail_Scheduled_Timing)(nil),
		(*UsCoreCareplan_Activity_Detail_Scheduled_Period)(nil),
		(*UsCoreCareplan_Activity_Detail_Scheduled_StringValue)(nil),
	}
	file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*UsCoreCareplan_Activity_Detail_Product_CodeableConcept)(nil),
		(*UsCoreCareplan_Activity_Detail_Product_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*UsCoreCondition_Onset_DateTime)(nil),
		(*UsCoreCondition_Onset_Age)(nil),
		(*UsCoreCondition_Onset_Period)(nil),
		(*UsCoreCondition_Onset_Range)(nil),
		(*UsCoreCondition_Onset_StringValue)(nil),
	}
	file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*UsCoreCondition_Abatement_DateTime)(nil),
		(*UsCoreCondition_Abatement_Age)(nil),
		(*UsCoreCondition_Abatement_Boolean)(nil),
		(*UsCoreCondition_Abatement_Period)(nil),
		(*UsCoreCondition_Abatement_Range)(nil),
		(*UsCoreCondition_Abatement_StringValue)(nil),
	}
	file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*UsCoreDiagnosticreport_Effective_DateTime)(nil),
		(*UsCoreDiagnosticreport_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[51].OneofWrappers = []interface{}{
		(*UsCoreGoal_Start_Date)(nil),
		(*UsCoreGoal_Start_CodeableConcept)(nil),
	}
	file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[53].OneofWrappers = []interface{}{
		(*UsCoreGoal_Target_Detail_Quantity)(nil),
		(*UsCoreGoal_Target_Detail_Range)(nil),
		(*UsCoreGoal_Target_Detail_CodeableConcept)(nil),
	}
	file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[54].OneofWrappers = []interface{}{
		(*UsCoreGoal_Target_Due_Date)(nil),
		(*UsCoreGoal_Target_Due_Duration)(nil),
	}
	file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[62].OneofWrappers = []interface{}{
		(*UsCoreMedication_Ingredient_Item_CodeableConcept)(nil),
		(*UsCoreMedication_Ingredient_Item_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[65].OneofWrappers = []interface{}{
		(*UsCoreMedication_Package_Content_Item_CodeableConcept)(nil),
		(*UsCoreMedication_Package_Content_Item_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[66].OneofWrappers = []interface{}{
		(*UsCoreMedicationrequest_Medication_CodeableConcept)(nil),
		(*UsCoreMedicationrequest_Medication_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[70].OneofWrappers = []interface{}{
		(*UsCoreMedicationstatement_Medication_CodeableConcept)(nil),
		(*UsCoreMedicationstatement_Medication_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[71].OneofWrappers = []interface{}{
		(*UsCoreMedicationstatement_Effective_DateTime)(nil),
		(*UsCoreMedicationstatement_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[72].OneofWrappers = []interface{}{
		(*UsCoreObservationresults_Effective_DateTime)(nil),
		(*UsCoreObservationresults_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[73].OneofWrappers = []interface{}{
		(*UsCoreObservationresults_Value_Quantity)(nil),
		(*UsCoreObservationresults_Value_CodeableConcept)(nil),
		(*UsCoreObservationresults_Value_StringValue)(nil),
		(*UsCoreObservationresults_Value_Boolean)(nil),
		(*UsCoreObservationresults_Value_Range)(nil),
		(*UsCoreObservationresults_Value_Ratio)(nil),
		(*UsCoreObservationresults_Value_SampledData)(nil),
		(*UsCoreObservationresults_Value_Attachment)(nil),
		(*UsCoreObservationresults_Value_Time)(nil),
		(*UsCoreObservationresults_Value_DateTime)(nil),
		(*UsCoreObservationresults_Value_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[77].OneofWrappers = []interface{}{
		(*UsCoreObservationresults_Component_Value_Quantity)(nil),
		(*UsCoreObservationresults_Component_Value_CodeableConcept)(nil),
		(*UsCoreObservationresults_Component_Value_StringValue)(nil),
		(*UsCoreObservationresults_Component_Value_Range)(nil),
		(*UsCoreObservationresults_Component_Value_Ratio)(nil),
		(*UsCoreObservationresults_Component_Value_SampledData)(nil),
		(*UsCoreObservationresults_Component_Value_Attachment)(nil),
		(*UsCoreObservationresults_Component_Value_Time)(nil),
		(*UsCoreObservationresults_Component_Value_DateTime)(nil),
		(*UsCoreObservationresults_Component_Value_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[79].OneofWrappers = []interface{}{
		(*UsCorePatient_Deceased_Boolean)(nil),
		(*UsCorePatient_Deceased_DateTime)(nil),
	}
	file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[80].OneofWrappers = []interface{}{
		(*UsCorePatient_MultipleBirth_Boolean)(nil),
		(*UsCorePatient_MultipleBirth_Integer)(nil),
	}
	file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[87].OneofWrappers = []interface{}{
		(*UsCoreProcedure_Performed_DateTime)(nil),
		(*UsCoreProcedure_Performed_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[90].OneofWrappers = []interface{}{
		(*UsCoreSmokingstatus_Effective_DateTime)(nil),
		(*UsCoreSmokingstatus_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[91].OneofWrappers = []interface{}{
		(*UsCoreSmokingstatus_Value_CodeableConcept)(nil),
	}
	file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes[95].OneofWrappers = []interface{}{
		(*UsCoreSmokingstatus_Component_Value_Quantity)(nil),
		(*UsCoreSmokingstatus_Component_Value_CodeableConcept)(nil),
		(*UsCoreSmokingstatus_Component_Value_StringValue)(nil),
		(*UsCoreSmokingstatus_Component_Value_Range)(nil),
		(*UsCoreSmokingstatus_Component_Value_Ratio)(nil),
		(*UsCoreSmokingstatus_Component_Value_SampledData)(nil),
		(*UsCoreSmokingstatus_Component_Value_Attachment)(nil),
		(*UsCoreSmokingstatus_Component_Value_Time)(nil),
		(*UsCoreSmokingstatus_Component_Value_DateTime)(nil),
		(*UsCoreSmokingstatus_Component_Value_Period)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_stu3_uscore_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   96,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_stu3_uscore_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_stu3_uscore_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_stu3_uscore_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_stu3_uscore_proto = out.File
	file_proto_google_fhir_proto_stu3_uscore_proto_rawDesc = nil
	file_proto_google_fhir_proto_stu3_uscore_proto_goTypes = nil
	file_proto_google_fhir_proto_stu3_uscore_proto_depIdxs = nil
}

//    Copyright 2020 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r5/core/profiles/family_member_history_for_genetics_analysis.proto

package family_member_history_for_genetics_analysis_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	extensions_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/extensions_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for Family member history for
// genetics analysis. Information about patient's relatives, relevant for
// patient. See
// http://hl7.org/fhir/StructureDefinition/familymemberhistory-genetic
type FamilyMemberHistoryForGeneticsAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Id(s) for this record
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Instantiates FHIR protocol or definition
	InstantiatesCanonical []*datatypes_go_proto.Canonical `protobuf:"bytes,11,rep,name=instantiates_canonical,json=instantiatesCanonical,proto3" json:"instantiates_canonical,omitempty"`
	// Instantiates external protocol or definition
	InstantiatesUri []*datatypes_go_proto.Uri                          `protobuf:"bytes,12,rep,name=instantiates_uri,json=instantiatesUri,proto3" json:"instantiates_uri,omitempty"`
	Status          *FamilyMemberHistoryForGeneticsAnalysis_StatusCode `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// subject-unknown | withheld | unable-to-obtain | deferred
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// Patient history is about
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=patient,proto3" json:"patient,omitempty"`
	// When history was recorded or last updated
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,16,opt,name=date,proto3" json:"date,omitempty"`
	// The family member described
	Name *datatypes_go_proto.String `protobuf:"bytes,17,opt,name=name,proto3" json:"name,omitempty"`
	// Relationship to the subject
	Relationship *datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,opt,name=relationship,proto3" json:"relationship,omitempty"`
	// male | female | other | unknown
	Sex  *datatypes_go_proto.CodeableConcept           `protobuf:"bytes,19,opt,name=sex,proto3" json:"sex,omitempty"`
	Born *FamilyMemberHistoryForGeneticsAnalysis_BornX `protobuf:"bytes,20,opt,name=born,proto3" json:"born,omitempty"`
	Age  *FamilyMemberHistoryForGeneticsAnalysis_AgeX  `protobuf:"bytes,21,opt,name=age,proto3" json:"age,omitempty"`
	// Age is estimated?
	EstimatedAge *datatypes_go_proto.Boolean                       `protobuf:"bytes,22,opt,name=estimated_age,json=estimatedAge,proto3" json:"estimated_age,omitempty"`
	Deceased     *FamilyMemberHistoryForGeneticsAnalysis_DeceasedX `protobuf:"bytes,23,opt,name=deceased,proto3" json:"deceased,omitempty"`
	// Why was family member history performed?
	Reason []*datatypes_go_proto.CodeableReference `protobuf:"bytes,24,rep,name=reason,proto3" json:"reason,omitempty"`
	// General note about related person
	Note      []*datatypes_go_proto.Annotation                    `protobuf:"bytes,25,rep,name=note,proto3" json:"note,omitempty"`
	Condition []*FamilyMemberHistoryForGeneticsAnalysis_Condition `protobuf:"bytes,26,rep,name=condition,proto3" json:"condition,omitempty"`
	Procedure []*FamilyMemberHistoryForGeneticsAnalysis_Procedure `protobuf:"bytes,27,rep,name=procedure,proto3" json:"procedure,omitempty"`
	// Mother(s) & Father(s) - genetic & other
	Parent []*extensions_go_proto.FamilyMemberHistoryParent `protobuf:"bytes,28,rep,name=parent,proto3" json:"parent,omitempty"`
	// natural brother(s) & natural sister(s) - genetic & other
	Sibling []*extensions_go_proto.FamilyMemberHistorySibling `protobuf:"bytes,29,rep,name=sibling,proto3" json:"sibling,omitempty"`
	// Genetic markers, ethnicity, etc.
	Observations []*datatypes_go_proto.Reference `protobuf:"bytes,30,rep,name=observations,proto3" json:"observations,omitempty"`
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) Reset() {
	*x = FamilyMemberHistoryForGeneticsAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyMemberHistoryForGeneticsAnalysis) ProtoMessage() {}

func (x *FamilyMemberHistoryForGeneticsAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyMemberHistoryForGeneticsAnalysis.ProtoReflect.Descriptor instead.
func (*FamilyMemberHistoryForGeneticsAnalysis) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_rawDescGZIP(), []int{0}
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetInstantiatesCanonical() []*datatypes_go_proto.Canonical {
	if x != nil {
		return x.InstantiatesCanonical
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetInstantiatesUri() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.InstantiatesUri
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetStatus() *FamilyMemberHistoryForGeneticsAnalysis_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetRelationship() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetSex() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Sex
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetBorn() *FamilyMemberHistoryForGeneticsAnalysis_BornX {
	if x != nil {
		return x.Born
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetAge() *FamilyMemberHistoryForGeneticsAnalysis_AgeX {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetEstimatedAge() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.EstimatedAge
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetDeceased() *FamilyMemberHistoryForGeneticsAnalysis_DeceasedX {
	if x != nil {
		return x.Deceased
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetReason() []*datatypes_go_proto.CodeableReference {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetCondition() []*FamilyMemberHistoryForGeneticsAnalysis_Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetProcedure() []*FamilyMemberHistoryForGeneticsAnalysis_Procedure {
	if x != nil {
		return x.Procedure
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetParent() []*extensions_go_proto.FamilyMemberHistoryParent {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetSibling() []*extensions_go_proto.FamilyMemberHistorySibling {
	if x != nil {
		return x.Sibling
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis) GetObservations() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Observations
	}
	return nil
}

// partial | completed | entered-in-error | health-unknown
type FamilyMemberHistoryForGeneticsAnalysis_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.FamilyHistoryStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.FamilyHistoryStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension              `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_StatusCode) Reset() {
	*x = FamilyMemberHistoryForGeneticsAnalysis_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyMemberHistoryForGeneticsAnalysis_StatusCode) ProtoMessage() {}

func (x *FamilyMemberHistoryForGeneticsAnalysis_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyMemberHistoryForGeneticsAnalysis_StatusCode.ProtoReflect.Descriptor instead.
func (*FamilyMemberHistoryForGeneticsAnalysis_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_rawDescGZIP(), []int{0, 0}
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_StatusCode) GetValue() codes_go_proto.FamilyHistoryStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.FamilyHistoryStatusCode_INVALID_UNINITIALIZED
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// (approximate) date of birth
type FamilyMemberHistoryForGeneticsAnalysis_BornX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*FamilyMemberHistoryForGeneticsAnalysis_BornX_Period
	//	*FamilyMemberHistoryForGeneticsAnalysis_BornX_Date
	//	*FamilyMemberHistoryForGeneticsAnalysis_BornX_StringValue
	Choice isFamilyMemberHistoryForGeneticsAnalysis_BornX_Choice `protobuf_oneof:"choice"`
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_BornX) Reset() {
	*x = FamilyMemberHistoryForGeneticsAnalysis_BornX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_BornX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyMemberHistoryForGeneticsAnalysis_BornX) ProtoMessage() {}

func (x *FamilyMemberHistoryForGeneticsAnalysis_BornX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyMemberHistoryForGeneticsAnalysis_BornX.ProtoReflect.Descriptor instead.
func (*FamilyMemberHistoryForGeneticsAnalysis_BornX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_rawDescGZIP(), []int{0, 1}
}

func (m *FamilyMemberHistoryForGeneticsAnalysis_BornX) GetChoice() isFamilyMemberHistoryForGeneticsAnalysis_BornX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_BornX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*FamilyMemberHistoryForGeneticsAnalysis_BornX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_BornX) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetChoice().(*FamilyMemberHistoryForGeneticsAnalysis_BornX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_BornX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*FamilyMemberHistoryForGeneticsAnalysis_BornX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isFamilyMemberHistoryForGeneticsAnalysis_BornX_Choice interface {
	isFamilyMemberHistoryForGeneticsAnalysis_BornX_Choice()
}

type FamilyMemberHistoryForGeneticsAnalysis_BornX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,1,opt,name=period,proto3,oneof"`
}

type FamilyMemberHistoryForGeneticsAnalysis_BornX_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,2,opt,name=date,proto3,oneof"`
}

type FamilyMemberHistoryForGeneticsAnalysis_BornX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

func (*FamilyMemberHistoryForGeneticsAnalysis_BornX_Period) isFamilyMemberHistoryForGeneticsAnalysis_BornX_Choice() {
}

func (*FamilyMemberHistoryForGeneticsAnalysis_BornX_Date) isFamilyMemberHistoryForGeneticsAnalysis_BornX_Choice() {
}

func (*FamilyMemberHistoryForGeneticsAnalysis_BornX_StringValue) isFamilyMemberHistoryForGeneticsAnalysis_BornX_Choice() {
}

// (approximate) age
type FamilyMemberHistoryForGeneticsAnalysis_AgeX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*FamilyMemberHistoryForGeneticsAnalysis_AgeX_Age
	//	*FamilyMemberHistoryForGeneticsAnalysis_AgeX_Range
	//	*FamilyMemberHistoryForGeneticsAnalysis_AgeX_StringValue
	Choice isFamilyMemberHistoryForGeneticsAnalysis_AgeX_Choice `protobuf_oneof:"choice"`
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_AgeX) Reset() {
	*x = FamilyMemberHistoryForGeneticsAnalysis_AgeX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_AgeX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyMemberHistoryForGeneticsAnalysis_AgeX) ProtoMessage() {}

func (x *FamilyMemberHistoryForGeneticsAnalysis_AgeX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyMemberHistoryForGeneticsAnalysis_AgeX.ProtoReflect.Descriptor instead.
func (*FamilyMemberHistoryForGeneticsAnalysis_AgeX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_rawDescGZIP(), []int{0, 2}
}

func (m *FamilyMemberHistoryForGeneticsAnalysis_AgeX) GetChoice() isFamilyMemberHistoryForGeneticsAnalysis_AgeX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_AgeX) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetChoice().(*FamilyMemberHistoryForGeneticsAnalysis_AgeX_Age); ok {
		return x.Age
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_AgeX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*FamilyMemberHistoryForGeneticsAnalysis_AgeX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_AgeX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*FamilyMemberHistoryForGeneticsAnalysis_AgeX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isFamilyMemberHistoryForGeneticsAnalysis_AgeX_Choice interface {
	isFamilyMemberHistoryForGeneticsAnalysis_AgeX_Choice()
}

type FamilyMemberHistoryForGeneticsAnalysis_AgeX_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,1,opt,name=age,proto3,oneof"`
}

type FamilyMemberHistoryForGeneticsAnalysis_AgeX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

type FamilyMemberHistoryForGeneticsAnalysis_AgeX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

func (*FamilyMemberHistoryForGeneticsAnalysis_AgeX_Age) isFamilyMemberHistoryForGeneticsAnalysis_AgeX_Choice() {
}

func (*FamilyMemberHistoryForGeneticsAnalysis_AgeX_Range) isFamilyMemberHistoryForGeneticsAnalysis_AgeX_Choice() {
}

func (*FamilyMemberHistoryForGeneticsAnalysis_AgeX_StringValue) isFamilyMemberHistoryForGeneticsAnalysis_AgeX_Choice() {
}

// Dead? How old/when?
type FamilyMemberHistoryForGeneticsAnalysis_DeceasedX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*FamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Boolean
	//	*FamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Age
	//	*FamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Range
	//	*FamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Date
	//	*FamilyMemberHistoryForGeneticsAnalysis_DeceasedX_StringValue
	Choice isFamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Choice `protobuf_oneof:"choice"`
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_DeceasedX) Reset() {
	*x = FamilyMemberHistoryForGeneticsAnalysis_DeceasedX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_DeceasedX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyMemberHistoryForGeneticsAnalysis_DeceasedX) ProtoMessage() {}

func (x *FamilyMemberHistoryForGeneticsAnalysis_DeceasedX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyMemberHistoryForGeneticsAnalysis_DeceasedX.ProtoReflect.Descriptor instead.
func (*FamilyMemberHistoryForGeneticsAnalysis_DeceasedX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_rawDescGZIP(), []int{0, 3}
}

func (m *FamilyMemberHistoryForGeneticsAnalysis_DeceasedX) GetChoice() isFamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_DeceasedX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*FamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_DeceasedX) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetChoice().(*FamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Age); ok {
		return x.Age
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_DeceasedX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*FamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_DeceasedX) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetChoice().(*FamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_DeceasedX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*FamilyMemberHistoryForGeneticsAnalysis_DeceasedX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isFamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Choice interface {
	isFamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Choice()
}

type FamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type FamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,2,opt,name=age,proto3,oneof"`
}

type FamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,3,opt,name=range,proto3,oneof"`
}

type FamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,4,opt,name=date,proto3,oneof"`
}

type FamilyMemberHistoryForGeneticsAnalysis_DeceasedX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=string_value,json=string,proto3,oneof"`
}

func (*FamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Boolean) isFamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Choice() {
}

func (*FamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Age) isFamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Choice() {
}

func (*FamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Range) isFamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Choice() {
}

func (*FamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Date) isFamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Choice() {
}

func (*FamilyMemberHistoryForGeneticsAnalysis_DeceasedX_StringValue) isFamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Choice() {
}

// Condition that the related person had
type FamilyMemberHistoryForGeneticsAnalysis_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Condition suffered by relation
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// deceased | permanent disability | etc.
	Outcome *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=outcome,proto3" json:"outcome,omitempty"`
	// Whether the condition contributed to the cause of death
	ContributedToDeath *datatypes_go_proto.Boolean                              `protobuf:"bytes,6,opt,name=contributed_to_death,json=contributedToDeath,proto3" json:"contributed_to_death,omitempty"`
	Onset              *FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX `protobuf:"bytes,7,opt,name=onset,proto3" json:"onset,omitempty"`
	// Extra information about condition
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,8,rep,name=note,proto3" json:"note,omitempty"`
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Condition) Reset() {
	*x = FamilyMemberHistoryForGeneticsAnalysis_Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyMemberHistoryForGeneticsAnalysis_Condition) ProtoMessage() {}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyMemberHistoryForGeneticsAnalysis_Condition.ProtoReflect.Descriptor instead.
func (*FamilyMemberHistoryForGeneticsAnalysis_Condition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_rawDescGZIP(), []int{0, 4}
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Condition) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Condition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Condition) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Condition) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Condition) GetOutcome() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Condition) GetContributedToDeath() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ContributedToDeath
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Condition) GetOnset() *FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX {
	if x != nil {
		return x.Onset
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Condition) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

// Procedures that the related person had
type FamilyMemberHistoryForGeneticsAnalysis_Procedure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Procedures performed on the related person
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// What happened following the procedure
	Outcome *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=outcome,proto3" json:"outcome,omitempty"`
	// Whether the procedure contributed to the cause of death
	ContributedToDeath *datatypes_go_proto.Boolean                                  `protobuf:"bytes,6,opt,name=contributed_to_death,json=contributedToDeath,proto3" json:"contributed_to_death,omitempty"`
	Performed          *FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX `protobuf:"bytes,7,opt,name=performed,proto3" json:"performed,omitempty"`
	// Extra information about the procedure
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,8,rep,name=note,proto3" json:"note,omitempty"`
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Procedure) Reset() {
	*x = FamilyMemberHistoryForGeneticsAnalysis_Procedure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Procedure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyMemberHistoryForGeneticsAnalysis_Procedure) ProtoMessage() {}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Procedure) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyMemberHistoryForGeneticsAnalysis_Procedure.ProtoReflect.Descriptor instead.
func (*FamilyMemberHistoryForGeneticsAnalysis_Procedure) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_rawDescGZIP(), []int{0, 5}
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Procedure) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Procedure) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Procedure) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Procedure) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Procedure) GetOutcome() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Procedure) GetContributedToDeath() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ContributedToDeath
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Procedure) GetPerformed() *FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX {
	if x != nil {
		return x.Performed
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Procedure) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

// When condition first manifested
type FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_Age
	//	*FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_Range
	//	*FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_Period
	//	*FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_StringValue
	Choice isFamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_Choice `protobuf_oneof:"choice"`
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX) Reset() {
	*x = FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX) ProtoMessage() {}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX.ProtoReflect.Descriptor instead.
func (*FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (m *FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX) GetChoice() isFamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetChoice().(*FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_Age); ok {
		return x.Age
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isFamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_Choice interface {
	isFamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_Choice()
}

type FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,1,opt,name=age,proto3,oneof"`
}

type FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

type FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,3,opt,name=period,proto3,oneof"`
}

type FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=string_value,json=string,proto3,oneof"`
}

func (*FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_Age) isFamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_Choice() {
}

func (*FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_Range) isFamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_Choice() {
}

func (*FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_Period) isFamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_Choice() {
}

func (*FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_StringValue) isFamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_Choice() {
}

// When the procedure was performed
type FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_Age
	//	*FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_Range
	//	*FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_Period
	//	*FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_StringValue
	//	*FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_DateTime
	Choice isFamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_Choice `protobuf_oneof:"choice"`
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX) Reset() {
	*x = FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX) ProtoMessage() {}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX.ProtoReflect.Descriptor instead.
func (*FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (m *FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX) GetChoice() isFamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetChoice().(*FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_Age); ok {
		return x.Age
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

type isFamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_Choice interface {
	isFamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_Choice()
}

type FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,1,opt,name=age,proto3,oneof"`
}

type FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

type FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,3,opt,name=period,proto3,oneof"`
}

type FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=string_value,json=string,proto3,oneof"`
}

type FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=date_time,json=dateTime,proto3,oneof"`
}

func (*FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_Age) isFamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_Choice() {
}

func (*FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_Range) isFamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_Choice() {
}

func (*FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_Period) isFamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_Choice() {
}

func (*FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_StringValue) isFamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_Choice() {
}

func (*FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_DateTime) isFamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_Choice() {
}

var File_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_rawDesc = []byte{
	0x0a, 0x5a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72,
	0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfc, 0x28, 0x0a, 0x26, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46,
	0x6f, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12,
	0x43, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x73, 0x55, 0x72, 0x69, 0x12, 0x66, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x6f,
	0x72, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x12,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10,
	0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x36, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x55, 0x0a,
	0x04, 0x62, 0x6f, 0x72, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x42, 0x6f, 0x72, 0x6e, 0x58, 0x52, 0x04,
	0x62, 0x6f, 0x72, 0x6e, 0x12, 0x52, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x47, 0x65,
	0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x41,
	0x67, 0x65, 0x58, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x67, 0x65, 0x12, 0x61, 0x0a, 0x08, 0x64,
	0x65, 0x63, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x65, 0x61,
	0x73, 0x65, 0x64, 0x58, 0x52, 0x08, 0x64, 0x65, 0x63, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x3e,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x46, 0x6f, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x9b, 0x01,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x53,
	0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x4d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2d, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x9f, 0x01, 0x0a, 0x07,
	0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x54,
	0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x4e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2d, 0x73, 0x69, 0x62,
	0x6c, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x9c, 0x01,
	0x0a, 0x0c, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x58, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x52, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x2d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xac, 0x02, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x3a, 0x69, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xbe, 0x01, 0x0a, 0x05,
	0x42, 0x6f, 0x72, 0x6e, 0x58, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2f, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8,
	0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xb7, 0x01, 0x0a,
	0x04, 0x41, 0x67, 0x65, 0x58, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03,
	0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xa7, 0x02, 0x0a, 0x09, 0x44, 0x65, 0x63, 0x65, 0x61,
	0x73, 0x65, 0x64, 0x58, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x2c,
	0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x1a, 0x9f, 0x06, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x6f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x54,
	0x6f, 0x44, 0x65, 0x61, 0x74, 0x68, 0x12, 0x62, 0x0a, 0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46,
	0x6f, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x6e, 0x73,
	0x65, 0x74, 0x58, 0x52, 0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a,
	0xf0, 0x01, 0x0a, 0x06, 0x4f, 0x6e, 0x73, 0x65, 0x74, 0x58, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x1a, 0xed, 0x06, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x64, 0x54, 0x6f, 0x44, 0x65, 0x61, 0x74, 0x68, 0x12, 0x6e, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x58, 0x52, 0x09, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a, 0xb2, 0x02,
	0x0a, 0x0a, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x58, 0x12, 0x2c, 0x0a, 0x03,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x35,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x3a, 0xdb, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x43, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x67, 0x65,
	0x6e, 0x65, 0x74, 0x69, 0x63, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x1b, 0x61, 0x67, 0x65, 0x2e, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x62, 0x6f, 0x72, 0x6e, 0x2e, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x24, 0x61, 0x67, 0x65, 0x2e,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x67, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29,
	0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x9a, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x50, 0x01, 0x5a, 0x77, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6, 0xb0,
	0xb5, 0x07, 0x05, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_rawDescData = file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_goTypes = []interface{}{
	(*FamilyMemberHistoryForGeneticsAnalysis)(nil),                      // 0: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis
	(*FamilyMemberHistoryForGeneticsAnalysis_StatusCode)(nil),           // 1: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.StatusCode
	(*FamilyMemberHistoryForGeneticsAnalysis_BornX)(nil),                // 2: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.BornX
	(*FamilyMemberHistoryForGeneticsAnalysis_AgeX)(nil),                 // 3: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.AgeX
	(*FamilyMemberHistoryForGeneticsAnalysis_DeceasedX)(nil),            // 4: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.DeceasedX
	(*FamilyMemberHistoryForGeneticsAnalysis_Condition)(nil),            // 5: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Condition
	(*FamilyMemberHistoryForGeneticsAnalysis_Procedure)(nil),            // 6: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Procedure
	(*FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX)(nil),     // 7: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Condition.OnsetX
	(*FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX)(nil), // 8: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Procedure.PerformedX
	(*datatypes_go_proto.Id)(nil),                                       // 9: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                                     // 10: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                      // 11: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                                     // 12: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),                                // 13: google.fhir.r5.core.Narrative
	(*any.Any)(nil),                                                     // 14: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                                // 15: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                               // 16: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.Canonical)(nil),                                // 17: google.fhir.r5.core.Canonical
	(*datatypes_go_proto.CodeableConcept)(nil),                          // 18: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.Reference)(nil),                                // 19: google.fhir.r5.core.Reference
	(*datatypes_go_proto.DateTime)(nil),                                 // 20: google.fhir.r5.core.DateTime
	(*datatypes_go_proto.String)(nil),                                   // 21: google.fhir.r5.core.String
	(*datatypes_go_proto.Boolean)(nil),                                  // 22: google.fhir.r5.core.Boolean
	(*datatypes_go_proto.CodeableReference)(nil),                        // 23: google.fhir.r5.core.CodeableReference
	(*datatypes_go_proto.Annotation)(nil),                               // 24: google.fhir.r5.core.Annotation
	(*extensions_go_proto.FamilyMemberHistoryParent)(nil),               // 25: google.fhir.r5.core.FamilyMemberHistoryParent
	(*extensions_go_proto.FamilyMemberHistorySibling)(nil),              // 26: google.fhir.r5.core.FamilyMemberHistorySibling
	(codes_go_proto.FamilyHistoryStatusCode_Value)(0),                   // 27: google.fhir.r5.core.FamilyHistoryStatusCode.Value
	(*datatypes_go_proto.Period)(nil),                                   // 28: google.fhir.r5.core.Period
	(*datatypes_go_proto.Date)(nil),                                     // 29: google.fhir.r5.core.Date
	(*datatypes_go_proto.Age)(nil),                                      // 30: google.fhir.r5.core.Age
	(*datatypes_go_proto.Range)(nil),                                    // 31: google.fhir.r5.core.Range
}
var file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_depIdxs = []int32{
	9,  // 0: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.id:type_name -> google.fhir.r5.core.Id
	10, // 1: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.meta:type_name -> google.fhir.r5.core.Meta
	11, // 2: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.implicit_rules:type_name -> google.fhir.r5.core.Uri
	12, // 3: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.language:type_name -> google.fhir.r5.core.Code
	13, // 4: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.text:type_name -> google.fhir.r5.core.Narrative
	14, // 5: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.contained:type_name -> google.protobuf.Any
	15, // 6: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.extension:type_name -> google.fhir.r5.core.Extension
	15, // 7: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.modifier_extension:type_name -> google.fhir.r5.core.Extension
	16, // 8: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.identifier:type_name -> google.fhir.r5.core.Identifier
	17, // 9: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.instantiates_canonical:type_name -> google.fhir.r5.core.Canonical
	11, // 10: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.instantiates_uri:type_name -> google.fhir.r5.core.Uri
	1,  // 11: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.status:type_name -> google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.StatusCode
	18, // 12: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.data_absent_reason:type_name -> google.fhir.r5.core.CodeableConcept
	19, // 13: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.patient:type_name -> google.fhir.r5.core.Reference
	20, // 14: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.date:type_name -> google.fhir.r5.core.DateTime
	21, // 15: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.name:type_name -> google.fhir.r5.core.String
	18, // 16: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.relationship:type_name -> google.fhir.r5.core.CodeableConcept
	18, // 17: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.sex:type_name -> google.fhir.r5.core.CodeableConcept
	2,  // 18: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.born:type_name -> google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.BornX
	3,  // 19: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.age:type_name -> google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.AgeX
	22, // 20: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.estimated_age:type_name -> google.fhir.r5.core.Boolean
	4,  // 21: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.deceased:type_name -> google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.DeceasedX
	23, // 22: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.reason:type_name -> google.fhir.r5.core.CodeableReference
	24, // 23: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.note:type_name -> google.fhir.r5.core.Annotation
	5,  // 24: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.condition:type_name -> google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Condition
	6,  // 25: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.procedure:type_name -> google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Procedure
	25, // 26: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.parent:type_name -> google.fhir.r5.core.FamilyMemberHistoryParent
	26, // 27: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.sibling:type_name -> google.fhir.r5.core.FamilyMemberHistorySibling
	19, // 28: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.observations:type_name -> google.fhir.r5.core.Reference
	27, // 29: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.StatusCode.value:type_name -> google.fhir.r5.core.FamilyHistoryStatusCode.Value
	21, // 30: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.StatusCode.id:type_name -> google.fhir.r5.core.String
	15, // 31: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.StatusCode.extension:type_name -> google.fhir.r5.core.Extension
	28, // 32: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.BornX.period:type_name -> google.fhir.r5.core.Period
	29, // 33: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.BornX.date:type_name -> google.fhir.r5.core.Date
	21, // 34: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.BornX.string_value:type_name -> google.fhir.r5.core.String
	30, // 35: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.AgeX.age:type_name -> google.fhir.r5.core.Age
	31, // 36: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.AgeX.range:type_name -> google.fhir.r5.core.Range
	21, // 37: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.AgeX.string_value:type_name -> google.fhir.r5.core.String
	22, // 38: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.DeceasedX.boolean:type_name -> google.fhir.r5.core.Boolean
	30, // 39: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.DeceasedX.age:type_name -> google.fhir.r5.core.Age
	31, // 40: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.DeceasedX.range:type_name -> google.fhir.r5.core.Range
	29, // 41: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.DeceasedX.date:type_name -> google.fhir.r5.core.Date
	21, // 42: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.DeceasedX.string_value:type_name -> google.fhir.r5.core.String
	9,  // 43: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Condition.id:type_name -> google.fhir.r5.core.Id
	15, // 44: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Condition.extension:type_name -> google.fhir.r5.core.Extension
	15, // 45: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Condition.modifier_extension:type_name -> google.fhir.r5.core.Extension
	18, // 46: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Condition.code:type_name -> google.fhir.r5.core.CodeableConcept
	18, // 47: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Condition.outcome:type_name -> google.fhir.r5.core.CodeableConcept
	22, // 48: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Condition.contributed_to_death:type_name -> google.fhir.r5.core.Boolean
	7,  // 49: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Condition.onset:type_name -> google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Condition.OnsetX
	24, // 50: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Condition.note:type_name -> google.fhir.r5.core.Annotation
	9,  // 51: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Procedure.id:type_name -> google.fhir.r5.core.Id
	15, // 52: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Procedure.extension:type_name -> google.fhir.r5.core.Extension
	15, // 53: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Procedure.modifier_extension:type_name -> google.fhir.r5.core.Extension
	18, // 54: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Procedure.code:type_name -> google.fhir.r5.core.CodeableConcept
	18, // 55: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Procedure.outcome:type_name -> google.fhir.r5.core.CodeableConcept
	22, // 56: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Procedure.contributed_to_death:type_name -> google.fhir.r5.core.Boolean
	8,  // 57: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Procedure.performed:type_name -> google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Procedure.PerformedX
	24, // 58: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Procedure.note:type_name -> google.fhir.r5.core.Annotation
	30, // 59: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Condition.OnsetX.age:type_name -> google.fhir.r5.core.Age
	31, // 60: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Condition.OnsetX.range:type_name -> google.fhir.r5.core.Range
	28, // 61: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Condition.OnsetX.period:type_name -> google.fhir.r5.core.Period
	21, // 62: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Condition.OnsetX.string_value:type_name -> google.fhir.r5.core.String
	30, // 63: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Procedure.PerformedX.age:type_name -> google.fhir.r5.core.Age
	31, // 64: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Procedure.PerformedX.range:type_name -> google.fhir.r5.core.Range
	28, // 65: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Procedure.PerformedX.period:type_name -> google.fhir.r5.core.Period
	21, // 66: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Procedure.PerformedX.string_value:type_name -> google.fhir.r5.core.String
	20, // 67: google.fhir.r5.core.FamilyMemberHistoryForGeneticsAnalysis.Procedure.PerformedX.date_time:type_name -> google.fhir.r5.core.DateTime
	68, // [68:68] is the sub-list for method output_type
	68, // [68:68] is the sub-list for method input_type
	68, // [68:68] is the sub-list for extension type_name
	68, // [68:68] is the sub-list for extension extendee
	0,  // [0:68] is the sub-list for field type_name
}

func init() {
	file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_init()
}
func file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_init() {
	if File_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyMemberHistoryForGeneticsAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyMemberHistoryForGeneticsAnalysis_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyMemberHistoryForGeneticsAnalysis_BornX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyMemberHistoryForGeneticsAnalysis_AgeX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyMemberHistoryForGeneticsAnalysis_DeceasedX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyMemberHistoryForGeneticsAnalysis_Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyMemberHistoryForGeneticsAnalysis_Procedure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*FamilyMemberHistoryForGeneticsAnalysis_BornX_Period)(nil),
		(*FamilyMemberHistoryForGeneticsAnalysis_BornX_Date)(nil),
		(*FamilyMemberHistoryForGeneticsAnalysis_BornX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*FamilyMemberHistoryForGeneticsAnalysis_AgeX_Age)(nil),
		(*FamilyMemberHistoryForGeneticsAnalysis_AgeX_Range)(nil),
		(*FamilyMemberHistoryForGeneticsAnalysis_AgeX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*FamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Boolean)(nil),
		(*FamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Age)(nil),
		(*FamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Range)(nil),
		(*FamilyMemberHistoryForGeneticsAnalysis_DeceasedX_Date)(nil),
		(*FamilyMemberHistoryForGeneticsAnalysis_DeceasedX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_Age)(nil),
		(*FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_Range)(nil),
		(*FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_Period)(nil),
		(*FamilyMemberHistoryForGeneticsAnalysis_Condition_OnsetX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_Age)(nil),
		(*FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_Range)(nil),
		(*FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_Period)(nil),
		(*FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_StringValue)(nil),
		(*FamilyMemberHistoryForGeneticsAnalysis_Procedure_PerformedX_DateTime)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto = out.File
	file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_profiles_family_member_history_for_genetics_analysis_proto_depIdxs = nil
}

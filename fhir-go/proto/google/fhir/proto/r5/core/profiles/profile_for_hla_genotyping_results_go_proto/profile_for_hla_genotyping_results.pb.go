//    Copyright 2020 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r5/core/profiles/profile_for_hla_genotyping_results.proto

package profile_for_hla_genotyping_results_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	extensions_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/extensions_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for Profile for HLA Genotyping
// Results. A Diagnostic report - a combination of request information, atomic
// results, images, interpretation, as well as formatted reports. See
// http://hl7.org/fhir/StructureDefinition/hlaresult
type ProfileForHLAGenotypingResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier for report
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// What was requested
	BasedOn []*datatypes_go_proto.Reference            `protobuf:"bytes,11,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	Status  *ProfileForHLAGenotypingResults_StatusCode `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// Service category
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,rep,name=category,proto3" json:"category,omitempty"`
	// Name/Code for this diagnostic report
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=code,proto3" json:"code,omitempty"`
	// The subject of the report - usually, but not always, the patient
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=subject,proto3" json:"subject,omitempty"`
	// Health care event when test ordered
	Encounter *datatypes_go_proto.Reference              `protobuf:"bytes,16,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Effective *ProfileForHLAGenotypingResults_EffectiveX `protobuf:"bytes,17,opt,name=effective,proto3" json:"effective,omitempty"`
	// DateTime this version was made
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,18,opt,name=issued,proto3" json:"issued,omitempty"`
	// Responsible Diagnostic Service
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,19,rep,name=performer,proto3" json:"performer,omitempty"`
	// Primary result interpreter
	ResultsInterpreter []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=results_interpreter,json=resultsInterpreter,proto3" json:"results_interpreter,omitempty"`
	// Specimens this report is based on
	Specimen []*datatypes_go_proto.Reference `protobuf:"bytes,21,rep,name=specimen,proto3" json:"specimen,omitempty"`
	// Observations
	Result []*datatypes_go_proto.Reference `protobuf:"bytes,22,rep,name=result,proto3" json:"result,omitempty"`
	// Reference to full details of imaging associated with the diagnostic report
	ImagingStudy []*datatypes_go_proto.Reference         `protobuf:"bytes,23,rep,name=imaging_study,json=imagingStudy,proto3" json:"imaging_study,omitempty"`
	Media        []*ProfileForHLAGenotypingResults_Media `protobuf:"bytes,24,rep,name=media,proto3" json:"media,omitempty"`
	// Clinical conclusion (interpretation) of test results
	Conclusion *datatypes_go_proto.String `protobuf:"bytes,25,opt,name=conclusion,proto3" json:"conclusion,omitempty"`
	// Codes for the clinical conclusion of test results
	ConclusionCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,26,rep,name=conclusion_code,json=conclusionCode,proto3" json:"conclusion_code,omitempty"`
	// Entire report as issued
	PresentedForm []*datatypes_go_proto.Attachment `protobuf:"bytes,27,rep,name=presented_form,json=presentedForm,proto3" json:"presented_form,omitempty"`
	// Allele Database
	AlleleDatabase *datatypes_go_proto.CodeableConcept `protobuf:"bytes,28,opt,name=allele_database,json=alleleDatabase,proto3" json:"allele_database,omitempty"`
	// Glstring
	Glstring *extensions_go_proto.DiagnosticReportGlstring `protobuf:"bytes,29,opt,name=glstring,proto3" json:"glstring,omitempty"`
	// Haploid
	Haploid []*extensions_go_proto.DiagnosticReportHaploid `protobuf:"bytes,30,rep,name=haploid,proto3" json:"haploid,omitempty"`
	// The platform, methodology and software applied at the time of the
	// genotyping
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,31,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *ProfileForHLAGenotypingResults) Reset() {
	*x = ProfileForHLAGenotypingResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileForHLAGenotypingResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileForHLAGenotypingResults) ProtoMessage() {}

func (x *ProfileForHLAGenotypingResults) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileForHLAGenotypingResults.ProtoReflect.Descriptor instead.
func (*ProfileForHLAGenotypingResults) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_rawDescGZIP(), []int{0}
}

func (x *ProfileForHLAGenotypingResults) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetStatus() *ProfileForHLAGenotypingResults_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetEffective() *ProfileForHLAGenotypingResults_EffectiveX {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetResultsInterpreter() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ResultsInterpreter
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetSpecimen() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetResult() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetImagingStudy() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ImagingStudy
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetMedia() []*ProfileForHLAGenotypingResults_Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetConclusion() *datatypes_go_proto.String {
	if x != nil {
		return x.Conclusion
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetConclusionCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ConclusionCode
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetPresentedForm() []*datatypes_go_proto.Attachment {
	if x != nil {
		return x.PresentedForm
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetAlleleDatabase() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AlleleDatabase
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetGlstring() *extensions_go_proto.DiagnosticReportGlstring {
	if x != nil {
		return x.Glstring
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetHaploid() []*extensions_go_proto.DiagnosticReportHaploid {
	if x != nil {
		return x.Haploid
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

// registered | partial | preliminary | final +
type ProfileForHLAGenotypingResults_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.DiagnosticReportStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.DiagnosticReportStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ProfileForHLAGenotypingResults_StatusCode) Reset() {
	*x = ProfileForHLAGenotypingResults_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileForHLAGenotypingResults_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileForHLAGenotypingResults_StatusCode) ProtoMessage() {}

func (x *ProfileForHLAGenotypingResults_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileForHLAGenotypingResults_StatusCode.ProtoReflect.Descriptor instead.
func (*ProfileForHLAGenotypingResults_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ProfileForHLAGenotypingResults_StatusCode) GetValue() codes_go_proto.DiagnosticReportStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.DiagnosticReportStatusCode_INVALID_UNINITIALIZED
}

func (x *ProfileForHLAGenotypingResults_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Clinically relevant time/time-period for report
type ProfileForHLAGenotypingResults_EffectiveX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*ProfileForHLAGenotypingResults_EffectiveX_DateTime
	//	*ProfileForHLAGenotypingResults_EffectiveX_Period
	Choice isProfileForHLAGenotypingResults_EffectiveX_Choice `protobuf_oneof:"choice"`
}

func (x *ProfileForHLAGenotypingResults_EffectiveX) Reset() {
	*x = ProfileForHLAGenotypingResults_EffectiveX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileForHLAGenotypingResults_EffectiveX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileForHLAGenotypingResults_EffectiveX) ProtoMessage() {}

func (x *ProfileForHLAGenotypingResults_EffectiveX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileForHLAGenotypingResults_EffectiveX.ProtoReflect.Descriptor instead.
func (*ProfileForHLAGenotypingResults_EffectiveX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_rawDescGZIP(), []int{0, 1}
}

func (m *ProfileForHLAGenotypingResults_EffectiveX) GetChoice() isProfileForHLAGenotypingResults_EffectiveX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults_EffectiveX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*ProfileForHLAGenotypingResults_EffectiveX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults_EffectiveX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*ProfileForHLAGenotypingResults_EffectiveX_Period); ok {
		return x.Period
	}
	return nil
}

type isProfileForHLAGenotypingResults_EffectiveX_Choice interface {
	isProfileForHLAGenotypingResults_EffectiveX_Choice()
}

type ProfileForHLAGenotypingResults_EffectiveX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ProfileForHLAGenotypingResults_EffectiveX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*ProfileForHLAGenotypingResults_EffectiveX_DateTime) isProfileForHLAGenotypingResults_EffectiveX_Choice() {
}

func (*ProfileForHLAGenotypingResults_EffectiveX_Period) isProfileForHLAGenotypingResults_EffectiveX_Choice() {
}

// Key images associated with this report
type ProfileForHLAGenotypingResults_Media struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Comment about the image (e.g. explanation)
	Comment *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	// Reference to the image source
	Link *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *ProfileForHLAGenotypingResults_Media) Reset() {
	*x = ProfileForHLAGenotypingResults_Media{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileForHLAGenotypingResults_Media) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileForHLAGenotypingResults_Media) ProtoMessage() {}

func (x *ProfileForHLAGenotypingResults_Media) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileForHLAGenotypingResults_Media.ProtoReflect.Descriptor instead.
func (*ProfileForHLAGenotypingResults_Media) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ProfileForHLAGenotypingResults_Media) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults_Media) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults_Media) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults_Media) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *ProfileForHLAGenotypingResults_Media) GetLink() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Link
	}
	return nil
}

var File_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_rawDesc = []byte{
	0x0a, 0x51, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x68, 0x6c, 0x61, 0x5f, 0x67, 0x65, 0x6e, 0x6f, 0x74,
	0x79, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc3,
	0x1c, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x48, 0x4c, 0x41,
	0x47, 0x65, 0x6e, 0x6f, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xa8, 0x01, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x6d, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a,
	0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64,
	0x4f, 0x6e, 0x12, 0x5e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x48, 0x4c, 0x41, 0x47, 0x65, 0x6e, 0x6f, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x6c, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x32, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x48, 0x4c, 0x41, 0x47, 0x65, 0x6e, 0x6f, 0x74, 0x79,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x58, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x48, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x12, 0x99, 0x01, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x48,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08,
	0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x12, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x08,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x49, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x11, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x57, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x0c,
	0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x4f, 0x0a, 0x05,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x48, 0x4c, 0x41, 0x47,
	0x65, 0x6e, 0x6f, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x3b, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x1b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72,
	0x6d, 0x12, 0xa3, 0x01, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x42, 0x54, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x4e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x68, 0x6c, 0x61, 0x2d, 0x67, 0x65, 0x6e, 0x6f, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x2d,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2d, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x2d, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x08, 0x67, 0x6c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x47, 0x6c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x4d, 0xaa, 0xfc, 0x8f, 0x93, 0x06,
	0x47, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x6c, 0x61, 0x2d, 0x67, 0x65, 0x6e,
	0x6f, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2d,
	0x67, 0x6c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x67, 0x6c, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x94, 0x01, 0x0a, 0x07, 0x68, 0x61, 0x70, 0x6c, 0x6f, 0x69, 0x64, 0x18, 0x1e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x61, 0x70, 0x6c, 0x6f,
	0x69, 0x64, 0x42, 0x4c, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x46, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x68, 0x6c, 0x61, 0x2d, 0x67, 0x65, 0x6e, 0x6f, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67,
	0x2d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2d, 0x68, 0x61, 0x70, 0x6c, 0x6f, 0x69, 0x64,
	0x52, 0x07, 0x68, 0x61, 0x70, 0x6c, 0x6f, 0x69, 0x64, 0x12, 0x89, 0x01, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x42, 0x4b, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x45, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x68, 0x6c, 0x61, 0x2d, 0x67, 0x65, 0x6e, 0x6f, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2d, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x1a, 0xb9, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x73, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64,
	0x65, 0x1a, 0x93, 0x01, 0x0a, 0x0a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x58,
	0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xc7, 0x02, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x51,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1d, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x3a, 0x7b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x38, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x6c, 0x61, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4a, 0x04,
	0x08, 0x07, 0x10, 0x08, 0x42, 0x91, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x50, 0x01, 0x5a, 0x6e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x68, 0x6c, 0x61, 0x5f, 0x67, 0x65, 0x6e, 0x6f, 0x74, 0x79, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x05, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_rawDescData = file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_goTypes = []interface{}{
	(*ProfileForHLAGenotypingResults)(nil),               // 0: google.fhir.r5.core.ProfileForHLAGenotypingResults
	(*ProfileForHLAGenotypingResults_StatusCode)(nil),    // 1: google.fhir.r5.core.ProfileForHLAGenotypingResults.StatusCode
	(*ProfileForHLAGenotypingResults_EffectiveX)(nil),    // 2: google.fhir.r5.core.ProfileForHLAGenotypingResults.EffectiveX
	(*ProfileForHLAGenotypingResults_Media)(nil),         // 3: google.fhir.r5.core.ProfileForHLAGenotypingResults.Media
	(*datatypes_go_proto.Id)(nil),                        // 4: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                      // 5: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                       // 6: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                      // 7: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),                 // 8: google.fhir.r5.core.Narrative
	(*any.Any)(nil),                                      // 9: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                 // 10: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                // 11: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.Reference)(nil),                 // 12: google.fhir.r5.core.Reference
	(*datatypes_go_proto.CodeableConcept)(nil),           // 13: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.Instant)(nil),                   // 14: google.fhir.r5.core.Instant
	(*datatypes_go_proto.String)(nil),                    // 15: google.fhir.r5.core.String
	(*datatypes_go_proto.Attachment)(nil),                // 16: google.fhir.r5.core.Attachment
	(*extensions_go_proto.DiagnosticReportGlstring)(nil), // 17: google.fhir.r5.core.DiagnosticReportGlstring
	(*extensions_go_proto.DiagnosticReportHaploid)(nil),  // 18: google.fhir.r5.core.DiagnosticReportHaploid
	(codes_go_proto.DiagnosticReportStatusCode_Value)(0), // 19: google.fhir.r5.core.DiagnosticReportStatusCode.Value
	(*datatypes_go_proto.DateTime)(nil),                  // 20: google.fhir.r5.core.DateTime
	(*datatypes_go_proto.Period)(nil),                    // 21: google.fhir.r5.core.Period
}
var file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_depIdxs = []int32{
	4,  // 0: google.fhir.r5.core.ProfileForHLAGenotypingResults.id:type_name -> google.fhir.r5.core.Id
	5,  // 1: google.fhir.r5.core.ProfileForHLAGenotypingResults.meta:type_name -> google.fhir.r5.core.Meta
	6,  // 2: google.fhir.r5.core.ProfileForHLAGenotypingResults.implicit_rules:type_name -> google.fhir.r5.core.Uri
	7,  // 3: google.fhir.r5.core.ProfileForHLAGenotypingResults.language:type_name -> google.fhir.r5.core.Code
	8,  // 4: google.fhir.r5.core.ProfileForHLAGenotypingResults.text:type_name -> google.fhir.r5.core.Narrative
	9,  // 5: google.fhir.r5.core.ProfileForHLAGenotypingResults.contained:type_name -> google.protobuf.Any
	10, // 6: google.fhir.r5.core.ProfileForHLAGenotypingResults.extension:type_name -> google.fhir.r5.core.Extension
	10, // 7: google.fhir.r5.core.ProfileForHLAGenotypingResults.modifier_extension:type_name -> google.fhir.r5.core.Extension
	11, // 8: google.fhir.r5.core.ProfileForHLAGenotypingResults.identifier:type_name -> google.fhir.r5.core.Identifier
	12, // 9: google.fhir.r5.core.ProfileForHLAGenotypingResults.based_on:type_name -> google.fhir.r5.core.Reference
	1,  // 10: google.fhir.r5.core.ProfileForHLAGenotypingResults.status:type_name -> google.fhir.r5.core.ProfileForHLAGenotypingResults.StatusCode
	13, // 11: google.fhir.r5.core.ProfileForHLAGenotypingResults.category:type_name -> google.fhir.r5.core.CodeableConcept
	13, // 12: google.fhir.r5.core.ProfileForHLAGenotypingResults.code:type_name -> google.fhir.r5.core.CodeableConcept
	12, // 13: google.fhir.r5.core.ProfileForHLAGenotypingResults.subject:type_name -> google.fhir.r5.core.Reference
	12, // 14: google.fhir.r5.core.ProfileForHLAGenotypingResults.encounter:type_name -> google.fhir.r5.core.Reference
	2,  // 15: google.fhir.r5.core.ProfileForHLAGenotypingResults.effective:type_name -> google.fhir.r5.core.ProfileForHLAGenotypingResults.EffectiveX
	14, // 16: google.fhir.r5.core.ProfileForHLAGenotypingResults.issued:type_name -> google.fhir.r5.core.Instant
	12, // 17: google.fhir.r5.core.ProfileForHLAGenotypingResults.performer:type_name -> google.fhir.r5.core.Reference
	12, // 18: google.fhir.r5.core.ProfileForHLAGenotypingResults.results_interpreter:type_name -> google.fhir.r5.core.Reference
	12, // 19: google.fhir.r5.core.ProfileForHLAGenotypingResults.specimen:type_name -> google.fhir.r5.core.Reference
	12, // 20: google.fhir.r5.core.ProfileForHLAGenotypingResults.result:type_name -> google.fhir.r5.core.Reference
	12, // 21: google.fhir.r5.core.ProfileForHLAGenotypingResults.imaging_study:type_name -> google.fhir.r5.core.Reference
	3,  // 22: google.fhir.r5.core.ProfileForHLAGenotypingResults.media:type_name -> google.fhir.r5.core.ProfileForHLAGenotypingResults.Media
	15, // 23: google.fhir.r5.core.ProfileForHLAGenotypingResults.conclusion:type_name -> google.fhir.r5.core.String
	13, // 24: google.fhir.r5.core.ProfileForHLAGenotypingResults.conclusion_code:type_name -> google.fhir.r5.core.CodeableConcept
	16, // 25: google.fhir.r5.core.ProfileForHLAGenotypingResults.presented_form:type_name -> google.fhir.r5.core.Attachment
	13, // 26: google.fhir.r5.core.ProfileForHLAGenotypingResults.allele_database:type_name -> google.fhir.r5.core.CodeableConcept
	17, // 27: google.fhir.r5.core.ProfileForHLAGenotypingResults.glstring:type_name -> google.fhir.r5.core.DiagnosticReportGlstring
	18, // 28: google.fhir.r5.core.ProfileForHLAGenotypingResults.haploid:type_name -> google.fhir.r5.core.DiagnosticReportHaploid
	13, // 29: google.fhir.r5.core.ProfileForHLAGenotypingResults.method:type_name -> google.fhir.r5.core.CodeableConcept
	19, // 30: google.fhir.r5.core.ProfileForHLAGenotypingResults.StatusCode.value:type_name -> google.fhir.r5.core.DiagnosticReportStatusCode.Value
	15, // 31: google.fhir.r5.core.ProfileForHLAGenotypingResults.StatusCode.id:type_name -> google.fhir.r5.core.String
	10, // 32: google.fhir.r5.core.ProfileForHLAGenotypingResults.StatusCode.extension:type_name -> google.fhir.r5.core.Extension
	20, // 33: google.fhir.r5.core.ProfileForHLAGenotypingResults.EffectiveX.date_time:type_name -> google.fhir.r5.core.DateTime
	21, // 34: google.fhir.r5.core.ProfileForHLAGenotypingResults.EffectiveX.period:type_name -> google.fhir.r5.core.Period
	4,  // 35: google.fhir.r5.core.ProfileForHLAGenotypingResults.Media.id:type_name -> google.fhir.r5.core.Id
	10, // 36: google.fhir.r5.core.ProfileForHLAGenotypingResults.Media.extension:type_name -> google.fhir.r5.core.Extension
	10, // 37: google.fhir.r5.core.ProfileForHLAGenotypingResults.Media.modifier_extension:type_name -> google.fhir.r5.core.Extension
	15, // 38: google.fhir.r5.core.ProfileForHLAGenotypingResults.Media.comment:type_name -> google.fhir.r5.core.String
	12, // 39: google.fhir.r5.core.ProfileForHLAGenotypingResults.Media.link:type_name -> google.fhir.r5.core.Reference
	40, // [40:40] is the sub-list for method output_type
	40, // [40:40] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() {
	file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_init()
}
func file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_init() {
	if File_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileForHLAGenotypingResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileForHLAGenotypingResults_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileForHLAGenotypingResults_EffectiveX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileForHLAGenotypingResults_Media); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ProfileForHLAGenotypingResults_EffectiveX_DateTime)(nil),
		(*ProfileForHLAGenotypingResults_EffectiveX_Period)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto = out.File
	file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_profiles_profile_for_hla_genotyping_results_proto_depIdxs = nil
}

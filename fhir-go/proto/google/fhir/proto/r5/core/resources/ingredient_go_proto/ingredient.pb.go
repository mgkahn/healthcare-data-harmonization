//    Copyright 2020 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r5/core/resources/ingredient.proto

package ingredient_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for Ingredient, last updated
// 2019-12-31T21:03:40.621+11:00. An ingredient of a manufactured item or
// pharmaceutical product. See
// http://hl7.org/fhir/StructureDefinition/Ingredient
type Ingredient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// An identifier or code by which the ingredient can be referenced
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,10,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Ingredient role e.g. Active ingredient, excipient
	Role *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=role,proto3" json:"role,omitempty"`
	// If the ingredient is a known or suspected allergen
	AllergenicIndicator *datatypes_go_proto.Boolean `protobuf:"bytes,12,opt,name=allergenic_indicator,json=allergenicIndicator,proto3" json:"allergenic_indicator,omitempty"`
	// The organization that manufactures this ingredient
	Manufacturer       []*datatypes_go_proto.Reference  `protobuf:"bytes,13,rep,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	SpecifiedSubstance []*Ingredient_SpecifiedSubstance `protobuf:"bytes,14,rep,name=specified_substance,json=specifiedSubstance,proto3" json:"specified_substance,omitempty"`
	Substance          *Ingredient_Substance            `protobuf:"bytes,15,opt,name=substance,proto3" json:"substance,omitempty"`
}

func (x *Ingredient) Reset() {
	*x = Ingredient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingredient) ProtoMessage() {}

func (x *Ingredient) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingredient.ProtoReflect.Descriptor instead.
func (*Ingredient) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescGZIP(), []int{0}
}

func (x *Ingredient) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Ingredient) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Ingredient) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Ingredient) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Ingredient) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Ingredient) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Ingredient) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Ingredient) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Ingredient) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Ingredient) GetRole() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *Ingredient) GetAllergenicIndicator() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.AllergenicIndicator
	}
	return nil
}

func (x *Ingredient) GetManufacturer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *Ingredient) GetSpecifiedSubstance() []*Ingredient_SpecifiedSubstance {
	if x != nil {
		return x.SpecifiedSubstance
	}
	return nil
}

func (x *Ingredient) GetSubstance() *Ingredient_Substance {
	if x != nil {
		return x.Substance
	}
	return nil
}

// A specified substance that comprises this ingredient
type Ingredient_SpecifiedSubstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension      `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Code              *Ingredient_SpecifiedSubstance_CodeX `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// The group of specified substance, e.g. group 1 to 4
	Group *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=group,proto3" json:"group,omitempty"`
	// Confidentiality level of the specified substance as the ingredient
	Confidentiality *datatypes_go_proto.CodeableConcept       `protobuf:"bytes,6,opt,name=confidentiality,proto3" json:"confidentiality,omitempty"`
	Strength        []*Ingredient_SpecifiedSubstance_Strength `protobuf:"bytes,7,rep,name=strength,proto3" json:"strength,omitempty"`
}

func (x *Ingredient_SpecifiedSubstance) Reset() {
	*x = Ingredient_SpecifiedSubstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingredient_SpecifiedSubstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingredient_SpecifiedSubstance) ProtoMessage() {}

func (x *Ingredient_SpecifiedSubstance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingredient_SpecifiedSubstance.ProtoReflect.Descriptor instead.
func (*Ingredient_SpecifiedSubstance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Ingredient_SpecifiedSubstance) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance) GetCode() *Ingredient_SpecifiedSubstance_CodeX {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance) GetGroup() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance) GetConfidentiality() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Confidentiality
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance) GetStrength() []*Ingredient_SpecifiedSubstance_Strength {
	if x != nil {
		return x.Strength
	}
	return nil
}

// The substance that comprises this ingredient
type Ingredient_Substance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Code              *Ingredient_Substance_CodeX     `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Quantity of the substance or specified substance present in the
	// manufactured item or pharmaceutical product
	Strength []*Ingredient_SpecifiedSubstance_Strength `protobuf:"bytes,5,rep,name=strength,proto3" json:"strength,omitempty"`
}

func (x *Ingredient_Substance) Reset() {
	*x = Ingredient_Substance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingredient_Substance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingredient_Substance) ProtoMessage() {}

func (x *Ingredient_Substance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingredient_Substance.ProtoReflect.Descriptor instead.
func (*Ingredient_Substance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Ingredient_Substance) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Ingredient_Substance) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Ingredient_Substance) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Ingredient_Substance) GetCode() *Ingredient_Substance_CodeX {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Ingredient_Substance) GetStrength() []*Ingredient_SpecifiedSubstance_Strength {
	if x != nil {
		return x.Strength
	}
	return nil
}

// Substance as a 'specified substance', implying extra substance related
// characteristics
type Ingredient_SpecifiedSubstance_CodeX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*Ingredient_SpecifiedSubstance_CodeX_CodeableConcept
	//	*Ingredient_SpecifiedSubstance_CodeX_Reference
	Choice isIngredient_SpecifiedSubstance_CodeX_Choice `protobuf_oneof:"choice"`
}

func (x *Ingredient_SpecifiedSubstance_CodeX) Reset() {
	*x = Ingredient_SpecifiedSubstance_CodeX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingredient_SpecifiedSubstance_CodeX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingredient_SpecifiedSubstance_CodeX) ProtoMessage() {}

func (x *Ingredient_SpecifiedSubstance_CodeX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingredient_SpecifiedSubstance_CodeX.ProtoReflect.Descriptor instead.
func (*Ingredient_SpecifiedSubstance_CodeX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *Ingredient_SpecifiedSubstance_CodeX) GetChoice() isIngredient_SpecifiedSubstance_CodeX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance_CodeX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*Ingredient_SpecifiedSubstance_CodeX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance_CodeX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*Ingredient_SpecifiedSubstance_CodeX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isIngredient_SpecifiedSubstance_CodeX_Choice interface {
	isIngredient_SpecifiedSubstance_CodeX_Choice()
}

type Ingredient_SpecifiedSubstance_CodeX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Ingredient_SpecifiedSubstance_CodeX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Ingredient_SpecifiedSubstance_CodeX_CodeableConcept) isIngredient_SpecifiedSubstance_CodeX_Choice() {
}

func (*Ingredient_SpecifiedSubstance_CodeX_Reference) isIngredient_SpecifiedSubstance_CodeX_Choice() {
}

// Quantity of the substance or specified substance present in the
// manufactured item or pharmaceutical product
type Ingredient_SpecifiedSubstance_Strength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The quantity of substance in the unit of presentation, or in the volume
	// (or mass) of the single pharmaceutical product or manufactured item
	Presentation *datatypes_go_proto.Ratio `protobuf:"bytes,4,opt,name=presentation,proto3" json:"presentation,omitempty"`
	// An upper limit for the quantity of substance in the unit of
	// presentation. For use when there is a range of strengths, this is the
	// high limit, with the presentation attribute becoming the lower limit
	PresentationHighLimit *datatypes_go_proto.Ratio `protobuf:"bytes,5,opt,name=presentation_high_limit,json=presentationHighLimit,proto3" json:"presentation_high_limit,omitempty"`
	// The strength per unitary volume (or mass)
	Concentration *datatypes_go_proto.Ratio `protobuf:"bytes,6,opt,name=concentration,proto3" json:"concentration,omitempty"`
	// An upper limit for the strength per unitary volume (or mass), for when
	// there is a range. The concentration attribute then becomes the lower
	// limit
	ConcentrationHighLimit *datatypes_go_proto.Ratio `protobuf:"bytes,7,opt,name=concentration_high_limit,json=concentrationHighLimit,proto3" json:"concentration_high_limit,omitempty"`
	// For when strength is measured at a particular point or distance
	MeasurementPoint *datatypes_go_proto.String `protobuf:"bytes,8,opt,name=measurement_point,json=measurementPoint,proto3" json:"measurement_point,omitempty"`
	// The country or countries for which the strength range applies
	Country           []*datatypes_go_proto.CodeableConcept                       `protobuf:"bytes,9,rep,name=country,proto3" json:"country,omitempty"`
	ReferenceStrength []*Ingredient_SpecifiedSubstance_Strength_ReferenceStrength `protobuf:"bytes,10,rep,name=reference_strength,json=referenceStrength,proto3" json:"reference_strength,omitempty"`
}

func (x *Ingredient_SpecifiedSubstance_Strength) Reset() {
	*x = Ingredient_SpecifiedSubstance_Strength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingredient_SpecifiedSubstance_Strength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingredient_SpecifiedSubstance_Strength) ProtoMessage() {}

func (x *Ingredient_SpecifiedSubstance_Strength) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingredient_SpecifiedSubstance_Strength.ProtoReflect.Descriptor instead.
func (*Ingredient_SpecifiedSubstance_Strength) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Ingredient_SpecifiedSubstance_Strength) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance_Strength) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance_Strength) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance_Strength) GetPresentation() *datatypes_go_proto.Ratio {
	if x != nil {
		return x.Presentation
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance_Strength) GetPresentationHighLimit() *datatypes_go_proto.Ratio {
	if x != nil {
		return x.PresentationHighLimit
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance_Strength) GetConcentration() *datatypes_go_proto.Ratio {
	if x != nil {
		return x.Concentration
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance_Strength) GetConcentrationHighLimit() *datatypes_go_proto.Ratio {
	if x != nil {
		return x.ConcentrationHighLimit
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance_Strength) GetMeasurementPoint() *datatypes_go_proto.String {
	if x != nil {
		return x.MeasurementPoint
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance_Strength) GetCountry() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance_Strength) GetReferenceStrength() []*Ingredient_SpecifiedSubstance_Strength_ReferenceStrength {
	if x != nil {
		return x.ReferenceStrength
	}
	return nil
}

// Strength expressed in terms of a reference substance
type Ingredient_SpecifiedSubstance_Strength_ReferenceStrength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                                      `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Substance         *Ingredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX `protobuf:"bytes,4,opt,name=substance,proto3" json:"substance,omitempty"`
	// Strength expressed in terms of a reference substance
	Strength *datatypes_go_proto.Ratio `protobuf:"bytes,5,opt,name=strength,proto3" json:"strength,omitempty"`
	// Strength expressed in terms of a reference substance, upper limit
	StrengthHighLimit *datatypes_go_proto.Ratio `protobuf:"bytes,6,opt,name=strength_high_limit,json=strengthHighLimit,proto3" json:"strength_high_limit,omitempty"`
	// For when strength is measured at a particular point or distance
	MeasurementPoint *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=measurement_point,json=measurementPoint,proto3" json:"measurement_point,omitempty"`
	// The country or countries for which the strength range applies
	Country []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,rep,name=country,proto3" json:"country,omitempty"`
}

func (x *Ingredient_SpecifiedSubstance_Strength_ReferenceStrength) Reset() {
	*x = Ingredient_SpecifiedSubstance_Strength_ReferenceStrength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingredient_SpecifiedSubstance_Strength_ReferenceStrength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingredient_SpecifiedSubstance_Strength_ReferenceStrength) ProtoMessage() {}

func (x *Ingredient_SpecifiedSubstance_Strength_ReferenceStrength) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingredient_SpecifiedSubstance_Strength_ReferenceStrength.ProtoReflect.Descriptor instead.
func (*Ingredient_SpecifiedSubstance_Strength_ReferenceStrength) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (x *Ingredient_SpecifiedSubstance_Strength_ReferenceStrength) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance_Strength_ReferenceStrength) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance_Strength_ReferenceStrength) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance_Strength_ReferenceStrength) GetSubstance() *Ingredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX {
	if x != nil {
		return x.Substance
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance_Strength_ReferenceStrength) GetStrength() *datatypes_go_proto.Ratio {
	if x != nil {
		return x.Strength
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance_Strength_ReferenceStrength) GetStrengthHighLimit() *datatypes_go_proto.Ratio {
	if x != nil {
		return x.StrengthHighLimit
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance_Strength_ReferenceStrength) GetMeasurementPoint() *datatypes_go_proto.String {
	if x != nil {
		return x.MeasurementPoint
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance_Strength_ReferenceStrength) GetCountry() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Country
	}
	return nil
}

// Relevant reference substance
type Ingredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*Ingredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX_CodeableConcept
	//	*Ingredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX_Reference
	Choice isIngredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX_Choice `protobuf_oneof:"choice"`
}

func (x *Ingredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX) Reset() {
	*x = Ingredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX) ProtoMessage() {}

func (x *Ingredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX.ProtoReflect.Descriptor instead.
func (*Ingredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescGZIP(), []int{0, 0, 1, 0, 0}
}

func (m *Ingredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX) GetChoice() isIngredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*Ingredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Ingredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*Ingredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isIngredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX_Choice interface {
	isIngredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX_Choice()
}

type Ingredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Ingredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Ingredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX_CodeableConcept) isIngredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX_Choice() {
}

func (*Ingredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX_Reference) isIngredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX_Choice() {
}

// A code that represents the ingredient substance
type Ingredient_Substance_CodeX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*Ingredient_Substance_CodeX_CodeableConcept
	//	*Ingredient_Substance_CodeX_Reference
	Choice isIngredient_Substance_CodeX_Choice `protobuf_oneof:"choice"`
}

func (x *Ingredient_Substance_CodeX) Reset() {
	*x = Ingredient_Substance_CodeX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingredient_Substance_CodeX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingredient_Substance_CodeX) ProtoMessage() {}

func (x *Ingredient_Substance_CodeX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingredient_Substance_CodeX.ProtoReflect.Descriptor instead.
func (*Ingredient_Substance_CodeX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (m *Ingredient_Substance_CodeX) GetChoice() isIngredient_Substance_CodeX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Ingredient_Substance_CodeX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*Ingredient_Substance_CodeX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Ingredient_Substance_CodeX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*Ingredient_Substance_CodeX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isIngredient_Substance_CodeX_Choice interface {
	isIngredient_Substance_CodeX_Choice()
}

type Ingredient_Substance_CodeX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Ingredient_Substance_CodeX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Ingredient_Substance_CodeX_CodeableConcept) isIngredient_Substance_CodeX_Choice() {}

func (*Ingredient_Substance_CodeX_Reference) isIngredient_Substance_CodeX_Choice() {}

var File_proto_google_fhir_proto_r5_core_resources_ingredient_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcc, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x40, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12,
	0x4f, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x13, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x67, 0x65, 0x6e, 0x69, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x56, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x47, 0x0a,
	0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x95, 0x12, 0x0a, 0x12, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x75, 0x62, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x4e, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x57, 0x0a,
	0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x08, 0x73, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a, 0xd6, 0x01, 0x0a, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x58,
	0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x12, 0x68, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x28, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x13, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a,
	0xac, 0x0c, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52,
	0x15, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x67,
	0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x48,
	0x0a, 0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x7c, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x52, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a, 0xb5, 0x06, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x58, 0x52,
	0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x4a, 0x0a, 0x13, 0x73, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x52, 0x11, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x48, 0x69, 0x67,
	0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x10,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x3e, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x1a, 0xdb, 0x01, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x58, 0x12,
	0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48,
	0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x12, 0x68, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x28, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x13, 0x53, 0x75, 0x62,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xc0,
	0x04, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x57, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x75, 0x62, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x08,
	0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a, 0xd6, 0x01, 0x0a, 0x05, 0x43, 0x6f, 0x64,
	0x65, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x68, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x28, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x13,
	0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x3a, 0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x32, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x7a, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x50, 0x01, 0x5a, 0x57, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6, 0xb0,
	0xb5, 0x07, 0x05, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_goTypes = []interface{}{
	(*Ingredient)(nil),                                                          // 0: google.fhir.r5.core.Ingredient
	(*Ingredient_SpecifiedSubstance)(nil),                                       // 1: google.fhir.r5.core.Ingredient.SpecifiedSubstance
	(*Ingredient_Substance)(nil),                                                // 2: google.fhir.r5.core.Ingredient.Substance
	(*Ingredient_SpecifiedSubstance_CodeX)(nil),                                 // 3: google.fhir.r5.core.Ingredient.SpecifiedSubstance.CodeX
	(*Ingredient_SpecifiedSubstance_Strength)(nil),                              // 4: google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength
	(*Ingredient_SpecifiedSubstance_Strength_ReferenceStrength)(nil),            // 5: google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength.ReferenceStrength
	(*Ingredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX)(nil), // 6: google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength.ReferenceStrength.SubstanceX
	(*Ingredient_Substance_CodeX)(nil),                                          // 7: google.fhir.r5.core.Ingredient.Substance.CodeX
	(*datatypes_go_proto.Id)(nil),                                               // 8: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                                             // 9: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                              // 10: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                                             // 11: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),                                        // 12: google.fhir.r5.core.Narrative
	(*any.Any)(nil),                                                             // 13: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                                        // 14: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                                       // 15: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.CodeableConcept)(nil),                                  // 16: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.Boolean)(nil),                                          // 17: google.fhir.r5.core.Boolean
	(*datatypes_go_proto.Reference)(nil),                                        // 18: google.fhir.r5.core.Reference
	(*datatypes_go_proto.Ratio)(nil),                                            // 19: google.fhir.r5.core.Ratio
	(*datatypes_go_proto.String)(nil),                                           // 20: google.fhir.r5.core.String
}
var file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_depIdxs = []int32{
	8,  // 0: google.fhir.r5.core.Ingredient.id:type_name -> google.fhir.r5.core.Id
	9,  // 1: google.fhir.r5.core.Ingredient.meta:type_name -> google.fhir.r5.core.Meta
	10, // 2: google.fhir.r5.core.Ingredient.implicit_rules:type_name -> google.fhir.r5.core.Uri
	11, // 3: google.fhir.r5.core.Ingredient.language:type_name -> google.fhir.r5.core.Code
	12, // 4: google.fhir.r5.core.Ingredient.text:type_name -> google.fhir.r5.core.Narrative
	13, // 5: google.fhir.r5.core.Ingredient.contained:type_name -> google.protobuf.Any
	14, // 6: google.fhir.r5.core.Ingredient.extension:type_name -> google.fhir.r5.core.Extension
	14, // 7: google.fhir.r5.core.Ingredient.modifier_extension:type_name -> google.fhir.r5.core.Extension
	15, // 8: google.fhir.r5.core.Ingredient.identifier:type_name -> google.fhir.r5.core.Identifier
	16, // 9: google.fhir.r5.core.Ingredient.role:type_name -> google.fhir.r5.core.CodeableConcept
	17, // 10: google.fhir.r5.core.Ingredient.allergenic_indicator:type_name -> google.fhir.r5.core.Boolean
	18, // 11: google.fhir.r5.core.Ingredient.manufacturer:type_name -> google.fhir.r5.core.Reference
	1,  // 12: google.fhir.r5.core.Ingredient.specified_substance:type_name -> google.fhir.r5.core.Ingredient.SpecifiedSubstance
	2,  // 13: google.fhir.r5.core.Ingredient.substance:type_name -> google.fhir.r5.core.Ingredient.Substance
	8,  // 14: google.fhir.r5.core.Ingredient.SpecifiedSubstance.id:type_name -> google.fhir.r5.core.Id
	14, // 15: google.fhir.r5.core.Ingredient.SpecifiedSubstance.extension:type_name -> google.fhir.r5.core.Extension
	14, // 16: google.fhir.r5.core.Ingredient.SpecifiedSubstance.modifier_extension:type_name -> google.fhir.r5.core.Extension
	3,  // 17: google.fhir.r5.core.Ingredient.SpecifiedSubstance.code:type_name -> google.fhir.r5.core.Ingredient.SpecifiedSubstance.CodeX
	16, // 18: google.fhir.r5.core.Ingredient.SpecifiedSubstance.group:type_name -> google.fhir.r5.core.CodeableConcept
	16, // 19: google.fhir.r5.core.Ingredient.SpecifiedSubstance.confidentiality:type_name -> google.fhir.r5.core.CodeableConcept
	4,  // 20: google.fhir.r5.core.Ingredient.SpecifiedSubstance.strength:type_name -> google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength
	8,  // 21: google.fhir.r5.core.Ingredient.Substance.id:type_name -> google.fhir.r5.core.Id
	14, // 22: google.fhir.r5.core.Ingredient.Substance.extension:type_name -> google.fhir.r5.core.Extension
	14, // 23: google.fhir.r5.core.Ingredient.Substance.modifier_extension:type_name -> google.fhir.r5.core.Extension
	7,  // 24: google.fhir.r5.core.Ingredient.Substance.code:type_name -> google.fhir.r5.core.Ingredient.Substance.CodeX
	4,  // 25: google.fhir.r5.core.Ingredient.Substance.strength:type_name -> google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength
	16, // 26: google.fhir.r5.core.Ingredient.SpecifiedSubstance.CodeX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	18, // 27: google.fhir.r5.core.Ingredient.SpecifiedSubstance.CodeX.reference:type_name -> google.fhir.r5.core.Reference
	8,  // 28: google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength.id:type_name -> google.fhir.r5.core.Id
	14, // 29: google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength.extension:type_name -> google.fhir.r5.core.Extension
	14, // 30: google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength.modifier_extension:type_name -> google.fhir.r5.core.Extension
	19, // 31: google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength.presentation:type_name -> google.fhir.r5.core.Ratio
	19, // 32: google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength.presentation_high_limit:type_name -> google.fhir.r5.core.Ratio
	19, // 33: google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength.concentration:type_name -> google.fhir.r5.core.Ratio
	19, // 34: google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength.concentration_high_limit:type_name -> google.fhir.r5.core.Ratio
	20, // 35: google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength.measurement_point:type_name -> google.fhir.r5.core.String
	16, // 36: google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength.country:type_name -> google.fhir.r5.core.CodeableConcept
	5,  // 37: google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength.reference_strength:type_name -> google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength.ReferenceStrength
	8,  // 38: google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength.ReferenceStrength.id:type_name -> google.fhir.r5.core.Id
	14, // 39: google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength.ReferenceStrength.extension:type_name -> google.fhir.r5.core.Extension
	14, // 40: google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength.ReferenceStrength.modifier_extension:type_name -> google.fhir.r5.core.Extension
	6,  // 41: google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength.ReferenceStrength.substance:type_name -> google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength.ReferenceStrength.SubstanceX
	19, // 42: google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength.ReferenceStrength.strength:type_name -> google.fhir.r5.core.Ratio
	19, // 43: google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength.ReferenceStrength.strength_high_limit:type_name -> google.fhir.r5.core.Ratio
	20, // 44: google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength.ReferenceStrength.measurement_point:type_name -> google.fhir.r5.core.String
	16, // 45: google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength.ReferenceStrength.country:type_name -> google.fhir.r5.core.CodeableConcept
	16, // 46: google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength.ReferenceStrength.SubstanceX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	18, // 47: google.fhir.r5.core.Ingredient.SpecifiedSubstance.Strength.ReferenceStrength.SubstanceX.reference:type_name -> google.fhir.r5.core.Reference
	16, // 48: google.fhir.r5.core.Ingredient.Substance.CodeX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	18, // 49: google.fhir.r5.core.Ingredient.Substance.CodeX.reference:type_name -> google.fhir.r5.core.Reference
	50, // [50:50] is the sub-list for method output_type
	50, // [50:50] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_ingredient_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingredient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingredient_SpecifiedSubstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingredient_Substance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingredient_SpecifiedSubstance_CodeX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingredient_SpecifiedSubstance_Strength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingredient_SpecifiedSubstance_Strength_ReferenceStrength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingredient_Substance_CodeX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Ingredient_SpecifiedSubstance_CodeX_CodeableConcept)(nil),
		(*Ingredient_SpecifiedSubstance_CodeX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Ingredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX_CodeableConcept)(nil),
		(*Ingredient_SpecifiedSubstance_Strength_ReferenceStrength_SubstanceX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Ingredient_Substance_CodeX_CodeableConcept)(nil),
		(*Ingredient_Substance_CodeX_Reference)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_ingredient_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_ingredient_proto_depIdxs = nil
}

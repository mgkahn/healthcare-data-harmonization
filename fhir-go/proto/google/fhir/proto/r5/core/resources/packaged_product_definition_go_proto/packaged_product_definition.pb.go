//    Copyright 2020 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r5/core/resources/packaged_product_definition.proto

package packaged_product_definition_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for PackagedProductDefinition, last
// updated 2019-12-31T21:03:40.621+11:00. A medicinal product in a container or
// package. See
// http://hl7.org/fhir/StructureDefinition/PackagedProductDefinition
type PackagedProductDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Unique identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// The product that this is a pack for
	Subject []*datatypes_go_proto.Reference `protobuf:"bytes,11,rep,name=subject,proto3" json:"subject,omitempty"`
	// Textual description
	Description *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	// The legal status of supply of the medicinal product as classified by the
	// regulator
	LegalStatusOfSupply *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=legal_status_of_supply,json=legalStatusOfSupply,proto3" json:"legal_status_of_supply,omitempty"`
	// Marketing information
	MarketingStatus []*datatypes_go_proto.MarketingStatus `protobuf:"bytes,14,rep,name=marketing_status,json=marketingStatus,proto3" json:"marketing_status,omitempty"`
	// States whether a drug product is supplied with another item such as a
	// diluent or adjuvant
	CopackagedIndicator *datatypes_go_proto.Boolean `protobuf:"bytes,15,opt,name=copackaged_indicator,json=copackagedIndicator,proto3" json:"copackaged_indicator,omitempty"`
	// Manufacturer of this Package Item
	MarketingAuthorization *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=marketing_authorization,json=marketingAuthorization,proto3" json:"marketing_authorization,omitempty"`
	// Manufacturer of this Package Item
	Manufacturer    []*datatypes_go_proto.Reference              `protobuf:"bytes,17,rep,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	BatchIdentifier []*PackagedProductDefinition_BatchIdentifier `protobuf:"bytes,18,rep,name=batch_identifier,json=batchIdentifier,proto3" json:"batch_identifier,omitempty"`
	PackageValue    []*PackagedProductDefinition_Package         `protobuf:"bytes,19,rep,name=package_value,json=package,proto3" json:"package_value,omitempty"`
}

func (x *PackagedProductDefinition) Reset() {
	*x = PackagedProductDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagedProductDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagedProductDefinition) ProtoMessage() {}

func (x *PackagedProductDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagedProductDefinition.ProtoReflect.Descriptor instead.
func (*PackagedProductDefinition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescGZIP(), []int{0}
}

func (x *PackagedProductDefinition) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PackagedProductDefinition) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *PackagedProductDefinition) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *PackagedProductDefinition) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *PackagedProductDefinition) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *PackagedProductDefinition) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *PackagedProductDefinition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PackagedProductDefinition) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *PackagedProductDefinition) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *PackagedProductDefinition) GetSubject() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *PackagedProductDefinition) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *PackagedProductDefinition) GetLegalStatusOfSupply() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.LegalStatusOfSupply
	}
	return nil
}

func (x *PackagedProductDefinition) GetMarketingStatus() []*datatypes_go_proto.MarketingStatus {
	if x != nil {
		return x.MarketingStatus
	}
	return nil
}

func (x *PackagedProductDefinition) GetCopackagedIndicator() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.CopackagedIndicator
	}
	return nil
}

func (x *PackagedProductDefinition) GetMarketingAuthorization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.MarketingAuthorization
	}
	return nil
}

func (x *PackagedProductDefinition) GetManufacturer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *PackagedProductDefinition) GetBatchIdentifier() []*PackagedProductDefinition_BatchIdentifier {
	if x != nil {
		return x.BatchIdentifier
	}
	return nil
}

func (x *PackagedProductDefinition) GetPackageValue() []*PackagedProductDefinition_Package {
	if x != nil {
		return x.PackageValue
	}
	return nil
}

// Batch numbering
type PackagedProductDefinition_BatchIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A number appearing on the outer packaging of a specific batch
	OuterPackaging *datatypes_go_proto.Identifier `protobuf:"bytes,4,opt,name=outer_packaging,json=outerPackaging,proto3" json:"outer_packaging,omitempty"`
	// A number appearing on the immediate packaging (and not the outer
	// packaging)
	ImmediatePackaging *datatypes_go_proto.Identifier `protobuf:"bytes,5,opt,name=immediate_packaging,json=immediatePackaging,proto3" json:"immediate_packaging,omitempty"`
}

func (x *PackagedProductDefinition_BatchIdentifier) Reset() {
	*x = PackagedProductDefinition_BatchIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagedProductDefinition_BatchIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagedProductDefinition_BatchIdentifier) ProtoMessage() {}

func (x *PackagedProductDefinition_BatchIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagedProductDefinition_BatchIdentifier.ProtoReflect.Descriptor instead.
func (*PackagedProductDefinition_BatchIdentifier) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PackagedProductDefinition_BatchIdentifier) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PackagedProductDefinition_BatchIdentifier) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PackagedProductDefinition_BatchIdentifier) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *PackagedProductDefinition_BatchIdentifier) GetOuterPackaging() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.OuterPackaging
	}
	return nil
}

func (x *PackagedProductDefinition_BatchIdentifier) GetImmediatePackaging() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.ImmediatePackaging
	}
	return nil
}

// A packaging item, as a contained for medicine, possibly with other
// packaging items within
type PackagedProductDefinition_Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Including possibly Data Carrier Identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,4,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// The physical type of the container of the medicine
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// The quantity of this package in the medicinal product, at the current
	// level of packaging. If specified, the outermost level is always 1
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Material type of the package item
	Material []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=material,proto3" json:"material,omitempty"`
	// A possible alternate material for the packaging
	AlternateMaterial []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,rep,name=alternate_material,json=alternateMaterial,proto3" json:"alternate_material,omitempty"`
	// Shelf Life and storage information
	ShelfLifeStorage []*datatypes_go_proto.ProductShelfLife `protobuf:"bytes,9,rep,name=shelf_life_storage,json=shelfLifeStorage,proto3" json:"shelf_life_storage,omitempty"`
	// Manufacturer of this Package Item
	Manufacturer   []*datatypes_go_proto.Reference                     `protobuf:"bytes,10,rep,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Characteristic []*PackagedProductDefinition_Package_Characteristic `protobuf:"bytes,11,rep,name=characteristic,proto3" json:"characteristic,omitempty"`
	ContainedItem  []*PackagedProductDefinition_Package_ContainedItem  `protobuf:"bytes,12,rep,name=contained_item,json=containedItem,proto3" json:"contained_item,omitempty"`
	// Allows containers within containers
	PackageValue []*PackagedProductDefinition_Package `protobuf:"bytes,13,rep,name=package_value,json=package,proto3" json:"package_value,omitempty"`
}

func (x *PackagedProductDefinition_Package) Reset() {
	*x = PackagedProductDefinition_Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagedProductDefinition_Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagedProductDefinition_Package) ProtoMessage() {}

func (x *PackagedProductDefinition_Package) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagedProductDefinition_Package.ProtoReflect.Descriptor instead.
func (*PackagedProductDefinition_Package) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PackagedProductDefinition_Package) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PackagedProductDefinition_Package) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PackagedProductDefinition_Package) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *PackagedProductDefinition_Package) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *PackagedProductDefinition_Package) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *PackagedProductDefinition_Package) GetQuantity() *datatypes_go_proto.Quantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *PackagedProductDefinition_Package) GetMaterial() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Material
	}
	return nil
}

func (x *PackagedProductDefinition_Package) GetAlternateMaterial() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AlternateMaterial
	}
	return nil
}

func (x *PackagedProductDefinition_Package) GetShelfLifeStorage() []*datatypes_go_proto.ProductShelfLife {
	if x != nil {
		return x.ShelfLifeStorage
	}
	return nil
}

func (x *PackagedProductDefinition_Package) GetManufacturer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *PackagedProductDefinition_Package) GetCharacteristic() []*PackagedProductDefinition_Package_Characteristic {
	if x != nil {
		return x.Characteristic
	}
	return nil
}

func (x *PackagedProductDefinition_Package) GetContainedItem() []*PackagedProductDefinition_Package_ContainedItem {
	if x != nil {
		return x.ContainedItem
	}
	return nil
}

func (x *PackagedProductDefinition_Package) GetPackageValue() []*PackagedProductDefinition_Package {
	if x != nil {
		return x.PackageValue
	}
	return nil
}

// General characteristics of this item
type PackagedProductDefinition_Package_Characteristic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A code expressing the type of characteristic
	Code  *datatypes_go_proto.CodeableConcept                      `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *PackagedProductDefinition_Package_Characteristic_ValueX `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PackagedProductDefinition_Package_Characteristic) Reset() {
	*x = PackagedProductDefinition_Package_Characteristic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagedProductDefinition_Package_Characteristic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagedProductDefinition_Package_Characteristic) ProtoMessage() {}

func (x *PackagedProductDefinition_Package_Characteristic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagedProductDefinition_Package_Characteristic.ProtoReflect.Descriptor instead.
func (*PackagedProductDefinition_Package_Characteristic) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *PackagedProductDefinition_Package_Characteristic) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PackagedProductDefinition_Package_Characteristic) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PackagedProductDefinition_Package_Characteristic) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *PackagedProductDefinition_Package_Characteristic) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *PackagedProductDefinition_Package_Characteristic) GetValue() *PackagedProductDefinition_Package_Characteristic_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// The item(s) within the packaging
type PackagedProductDefinition_Package_ContainedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The manufactured item or device as contained in the packaged medicinal
	// product
	Item   []*datatypes_go_proto.Reference                          `protobuf:"bytes,4,rep,name=item,proto3" json:"item,omitempty"`
	Amount *PackagedProductDefinition_Package_ContainedItem_AmountX `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *PackagedProductDefinition_Package_ContainedItem) Reset() {
	*x = PackagedProductDefinition_Package_ContainedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagedProductDefinition_Package_ContainedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagedProductDefinition_Package_ContainedItem) ProtoMessage() {}

func (x *PackagedProductDefinition_Package_ContainedItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagedProductDefinition_Package_ContainedItem.ProtoReflect.Descriptor instead.
func (*PackagedProductDefinition_Package_ContainedItem) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *PackagedProductDefinition_Package_ContainedItem) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PackagedProductDefinition_Package_ContainedItem) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PackagedProductDefinition_Package_ContainedItem) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *PackagedProductDefinition_Package_ContainedItem) GetItem() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *PackagedProductDefinition_Package_ContainedItem) GetAmount() *PackagedProductDefinition_Package_ContainedItem_AmountX {
	if x != nil {
		return x.Amount
	}
	return nil
}

// A value for the characteristic
type PackagedProductDefinition_Package_Characteristic_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*PackagedProductDefinition_Package_Characteristic_ValueX_Coding
	//	*PackagedProductDefinition_Package_Characteristic_ValueX_Quantity
	//	*PackagedProductDefinition_Package_Characteristic_ValueX_StringValue
	//	*PackagedProductDefinition_Package_Characteristic_ValueX_Date
	//	*PackagedProductDefinition_Package_Characteristic_ValueX_Boolean
	//	*PackagedProductDefinition_Package_Characteristic_ValueX_Attachment
	Choice isPackagedProductDefinition_Package_Characteristic_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *PackagedProductDefinition_Package_Characteristic_ValueX) Reset() {
	*x = PackagedProductDefinition_Package_Characteristic_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagedProductDefinition_Package_Characteristic_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagedProductDefinition_Package_Characteristic_ValueX) ProtoMessage() {}

func (x *PackagedProductDefinition_Package_Characteristic_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagedProductDefinition_Package_Characteristic_ValueX.ProtoReflect.Descriptor instead.
func (*PackagedProductDefinition_Package_Characteristic_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (m *PackagedProductDefinition_Package_Characteristic_ValueX) GetChoice() isPackagedProductDefinition_Package_Characteristic_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *PackagedProductDefinition_Package_Characteristic_ValueX) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetChoice().(*PackagedProductDefinition_Package_Characteristic_ValueX_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *PackagedProductDefinition_Package_Characteristic_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*PackagedProductDefinition_Package_Characteristic_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *PackagedProductDefinition_Package_Characteristic_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*PackagedProductDefinition_Package_Characteristic_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *PackagedProductDefinition_Package_Characteristic_ValueX) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetChoice().(*PackagedProductDefinition_Package_Characteristic_ValueX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *PackagedProductDefinition_Package_Characteristic_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*PackagedProductDefinition_Package_Characteristic_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *PackagedProductDefinition_Package_Characteristic_ValueX) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetChoice().(*PackagedProductDefinition_Package_Characteristic_ValueX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

type isPackagedProductDefinition_Package_Characteristic_ValueX_Choice interface {
	isPackagedProductDefinition_Package_Characteristic_ValueX_Choice()
}

type PackagedProductDefinition_Package_Characteristic_ValueX_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,1,opt,name=coding,proto3,oneof"`
}

type PackagedProductDefinition_Package_Characteristic_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,2,opt,name=quantity,proto3,oneof"`
}

type PackagedProductDefinition_Package_Characteristic_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type PackagedProductDefinition_Package_Characteristic_ValueX_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,4,opt,name=date,proto3,oneof"`
}

type PackagedProductDefinition_Package_Characteristic_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=boolean,proto3,oneof"`
}

type PackagedProductDefinition_Package_Characteristic_ValueX_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,6,opt,name=attachment,proto3,oneof"`
}

func (*PackagedProductDefinition_Package_Characteristic_ValueX_Coding) isPackagedProductDefinition_Package_Characteristic_ValueX_Choice() {
}

func (*PackagedProductDefinition_Package_Characteristic_ValueX_Quantity) isPackagedProductDefinition_Package_Characteristic_ValueX_Choice() {
}

func (*PackagedProductDefinition_Package_Characteristic_ValueX_StringValue) isPackagedProductDefinition_Package_Characteristic_ValueX_Choice() {
}

func (*PackagedProductDefinition_Package_Characteristic_ValueX_Date) isPackagedProductDefinition_Package_Characteristic_ValueX_Choice() {
}

func (*PackagedProductDefinition_Package_Characteristic_ValueX_Boolean) isPackagedProductDefinition_Package_Characteristic_ValueX_Choice() {
}

func (*PackagedProductDefinition_Package_Characteristic_ValueX_Attachment) isPackagedProductDefinition_Package_Characteristic_ValueX_Choice() {
}

// The number of this type of item within this packaging
type PackagedProductDefinition_Package_ContainedItem_AmountX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*PackagedProductDefinition_Package_ContainedItem_AmountX_Quantity
	//	*PackagedProductDefinition_Package_ContainedItem_AmountX_Integer
	Choice isPackagedProductDefinition_Package_ContainedItem_AmountX_Choice `protobuf_oneof:"choice"`
}

func (x *PackagedProductDefinition_Package_ContainedItem_AmountX) Reset() {
	*x = PackagedProductDefinition_Package_ContainedItem_AmountX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagedProductDefinition_Package_ContainedItem_AmountX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagedProductDefinition_Package_ContainedItem_AmountX) ProtoMessage() {}

func (x *PackagedProductDefinition_Package_ContainedItem_AmountX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagedProductDefinition_Package_ContainedItem_AmountX.ProtoReflect.Descriptor instead.
func (*PackagedProductDefinition_Package_ContainedItem_AmountX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescGZIP(), []int{0, 1, 1, 0}
}

func (m *PackagedProductDefinition_Package_ContainedItem_AmountX) GetChoice() isPackagedProductDefinition_Package_ContainedItem_AmountX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *PackagedProductDefinition_Package_ContainedItem_AmountX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*PackagedProductDefinition_Package_ContainedItem_AmountX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *PackagedProductDefinition_Package_ContainedItem_AmountX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*PackagedProductDefinition_Package_ContainedItem_AmountX_Integer); ok {
		return x.Integer
	}
	return nil
}

type isPackagedProductDefinition_Package_ContainedItem_AmountX_Choice interface {
	isPackagedProductDefinition_Package_ContainedItem_AmountX_Choice()
}

type PackagedProductDefinition_Package_ContainedItem_AmountX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type PackagedProductDefinition_Package_ContainedItem_AmountX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,2,opt,name=integer,proto3,oneof"`
}

func (*PackagedProductDefinition_Package_ContainedItem_AmountX_Quantity) isPackagedProductDefinition_Package_ContainedItem_AmountX_Choice() {
}

func (*PackagedProductDefinition_Package_ContainedItem_AmountX_Integer) isPackagedProductDefinition_Package_ContainedItem_AmountX_Choice() {
}

var File_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDesc = []byte{
	0x0a, 0x4b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x20, 0x0a, 0x19, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x5a, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x20,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x16, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x13,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x66, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x4f, 0x0a, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x14, 0x63, 0x6f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x52, 0x13, 0x63, 0x6f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x75, 0x0a, 0x17, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1c, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x16, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0c,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x10, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x56, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x1a, 0xeb, 0x02, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x50, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x12, 0x50, 0x0a, 0x13, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x12, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x1a, 0x87, 0x12, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12,
	0x53, 0x0a, 0x12, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x11, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x53, 0x0a, 0x12, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x5f, 0x6c, 0x69,
	0x66, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x68,
	0x65, 0x6c, 0x66, 0x4c, 0x69, 0x66, 0x65, 0x52, 0x10, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x4c, 0x69,
	0x66, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x0c, 0x6d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x12, 0x6d, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x12, 0x6b, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x56, 0x0a,
	0x0d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x07, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x1a, 0xe8, 0x05, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x62, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0xf9, 0x02, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12,
	0x35, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x41, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x1a, 0xac, 0x04, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x36, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x4d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x12, 0x64, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x58, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x92, 0x01, 0x0a, 0x07, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x58, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a,
	0x4d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x41, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04,
	0x08, 0x07, 0x10, 0x08, 0x42, 0x8b, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x50, 0x01, 0x5a, 0x68, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6, 0xb0, 0xb5,
	0x07, 0x05, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_goTypes = []interface{}{
	(*PackagedProductDefinition)(nil),                               // 0: google.fhir.r5.core.PackagedProductDefinition
	(*PackagedProductDefinition_BatchIdentifier)(nil),               // 1: google.fhir.r5.core.PackagedProductDefinition.BatchIdentifier
	(*PackagedProductDefinition_Package)(nil),                       // 2: google.fhir.r5.core.PackagedProductDefinition.Package
	(*PackagedProductDefinition_Package_Characteristic)(nil),        // 3: google.fhir.r5.core.PackagedProductDefinition.Package.Characteristic
	(*PackagedProductDefinition_Package_ContainedItem)(nil),         // 4: google.fhir.r5.core.PackagedProductDefinition.Package.ContainedItem
	(*PackagedProductDefinition_Package_Characteristic_ValueX)(nil), // 5: google.fhir.r5.core.PackagedProductDefinition.Package.Characteristic.ValueX
	(*PackagedProductDefinition_Package_ContainedItem_AmountX)(nil), // 6: google.fhir.r5.core.PackagedProductDefinition.Package.ContainedItem.AmountX
	(*datatypes_go_proto.Id)(nil),                                   // 7: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                                 // 8: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                  // 9: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                                 // 10: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),                            // 11: google.fhir.r5.core.Narrative
	(*any.Any)(nil),                                                 // 12: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                            // 13: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                           // 14: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.Reference)(nil),                            // 15: google.fhir.r5.core.Reference
	(*datatypes_go_proto.String)(nil),                               // 16: google.fhir.r5.core.String
	(*datatypes_go_proto.CodeableConcept)(nil),                      // 17: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.MarketingStatus)(nil),                      // 18: google.fhir.r5.core.MarketingStatus
	(*datatypes_go_proto.Boolean)(nil),                              // 19: google.fhir.r5.core.Boolean
	(*datatypes_go_proto.Quantity)(nil),                             // 20: google.fhir.r5.core.Quantity
	(*datatypes_go_proto.ProductShelfLife)(nil),                     // 21: google.fhir.r5.core.ProductShelfLife
	(*datatypes_go_proto.Coding)(nil),                               // 22: google.fhir.r5.core.Coding
	(*datatypes_go_proto.Date)(nil),                                 // 23: google.fhir.r5.core.Date
	(*datatypes_go_proto.Attachment)(nil),                           // 24: google.fhir.r5.core.Attachment
	(*datatypes_go_proto.Integer)(nil),                              // 25: google.fhir.r5.core.Integer
}
var file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_depIdxs = []int32{
	7,  // 0: google.fhir.r5.core.PackagedProductDefinition.id:type_name -> google.fhir.r5.core.Id
	8,  // 1: google.fhir.r5.core.PackagedProductDefinition.meta:type_name -> google.fhir.r5.core.Meta
	9,  // 2: google.fhir.r5.core.PackagedProductDefinition.implicit_rules:type_name -> google.fhir.r5.core.Uri
	10, // 3: google.fhir.r5.core.PackagedProductDefinition.language:type_name -> google.fhir.r5.core.Code
	11, // 4: google.fhir.r5.core.PackagedProductDefinition.text:type_name -> google.fhir.r5.core.Narrative
	12, // 5: google.fhir.r5.core.PackagedProductDefinition.contained:type_name -> google.protobuf.Any
	13, // 6: google.fhir.r5.core.PackagedProductDefinition.extension:type_name -> google.fhir.r5.core.Extension
	13, // 7: google.fhir.r5.core.PackagedProductDefinition.modifier_extension:type_name -> google.fhir.r5.core.Extension
	14, // 8: google.fhir.r5.core.PackagedProductDefinition.identifier:type_name -> google.fhir.r5.core.Identifier
	15, // 9: google.fhir.r5.core.PackagedProductDefinition.subject:type_name -> google.fhir.r5.core.Reference
	16, // 10: google.fhir.r5.core.PackagedProductDefinition.description:type_name -> google.fhir.r5.core.String
	17, // 11: google.fhir.r5.core.PackagedProductDefinition.legal_status_of_supply:type_name -> google.fhir.r5.core.CodeableConcept
	18, // 12: google.fhir.r5.core.PackagedProductDefinition.marketing_status:type_name -> google.fhir.r5.core.MarketingStatus
	19, // 13: google.fhir.r5.core.PackagedProductDefinition.copackaged_indicator:type_name -> google.fhir.r5.core.Boolean
	15, // 14: google.fhir.r5.core.PackagedProductDefinition.marketing_authorization:type_name -> google.fhir.r5.core.Reference
	15, // 15: google.fhir.r5.core.PackagedProductDefinition.manufacturer:type_name -> google.fhir.r5.core.Reference
	1,  // 16: google.fhir.r5.core.PackagedProductDefinition.batch_identifier:type_name -> google.fhir.r5.core.PackagedProductDefinition.BatchIdentifier
	2,  // 17: google.fhir.r5.core.PackagedProductDefinition.package_value:type_name -> google.fhir.r5.core.PackagedProductDefinition.Package
	7,  // 18: google.fhir.r5.core.PackagedProductDefinition.BatchIdentifier.id:type_name -> google.fhir.r5.core.Id
	13, // 19: google.fhir.r5.core.PackagedProductDefinition.BatchIdentifier.extension:type_name -> google.fhir.r5.core.Extension
	13, // 20: google.fhir.r5.core.PackagedProductDefinition.BatchIdentifier.modifier_extension:type_name -> google.fhir.r5.core.Extension
	14, // 21: google.fhir.r5.core.PackagedProductDefinition.BatchIdentifier.outer_packaging:type_name -> google.fhir.r5.core.Identifier
	14, // 22: google.fhir.r5.core.PackagedProductDefinition.BatchIdentifier.immediate_packaging:type_name -> google.fhir.r5.core.Identifier
	7,  // 23: google.fhir.r5.core.PackagedProductDefinition.Package.id:type_name -> google.fhir.r5.core.Id
	13, // 24: google.fhir.r5.core.PackagedProductDefinition.Package.extension:type_name -> google.fhir.r5.core.Extension
	13, // 25: google.fhir.r5.core.PackagedProductDefinition.Package.modifier_extension:type_name -> google.fhir.r5.core.Extension
	14, // 26: google.fhir.r5.core.PackagedProductDefinition.Package.identifier:type_name -> google.fhir.r5.core.Identifier
	17, // 27: google.fhir.r5.core.PackagedProductDefinition.Package.type:type_name -> google.fhir.r5.core.CodeableConcept
	20, // 28: google.fhir.r5.core.PackagedProductDefinition.Package.quantity:type_name -> google.fhir.r5.core.Quantity
	17, // 29: google.fhir.r5.core.PackagedProductDefinition.Package.material:type_name -> google.fhir.r5.core.CodeableConcept
	17, // 30: google.fhir.r5.core.PackagedProductDefinition.Package.alternate_material:type_name -> google.fhir.r5.core.CodeableConcept
	21, // 31: google.fhir.r5.core.PackagedProductDefinition.Package.shelf_life_storage:type_name -> google.fhir.r5.core.ProductShelfLife
	15, // 32: google.fhir.r5.core.PackagedProductDefinition.Package.manufacturer:type_name -> google.fhir.r5.core.Reference
	3,  // 33: google.fhir.r5.core.PackagedProductDefinition.Package.characteristic:type_name -> google.fhir.r5.core.PackagedProductDefinition.Package.Characteristic
	4,  // 34: google.fhir.r5.core.PackagedProductDefinition.Package.contained_item:type_name -> google.fhir.r5.core.PackagedProductDefinition.Package.ContainedItem
	2,  // 35: google.fhir.r5.core.PackagedProductDefinition.Package.package_value:type_name -> google.fhir.r5.core.PackagedProductDefinition.Package
	7,  // 36: google.fhir.r5.core.PackagedProductDefinition.Package.Characteristic.id:type_name -> google.fhir.r5.core.Id
	13, // 37: google.fhir.r5.core.PackagedProductDefinition.Package.Characteristic.extension:type_name -> google.fhir.r5.core.Extension
	13, // 38: google.fhir.r5.core.PackagedProductDefinition.Package.Characteristic.modifier_extension:type_name -> google.fhir.r5.core.Extension
	17, // 39: google.fhir.r5.core.PackagedProductDefinition.Package.Characteristic.code:type_name -> google.fhir.r5.core.CodeableConcept
	5,  // 40: google.fhir.r5.core.PackagedProductDefinition.Package.Characteristic.value:type_name -> google.fhir.r5.core.PackagedProductDefinition.Package.Characteristic.ValueX
	7,  // 41: google.fhir.r5.core.PackagedProductDefinition.Package.ContainedItem.id:type_name -> google.fhir.r5.core.Id
	13, // 42: google.fhir.r5.core.PackagedProductDefinition.Package.ContainedItem.extension:type_name -> google.fhir.r5.core.Extension
	13, // 43: google.fhir.r5.core.PackagedProductDefinition.Package.ContainedItem.modifier_extension:type_name -> google.fhir.r5.core.Extension
	15, // 44: google.fhir.r5.core.PackagedProductDefinition.Package.ContainedItem.item:type_name -> google.fhir.r5.core.Reference
	6,  // 45: google.fhir.r5.core.PackagedProductDefinition.Package.ContainedItem.amount:type_name -> google.fhir.r5.core.PackagedProductDefinition.Package.ContainedItem.AmountX
	22, // 46: google.fhir.r5.core.PackagedProductDefinition.Package.Characteristic.ValueX.coding:type_name -> google.fhir.r5.core.Coding
	20, // 47: google.fhir.r5.core.PackagedProductDefinition.Package.Characteristic.ValueX.quantity:type_name -> google.fhir.r5.core.Quantity
	16, // 48: google.fhir.r5.core.PackagedProductDefinition.Package.Characteristic.ValueX.string_value:type_name -> google.fhir.r5.core.String
	23, // 49: google.fhir.r5.core.PackagedProductDefinition.Package.Characteristic.ValueX.date:type_name -> google.fhir.r5.core.Date
	19, // 50: google.fhir.r5.core.PackagedProductDefinition.Package.Characteristic.ValueX.boolean:type_name -> google.fhir.r5.core.Boolean
	24, // 51: google.fhir.r5.core.PackagedProductDefinition.Package.Characteristic.ValueX.attachment:type_name -> google.fhir.r5.core.Attachment
	20, // 52: google.fhir.r5.core.PackagedProductDefinition.Package.ContainedItem.AmountX.quantity:type_name -> google.fhir.r5.core.Quantity
	25, // 53: google.fhir.r5.core.PackagedProductDefinition.Package.ContainedItem.AmountX.integer:type_name -> google.fhir.r5.core.Integer
	54, // [54:54] is the sub-list for method output_type
	54, // [54:54] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagedProductDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagedProductDefinition_BatchIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagedProductDefinition_Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagedProductDefinition_Package_Characteristic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagedProductDefinition_Package_ContainedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagedProductDefinition_Package_Characteristic_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagedProductDefinition_Package_ContainedItem_AmountX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*PackagedProductDefinition_Package_Characteristic_ValueX_Coding)(nil),
		(*PackagedProductDefinition_Package_Characteristic_ValueX_Quantity)(nil),
		(*PackagedProductDefinition_Package_Characteristic_ValueX_StringValue)(nil),
		(*PackagedProductDefinition_Package_Characteristic_ValueX_Date)(nil),
		(*PackagedProductDefinition_Package_Characteristic_ValueX_Boolean)(nil),
		(*PackagedProductDefinition_Package_Characteristic_ValueX_Attachment)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*PackagedProductDefinition_Package_ContainedItem_AmountX_Quantity)(nil),
		(*PackagedProductDefinition_Package_ContainedItem_AmountX_Integer)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_packaged_product_definition_proto_depIdxs = nil
}

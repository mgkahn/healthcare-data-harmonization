//    Copyright 2020 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r5/core/resources/clinical_use_issue.proto

package clinical_use_issue_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for ClinicalUseIssue, last updated
// 2019-12-31T21:03:40.621+11:00. A single item of clinical particulars - an
// indication, contraindication, interaction etc. for a medicinal product. See
// http://hl7.org/fhir/StructureDefinition/ClinicalUseIssue
type ClinicalUseIssue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier for this issue
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Type       *ClinicalUseIssue_TypeCode       `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	// The medication or procedure for which this is an indication
	Subject []*datatypes_go_proto.Reference `protobuf:"bytes,12,rep,name=subject,proto3" json:"subject,omitempty"`
	// General description
	Status *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// General description
	Description      *datatypes_go_proto.Markdown       `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	Contraindication *ClinicalUseIssue_Contraindication `protobuf:"bytes,15,opt,name=contraindication,proto3" json:"contraindication,omitempty"`
	Indication       *ClinicalUseIssue_Indication       `protobuf:"bytes,16,opt,name=indication,proto3" json:"indication,omitempty"`
	Interaction      *ClinicalUseIssue_Interaction      `protobuf:"bytes,17,opt,name=interaction,proto3" json:"interaction,omitempty"`
	// The population group to which this applies
	Population        []*datatypes_go_proto.Population    `protobuf:"bytes,18,rep,name=population,proto3" json:"population,omitempty"`
	UndesirableEffect *ClinicalUseIssue_UndesirableEffect `protobuf:"bytes,19,opt,name=undesirable_effect,json=undesirableEffect,proto3" json:"undesirable_effect,omitempty"`
}

func (x *ClinicalUseIssue) Reset() {
	*x = ClinicalUseIssue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalUseIssue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalUseIssue) ProtoMessage() {}

func (x *ClinicalUseIssue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalUseIssue.ProtoReflect.Descriptor instead.
func (*ClinicalUseIssue) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_rawDescGZIP(), []int{0}
}

func (x *ClinicalUseIssue) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClinicalUseIssue) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ClinicalUseIssue) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *ClinicalUseIssue) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ClinicalUseIssue) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *ClinicalUseIssue) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *ClinicalUseIssue) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClinicalUseIssue) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClinicalUseIssue) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ClinicalUseIssue) GetType() *ClinicalUseIssue_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ClinicalUseIssue) GetSubject() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *ClinicalUseIssue) GetStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ClinicalUseIssue) GetDescription() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ClinicalUseIssue) GetContraindication() *ClinicalUseIssue_Contraindication {
	if x != nil {
		return x.Contraindication
	}
	return nil
}

func (x *ClinicalUseIssue) GetIndication() *ClinicalUseIssue_Indication {
	if x != nil {
		return x.Indication
	}
	return nil
}

func (x *ClinicalUseIssue) GetInteraction() *ClinicalUseIssue_Interaction {
	if x != nil {
		return x.Interaction
	}
	return nil
}

func (x *ClinicalUseIssue) GetPopulation() []*datatypes_go_proto.Population {
	if x != nil {
		return x.Population
	}
	return nil
}

func (x *ClinicalUseIssue) GetUndesirableEffect() *ClinicalUseIssue_UndesirableEffect {
	if x != nil {
		return x.UndesirableEffect
	}
	return nil
}

// indication | contraindication | interaction | undesirable-effect | other
type ClinicalUseIssue_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ClinicalUseIssueTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.ClinicalUseIssueTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension               `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ClinicalUseIssue_TypeCode) Reset() {
	*x = ClinicalUseIssue_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalUseIssue_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalUseIssue_TypeCode) ProtoMessage() {}

func (x *ClinicalUseIssue_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalUseIssue_TypeCode.ProtoReflect.Descriptor instead.
func (*ClinicalUseIssue_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ClinicalUseIssue_TypeCode) GetValue() codes_go_proto.ClinicalUseIssueTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ClinicalUseIssueTypeCode_INVALID_UNINITIALIZED
}

func (x *ClinicalUseIssue_TypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClinicalUseIssue_TypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Specifics for when this is a contraindication
type ClinicalUseIssue_Contraindication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The situation that is being documented as contraindicating against this
	// item
	DiseaseSymptomProcedure *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=disease_symptom_procedure,json=diseaseSymptomProcedure,proto3" json:"disease_symptom_procedure,omitempty"`
	// The status of the disease or symptom for the contraindication
	DiseaseStatus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=disease_status,json=diseaseStatus,proto3" json:"disease_status,omitempty"`
	// A comorbidity (concurrent condition) or coinfection
	Comorbidity []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,rep,name=comorbidity,proto3" json:"comorbidity,omitempty"`
	// The indication which this is a contraidication for
	Indication   []*datatypes_go_proto.Reference                   `protobuf:"bytes,7,rep,name=indication,proto3" json:"indication,omitempty"`
	OtherTherapy []*ClinicalUseIssue_Contraindication_OtherTherapy `protobuf:"bytes,8,rep,name=other_therapy,json=otherTherapy,proto3" json:"other_therapy,omitempty"`
}

func (x *ClinicalUseIssue_Contraindication) Reset() {
	*x = ClinicalUseIssue_Contraindication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalUseIssue_Contraindication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalUseIssue_Contraindication) ProtoMessage() {}

func (x *ClinicalUseIssue_Contraindication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalUseIssue_Contraindication.ProtoReflect.Descriptor instead.
func (*ClinicalUseIssue_Contraindication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ClinicalUseIssue_Contraindication) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClinicalUseIssue_Contraindication) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClinicalUseIssue_Contraindication) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClinicalUseIssue_Contraindication) GetDiseaseSymptomProcedure() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DiseaseSymptomProcedure
	}
	return nil
}

func (x *ClinicalUseIssue_Contraindication) GetDiseaseStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DiseaseStatus
	}
	return nil
}

func (x *ClinicalUseIssue_Contraindication) GetComorbidity() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Comorbidity
	}
	return nil
}

func (x *ClinicalUseIssue_Contraindication) GetIndication() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Indication
	}
	return nil
}

func (x *ClinicalUseIssue_Contraindication) GetOtherTherapy() []*ClinicalUseIssue_Contraindication_OtherTherapy {
	if x != nil {
		return x.OtherTherapy
	}
	return nil
}

// Specifics for when this is an indication
type ClinicalUseIssue_Indication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The situation that is being documented as an indicaton for this item
	DiseaseSymptomProcedure *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=disease_symptom_procedure,json=diseaseSymptomProcedure,proto3" json:"disease_symptom_procedure,omitempty"`
	// The status of the disease or symptom for the indication
	DiseaseStatus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=disease_status,json=diseaseStatus,proto3" json:"disease_status,omitempty"`
	// A comorbidity (concurrent condition) or coinfection as part of the
	// indication
	Comorbidity []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,rep,name=comorbidity,proto3" json:"comorbidity,omitempty"`
	// For an indication - the intended effect, aim or strategy to be achieved
	IntendedEffect *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=intended_effect,json=intendedEffect,proto3" json:"intended_effect,omitempty"`
	// For an indication - timing or duration information
	Duration *datatypes_go_proto.Quantity `protobuf:"bytes,8,opt,name=duration,proto3" json:"duration,omitempty"`
	// For an indicaton - the specific undesirable effects of the medicinal
	// product
	UndesirableEffect []*datatypes_go_proto.Reference `protobuf:"bytes,9,rep,name=undesirable_effect,json=undesirableEffect,proto3" json:"undesirable_effect,omitempty"`
	// Information about the use of the medicinal product in relation to other
	// therapies described as part of the contraindication
	OtherTherapy []*ClinicalUseIssue_Contraindication_OtherTherapy `protobuf:"bytes,10,rep,name=other_therapy,json=otherTherapy,proto3" json:"other_therapy,omitempty"`
}

func (x *ClinicalUseIssue_Indication) Reset() {
	*x = ClinicalUseIssue_Indication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalUseIssue_Indication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalUseIssue_Indication) ProtoMessage() {}

func (x *ClinicalUseIssue_Indication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalUseIssue_Indication.ProtoReflect.Descriptor instead.
func (*ClinicalUseIssue_Indication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ClinicalUseIssue_Indication) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClinicalUseIssue_Indication) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClinicalUseIssue_Indication) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClinicalUseIssue_Indication) GetDiseaseSymptomProcedure() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DiseaseSymptomProcedure
	}
	return nil
}

func (x *ClinicalUseIssue_Indication) GetDiseaseStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DiseaseStatus
	}
	return nil
}

func (x *ClinicalUseIssue_Indication) GetComorbidity() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Comorbidity
	}
	return nil
}

func (x *ClinicalUseIssue_Indication) GetIntendedEffect() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.IntendedEffect
	}
	return nil
}

func (x *ClinicalUseIssue_Indication) GetDuration() *datatypes_go_proto.Quantity {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *ClinicalUseIssue_Indication) GetUndesirableEffect() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.UndesirableEffect
	}
	return nil
}

func (x *ClinicalUseIssue_Indication) GetOtherTherapy() []*ClinicalUseIssue_Contraindication_OtherTherapy {
	if x != nil {
		return x.OtherTherapy
	}
	return nil
}

// Specifics for when this is an interaction
type ClinicalUseIssue_Interaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension             `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Interactant       []*ClinicalUseIssue_Interaction_Interactant `protobuf:"bytes,4,rep,name=interactant,proto3" json:"interactant,omitempty"`
	// The type of the interaction e.g. drug-drug interaction, drug-food
	// interaction, drug-lab test interaction
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// The effect of the interaction, for example "reduced gastric absorption of
	// primary medication"
	Effect *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=effect,proto3" json:"effect,omitempty"`
	// The incidence of the interaction, e.g. theoretical, observed
	Incidence *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=incidence,proto3" json:"incidence,omitempty"`
	// Actions for managing the interaction
	Management *datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,opt,name=management,proto3" json:"management,omitempty"`
}

func (x *ClinicalUseIssue_Interaction) Reset() {
	*x = ClinicalUseIssue_Interaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalUseIssue_Interaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalUseIssue_Interaction) ProtoMessage() {}

func (x *ClinicalUseIssue_Interaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalUseIssue_Interaction.ProtoReflect.Descriptor instead.
func (*ClinicalUseIssue_Interaction) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_rawDescGZIP(), []int{0, 3}
}

func (x *ClinicalUseIssue_Interaction) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClinicalUseIssue_Interaction) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClinicalUseIssue_Interaction) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClinicalUseIssue_Interaction) GetInteractant() []*ClinicalUseIssue_Interaction_Interactant {
	if x != nil {
		return x.Interactant
	}
	return nil
}

func (x *ClinicalUseIssue_Interaction) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ClinicalUseIssue_Interaction) GetEffect() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Effect
	}
	return nil
}

func (x *ClinicalUseIssue_Interaction) GetIncidence() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Incidence
	}
	return nil
}

func (x *ClinicalUseIssue_Interaction) GetManagement() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Management
	}
	return nil
}

// A possible negative outcome from the use of this treatment
type ClinicalUseIssue_UndesirableEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The situation in which the undesirable effect may manifest
	SymptomConditionEffect *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=symptom_condition_effect,json=symptomConditionEffect,proto3" json:"symptom_condition_effect,omitempty"`
	// High level classification of the effect
	Classification *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=classification,proto3" json:"classification,omitempty"`
	// How often the effect is seen
	FrequencyOfOccurrence *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=frequency_of_occurrence,json=frequencyOfOccurrence,proto3" json:"frequency_of_occurrence,omitempty"`
}

func (x *ClinicalUseIssue_UndesirableEffect) Reset() {
	*x = ClinicalUseIssue_UndesirableEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalUseIssue_UndesirableEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalUseIssue_UndesirableEffect) ProtoMessage() {}

func (x *ClinicalUseIssue_UndesirableEffect) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalUseIssue_UndesirableEffect.ProtoReflect.Descriptor instead.
func (*ClinicalUseIssue_UndesirableEffect) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_rawDescGZIP(), []int{0, 4}
}

func (x *ClinicalUseIssue_UndesirableEffect) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClinicalUseIssue_UndesirableEffect) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClinicalUseIssue_UndesirableEffect) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClinicalUseIssue_UndesirableEffect) GetSymptomConditionEffect() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SymptomConditionEffect
	}
	return nil
}

func (x *ClinicalUseIssue_UndesirableEffect) GetClassification() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Classification
	}
	return nil
}

func (x *ClinicalUseIssue_UndesirableEffect) GetFrequencyOfOccurrence() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.FrequencyOfOccurrence
	}
	return nil
}

// Information about the use of the medicinal product in relation to other
// therapies described as part of the indication
type ClinicalUseIssue_Contraindication_OtherTherapy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The type of relationship between the medicinal product indication or
	// contraindication and another therapy
	TherapyRelationshipType *datatypes_go_proto.CodeableConcept                         `protobuf:"bytes,4,opt,name=therapy_relationship_type,json=therapyRelationshipType,proto3" json:"therapy_relationship_type,omitempty"`
	Medication              *ClinicalUseIssue_Contraindication_OtherTherapy_MedicationX `protobuf:"bytes,5,opt,name=medication,proto3" json:"medication,omitempty"`
}

func (x *ClinicalUseIssue_Contraindication_OtherTherapy) Reset() {
	*x = ClinicalUseIssue_Contraindication_OtherTherapy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalUseIssue_Contraindication_OtherTherapy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalUseIssue_Contraindication_OtherTherapy) ProtoMessage() {}

func (x *ClinicalUseIssue_Contraindication_OtherTherapy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalUseIssue_Contraindication_OtherTherapy.ProtoReflect.Descriptor instead.
func (*ClinicalUseIssue_Contraindication_OtherTherapy) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *ClinicalUseIssue_Contraindication_OtherTherapy) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClinicalUseIssue_Contraindication_OtherTherapy) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClinicalUseIssue_Contraindication_OtherTherapy) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClinicalUseIssue_Contraindication_OtherTherapy) GetTherapyRelationshipType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.TherapyRelationshipType
	}
	return nil
}

func (x *ClinicalUseIssue_Contraindication_OtherTherapy) GetMedication() *ClinicalUseIssue_Contraindication_OtherTherapy_MedicationX {
	if x != nil {
		return x.Medication
	}
	return nil
}

// Reference to a specific medication (active substance, medicinal product
// or class of products) as part of an indication or contraindication
type ClinicalUseIssue_Contraindication_OtherTherapy_MedicationX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*ClinicalUseIssue_Contraindication_OtherTherapy_MedicationX_CodeableConcept
	//	*ClinicalUseIssue_Contraindication_OtherTherapy_MedicationX_Reference
	Choice isClinicalUseIssue_Contraindication_OtherTherapy_MedicationX_Choice `protobuf_oneof:"choice"`
}

func (x *ClinicalUseIssue_Contraindication_OtherTherapy_MedicationX) Reset() {
	*x = ClinicalUseIssue_Contraindication_OtherTherapy_MedicationX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalUseIssue_Contraindication_OtherTherapy_MedicationX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalUseIssue_Contraindication_OtherTherapy_MedicationX) ProtoMessage() {}

func (x *ClinicalUseIssue_Contraindication_OtherTherapy_MedicationX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalUseIssue_Contraindication_OtherTherapy_MedicationX.ProtoReflect.Descriptor instead.
func (*ClinicalUseIssue_Contraindication_OtherTherapy_MedicationX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (m *ClinicalUseIssue_Contraindication_OtherTherapy_MedicationX) GetChoice() isClinicalUseIssue_Contraindication_OtherTherapy_MedicationX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ClinicalUseIssue_Contraindication_OtherTherapy_MedicationX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*ClinicalUseIssue_Contraindication_OtherTherapy_MedicationX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ClinicalUseIssue_Contraindication_OtherTherapy_MedicationX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*ClinicalUseIssue_Contraindication_OtherTherapy_MedicationX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isClinicalUseIssue_Contraindication_OtherTherapy_MedicationX_Choice interface {
	isClinicalUseIssue_Contraindication_OtherTherapy_MedicationX_Choice()
}

type ClinicalUseIssue_Contraindication_OtherTherapy_MedicationX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ClinicalUseIssue_Contraindication_OtherTherapy_MedicationX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*ClinicalUseIssue_Contraindication_OtherTherapy_MedicationX_CodeableConcept) isClinicalUseIssue_Contraindication_OtherTherapy_MedicationX_Choice() {
}

func (*ClinicalUseIssue_Contraindication_OtherTherapy_MedicationX_Reference) isClinicalUseIssue_Contraindication_OtherTherapy_MedicationX_Choice() {
}

// The specific medication, food or laboratory test that interacts
type ClinicalUseIssue_Interaction_Interactant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Item              *ClinicalUseIssue_Interaction_Interactant_ItemX `protobuf:"bytes,4,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ClinicalUseIssue_Interaction_Interactant) Reset() {
	*x = ClinicalUseIssue_Interaction_Interactant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalUseIssue_Interaction_Interactant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalUseIssue_Interaction_Interactant) ProtoMessage() {}

func (x *ClinicalUseIssue_Interaction_Interactant) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalUseIssue_Interaction_Interactant.ProtoReflect.Descriptor instead.
func (*ClinicalUseIssue_Interaction_Interactant) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *ClinicalUseIssue_Interaction_Interactant) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClinicalUseIssue_Interaction_Interactant) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClinicalUseIssue_Interaction_Interactant) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClinicalUseIssue_Interaction_Interactant) GetItem() *ClinicalUseIssue_Interaction_Interactant_ItemX {
	if x != nil {
		return x.Item
	}
	return nil
}

// The specific medication, food or laboratory test that interacts
type ClinicalUseIssue_Interaction_Interactant_ItemX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*ClinicalUseIssue_Interaction_Interactant_ItemX_Reference
	//	*ClinicalUseIssue_Interaction_Interactant_ItemX_CodeableConcept
	Choice isClinicalUseIssue_Interaction_Interactant_ItemX_Choice `protobuf_oneof:"choice"`
}

func (x *ClinicalUseIssue_Interaction_Interactant_ItemX) Reset() {
	*x = ClinicalUseIssue_Interaction_Interactant_ItemX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalUseIssue_Interaction_Interactant_ItemX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalUseIssue_Interaction_Interactant_ItemX) ProtoMessage() {}

func (x *ClinicalUseIssue_Interaction_Interactant_ItemX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalUseIssue_Interaction_Interactant_ItemX.ProtoReflect.Descriptor instead.
func (*ClinicalUseIssue_Interaction_Interactant_ItemX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_rawDescGZIP(), []int{0, 3, 0, 0}
}

func (m *ClinicalUseIssue_Interaction_Interactant_ItemX) GetChoice() isClinicalUseIssue_Interaction_Interactant_ItemX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ClinicalUseIssue_Interaction_Interactant_ItemX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*ClinicalUseIssue_Interaction_Interactant_ItemX_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ClinicalUseIssue_Interaction_Interactant_ItemX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*ClinicalUseIssue_Interaction_Interactant_ItemX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isClinicalUseIssue_Interaction_Interactant_ItemX_Choice interface {
	isClinicalUseIssue_Interaction_Interactant_ItemX_Choice()
}

type ClinicalUseIssue_Interaction_Interactant_ItemX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

type ClinicalUseIssue_Interaction_Interactant_ItemX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*ClinicalUseIssue_Interaction_Interactant_ItemX_Reference) isClinicalUseIssue_Interaction_Interactant_ItemX_Choice() {
}

func (*ClinicalUseIssue_Interaction_Interactant_ItemX_CodeableConcept) isClinicalUseIssue_Interaction_Interactant_ItemX_Choice() {
}

var File_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_rawDesc = []byte{
	0x0a, 0x42, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xee, 0x2a,
	0x0a, 0x10, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0xc8, 0x01, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x8d, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77,
	0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x6f, 0x70,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x12, 0x75, 0x6e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x55, 0x6e,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52,
	0x11, 0x75, 0x6e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x1a, 0xb4, 0x02, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x72, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x75, 0x73, 0x65, 0x2d, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xbb, 0x0a, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x17, 0x64,
	0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x53, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x0a, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x16, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x65,
	0x72, 0x61, 0x70, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x52,
	0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x1a, 0xb7, 0x05,
	0x0a, 0x0c, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x12, 0x27,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x19, 0x74, 0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x5f,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x17, 0x74, 0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x77,
	0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x54, 0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x8d, 0x02, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x58,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x13, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x94, 0x06, 0x0a, 0x0a, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x19,
	0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x17, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x53, 0x79,
	0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x4b,
	0x0a, 0x0e, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x64, 0x69,
	0x73, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6f, 0x72, 0x62, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a,
	0x12, 0x75, 0x6e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x16, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x10, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x52, 0x11, 0x75, 0x6e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x12, 0x68, 0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x68,
	0x65, 0x72, 0x61, 0x70, 0x79, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x68, 0x65, 0x72, 0x61, 0x70, 0x79,
	0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x1a, 0xd9,
	0x08, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3c, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x42, 0x0a,
	0x09, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x44, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xb0, 0x04, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x61, 0x6e, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x58,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x1a, 0x89,
	0x02, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x58, 0x12, 0x9a, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x5a, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x1a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x15, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xd5, 0x03, 0x0a, 0x11, 0x55,
	0x6e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x18, 0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f,
	0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x16,
	0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x4c, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x17, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x15, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x66, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x3a, 0x44, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x38,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x55, 0x73, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x82,
	0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x5f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6, 0xb0,
	0xb5, 0x07, 0x05, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_goTypes = []interface{}{
	(*ClinicalUseIssue)(nil),                                           // 0: google.fhir.r5.core.ClinicalUseIssue
	(*ClinicalUseIssue_TypeCode)(nil),                                  // 1: google.fhir.r5.core.ClinicalUseIssue.TypeCode
	(*ClinicalUseIssue_Contraindication)(nil),                          // 2: google.fhir.r5.core.ClinicalUseIssue.Contraindication
	(*ClinicalUseIssue_Indication)(nil),                                // 3: google.fhir.r5.core.ClinicalUseIssue.Indication
	(*ClinicalUseIssue_Interaction)(nil),                               // 4: google.fhir.r5.core.ClinicalUseIssue.Interaction
	(*ClinicalUseIssue_UndesirableEffect)(nil),                         // 5: google.fhir.r5.core.ClinicalUseIssue.UndesirableEffect
	(*ClinicalUseIssue_Contraindication_OtherTherapy)(nil),             // 6: google.fhir.r5.core.ClinicalUseIssue.Contraindication.OtherTherapy
	(*ClinicalUseIssue_Contraindication_OtherTherapy_MedicationX)(nil), // 7: google.fhir.r5.core.ClinicalUseIssue.Contraindication.OtherTherapy.MedicationX
	(*ClinicalUseIssue_Interaction_Interactant)(nil),                   // 8: google.fhir.r5.core.ClinicalUseIssue.Interaction.Interactant
	(*ClinicalUseIssue_Interaction_Interactant_ItemX)(nil),             // 9: google.fhir.r5.core.ClinicalUseIssue.Interaction.Interactant.ItemX
	(*datatypes_go_proto.Id)(nil),                                      // 10: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                                    // 11: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                     // 12: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                                    // 13: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),                               // 14: google.fhir.r5.core.Narrative
	(*any.Any)(nil),                                                    // 15: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                               // 16: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                              // 17: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.Reference)(nil),                               // 18: google.fhir.r5.core.Reference
	(*datatypes_go_proto.CodeableConcept)(nil),                         // 19: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.Markdown)(nil),                                // 20: google.fhir.r5.core.Markdown
	(*datatypes_go_proto.Population)(nil),                              // 21: google.fhir.r5.core.Population
	(codes_go_proto.ClinicalUseIssueTypeCode_Value)(0),                 // 22: google.fhir.r5.core.ClinicalUseIssueTypeCode.Value
	(*datatypes_go_proto.String)(nil),                                  // 23: google.fhir.r5.core.String
	(*datatypes_go_proto.Quantity)(nil),                                // 24: google.fhir.r5.core.Quantity
}
var file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_depIdxs = []int32{
	10, // 0: google.fhir.r5.core.ClinicalUseIssue.id:type_name -> google.fhir.r5.core.Id
	11, // 1: google.fhir.r5.core.ClinicalUseIssue.meta:type_name -> google.fhir.r5.core.Meta
	12, // 2: google.fhir.r5.core.ClinicalUseIssue.implicit_rules:type_name -> google.fhir.r5.core.Uri
	13, // 3: google.fhir.r5.core.ClinicalUseIssue.language:type_name -> google.fhir.r5.core.Code
	14, // 4: google.fhir.r5.core.ClinicalUseIssue.text:type_name -> google.fhir.r5.core.Narrative
	15, // 5: google.fhir.r5.core.ClinicalUseIssue.contained:type_name -> google.protobuf.Any
	16, // 6: google.fhir.r5.core.ClinicalUseIssue.extension:type_name -> google.fhir.r5.core.Extension
	16, // 7: google.fhir.r5.core.ClinicalUseIssue.modifier_extension:type_name -> google.fhir.r5.core.Extension
	17, // 8: google.fhir.r5.core.ClinicalUseIssue.identifier:type_name -> google.fhir.r5.core.Identifier
	1,  // 9: google.fhir.r5.core.ClinicalUseIssue.type:type_name -> google.fhir.r5.core.ClinicalUseIssue.TypeCode
	18, // 10: google.fhir.r5.core.ClinicalUseIssue.subject:type_name -> google.fhir.r5.core.Reference
	19, // 11: google.fhir.r5.core.ClinicalUseIssue.status:type_name -> google.fhir.r5.core.CodeableConcept
	20, // 12: google.fhir.r5.core.ClinicalUseIssue.description:type_name -> google.fhir.r5.core.Markdown
	2,  // 13: google.fhir.r5.core.ClinicalUseIssue.contraindication:type_name -> google.fhir.r5.core.ClinicalUseIssue.Contraindication
	3,  // 14: google.fhir.r5.core.ClinicalUseIssue.indication:type_name -> google.fhir.r5.core.ClinicalUseIssue.Indication
	4,  // 15: google.fhir.r5.core.ClinicalUseIssue.interaction:type_name -> google.fhir.r5.core.ClinicalUseIssue.Interaction
	21, // 16: google.fhir.r5.core.ClinicalUseIssue.population:type_name -> google.fhir.r5.core.Population
	5,  // 17: google.fhir.r5.core.ClinicalUseIssue.undesirable_effect:type_name -> google.fhir.r5.core.ClinicalUseIssue.UndesirableEffect
	22, // 18: google.fhir.r5.core.ClinicalUseIssue.TypeCode.value:type_name -> google.fhir.r5.core.ClinicalUseIssueTypeCode.Value
	23, // 19: google.fhir.r5.core.ClinicalUseIssue.TypeCode.id:type_name -> google.fhir.r5.core.String
	16, // 20: google.fhir.r5.core.ClinicalUseIssue.TypeCode.extension:type_name -> google.fhir.r5.core.Extension
	10, // 21: google.fhir.r5.core.ClinicalUseIssue.Contraindication.id:type_name -> google.fhir.r5.core.Id
	16, // 22: google.fhir.r5.core.ClinicalUseIssue.Contraindication.extension:type_name -> google.fhir.r5.core.Extension
	16, // 23: google.fhir.r5.core.ClinicalUseIssue.Contraindication.modifier_extension:type_name -> google.fhir.r5.core.Extension
	19, // 24: google.fhir.r5.core.ClinicalUseIssue.Contraindication.disease_symptom_procedure:type_name -> google.fhir.r5.core.CodeableConcept
	19, // 25: google.fhir.r5.core.ClinicalUseIssue.Contraindication.disease_status:type_name -> google.fhir.r5.core.CodeableConcept
	19, // 26: google.fhir.r5.core.ClinicalUseIssue.Contraindication.comorbidity:type_name -> google.fhir.r5.core.CodeableConcept
	18, // 27: google.fhir.r5.core.ClinicalUseIssue.Contraindication.indication:type_name -> google.fhir.r5.core.Reference
	6,  // 28: google.fhir.r5.core.ClinicalUseIssue.Contraindication.other_therapy:type_name -> google.fhir.r5.core.ClinicalUseIssue.Contraindication.OtherTherapy
	10, // 29: google.fhir.r5.core.ClinicalUseIssue.Indication.id:type_name -> google.fhir.r5.core.Id
	16, // 30: google.fhir.r5.core.ClinicalUseIssue.Indication.extension:type_name -> google.fhir.r5.core.Extension
	16, // 31: google.fhir.r5.core.ClinicalUseIssue.Indication.modifier_extension:type_name -> google.fhir.r5.core.Extension
	19, // 32: google.fhir.r5.core.ClinicalUseIssue.Indication.disease_symptom_procedure:type_name -> google.fhir.r5.core.CodeableConcept
	19, // 33: google.fhir.r5.core.ClinicalUseIssue.Indication.disease_status:type_name -> google.fhir.r5.core.CodeableConcept
	19, // 34: google.fhir.r5.core.ClinicalUseIssue.Indication.comorbidity:type_name -> google.fhir.r5.core.CodeableConcept
	19, // 35: google.fhir.r5.core.ClinicalUseIssue.Indication.intended_effect:type_name -> google.fhir.r5.core.CodeableConcept
	24, // 36: google.fhir.r5.core.ClinicalUseIssue.Indication.duration:type_name -> google.fhir.r5.core.Quantity
	18, // 37: google.fhir.r5.core.ClinicalUseIssue.Indication.undesirable_effect:type_name -> google.fhir.r5.core.Reference
	6,  // 38: google.fhir.r5.core.ClinicalUseIssue.Indication.other_therapy:type_name -> google.fhir.r5.core.ClinicalUseIssue.Contraindication.OtherTherapy
	10, // 39: google.fhir.r5.core.ClinicalUseIssue.Interaction.id:type_name -> google.fhir.r5.core.Id
	16, // 40: google.fhir.r5.core.ClinicalUseIssue.Interaction.extension:type_name -> google.fhir.r5.core.Extension
	16, // 41: google.fhir.r5.core.ClinicalUseIssue.Interaction.modifier_extension:type_name -> google.fhir.r5.core.Extension
	8,  // 42: google.fhir.r5.core.ClinicalUseIssue.Interaction.interactant:type_name -> google.fhir.r5.core.ClinicalUseIssue.Interaction.Interactant
	19, // 43: google.fhir.r5.core.ClinicalUseIssue.Interaction.type:type_name -> google.fhir.r5.core.CodeableConcept
	19, // 44: google.fhir.r5.core.ClinicalUseIssue.Interaction.effect:type_name -> google.fhir.r5.core.CodeableConcept
	19, // 45: google.fhir.r5.core.ClinicalUseIssue.Interaction.incidence:type_name -> google.fhir.r5.core.CodeableConcept
	19, // 46: google.fhir.r5.core.ClinicalUseIssue.Interaction.management:type_name -> google.fhir.r5.core.CodeableConcept
	10, // 47: google.fhir.r5.core.ClinicalUseIssue.UndesirableEffect.id:type_name -> google.fhir.r5.core.Id
	16, // 48: google.fhir.r5.core.ClinicalUseIssue.UndesirableEffect.extension:type_name -> google.fhir.r5.core.Extension
	16, // 49: google.fhir.r5.core.ClinicalUseIssue.UndesirableEffect.modifier_extension:type_name -> google.fhir.r5.core.Extension
	19, // 50: google.fhir.r5.core.ClinicalUseIssue.UndesirableEffect.symptom_condition_effect:type_name -> google.fhir.r5.core.CodeableConcept
	19, // 51: google.fhir.r5.core.ClinicalUseIssue.UndesirableEffect.classification:type_name -> google.fhir.r5.core.CodeableConcept
	19, // 52: google.fhir.r5.core.ClinicalUseIssue.UndesirableEffect.frequency_of_occurrence:type_name -> google.fhir.r5.core.CodeableConcept
	10, // 53: google.fhir.r5.core.ClinicalUseIssue.Contraindication.OtherTherapy.id:type_name -> google.fhir.r5.core.Id
	16, // 54: google.fhir.r5.core.ClinicalUseIssue.Contraindication.OtherTherapy.extension:type_name -> google.fhir.r5.core.Extension
	16, // 55: google.fhir.r5.core.ClinicalUseIssue.Contraindication.OtherTherapy.modifier_extension:type_name -> google.fhir.r5.core.Extension
	19, // 56: google.fhir.r5.core.ClinicalUseIssue.Contraindication.OtherTherapy.therapy_relationship_type:type_name -> google.fhir.r5.core.CodeableConcept
	7,  // 57: google.fhir.r5.core.ClinicalUseIssue.Contraindication.OtherTherapy.medication:type_name -> google.fhir.r5.core.ClinicalUseIssue.Contraindication.OtherTherapy.MedicationX
	19, // 58: google.fhir.r5.core.ClinicalUseIssue.Contraindication.OtherTherapy.MedicationX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	18, // 59: google.fhir.r5.core.ClinicalUseIssue.Contraindication.OtherTherapy.MedicationX.reference:type_name -> google.fhir.r5.core.Reference
	10, // 60: google.fhir.r5.core.ClinicalUseIssue.Interaction.Interactant.id:type_name -> google.fhir.r5.core.Id
	16, // 61: google.fhir.r5.core.ClinicalUseIssue.Interaction.Interactant.extension:type_name -> google.fhir.r5.core.Extension
	16, // 62: google.fhir.r5.core.ClinicalUseIssue.Interaction.Interactant.modifier_extension:type_name -> google.fhir.r5.core.Extension
	9,  // 63: google.fhir.r5.core.ClinicalUseIssue.Interaction.Interactant.item:type_name -> google.fhir.r5.core.ClinicalUseIssue.Interaction.Interactant.ItemX
	18, // 64: google.fhir.r5.core.ClinicalUseIssue.Interaction.Interactant.ItemX.reference:type_name -> google.fhir.r5.core.Reference
	19, // 65: google.fhir.r5.core.ClinicalUseIssue.Interaction.Interactant.ItemX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	66, // [66:66] is the sub-list for method output_type
	66, // [66:66] is the sub-list for method input_type
	66, // [66:66] is the sub-list for extension type_name
	66, // [66:66] is the sub-list for extension extendee
	0,  // [0:66] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalUseIssue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalUseIssue_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalUseIssue_Contraindication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalUseIssue_Indication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalUseIssue_Interaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalUseIssue_UndesirableEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalUseIssue_Contraindication_OtherTherapy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalUseIssue_Contraindication_OtherTherapy_MedicationX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalUseIssue_Interaction_Interactant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalUseIssue_Interaction_Interactant_ItemX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ClinicalUseIssue_Contraindication_OtherTherapy_MedicationX_CodeableConcept)(nil),
		(*ClinicalUseIssue_Contraindication_OtherTherapy_MedicationX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ClinicalUseIssue_Interaction_Interactant_ItemX_Reference)(nil),
		(*ClinicalUseIssue_Interaction_Interactant_ItemX_CodeableConcept)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_clinical_use_issue_proto_depIdxs = nil
}

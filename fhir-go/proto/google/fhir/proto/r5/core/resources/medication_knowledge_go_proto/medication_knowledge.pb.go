//    Copyright 2020 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r5/core/resources/medication_knowledge.proto

package medication_knowledge_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for MedicationKnowledge, last updated
// 2019-12-31T21:03:40.621+11:00. Definition of Medication Knowledge. See
// http://hl7.org/fhir/StructureDefinition/MedicationKnowledge
type MedicationKnowledge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier for this medication
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Code that identifies this medication
	Code   *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=code,proto3" json:"code,omitempty"`
	Status *MedicationKnowledge_StatusCode     `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// Manufacturer of the item
	Manufacturer *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// powder | tablets | capsule +
	DoseForm *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=dose_form,json=doseForm,proto3" json:"dose_form,omitempty"`
	// Amount of drug in package
	Amount *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,15,opt,name=amount,proto3" json:"amount,omitempty"`
	// Additional names for a medication
	Synonym                    []*datatypes_go_proto.String                      `protobuf:"bytes,16,rep,name=synonym,proto3" json:"synonym,omitempty"`
	RelatedMedicationKnowledge []*MedicationKnowledge_RelatedMedicationKnowledge `protobuf:"bytes,17,rep,name=related_medication_knowledge,json=relatedMedicationKnowledge,proto3" json:"related_medication_knowledge,omitempty"`
	// A medication resource that is associated with this medication
	AssociatedMedication []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=associated_medication,json=associatedMedication,proto3" json:"associated_medication,omitempty"`
	// Category of the medication or product
	ProductType []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,19,rep,name=product_type,json=productType,proto3" json:"product_type,omitempty"`
	Monograph   []*MedicationKnowledge_Monograph      `protobuf:"bytes,20,rep,name=monograph,proto3" json:"monograph,omitempty"`
	Ingredient  []*MedicationKnowledge_Ingredient     `protobuf:"bytes,21,rep,name=ingredient,proto3" json:"ingredient,omitempty"`
	// A device associated with the medication (for example, a drug coated
	// catheter or a drug impregnated dressing)
	Device []*datatypes_go_proto.Reference `protobuf:"bytes,22,rep,name=device,proto3" json:"device,omitempty"`
	// The instructions for preparing the medication
	PreparationInstruction *datatypes_go_proto.Markdown `protobuf:"bytes,23,opt,name=preparation_instruction,json=preparationInstruction,proto3" json:"preparation_instruction,omitempty"`
	// The intended or approved route of administration
	IntendedRoute           []*datatypes_go_proto.CodeableConcept          `protobuf:"bytes,24,rep,name=intended_route,json=intendedRoute,proto3" json:"intended_route,omitempty"`
	Cost                    []*MedicationKnowledge_Cost                    `protobuf:"bytes,25,rep,name=cost,proto3" json:"cost,omitempty"`
	MonitoringProgram       []*MedicationKnowledge_MonitoringProgram       `protobuf:"bytes,26,rep,name=monitoring_program,json=monitoringProgram,proto3" json:"monitoring_program,omitempty"`
	AdministrationGuideline []*MedicationKnowledge_AdministrationGuideline `protobuf:"bytes,27,rep,name=administration_guideline,json=administrationGuideline,proto3" json:"administration_guideline,omitempty"`
	MedicineClassification  []*MedicationKnowledge_MedicineClassification  `protobuf:"bytes,28,rep,name=medicine_classification,json=medicineClassification,proto3" json:"medicine_classification,omitempty"`
	Packaging               *MedicationKnowledge_Packaging                 `protobuf:"bytes,29,opt,name=packaging,proto3" json:"packaging,omitempty"`
	DrugCharacteristic      []*MedicationKnowledge_DrugCharacteristic      `protobuf:"bytes,30,rep,name=drug_characteristic,json=drugCharacteristic,proto3" json:"drug_characteristic,omitempty"`
	// Potential clinical issue with or between medication(s)
	ClinicalUseIssue      []*datatypes_go_proto.Reference              `protobuf:"bytes,31,rep,name=clinical_use_issue,json=clinicalUseIssue,proto3" json:"clinical_use_issue,omitempty"`
	Regulatory            []*MedicationKnowledge_Regulatory            `protobuf:"bytes,32,rep,name=regulatory,proto3" json:"regulatory,omitempty"`
	KineticCharacteristic []*MedicationKnowledge_KineticCharacteristic `protobuf:"bytes,33,rep,name=kinetic_characteristic,json=kineticCharacteristic,proto3" json:"kinetic_characteristic,omitempty"`
}

func (x *MedicationKnowledge) Reset() {
	*x = MedicationKnowledge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge) ProtoMessage() {}

func (x *MedicationKnowledge) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0}
}

func (x *MedicationKnowledge) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *MedicationKnowledge) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *MedicationKnowledge) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *MedicationKnowledge) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MedicationKnowledge) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *MedicationKnowledge) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *MedicationKnowledge) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *MedicationKnowledge) GetStatus() *MedicationKnowledge_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MedicationKnowledge) GetManufacturer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *MedicationKnowledge) GetDoseForm() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DoseForm
	}
	return nil
}

func (x *MedicationKnowledge) GetAmount() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *MedicationKnowledge) GetSynonym() []*datatypes_go_proto.String {
	if x != nil {
		return x.Synonym
	}
	return nil
}

func (x *MedicationKnowledge) GetRelatedMedicationKnowledge() []*MedicationKnowledge_RelatedMedicationKnowledge {
	if x != nil {
		return x.RelatedMedicationKnowledge
	}
	return nil
}

func (x *MedicationKnowledge) GetAssociatedMedication() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.AssociatedMedication
	}
	return nil
}

func (x *MedicationKnowledge) GetProductType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ProductType
	}
	return nil
}

func (x *MedicationKnowledge) GetMonograph() []*MedicationKnowledge_Monograph {
	if x != nil {
		return x.Monograph
	}
	return nil
}

func (x *MedicationKnowledge) GetIngredient() []*MedicationKnowledge_Ingredient {
	if x != nil {
		return x.Ingredient
	}
	return nil
}

func (x *MedicationKnowledge) GetDevice() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *MedicationKnowledge) GetPreparationInstruction() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.PreparationInstruction
	}
	return nil
}

func (x *MedicationKnowledge) GetIntendedRoute() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.IntendedRoute
	}
	return nil
}

func (x *MedicationKnowledge) GetCost() []*MedicationKnowledge_Cost {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *MedicationKnowledge) GetMonitoringProgram() []*MedicationKnowledge_MonitoringProgram {
	if x != nil {
		return x.MonitoringProgram
	}
	return nil
}

func (x *MedicationKnowledge) GetAdministrationGuideline() []*MedicationKnowledge_AdministrationGuideline {
	if x != nil {
		return x.AdministrationGuideline
	}
	return nil
}

func (x *MedicationKnowledge) GetMedicineClassification() []*MedicationKnowledge_MedicineClassification {
	if x != nil {
		return x.MedicineClassification
	}
	return nil
}

func (x *MedicationKnowledge) GetPackaging() *MedicationKnowledge_Packaging {
	if x != nil {
		return x.Packaging
	}
	return nil
}

func (x *MedicationKnowledge) GetDrugCharacteristic() []*MedicationKnowledge_DrugCharacteristic {
	if x != nil {
		return x.DrugCharacteristic
	}
	return nil
}

func (x *MedicationKnowledge) GetClinicalUseIssue() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ClinicalUseIssue
	}
	return nil
}

func (x *MedicationKnowledge) GetRegulatory() []*MedicationKnowledge_Regulatory {
	if x != nil {
		return x.Regulatory
	}
	return nil
}

func (x *MedicationKnowledge) GetKineticCharacteristic() []*MedicationKnowledge_KineticCharacteristic {
	if x != nil {
		return x.KineticCharacteristic
	}
	return nil
}

// active | inactive | entered-in-error
type MedicationKnowledge_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.MedicationKnowledgeStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.MedicationKnowledgeStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                    `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MedicationKnowledge_StatusCode) Reset() {
	*x = MedicationKnowledge_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_StatusCode) ProtoMessage() {}

func (x *MedicationKnowledge_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_StatusCode.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MedicationKnowledge_StatusCode) GetValue() codes_go_proto.MedicationKnowledgeStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.MedicationKnowledgeStatusCode_INVALID_UNINITIALIZED
}

func (x *MedicationKnowledge_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Associated or related medication information
type MedicationKnowledge_RelatedMedicationKnowledge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Category of medicationKnowledge
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Associated documentation about the associated medication knowledge
	Reference []*datatypes_go_proto.Reference `protobuf:"bytes,5,rep,name=reference,proto3" json:"reference,omitempty"`
}

func (x *MedicationKnowledge_RelatedMedicationKnowledge) Reset() {
	*x = MedicationKnowledge_RelatedMedicationKnowledge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_RelatedMedicationKnowledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_RelatedMedicationKnowledge) ProtoMessage() {}

func (x *MedicationKnowledge_RelatedMedicationKnowledge) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_RelatedMedicationKnowledge.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_RelatedMedicationKnowledge) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 1}
}

func (x *MedicationKnowledge_RelatedMedicationKnowledge) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_RelatedMedicationKnowledge) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_RelatedMedicationKnowledge) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_RelatedMedicationKnowledge) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationKnowledge_RelatedMedicationKnowledge) GetReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

// Associated documentation about the medication
type MedicationKnowledge_Monograph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The category of medication document
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Associated documentation about the medication
	Source *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *MedicationKnowledge_Monograph) Reset() {
	*x = MedicationKnowledge_Monograph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_Monograph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_Monograph) ProtoMessage() {}

func (x *MedicationKnowledge_Monograph) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_Monograph.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_Monograph) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 2}
}

func (x *MedicationKnowledge_Monograph) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_Monograph) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_Monograph) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_Monograph) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationKnowledge_Monograph) GetSource() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Source
	}
	return nil
}

// Active or inactive ingredient
type MedicationKnowledge_Ingredient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Item              *MedicationKnowledge_Ingredient_ItemX `protobuf:"bytes,4,opt,name=item,proto3" json:"item,omitempty"`
	// Active ingredient indicator
	IsActive *datatypes_go_proto.Boolean               `protobuf:"bytes,5,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	Strength *MedicationKnowledge_Ingredient_StrengthX `protobuf:"bytes,6,opt,name=strength,proto3" json:"strength,omitempty"`
}

func (x *MedicationKnowledge_Ingredient) Reset() {
	*x = MedicationKnowledge_Ingredient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_Ingredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_Ingredient) ProtoMessage() {}

func (x *MedicationKnowledge_Ingredient) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_Ingredient.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_Ingredient) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 3}
}

func (x *MedicationKnowledge_Ingredient) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_Ingredient) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_Ingredient) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_Ingredient) GetItem() *MedicationKnowledge_Ingredient_ItemX {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *MedicationKnowledge_Ingredient) GetIsActive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.IsActive
	}
	return nil
}

func (x *MedicationKnowledge_Ingredient) GetStrength() *MedicationKnowledge_Ingredient_StrengthX {
	if x != nil {
		return x.Strength
	}
	return nil
}

// The pricing of the medication
type MedicationKnowledge_Cost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The category of the cost information
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// The source or owner for the price information
	Source *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	// The price of the medication
	Cost *datatypes_go_proto.Money `protobuf:"bytes,6,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (x *MedicationKnowledge_Cost) Reset() {
	*x = MedicationKnowledge_Cost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_Cost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_Cost) ProtoMessage() {}

func (x *MedicationKnowledge_Cost) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_Cost.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_Cost) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 4}
}

func (x *MedicationKnowledge_Cost) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_Cost) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_Cost) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_Cost) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationKnowledge_Cost) GetSource() *datatypes_go_proto.String {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *MedicationKnowledge_Cost) GetCost() *datatypes_go_proto.Money {
	if x != nil {
		return x.Cost
	}
	return nil
}

// Program under which a medication is reviewed
type MedicationKnowledge_MonitoringProgram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of program under which the medication is monitored
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Name of the reviewing program
	Name *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MedicationKnowledge_MonitoringProgram) Reset() {
	*x = MedicationKnowledge_MonitoringProgram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_MonitoringProgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_MonitoringProgram) ProtoMessage() {}

func (x *MedicationKnowledge_MonitoringProgram) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_MonitoringProgram.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_MonitoringProgram) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 5}
}

func (x *MedicationKnowledge_MonitoringProgram) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_MonitoringProgram) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_MonitoringProgram) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_MonitoringProgram) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationKnowledge_MonitoringProgram) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

// Guidelines or protocols for administration of the medication
type MedicationKnowledge_AdministrationGuideline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension     []*datatypes_go_proto.Extension                                      `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Dosage                []*MedicationKnowledge_AdministrationGuideline_Dosage                `protobuf:"bytes,4,rep,name=dosage,proto3" json:"dosage,omitempty"`
	Indication            *MedicationKnowledge_AdministrationGuideline_IndicationX             `protobuf:"bytes,5,opt,name=indication,proto3" json:"indication,omitempty"`
	PatientCharacteristic []*MedicationKnowledge_AdministrationGuideline_PatientCharacteristic `protobuf:"bytes,6,rep,name=patient_characteristic,json=patientCharacteristic,proto3" json:"patient_characteristic,omitempty"`
}

func (x *MedicationKnowledge_AdministrationGuideline) Reset() {
	*x = MedicationKnowledge_AdministrationGuideline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_AdministrationGuideline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_AdministrationGuideline) ProtoMessage() {}

func (x *MedicationKnowledge_AdministrationGuideline) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_AdministrationGuideline.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_AdministrationGuideline) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 6}
}

func (x *MedicationKnowledge_AdministrationGuideline) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_AdministrationGuideline) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_AdministrationGuideline) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_AdministrationGuideline) GetDosage() []*MedicationKnowledge_AdministrationGuideline_Dosage {
	if x != nil {
		return x.Dosage
	}
	return nil
}

func (x *MedicationKnowledge_AdministrationGuideline) GetIndication() *MedicationKnowledge_AdministrationGuideline_IndicationX {
	if x != nil {
		return x.Indication
	}
	return nil
}

func (x *MedicationKnowledge_AdministrationGuideline) GetPatientCharacteristic() []*MedicationKnowledge_AdministrationGuideline_PatientCharacteristic {
	if x != nil {
		return x.PatientCharacteristic
	}
	return nil
}

// Categorization of the medication within a formulary or classification
// system
type MedicationKnowledge_MedicineClassification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The type of category for the medication (for example, therapeutic
	// classification, therapeutic sub-classification)
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Specific category assigned to the medication
	Classification []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,rep,name=classification,proto3" json:"classification,omitempty"`
}

func (x *MedicationKnowledge_MedicineClassification) Reset() {
	*x = MedicationKnowledge_MedicineClassification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_MedicineClassification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_MedicineClassification) ProtoMessage() {}

func (x *MedicationKnowledge_MedicineClassification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_MedicineClassification.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_MedicineClassification) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 7}
}

func (x *MedicationKnowledge_MedicineClassification) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_MedicineClassification) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_MedicineClassification) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_MedicineClassification) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationKnowledge_MedicineClassification) GetClassification() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Classification
	}
	return nil
}

// Details about packaged medications
type MedicationKnowledge_Packaging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A code that defines the specific type of packaging that the medication
	// can be found in
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// The number of product units the package would contain if fully loaded
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// The device used to administer the medication (e.g. scoop, applicator,
	// syringe)
	Device *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=device,proto3" json:"device,omitempty"`
	// Material type of the package item
	Material *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=material,proto3" json:"material,omitempty"`
	// Allows packages within packages
	Packaging []*MedicationKnowledge_Packaging `protobuf:"bytes,8,rep,name=packaging,proto3" json:"packaging,omitempty"`
}

func (x *MedicationKnowledge_Packaging) Reset() {
	*x = MedicationKnowledge_Packaging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_Packaging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_Packaging) ProtoMessage() {}

func (x *MedicationKnowledge_Packaging) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_Packaging.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_Packaging) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 8}
}

func (x *MedicationKnowledge_Packaging) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_Packaging) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_Packaging) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_Packaging) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationKnowledge_Packaging) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *MedicationKnowledge_Packaging) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *MedicationKnowledge_Packaging) GetMaterial() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Material
	}
	return nil
}

func (x *MedicationKnowledge_Packaging) GetPackaging() []*MedicationKnowledge_Packaging {
	if x != nil {
		return x.Packaging
	}
	return nil
}

// Specifies descriptive properties of the medicine
type MedicationKnowledge_DrugCharacteristic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Code specifying the type of characteristic of medication
	Type  *datatypes_go_proto.CodeableConcept            `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Value *MedicationKnowledge_DrugCharacteristic_ValueX `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MedicationKnowledge_DrugCharacteristic) Reset() {
	*x = MedicationKnowledge_DrugCharacteristic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_DrugCharacteristic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_DrugCharacteristic) ProtoMessage() {}

func (x *MedicationKnowledge_DrugCharacteristic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_DrugCharacteristic.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_DrugCharacteristic) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 9}
}

func (x *MedicationKnowledge_DrugCharacteristic) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_DrugCharacteristic) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_DrugCharacteristic) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_DrugCharacteristic) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationKnowledge_DrugCharacteristic) GetValue() *MedicationKnowledge_DrugCharacteristic_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// Regulatory information about a medication
type MedicationKnowledge_Regulatory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Specifies the authority of the regulation
	RegulatoryAuthority *datatypes_go_proto.Reference                  `protobuf:"bytes,4,opt,name=regulatory_authority,json=regulatoryAuthority,proto3" json:"regulatory_authority,omitempty"`
	Substitution        []*MedicationKnowledge_Regulatory_Substitution `protobuf:"bytes,5,rep,name=substitution,proto3" json:"substitution,omitempty"`
	// Specifies the schedule of a medication in jurisdiction
	Schedule    []*datatypes_go_proto.CodeableConcept       `protobuf:"bytes,6,rep,name=schedule,proto3" json:"schedule,omitempty"`
	MaxDispense *MedicationKnowledge_Regulatory_MaxDispense `protobuf:"bytes,7,opt,name=max_dispense,json=maxDispense,proto3" json:"max_dispense,omitempty"`
}

func (x *MedicationKnowledge_Regulatory) Reset() {
	*x = MedicationKnowledge_Regulatory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_Regulatory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_Regulatory) ProtoMessage() {}

func (x *MedicationKnowledge_Regulatory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_Regulatory.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_Regulatory) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 10}
}

func (x *MedicationKnowledge_Regulatory) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory) GetRegulatoryAuthority() *datatypes_go_proto.Reference {
	if x != nil {
		return x.RegulatoryAuthority
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory) GetSubstitution() []*MedicationKnowledge_Regulatory_Substitution {
	if x != nil {
		return x.Substitution
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory) GetSchedule() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory) GetMaxDispense() *MedicationKnowledge_Regulatory_MaxDispense {
	if x != nil {
		return x.MaxDispense
	}
	return nil
}

// The time course of drug absorption, distribution, metabolism and excretion
// of a medication from the body
type MedicationKnowledge_KineticCharacteristic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Code specifying the type of kinetics
	Type  *datatypes_go_proto.CodeableConcept               `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Value *MedicationKnowledge_KineticCharacteristic_ValueX `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MedicationKnowledge_KineticCharacteristic) Reset() {
	*x = MedicationKnowledge_KineticCharacteristic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_KineticCharacteristic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_KineticCharacteristic) ProtoMessage() {}

func (x *MedicationKnowledge_KineticCharacteristic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_KineticCharacteristic.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_KineticCharacteristic) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 11}
}

func (x *MedicationKnowledge_KineticCharacteristic) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_KineticCharacteristic) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_KineticCharacteristic) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_KineticCharacteristic) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationKnowledge_KineticCharacteristic) GetValue() *MedicationKnowledge_KineticCharacteristic_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// Medication(s) or MedicinalProductIngredient(s) contained in the
// medication
type MedicationKnowledge_Ingredient_ItemX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*MedicationKnowledge_Ingredient_ItemX_CodeableConcept
	//	*MedicationKnowledge_Ingredient_ItemX_Reference
	Choice isMedicationKnowledge_Ingredient_ItemX_Choice `protobuf_oneof:"choice"`
}

func (x *MedicationKnowledge_Ingredient_ItemX) Reset() {
	*x = MedicationKnowledge_Ingredient_ItemX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_Ingredient_ItemX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_Ingredient_ItemX) ProtoMessage() {}

func (x *MedicationKnowledge_Ingredient_ItemX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_Ingredient_ItemX.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_Ingredient_ItemX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (m *MedicationKnowledge_Ingredient_ItemX) GetChoice() isMedicationKnowledge_Ingredient_ItemX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *MedicationKnowledge_Ingredient_ItemX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*MedicationKnowledge_Ingredient_ItemX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MedicationKnowledge_Ingredient_ItemX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*MedicationKnowledge_Ingredient_ItemX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isMedicationKnowledge_Ingredient_ItemX_Choice interface {
	isMedicationKnowledge_Ingredient_ItemX_Choice()
}

type MedicationKnowledge_Ingredient_ItemX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MedicationKnowledge_Ingredient_ItemX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*MedicationKnowledge_Ingredient_ItemX_CodeableConcept) isMedicationKnowledge_Ingredient_ItemX_Choice() {
}

func (*MedicationKnowledge_Ingredient_ItemX_Reference) isMedicationKnowledge_Ingredient_ItemX_Choice() {
}

// Quantity of ingredient present
type MedicationKnowledge_Ingredient_StrengthX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*MedicationKnowledge_Ingredient_StrengthX_Ratio
	//	*MedicationKnowledge_Ingredient_StrengthX_CodeableConcept
	//	*MedicationKnowledge_Ingredient_StrengthX_Quantity
	Choice isMedicationKnowledge_Ingredient_StrengthX_Choice `protobuf_oneof:"choice"`
}

func (x *MedicationKnowledge_Ingredient_StrengthX) Reset() {
	*x = MedicationKnowledge_Ingredient_StrengthX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_Ingredient_StrengthX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_Ingredient_StrengthX) ProtoMessage() {}

func (x *MedicationKnowledge_Ingredient_StrengthX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_Ingredient_StrengthX.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_Ingredient_StrengthX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (m *MedicationKnowledge_Ingredient_StrengthX) GetChoice() isMedicationKnowledge_Ingredient_StrengthX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *MedicationKnowledge_Ingredient_StrengthX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*MedicationKnowledge_Ingredient_StrengthX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *MedicationKnowledge_Ingredient_StrengthX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*MedicationKnowledge_Ingredient_StrengthX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MedicationKnowledge_Ingredient_StrengthX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*MedicationKnowledge_Ingredient_StrengthX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isMedicationKnowledge_Ingredient_StrengthX_Choice interface {
	isMedicationKnowledge_Ingredient_StrengthX_Choice()
}

type MedicationKnowledge_Ingredient_StrengthX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,1,opt,name=ratio,proto3,oneof"`
}

type MedicationKnowledge_Ingredient_StrengthX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MedicationKnowledge_Ingredient_StrengthX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,3,opt,name=quantity,proto3,oneof"`
}

func (*MedicationKnowledge_Ingredient_StrengthX_Ratio) isMedicationKnowledge_Ingredient_StrengthX_Choice() {
}

func (*MedicationKnowledge_Ingredient_StrengthX_CodeableConcept) isMedicationKnowledge_Ingredient_StrengthX_Choice() {
}

func (*MedicationKnowledge_Ingredient_StrengthX_Quantity) isMedicationKnowledge_Ingredient_StrengthX_Choice() {
}

// Dosage for the medication for the specific guidelines
type MedicationKnowledge_AdministrationGuideline_Dosage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Category of dosage for a medication
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Dosage for the medication for the specific guidelines
	Dosage []*datatypes_go_proto.Dosage `protobuf:"bytes,5,rep,name=dosage,proto3" json:"dosage,omitempty"`
}

func (x *MedicationKnowledge_AdministrationGuideline_Dosage) Reset() {
	*x = MedicationKnowledge_AdministrationGuideline_Dosage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_AdministrationGuideline_Dosage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_AdministrationGuideline_Dosage) ProtoMessage() {}

func (x *MedicationKnowledge_AdministrationGuideline_Dosage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_AdministrationGuideline_Dosage.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_AdministrationGuideline_Dosage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 6, 0}
}

func (x *MedicationKnowledge_AdministrationGuideline_Dosage) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_AdministrationGuideline_Dosage) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_AdministrationGuideline_Dosage) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_AdministrationGuideline_Dosage) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationKnowledge_AdministrationGuideline_Dosage) GetDosage() []*datatypes_go_proto.Dosage {
	if x != nil {
		return x.Dosage
	}
	return nil
}

// Indication for use that apply to the specific administration guidelines
type MedicationKnowledge_AdministrationGuideline_IndicationX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*MedicationKnowledge_AdministrationGuideline_IndicationX_CodeableConcept
	//	*MedicationKnowledge_AdministrationGuideline_IndicationX_Reference
	Choice isMedicationKnowledge_AdministrationGuideline_IndicationX_Choice `protobuf_oneof:"choice"`
}

func (x *MedicationKnowledge_AdministrationGuideline_IndicationX) Reset() {
	*x = MedicationKnowledge_AdministrationGuideline_IndicationX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_AdministrationGuideline_IndicationX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_AdministrationGuideline_IndicationX) ProtoMessage() {}

func (x *MedicationKnowledge_AdministrationGuideline_IndicationX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_AdministrationGuideline_IndicationX.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_AdministrationGuideline_IndicationX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 6, 1}
}

func (m *MedicationKnowledge_AdministrationGuideline_IndicationX) GetChoice() isMedicationKnowledge_AdministrationGuideline_IndicationX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *MedicationKnowledge_AdministrationGuideline_IndicationX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*MedicationKnowledge_AdministrationGuideline_IndicationX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MedicationKnowledge_AdministrationGuideline_IndicationX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*MedicationKnowledge_AdministrationGuideline_IndicationX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isMedicationKnowledge_AdministrationGuideline_IndicationX_Choice interface {
	isMedicationKnowledge_AdministrationGuideline_IndicationX_Choice()
}

type MedicationKnowledge_AdministrationGuideline_IndicationX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MedicationKnowledge_AdministrationGuideline_IndicationX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*MedicationKnowledge_AdministrationGuideline_IndicationX_CodeableConcept) isMedicationKnowledge_AdministrationGuideline_IndicationX_Choice() {
}

func (*MedicationKnowledge_AdministrationGuideline_IndicationX_Reference) isMedicationKnowledge_AdministrationGuideline_IndicationX_Choice() {
}

// Characteristics of the patient that are relevant to the administration
// guidelines
type MedicationKnowledge_AdministrationGuideline_PatientCharacteristic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                                                    `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Characteristic    *MedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX `protobuf:"bytes,4,opt,name=characteristic,proto3" json:"characteristic,omitempty"`
	// The specific characteristic
	Value []*datatypes_go_proto.String `protobuf:"bytes,5,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *MedicationKnowledge_AdministrationGuideline_PatientCharacteristic) Reset() {
	*x = MedicationKnowledge_AdministrationGuideline_PatientCharacteristic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_AdministrationGuideline_PatientCharacteristic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_AdministrationGuideline_PatientCharacteristic) ProtoMessage() {}

func (x *MedicationKnowledge_AdministrationGuideline_PatientCharacteristic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_AdministrationGuideline_PatientCharacteristic.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_AdministrationGuideline_PatientCharacteristic) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 6, 2}
}

func (x *MedicationKnowledge_AdministrationGuideline_PatientCharacteristic) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_AdministrationGuideline_PatientCharacteristic) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_AdministrationGuideline_PatientCharacteristic) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_AdministrationGuideline_PatientCharacteristic) GetCharacteristic() *MedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX {
	if x != nil {
		return x.Characteristic
	}
	return nil
}

func (x *MedicationKnowledge_AdministrationGuideline_PatientCharacteristic) GetValue() []*datatypes_go_proto.String {
	if x != nil {
		return x.Value
	}
	return nil
}

// Specific characteristic that is relevant to the administration
// guideline
type MedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*MedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX_CodeableConcept
	//	*MedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX_Quantity
	Choice isMedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX_Choice `protobuf_oneof:"choice"`
}

func (x *MedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX) Reset() {
	*x = MedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX) ProtoMessage() {
}

func (x *MedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 6, 2, 0}
}

func (m *MedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX) GetChoice() isMedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *MedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*MedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x, ok := x.GetChoice().(*MedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isMedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX_Choice interface {
	isMedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX_Choice()
}

type MedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX_Quantity struct {
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,2,opt,name=quantity,proto3,oneof"`
}

func (*MedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX_CodeableConcept) isMedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX_Choice() {
}

func (*MedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX_Quantity) isMedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX_Choice() {
}

// Description of the characteristic
type MedicationKnowledge_DrugCharacteristic_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*MedicationKnowledge_DrugCharacteristic_ValueX_CodeableConcept
	//	*MedicationKnowledge_DrugCharacteristic_ValueX_StringValue
	//	*MedicationKnowledge_DrugCharacteristic_ValueX_Quantity
	//	*MedicationKnowledge_DrugCharacteristic_ValueX_Base64Binary
	//	*MedicationKnowledge_DrugCharacteristic_ValueX_Attachment
	Choice isMedicationKnowledge_DrugCharacteristic_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *MedicationKnowledge_DrugCharacteristic_ValueX) Reset() {
	*x = MedicationKnowledge_DrugCharacteristic_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_DrugCharacteristic_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_DrugCharacteristic_ValueX) ProtoMessage() {}

func (x *MedicationKnowledge_DrugCharacteristic_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_DrugCharacteristic_ValueX.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_DrugCharacteristic_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 9, 0}
}

func (m *MedicationKnowledge_DrugCharacteristic_ValueX) GetChoice() isMedicationKnowledge_DrugCharacteristic_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *MedicationKnowledge_DrugCharacteristic_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*MedicationKnowledge_DrugCharacteristic_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MedicationKnowledge_DrugCharacteristic_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*MedicationKnowledge_DrugCharacteristic_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *MedicationKnowledge_DrugCharacteristic_ValueX) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x, ok := x.GetChoice().(*MedicationKnowledge_DrugCharacteristic_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *MedicationKnowledge_DrugCharacteristic_ValueX) GetBase64Binary() *datatypes_go_proto.Base64Binary {
	if x, ok := x.GetChoice().(*MedicationKnowledge_DrugCharacteristic_ValueX_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (x *MedicationKnowledge_DrugCharacteristic_ValueX) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetChoice().(*MedicationKnowledge_DrugCharacteristic_ValueX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

type isMedicationKnowledge_DrugCharacteristic_ValueX_Choice interface {
	isMedicationKnowledge_DrugCharacteristic_ValueX_Choice()
}

type MedicationKnowledge_DrugCharacteristic_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MedicationKnowledge_DrugCharacteristic_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

type MedicationKnowledge_DrugCharacteristic_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,3,opt,name=quantity,proto3,oneof"`
}

type MedicationKnowledge_DrugCharacteristic_ValueX_Base64Binary struct {
	Base64Binary *datatypes_go_proto.Base64Binary `protobuf:"bytes,4,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type MedicationKnowledge_DrugCharacteristic_ValueX_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,5,opt,name=attachment,proto3,oneof"`
}

func (*MedicationKnowledge_DrugCharacteristic_ValueX_CodeableConcept) isMedicationKnowledge_DrugCharacteristic_ValueX_Choice() {
}

func (*MedicationKnowledge_DrugCharacteristic_ValueX_StringValue) isMedicationKnowledge_DrugCharacteristic_ValueX_Choice() {
}

func (*MedicationKnowledge_DrugCharacteristic_ValueX_Quantity) isMedicationKnowledge_DrugCharacteristic_ValueX_Choice() {
}

func (*MedicationKnowledge_DrugCharacteristic_ValueX_Base64Binary) isMedicationKnowledge_DrugCharacteristic_ValueX_Choice() {
}

func (*MedicationKnowledge_DrugCharacteristic_ValueX_Attachment) isMedicationKnowledge_DrugCharacteristic_ValueX_Choice() {
}

// Specifies if changes are allowed when dispensing a medication from a
// regulatory perspective
type MedicationKnowledge_Regulatory_Substitution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Specifies the type of substitution allowed
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Specifies if regulation allows for changes in the medication when
	// dispensing
	Allowed *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=allowed,proto3" json:"allowed,omitempty"`
}

func (x *MedicationKnowledge_Regulatory_Substitution) Reset() {
	*x = MedicationKnowledge_Regulatory_Substitution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_Regulatory_Substitution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_Regulatory_Substitution) ProtoMessage() {}

func (x *MedicationKnowledge_Regulatory_Substitution) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_Regulatory_Substitution.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_Regulatory_Substitution) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 10, 0}
}

func (x *MedicationKnowledge_Regulatory_Substitution) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory_Substitution) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory_Substitution) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory_Substitution) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory_Substitution) GetAllowed() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Allowed
	}
	return nil
}

// The maximum number of units of the medication that can be dispensed in a
// period
type MedicationKnowledge_Regulatory_MaxDispense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The maximum number of units of the medication that can be dispensed
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// The period that applies to the maximum number of units
	Period *datatypes_go_proto.Duration `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *MedicationKnowledge_Regulatory_MaxDispense) Reset() {
	*x = MedicationKnowledge_Regulatory_MaxDispense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_Regulatory_MaxDispense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_Regulatory_MaxDispense) ProtoMessage() {}

func (x *MedicationKnowledge_Regulatory_MaxDispense) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_Regulatory_MaxDispense.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_Regulatory_MaxDispense) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 10, 1}
}

func (x *MedicationKnowledge_Regulatory_MaxDispense) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory_MaxDispense) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory_MaxDispense) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory_MaxDispense) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *MedicationKnowledge_Regulatory_MaxDispense) GetPeriod() *datatypes_go_proto.Duration {
	if x != nil {
		return x.Period
	}
	return nil
}

// Description of the characteristic
type MedicationKnowledge_KineticCharacteristic_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*MedicationKnowledge_KineticCharacteristic_ValueX_Quantity
	//	*MedicationKnowledge_KineticCharacteristic_ValueX_Duration
	Choice isMedicationKnowledge_KineticCharacteristic_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *MedicationKnowledge_KineticCharacteristic_ValueX) Reset() {
	*x = MedicationKnowledge_KineticCharacteristic_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledge_KineticCharacteristic_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledge_KineticCharacteristic_ValueX) ProtoMessage() {}

func (x *MedicationKnowledge_KineticCharacteristic_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledge_KineticCharacteristic_ValueX.ProtoReflect.Descriptor instead.
func (*MedicationKnowledge_KineticCharacteristic_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP(), []int{0, 11, 0}
}

func (m *MedicationKnowledge_KineticCharacteristic_ValueX) GetChoice() isMedicationKnowledge_KineticCharacteristic_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *MedicationKnowledge_KineticCharacteristic_ValueX) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x, ok := x.GetChoice().(*MedicationKnowledge_KineticCharacteristic_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *MedicationKnowledge_KineticCharacteristic_ValueX) GetDuration() *datatypes_go_proto.Duration {
	if x, ok := x.GetChoice().(*MedicationKnowledge_KineticCharacteristic_ValueX_Duration); ok {
		return x.Duration
	}
	return nil
}

type isMedicationKnowledge_KineticCharacteristic_ValueX_Choice interface {
	isMedicationKnowledge_KineticCharacteristic_ValueX_Choice()
}

type MedicationKnowledge_KineticCharacteristic_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type MedicationKnowledge_KineticCharacteristic_ValueX_Duration struct {
	Duration *datatypes_go_proto.Duration `protobuf:"bytes,2,opt,name=duration,proto3,oneof"`
}

func (*MedicationKnowledge_KineticCharacteristic_ValueX_Quantity) isMedicationKnowledge_KineticCharacteristic_ValueX_Choice() {
}

func (*MedicationKnowledge_KineticCharacteristic_ValueX_Duration) isMedicationKnowledge_KineticCharacteristic_ValueX_Choice() {
}

var File_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDesc = []byte{
	0x0a, 0x44, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa2, 0x50, 0x0a, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x09,
	0x64, 0x6f, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12,
	0x3b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x07,
	0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x79, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x12, 0x85, 0x01, 0x0a, 0x1c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52,
	0x1a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x65, 0x0a, 0x15, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x10, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x6d,
	0x6f, 0x6e, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x53, 0x0a,
	0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x44, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x0c, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x16, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4b, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x41, 0x0a,
	0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74,
	0x12, 0x69, 0x0a, 0x12, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x7b, 0x0a, 0x18, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x75,
	0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x17, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x78, 0x0a, 0x17, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x12, 0x6c, 0x0a, 0x13, 0x64, 0x72, 0x75, 0x67, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x1e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x44, 0x72, 0x75, 0x67,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x12,
	0x64, 0x72, 0x75, 0x67, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x12, 0x64, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x75,
	0x73, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x16,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73,
	0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x55, 0x73, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x75, 0x0a,
	0x16, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x4b, 0x69, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x15, 0x6b,
	0x69, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x1a, 0xbe, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x75,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x37, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xf3, 0x02, 0x0a, 0x1a, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x1f, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x13, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0xcc, 0x02, 0x0a, 0x09,
	0x4d, 0x6f, 0x6e, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xd4, 0x06, 0x0a, 0x0a, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x55, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x59, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x58, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a, 0xbe, 0x01, 0x0a,
	0x05, 0x49, 0x74, 0x65, 0x6d, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x50, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x10, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83,
	0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xe1, 0x01,
	0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x58, 0x12, 0x32, 0x0a, 0x05, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48,
	0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x1a, 0xeb, 0x02, 0x0a, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x1a,
	0xb4, 0x02, 0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x93, 0x0d, 0x0a, 0x17, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x06, 0x64, 0x6f, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x06, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6c, 0x0a, 0x0a, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x52, 0x0a, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8d, 0x01, 0x0a, 0x16, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x15, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x1a, 0xbd, 0x02, 0x0a, 0x06, 0x44, 0x6f, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x64, 0x6f,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x06, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x1a, 0xca, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x56, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x16, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x10, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x1a, 0xd5, 0x04, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x27,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x96, 0x01, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x66, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0e, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x31, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0xb9, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8,
	0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xde, 0x02, 0x0a,
	0x16, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x4c, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x96, 0x04,
	0x0a, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0c, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x50, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x1a, 0xdb, 0x05, 0x0a, 0x12, 0x44, 0x72, 0x75, 0x67, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x27, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x44, 0x72, 0x75, 0x67, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xfa, 0x02, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x41, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12,
	0x41, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x1a, 0xca, 0x09, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x14, 0x72, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x18, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x62,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x52,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4d, 0x61, 0x78, 0x44, 0x69, 0x73,
	0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e,
	0x73, 0x65, 0x1a, 0xc6, 0x02, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x1a, 0xc3, 0x02, 0x0a, 0x0b,
	0x4d, 0x61, 0x78, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x47, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x1a, 0x81, 0x04, 0x0a, 0x15, 0x4b, 0x69, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x27, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x4b, 0x69, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x58, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x9a, 0x01, 0x0a, 0x06, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x58, 0x12, 0x41, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x47, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x4a, 0x04,
	0x08, 0x07, 0x10, 0x08, 0x42, 0x84, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x50, 0x01, 0x5a, 0x61, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x67, 0x6f, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x05, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_goTypes = []interface{}{
	(*MedicationKnowledge)(nil),                                                               // 0: google.fhir.r5.core.MedicationKnowledge
	(*MedicationKnowledge_StatusCode)(nil),                                                    // 1: google.fhir.r5.core.MedicationKnowledge.StatusCode
	(*MedicationKnowledge_RelatedMedicationKnowledge)(nil),                                    // 2: google.fhir.r5.core.MedicationKnowledge.RelatedMedicationKnowledge
	(*MedicationKnowledge_Monograph)(nil),                                                     // 3: google.fhir.r5.core.MedicationKnowledge.Monograph
	(*MedicationKnowledge_Ingredient)(nil),                                                    // 4: google.fhir.r5.core.MedicationKnowledge.Ingredient
	(*MedicationKnowledge_Cost)(nil),                                                          // 5: google.fhir.r5.core.MedicationKnowledge.Cost
	(*MedicationKnowledge_MonitoringProgram)(nil),                                             // 6: google.fhir.r5.core.MedicationKnowledge.MonitoringProgram
	(*MedicationKnowledge_AdministrationGuideline)(nil),                                       // 7: google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline
	(*MedicationKnowledge_MedicineClassification)(nil),                                        // 8: google.fhir.r5.core.MedicationKnowledge.MedicineClassification
	(*MedicationKnowledge_Packaging)(nil),                                                     // 9: google.fhir.r5.core.MedicationKnowledge.Packaging
	(*MedicationKnowledge_DrugCharacteristic)(nil),                                            // 10: google.fhir.r5.core.MedicationKnowledge.DrugCharacteristic
	(*MedicationKnowledge_Regulatory)(nil),                                                    // 11: google.fhir.r5.core.MedicationKnowledge.Regulatory
	(*MedicationKnowledge_KineticCharacteristic)(nil),                                         // 12: google.fhir.r5.core.MedicationKnowledge.KineticCharacteristic
	(*MedicationKnowledge_Ingredient_ItemX)(nil),                                              // 13: google.fhir.r5.core.MedicationKnowledge.Ingredient.ItemX
	(*MedicationKnowledge_Ingredient_StrengthX)(nil),                                          // 14: google.fhir.r5.core.MedicationKnowledge.Ingredient.StrengthX
	(*MedicationKnowledge_AdministrationGuideline_Dosage)(nil),                                // 15: google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.Dosage
	(*MedicationKnowledge_AdministrationGuideline_IndicationX)(nil),                           // 16: google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.IndicationX
	(*MedicationKnowledge_AdministrationGuideline_PatientCharacteristic)(nil),                 // 17: google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.PatientCharacteristic
	(*MedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX)(nil), // 18: google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.PatientCharacteristic.CharacteristicX
	(*MedicationKnowledge_DrugCharacteristic_ValueX)(nil),                                     // 19: google.fhir.r5.core.MedicationKnowledge.DrugCharacteristic.ValueX
	(*MedicationKnowledge_Regulatory_Substitution)(nil),                                       // 20: google.fhir.r5.core.MedicationKnowledge.Regulatory.Substitution
	(*MedicationKnowledge_Regulatory_MaxDispense)(nil),                                        // 21: google.fhir.r5.core.MedicationKnowledge.Regulatory.MaxDispense
	(*MedicationKnowledge_KineticCharacteristic_ValueX)(nil),                                  // 22: google.fhir.r5.core.MedicationKnowledge.KineticCharacteristic.ValueX
	(*datatypes_go_proto.Id)(nil),                                                             // 23: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                                                           // 24: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                                            // 25: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                                                           // 26: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),                                                      // 27: google.fhir.r5.core.Narrative
	(*any.Any)(nil),                                                                           // 28: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                                                      // 29: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                                                     // 30: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.CodeableConcept)(nil),                                                // 31: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.Reference)(nil),                                                      // 32: google.fhir.r5.core.Reference
	(*datatypes_go_proto.SimpleQuantity)(nil),                                                 // 33: google.fhir.r5.core.SimpleQuantity
	(*datatypes_go_proto.String)(nil),                                                         // 34: google.fhir.r5.core.String
	(*datatypes_go_proto.Markdown)(nil),                                                       // 35: google.fhir.r5.core.Markdown
	(codes_go_proto.MedicationKnowledgeStatusCode_Value)(0),                                   // 36: google.fhir.r5.core.MedicationKnowledgeStatusCode.Value
	(*datatypes_go_proto.Boolean)(nil),                                                        // 37: google.fhir.r5.core.Boolean
	(*datatypes_go_proto.Money)(nil),                                                          // 38: google.fhir.r5.core.Money
	(*datatypes_go_proto.Ratio)(nil),                                                          // 39: google.fhir.r5.core.Ratio
	(*datatypes_go_proto.Quantity)(nil),                                                       // 40: google.fhir.r5.core.Quantity
	(*datatypes_go_proto.Dosage)(nil),                                                         // 41: google.fhir.r5.core.Dosage
	(*datatypes_go_proto.Base64Binary)(nil),                                                   // 42: google.fhir.r5.core.Base64Binary
	(*datatypes_go_proto.Attachment)(nil),                                                     // 43: google.fhir.r5.core.Attachment
	(*datatypes_go_proto.Duration)(nil),                                                       // 44: google.fhir.r5.core.Duration
}
var file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_depIdxs = []int32{
	23,  // 0: google.fhir.r5.core.MedicationKnowledge.id:type_name -> google.fhir.r5.core.Id
	24,  // 1: google.fhir.r5.core.MedicationKnowledge.meta:type_name -> google.fhir.r5.core.Meta
	25,  // 2: google.fhir.r5.core.MedicationKnowledge.implicit_rules:type_name -> google.fhir.r5.core.Uri
	26,  // 3: google.fhir.r5.core.MedicationKnowledge.language:type_name -> google.fhir.r5.core.Code
	27,  // 4: google.fhir.r5.core.MedicationKnowledge.text:type_name -> google.fhir.r5.core.Narrative
	28,  // 5: google.fhir.r5.core.MedicationKnowledge.contained:type_name -> google.protobuf.Any
	29,  // 6: google.fhir.r5.core.MedicationKnowledge.extension:type_name -> google.fhir.r5.core.Extension
	29,  // 7: google.fhir.r5.core.MedicationKnowledge.modifier_extension:type_name -> google.fhir.r5.core.Extension
	30,  // 8: google.fhir.r5.core.MedicationKnowledge.identifier:type_name -> google.fhir.r5.core.Identifier
	31,  // 9: google.fhir.r5.core.MedicationKnowledge.code:type_name -> google.fhir.r5.core.CodeableConcept
	1,   // 10: google.fhir.r5.core.MedicationKnowledge.status:type_name -> google.fhir.r5.core.MedicationKnowledge.StatusCode
	32,  // 11: google.fhir.r5.core.MedicationKnowledge.manufacturer:type_name -> google.fhir.r5.core.Reference
	31,  // 12: google.fhir.r5.core.MedicationKnowledge.dose_form:type_name -> google.fhir.r5.core.CodeableConcept
	33,  // 13: google.fhir.r5.core.MedicationKnowledge.amount:type_name -> google.fhir.r5.core.SimpleQuantity
	34,  // 14: google.fhir.r5.core.MedicationKnowledge.synonym:type_name -> google.fhir.r5.core.String
	2,   // 15: google.fhir.r5.core.MedicationKnowledge.related_medication_knowledge:type_name -> google.fhir.r5.core.MedicationKnowledge.RelatedMedicationKnowledge
	32,  // 16: google.fhir.r5.core.MedicationKnowledge.associated_medication:type_name -> google.fhir.r5.core.Reference
	31,  // 17: google.fhir.r5.core.MedicationKnowledge.product_type:type_name -> google.fhir.r5.core.CodeableConcept
	3,   // 18: google.fhir.r5.core.MedicationKnowledge.monograph:type_name -> google.fhir.r5.core.MedicationKnowledge.Monograph
	4,   // 19: google.fhir.r5.core.MedicationKnowledge.ingredient:type_name -> google.fhir.r5.core.MedicationKnowledge.Ingredient
	32,  // 20: google.fhir.r5.core.MedicationKnowledge.device:type_name -> google.fhir.r5.core.Reference
	35,  // 21: google.fhir.r5.core.MedicationKnowledge.preparation_instruction:type_name -> google.fhir.r5.core.Markdown
	31,  // 22: google.fhir.r5.core.MedicationKnowledge.intended_route:type_name -> google.fhir.r5.core.CodeableConcept
	5,   // 23: google.fhir.r5.core.MedicationKnowledge.cost:type_name -> google.fhir.r5.core.MedicationKnowledge.Cost
	6,   // 24: google.fhir.r5.core.MedicationKnowledge.monitoring_program:type_name -> google.fhir.r5.core.MedicationKnowledge.MonitoringProgram
	7,   // 25: google.fhir.r5.core.MedicationKnowledge.administration_guideline:type_name -> google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline
	8,   // 26: google.fhir.r5.core.MedicationKnowledge.medicine_classification:type_name -> google.fhir.r5.core.MedicationKnowledge.MedicineClassification
	9,   // 27: google.fhir.r5.core.MedicationKnowledge.packaging:type_name -> google.fhir.r5.core.MedicationKnowledge.Packaging
	10,  // 28: google.fhir.r5.core.MedicationKnowledge.drug_characteristic:type_name -> google.fhir.r5.core.MedicationKnowledge.DrugCharacteristic
	32,  // 29: google.fhir.r5.core.MedicationKnowledge.clinical_use_issue:type_name -> google.fhir.r5.core.Reference
	11,  // 30: google.fhir.r5.core.MedicationKnowledge.regulatory:type_name -> google.fhir.r5.core.MedicationKnowledge.Regulatory
	12,  // 31: google.fhir.r5.core.MedicationKnowledge.kinetic_characteristic:type_name -> google.fhir.r5.core.MedicationKnowledge.KineticCharacteristic
	36,  // 32: google.fhir.r5.core.MedicationKnowledge.StatusCode.value:type_name -> google.fhir.r5.core.MedicationKnowledgeStatusCode.Value
	34,  // 33: google.fhir.r5.core.MedicationKnowledge.StatusCode.id:type_name -> google.fhir.r5.core.String
	29,  // 34: google.fhir.r5.core.MedicationKnowledge.StatusCode.extension:type_name -> google.fhir.r5.core.Extension
	23,  // 35: google.fhir.r5.core.MedicationKnowledge.RelatedMedicationKnowledge.id:type_name -> google.fhir.r5.core.Id
	29,  // 36: google.fhir.r5.core.MedicationKnowledge.RelatedMedicationKnowledge.extension:type_name -> google.fhir.r5.core.Extension
	29,  // 37: google.fhir.r5.core.MedicationKnowledge.RelatedMedicationKnowledge.modifier_extension:type_name -> google.fhir.r5.core.Extension
	31,  // 38: google.fhir.r5.core.MedicationKnowledge.RelatedMedicationKnowledge.type:type_name -> google.fhir.r5.core.CodeableConcept
	32,  // 39: google.fhir.r5.core.MedicationKnowledge.RelatedMedicationKnowledge.reference:type_name -> google.fhir.r5.core.Reference
	23,  // 40: google.fhir.r5.core.MedicationKnowledge.Monograph.id:type_name -> google.fhir.r5.core.Id
	29,  // 41: google.fhir.r5.core.MedicationKnowledge.Monograph.extension:type_name -> google.fhir.r5.core.Extension
	29,  // 42: google.fhir.r5.core.MedicationKnowledge.Monograph.modifier_extension:type_name -> google.fhir.r5.core.Extension
	31,  // 43: google.fhir.r5.core.MedicationKnowledge.Monograph.type:type_name -> google.fhir.r5.core.CodeableConcept
	32,  // 44: google.fhir.r5.core.MedicationKnowledge.Monograph.source:type_name -> google.fhir.r5.core.Reference
	23,  // 45: google.fhir.r5.core.MedicationKnowledge.Ingredient.id:type_name -> google.fhir.r5.core.Id
	29,  // 46: google.fhir.r5.core.MedicationKnowledge.Ingredient.extension:type_name -> google.fhir.r5.core.Extension
	29,  // 47: google.fhir.r5.core.MedicationKnowledge.Ingredient.modifier_extension:type_name -> google.fhir.r5.core.Extension
	13,  // 48: google.fhir.r5.core.MedicationKnowledge.Ingredient.item:type_name -> google.fhir.r5.core.MedicationKnowledge.Ingredient.ItemX
	37,  // 49: google.fhir.r5.core.MedicationKnowledge.Ingredient.is_active:type_name -> google.fhir.r5.core.Boolean
	14,  // 50: google.fhir.r5.core.MedicationKnowledge.Ingredient.strength:type_name -> google.fhir.r5.core.MedicationKnowledge.Ingredient.StrengthX
	23,  // 51: google.fhir.r5.core.MedicationKnowledge.Cost.id:type_name -> google.fhir.r5.core.Id
	29,  // 52: google.fhir.r5.core.MedicationKnowledge.Cost.extension:type_name -> google.fhir.r5.core.Extension
	29,  // 53: google.fhir.r5.core.MedicationKnowledge.Cost.modifier_extension:type_name -> google.fhir.r5.core.Extension
	31,  // 54: google.fhir.r5.core.MedicationKnowledge.Cost.type:type_name -> google.fhir.r5.core.CodeableConcept
	34,  // 55: google.fhir.r5.core.MedicationKnowledge.Cost.source:type_name -> google.fhir.r5.core.String
	38,  // 56: google.fhir.r5.core.MedicationKnowledge.Cost.cost:type_name -> google.fhir.r5.core.Money
	23,  // 57: google.fhir.r5.core.MedicationKnowledge.MonitoringProgram.id:type_name -> google.fhir.r5.core.Id
	29,  // 58: google.fhir.r5.core.MedicationKnowledge.MonitoringProgram.extension:type_name -> google.fhir.r5.core.Extension
	29,  // 59: google.fhir.r5.core.MedicationKnowledge.MonitoringProgram.modifier_extension:type_name -> google.fhir.r5.core.Extension
	31,  // 60: google.fhir.r5.core.MedicationKnowledge.MonitoringProgram.type:type_name -> google.fhir.r5.core.CodeableConcept
	34,  // 61: google.fhir.r5.core.MedicationKnowledge.MonitoringProgram.name:type_name -> google.fhir.r5.core.String
	23,  // 62: google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.id:type_name -> google.fhir.r5.core.Id
	29,  // 63: google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.extension:type_name -> google.fhir.r5.core.Extension
	29,  // 64: google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.modifier_extension:type_name -> google.fhir.r5.core.Extension
	15,  // 65: google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.dosage:type_name -> google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.Dosage
	16,  // 66: google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.indication:type_name -> google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.IndicationX
	17,  // 67: google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.patient_characteristic:type_name -> google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.PatientCharacteristic
	23,  // 68: google.fhir.r5.core.MedicationKnowledge.MedicineClassification.id:type_name -> google.fhir.r5.core.Id
	29,  // 69: google.fhir.r5.core.MedicationKnowledge.MedicineClassification.extension:type_name -> google.fhir.r5.core.Extension
	29,  // 70: google.fhir.r5.core.MedicationKnowledge.MedicineClassification.modifier_extension:type_name -> google.fhir.r5.core.Extension
	31,  // 71: google.fhir.r5.core.MedicationKnowledge.MedicineClassification.type:type_name -> google.fhir.r5.core.CodeableConcept
	31,  // 72: google.fhir.r5.core.MedicationKnowledge.MedicineClassification.classification:type_name -> google.fhir.r5.core.CodeableConcept
	23,  // 73: google.fhir.r5.core.MedicationKnowledge.Packaging.id:type_name -> google.fhir.r5.core.Id
	29,  // 74: google.fhir.r5.core.MedicationKnowledge.Packaging.extension:type_name -> google.fhir.r5.core.Extension
	29,  // 75: google.fhir.r5.core.MedicationKnowledge.Packaging.modifier_extension:type_name -> google.fhir.r5.core.Extension
	31,  // 76: google.fhir.r5.core.MedicationKnowledge.Packaging.type:type_name -> google.fhir.r5.core.CodeableConcept
	33,  // 77: google.fhir.r5.core.MedicationKnowledge.Packaging.quantity:type_name -> google.fhir.r5.core.SimpleQuantity
	32,  // 78: google.fhir.r5.core.MedicationKnowledge.Packaging.device:type_name -> google.fhir.r5.core.Reference
	31,  // 79: google.fhir.r5.core.MedicationKnowledge.Packaging.material:type_name -> google.fhir.r5.core.CodeableConcept
	9,   // 80: google.fhir.r5.core.MedicationKnowledge.Packaging.packaging:type_name -> google.fhir.r5.core.MedicationKnowledge.Packaging
	23,  // 81: google.fhir.r5.core.MedicationKnowledge.DrugCharacteristic.id:type_name -> google.fhir.r5.core.Id
	29,  // 82: google.fhir.r5.core.MedicationKnowledge.DrugCharacteristic.extension:type_name -> google.fhir.r5.core.Extension
	29,  // 83: google.fhir.r5.core.MedicationKnowledge.DrugCharacteristic.modifier_extension:type_name -> google.fhir.r5.core.Extension
	31,  // 84: google.fhir.r5.core.MedicationKnowledge.DrugCharacteristic.type:type_name -> google.fhir.r5.core.CodeableConcept
	19,  // 85: google.fhir.r5.core.MedicationKnowledge.DrugCharacteristic.value:type_name -> google.fhir.r5.core.MedicationKnowledge.DrugCharacteristic.ValueX
	23,  // 86: google.fhir.r5.core.MedicationKnowledge.Regulatory.id:type_name -> google.fhir.r5.core.Id
	29,  // 87: google.fhir.r5.core.MedicationKnowledge.Regulatory.extension:type_name -> google.fhir.r5.core.Extension
	29,  // 88: google.fhir.r5.core.MedicationKnowledge.Regulatory.modifier_extension:type_name -> google.fhir.r5.core.Extension
	32,  // 89: google.fhir.r5.core.MedicationKnowledge.Regulatory.regulatory_authority:type_name -> google.fhir.r5.core.Reference
	20,  // 90: google.fhir.r5.core.MedicationKnowledge.Regulatory.substitution:type_name -> google.fhir.r5.core.MedicationKnowledge.Regulatory.Substitution
	31,  // 91: google.fhir.r5.core.MedicationKnowledge.Regulatory.schedule:type_name -> google.fhir.r5.core.CodeableConcept
	21,  // 92: google.fhir.r5.core.MedicationKnowledge.Regulatory.max_dispense:type_name -> google.fhir.r5.core.MedicationKnowledge.Regulatory.MaxDispense
	23,  // 93: google.fhir.r5.core.MedicationKnowledge.KineticCharacteristic.id:type_name -> google.fhir.r5.core.Id
	29,  // 94: google.fhir.r5.core.MedicationKnowledge.KineticCharacteristic.extension:type_name -> google.fhir.r5.core.Extension
	29,  // 95: google.fhir.r5.core.MedicationKnowledge.KineticCharacteristic.modifier_extension:type_name -> google.fhir.r5.core.Extension
	31,  // 96: google.fhir.r5.core.MedicationKnowledge.KineticCharacteristic.type:type_name -> google.fhir.r5.core.CodeableConcept
	22,  // 97: google.fhir.r5.core.MedicationKnowledge.KineticCharacteristic.value:type_name -> google.fhir.r5.core.MedicationKnowledge.KineticCharacteristic.ValueX
	31,  // 98: google.fhir.r5.core.MedicationKnowledge.Ingredient.ItemX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	32,  // 99: google.fhir.r5.core.MedicationKnowledge.Ingredient.ItemX.reference:type_name -> google.fhir.r5.core.Reference
	39,  // 100: google.fhir.r5.core.MedicationKnowledge.Ingredient.StrengthX.ratio:type_name -> google.fhir.r5.core.Ratio
	31,  // 101: google.fhir.r5.core.MedicationKnowledge.Ingredient.StrengthX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	40,  // 102: google.fhir.r5.core.MedicationKnowledge.Ingredient.StrengthX.quantity:type_name -> google.fhir.r5.core.Quantity
	23,  // 103: google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.Dosage.id:type_name -> google.fhir.r5.core.Id
	29,  // 104: google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.Dosage.extension:type_name -> google.fhir.r5.core.Extension
	29,  // 105: google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.Dosage.modifier_extension:type_name -> google.fhir.r5.core.Extension
	31,  // 106: google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.Dosage.type:type_name -> google.fhir.r5.core.CodeableConcept
	41,  // 107: google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.Dosage.dosage:type_name -> google.fhir.r5.core.Dosage
	31,  // 108: google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.IndicationX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	32,  // 109: google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.IndicationX.reference:type_name -> google.fhir.r5.core.Reference
	23,  // 110: google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.PatientCharacteristic.id:type_name -> google.fhir.r5.core.Id
	29,  // 111: google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.PatientCharacteristic.extension:type_name -> google.fhir.r5.core.Extension
	29,  // 112: google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.PatientCharacteristic.modifier_extension:type_name -> google.fhir.r5.core.Extension
	18,  // 113: google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.PatientCharacteristic.characteristic:type_name -> google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.PatientCharacteristic.CharacteristicX
	34,  // 114: google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.PatientCharacteristic.value:type_name -> google.fhir.r5.core.String
	31,  // 115: google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.PatientCharacteristic.CharacteristicX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	33,  // 116: google.fhir.r5.core.MedicationKnowledge.AdministrationGuideline.PatientCharacteristic.CharacteristicX.quantity:type_name -> google.fhir.r5.core.SimpleQuantity
	31,  // 117: google.fhir.r5.core.MedicationKnowledge.DrugCharacteristic.ValueX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	34,  // 118: google.fhir.r5.core.MedicationKnowledge.DrugCharacteristic.ValueX.string_value:type_name -> google.fhir.r5.core.String
	33,  // 119: google.fhir.r5.core.MedicationKnowledge.DrugCharacteristic.ValueX.quantity:type_name -> google.fhir.r5.core.SimpleQuantity
	42,  // 120: google.fhir.r5.core.MedicationKnowledge.DrugCharacteristic.ValueX.base64_binary:type_name -> google.fhir.r5.core.Base64Binary
	43,  // 121: google.fhir.r5.core.MedicationKnowledge.DrugCharacteristic.ValueX.attachment:type_name -> google.fhir.r5.core.Attachment
	23,  // 122: google.fhir.r5.core.MedicationKnowledge.Regulatory.Substitution.id:type_name -> google.fhir.r5.core.Id
	29,  // 123: google.fhir.r5.core.MedicationKnowledge.Regulatory.Substitution.extension:type_name -> google.fhir.r5.core.Extension
	29,  // 124: google.fhir.r5.core.MedicationKnowledge.Regulatory.Substitution.modifier_extension:type_name -> google.fhir.r5.core.Extension
	31,  // 125: google.fhir.r5.core.MedicationKnowledge.Regulatory.Substitution.type:type_name -> google.fhir.r5.core.CodeableConcept
	37,  // 126: google.fhir.r5.core.MedicationKnowledge.Regulatory.Substitution.allowed:type_name -> google.fhir.r5.core.Boolean
	23,  // 127: google.fhir.r5.core.MedicationKnowledge.Regulatory.MaxDispense.id:type_name -> google.fhir.r5.core.Id
	29,  // 128: google.fhir.r5.core.MedicationKnowledge.Regulatory.MaxDispense.extension:type_name -> google.fhir.r5.core.Extension
	29,  // 129: google.fhir.r5.core.MedicationKnowledge.Regulatory.MaxDispense.modifier_extension:type_name -> google.fhir.r5.core.Extension
	33,  // 130: google.fhir.r5.core.MedicationKnowledge.Regulatory.MaxDispense.quantity:type_name -> google.fhir.r5.core.SimpleQuantity
	44,  // 131: google.fhir.r5.core.MedicationKnowledge.Regulatory.MaxDispense.period:type_name -> google.fhir.r5.core.Duration
	33,  // 132: google.fhir.r5.core.MedicationKnowledge.KineticCharacteristic.ValueX.quantity:type_name -> google.fhir.r5.core.SimpleQuantity
	44,  // 133: google.fhir.r5.core.MedicationKnowledge.KineticCharacteristic.ValueX.duration:type_name -> google.fhir.r5.core.Duration
	134, // [134:134] is the sub-list for method output_type
	134, // [134:134] is the sub-list for method input_type
	134, // [134:134] is the sub-list for extension type_name
	134, // [134:134] is the sub-list for extension extendee
	0,   // [0:134] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_RelatedMedicationKnowledge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_Monograph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_Ingredient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_Cost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_MonitoringProgram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_AdministrationGuideline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_MedicineClassification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_Packaging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_DrugCharacteristic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_Regulatory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_KineticCharacteristic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_Ingredient_ItemX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_Ingredient_StrengthX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_AdministrationGuideline_Dosage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_AdministrationGuideline_IndicationX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_AdministrationGuideline_PatientCharacteristic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_DrugCharacteristic_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_Regulatory_Substitution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_Regulatory_MaxDispense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledge_KineticCharacteristic_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*MedicationKnowledge_Ingredient_ItemX_CodeableConcept)(nil),
		(*MedicationKnowledge_Ingredient_ItemX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*MedicationKnowledge_Ingredient_StrengthX_Ratio)(nil),
		(*MedicationKnowledge_Ingredient_StrengthX_CodeableConcept)(nil),
		(*MedicationKnowledge_Ingredient_StrengthX_Quantity)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*MedicationKnowledge_AdministrationGuideline_IndicationX_CodeableConcept)(nil),
		(*MedicationKnowledge_AdministrationGuideline_IndicationX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*MedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX_CodeableConcept)(nil),
		(*MedicationKnowledge_AdministrationGuideline_PatientCharacteristic_CharacteristicX_Quantity)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*MedicationKnowledge_DrugCharacteristic_ValueX_CodeableConcept)(nil),
		(*MedicationKnowledge_DrugCharacteristic_ValueX_StringValue)(nil),
		(*MedicationKnowledge_DrugCharacteristic_ValueX_Quantity)(nil),
		(*MedicationKnowledge_DrugCharacteristic_ValueX_Base64Binary)(nil),
		(*MedicationKnowledge_DrugCharacteristic_ValueX_Attachment)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*MedicationKnowledge_KineticCharacteristic_ValueX_Quantity)(nil),
		(*MedicationKnowledge_KineticCharacteristic_ValueX_Duration)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_medication_knowledge_proto_depIdxs = nil
}

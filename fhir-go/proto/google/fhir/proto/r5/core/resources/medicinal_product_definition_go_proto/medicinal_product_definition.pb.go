//    Copyright 2020 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r5/core/resources/medicinal_product_definition.proto

package medicinal_product_definition_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for MedicinalProductDefinition, last
// updated 2019-12-31T21:03:40.621+11:00. Detailed definition of a medicinal
// product, typically for uses other than direct patient care (e.g. regulatory
// use). See http://hl7.org/fhir/StructureDefinition/MedicinalProductDefinition
type MedicinalProductDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier for this product. Could be an MPID
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Regulatory type, e.g. Investigational or Authorized
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	// If this medicine applies to human or veterinary uses
	Domain *datatypes_go_proto.Coding `protobuf:"bytes,12,opt,name=domain,proto3" json:"domain,omitempty"`
	// A business level identifier of the product
	Version *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=version,proto3" json:"version,omitempty"`
	// The status within the lifecycle of this product. A high level status, this
	// is not intended to duplicate details carried elswhere such as legal status,
	// or authorization status
	Status *datatypes_go_proto.Coding `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	// General description of this product
	Description *datatypes_go_proto.Markdown `protobuf:"bytes,15,opt,name=description,proto3" json:"description,omitempty"`
	// The dose form for a single part product, or combined form of a multiple
	// part product
	CombinedPharmaceuticalDoseForm *datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,opt,name=combined_pharmaceutical_dose_form,json=combinedPharmaceuticalDoseForm,proto3" json:"combined_pharmaceutical_dose_form,omitempty"`
	// General combined description of indication(s) for this product. See also
	// MedicinalProductDefinitionIndication
	Indication *datatypes_go_proto.Markdown `protobuf:"bytes,17,opt,name=indication,proto3" json:"indication,omitempty"`
	// The legal status of supply of the medicinal product as classified by the
	// regulator
	LegalStatusOfSupply *datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,opt,name=legal_status_of_supply,json=legalStatusOfSupply,proto3" json:"legal_status_of_supply,omitempty"`
	// Whether the Medicinal Product is subject to additional monitoring for
	// regulatory reasons
	AdditionalMonitoringIndicator *datatypes_go_proto.CodeableConcept `protobuf:"bytes,19,opt,name=additional_monitoring_indicator,json=additionalMonitoringIndicator,proto3" json:"additional_monitoring_indicator,omitempty"`
	// Whether the Medicinal Product is subject to special measures for regulatory
	// reasons
	SpecialMeasures []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,rep,name=special_measures,json=specialMeasures,proto3" json:"special_measures,omitempty"`
	// If authorised for use in children
	PaediatricUseIndicator *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=paediatric_use_indicator,json=paediatricUseIndicator,proto3" json:"paediatric_use_indicator,omitempty"`
	// Allows the product to be classified by various systems
	ProductClassification []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,22,rep,name=product_classification,json=productClassification,proto3" json:"product_classification,omitempty"`
	// Marketing status of the medicinal product, in contrast to marketing
	// authorizaton
	MarketingStatus []*datatypes_go_proto.MarketingStatus `protobuf:"bytes,23,rep,name=marketing_status,json=marketingStatus,proto3" json:"marketing_status,omitempty"`
	// Pharmaceutical aspects of product
	PharmaceuticalProduct []*datatypes_go_proto.Reference `protobuf:"bytes,24,rep,name=pharmaceutical_product,json=pharmaceuticalProduct,proto3" json:"pharmaceutical_product,omitempty"`
	// Package representation for the product
	PackagedMedicinalProduct []*datatypes_go_proto.Reference `protobuf:"bytes,25,rep,name=packaged_medicinal_product,json=packagedMedicinalProduct,proto3" json:"packaged_medicinal_product,omitempty"`
	// The ingredients of this medicinal product - when not specified elsewhere.
	// This is only needed if the ingredients are not specified by the
	// pharmaceuticalProduct or packagedMedicinalProduct references above. In
	// cases where those levels of detail are not used, the ingredients may be
	// specified directly here
	Ingredient []*datatypes_go_proto.Reference `protobuf:"bytes,26,rep,name=ingredient,proto3" json:"ingredient,omitempty"`
	// Supporting documentation, typically for regulatory submission
	AttachedDocument []*datatypes_go_proto.Reference `protobuf:"bytes,27,rep,name=attached_document,json=attachedDocument,proto3" json:"attached_document,omitempty"`
	// A master file for to the medicinal product (e.g. Pharmacovigilance System
	// Master File)
	MasterFile []*datatypes_go_proto.Reference       `protobuf:"bytes,28,rep,name=master_file,json=masterFile,proto3" json:"master_file,omitempty"`
	Contact    []*MedicinalProductDefinition_Contact `protobuf:"bytes,29,rep,name=contact,proto3" json:"contact,omitempty"`
	// Clinical trials or studies that this product is involved in
	ClinicalTrial                  []*datatypes_go_proto.Reference                              `protobuf:"bytes,30,rep,name=clinical_trial,json=clinicalTrial,proto3" json:"clinical_trial,omitempty"`
	Name                           []*MedicinalProductDefinition_Name                           `protobuf:"bytes,31,rep,name=name,proto3" json:"name,omitempty"`
	CrossReference                 []*MedicinalProductDefinition_CrossReference                 `protobuf:"bytes,32,rep,name=cross_reference,json=crossReference,proto3" json:"cross_reference,omitempty"`
	ManufacturingBusinessOperation []*MedicinalProductDefinition_ManufacturingBusinessOperation `protobuf:"bytes,33,rep,name=manufacturing_business_operation,json=manufacturingBusinessOperation,proto3" json:"manufacturing_business_operation,omitempty"`
}

func (x *MedicinalProductDefinition) Reset() {
	*x = MedicinalProductDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductDefinition) ProtoMessage() {}

func (x *MedicinalProductDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductDefinition.ProtoReflect.Descriptor instead.
func (*MedicinalProductDefinition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescGZIP(), []int{0}
}

func (x *MedicinalProductDefinition) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProductDefinition) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *MedicinalProductDefinition) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *MedicinalProductDefinition) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *MedicinalProductDefinition) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MedicinalProductDefinition) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *MedicinalProductDefinition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProductDefinition) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProductDefinition) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *MedicinalProductDefinition) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicinalProductDefinition) GetDomain() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *MedicinalProductDefinition) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *MedicinalProductDefinition) GetStatus() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MedicinalProductDefinition) GetDescription() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *MedicinalProductDefinition) GetCombinedPharmaceuticalDoseForm() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.CombinedPharmaceuticalDoseForm
	}
	return nil
}

func (x *MedicinalProductDefinition) GetIndication() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Indication
	}
	return nil
}

func (x *MedicinalProductDefinition) GetLegalStatusOfSupply() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.LegalStatusOfSupply
	}
	return nil
}

func (x *MedicinalProductDefinition) GetAdditionalMonitoringIndicator() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AdditionalMonitoringIndicator
	}
	return nil
}

func (x *MedicinalProductDefinition) GetSpecialMeasures() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SpecialMeasures
	}
	return nil
}

func (x *MedicinalProductDefinition) GetPaediatricUseIndicator() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PaediatricUseIndicator
	}
	return nil
}

func (x *MedicinalProductDefinition) GetProductClassification() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ProductClassification
	}
	return nil
}

func (x *MedicinalProductDefinition) GetMarketingStatus() []*datatypes_go_proto.MarketingStatus {
	if x != nil {
		return x.MarketingStatus
	}
	return nil
}

func (x *MedicinalProductDefinition) GetPharmaceuticalProduct() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PharmaceuticalProduct
	}
	return nil
}

func (x *MedicinalProductDefinition) GetPackagedMedicinalProduct() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PackagedMedicinalProduct
	}
	return nil
}

func (x *MedicinalProductDefinition) GetIngredient() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Ingredient
	}
	return nil
}

func (x *MedicinalProductDefinition) GetAttachedDocument() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.AttachedDocument
	}
	return nil
}

func (x *MedicinalProductDefinition) GetMasterFile() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.MasterFile
	}
	return nil
}

func (x *MedicinalProductDefinition) GetContact() []*MedicinalProductDefinition_Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *MedicinalProductDefinition) GetClinicalTrial() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ClinicalTrial
	}
	return nil
}

func (x *MedicinalProductDefinition) GetName() []*MedicinalProductDefinition_Name {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *MedicinalProductDefinition) GetCrossReference() []*MedicinalProductDefinition_CrossReference {
	if x != nil {
		return x.CrossReference
	}
	return nil
}

func (x *MedicinalProductDefinition) GetManufacturingBusinessOperation() []*MedicinalProductDefinition_ManufacturingBusinessOperation {
	if x != nil {
		return x.ManufacturingBusinessOperation
	}
	return nil
}

// A product specific contact, person (in a role), or an organization
type MedicinalProductDefinition_Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Allows the contact to be classified, for example QPPV, Pharmacovigilence
	// Enquiry Information
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// A product specific contact, person (in a role), or an organization
	Contact *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (x *MedicinalProductDefinition_Contact) Reset() {
	*x = MedicinalProductDefinition_Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductDefinition_Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductDefinition_Contact) ProtoMessage() {}

func (x *MedicinalProductDefinition_Contact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductDefinition_Contact.ProtoReflect.Descriptor instead.
func (*MedicinalProductDefinition_Contact) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MedicinalProductDefinition_Contact) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProductDefinition_Contact) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProductDefinition_Contact) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProductDefinition_Contact) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicinalProductDefinition_Contact) GetContact() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Contact
	}
	return nil
}

// The product's name, including full name and possibly coded parts
type MedicinalProductDefinition_Name struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The full product name
	ProductName *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	// Type of product name, such as rINN, BAN, Proprietary, Non-Proprietary
	Type            *datatypes_go_proto.Coding                         `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	NamePart        []*MedicinalProductDefinition_Name_NamePart        `protobuf:"bytes,6,rep,name=name_part,json=namePart,proto3" json:"name_part,omitempty"`
	CountryLanguage []*MedicinalProductDefinition_Name_CountryLanguage `protobuf:"bytes,7,rep,name=country_language,json=countryLanguage,proto3" json:"country_language,omitempty"`
}

func (x *MedicinalProductDefinition_Name) Reset() {
	*x = MedicinalProductDefinition_Name{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductDefinition_Name) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductDefinition_Name) ProtoMessage() {}

func (x *MedicinalProductDefinition_Name) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductDefinition_Name.ProtoReflect.Descriptor instead.
func (*MedicinalProductDefinition_Name) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescGZIP(), []int{0, 1}
}

func (x *MedicinalProductDefinition_Name) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProductDefinition_Name) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProductDefinition_Name) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProductDefinition_Name) GetProductName() *datatypes_go_proto.String {
	if x != nil {
		return x.ProductName
	}
	return nil
}

func (x *MedicinalProductDefinition_Name) GetType() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicinalProductDefinition_Name) GetNamePart() []*MedicinalProductDefinition_Name_NamePart {
	if x != nil {
		return x.NamePart
	}
	return nil
}

func (x *MedicinalProductDefinition_Name) GetCountryLanguage() []*MedicinalProductDefinition_Name_CountryLanguage {
	if x != nil {
		return x.CountryLanguage
	}
	return nil
}

// Reference to another product, e.g. for linking authorised to
// investigational product
type MedicinalProductDefinition_CrossReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                     `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Product           *MedicinalProductDefinition_CrossReference_ProductX `protobuf:"bytes,4,opt,name=product,proto3" json:"product,omitempty"`
	// The type of relationship, for instance branded to generic, product to
	// development product (investigational), parallel import version
	Type *datatypes_go_proto.Coding `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *MedicinalProductDefinition_CrossReference) Reset() {
	*x = MedicinalProductDefinition_CrossReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductDefinition_CrossReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductDefinition_CrossReference) ProtoMessage() {}

func (x *MedicinalProductDefinition_CrossReference) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductDefinition_CrossReference.ProtoReflect.Descriptor instead.
func (*MedicinalProductDefinition_CrossReference) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescGZIP(), []int{0, 2}
}

func (x *MedicinalProductDefinition_CrossReference) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProductDefinition_CrossReference) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProductDefinition_CrossReference) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProductDefinition_CrossReference) GetProduct() *MedicinalProductDefinition_CrossReference_ProductX {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *MedicinalProductDefinition_CrossReference) GetType() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Type
	}
	return nil
}

// An operation applied to the product, for manufacturing or adminsitrative
// purpose
type MedicinalProductDefinition_ManufacturingBusinessOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                                  `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Type              *MedicinalProductDefinition_ManufacturingBusinessOperation_TypeX `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Date range of applicability
	EffectiveDate *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	// The manufacturer or establishment associated with the process
	Manufacturer []*datatypes_go_proto.Reference `protobuf:"bytes,6,rep,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// An authorization for this process, either as a logical reference, holding
	// just an identifier, or a full refererence to a resource that captures the
	// details. The authorization mayu possibly apply to several products or a
	// wider scope of process of which this is a part
	Authorization *datatypes_go_proto.Reference `protobuf:"bytes,7,opt,name=authorization,proto3" json:"authorization,omitempty"`
	// To indicate if this proces is commercially confidential
	ConfidentialityIndicator *datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,opt,name=confidentiality_indicator,json=confidentialityIndicator,proto3" json:"confidentiality_indicator,omitempty"`
}

func (x *MedicinalProductDefinition_ManufacturingBusinessOperation) Reset() {
	*x = MedicinalProductDefinition_ManufacturingBusinessOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductDefinition_ManufacturingBusinessOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductDefinition_ManufacturingBusinessOperation) ProtoMessage() {}

func (x *MedicinalProductDefinition_ManufacturingBusinessOperation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductDefinition_ManufacturingBusinessOperation.ProtoReflect.Descriptor instead.
func (*MedicinalProductDefinition_ManufacturingBusinessOperation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescGZIP(), []int{0, 3}
}

func (x *MedicinalProductDefinition_ManufacturingBusinessOperation) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProductDefinition_ManufacturingBusinessOperation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProductDefinition_ManufacturingBusinessOperation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProductDefinition_ManufacturingBusinessOperation) GetType() *MedicinalProductDefinition_ManufacturingBusinessOperation_TypeX {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicinalProductDefinition_ManufacturingBusinessOperation) GetEffectiveDate() *datatypes_go_proto.Period {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *MedicinalProductDefinition_ManufacturingBusinessOperation) GetManufacturer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *MedicinalProductDefinition_ManufacturingBusinessOperation) GetAuthorization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *MedicinalProductDefinition_ManufacturingBusinessOperation) GetConfidentialityIndicator() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ConfidentialityIndicator
	}
	return nil
}

// Coding words or phrases of the name
type MedicinalProductDefinition_Name_NamePart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A fragment of a product name
	Part *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=part,proto3" json:"part,omitempty"`
	// Idenifying type for this part of the name (e.g. strength part)
	Type *datatypes_go_proto.Coding `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *MedicinalProductDefinition_Name_NamePart) Reset() {
	*x = MedicinalProductDefinition_Name_NamePart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductDefinition_Name_NamePart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductDefinition_Name_NamePart) ProtoMessage() {}

func (x *MedicinalProductDefinition_Name_NamePart) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductDefinition_Name_NamePart.ProtoReflect.Descriptor instead.
func (*MedicinalProductDefinition_Name_NamePart) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *MedicinalProductDefinition_Name_NamePart) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProductDefinition_Name_NamePart) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProductDefinition_Name_NamePart) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProductDefinition_Name_NamePart) GetPart() *datatypes_go_proto.String {
	if x != nil {
		return x.Part
	}
	return nil
}

func (x *MedicinalProductDefinition_Name_NamePart) GetType() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Type
	}
	return nil
}

// Country where the name applies
type MedicinalProductDefinition_Name_CountryLanguage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Country code for where this name applies
	Country *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	// Jurisdiction code for where this name applies
	Jurisdiction *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	// Language code for this name
	Language *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *MedicinalProductDefinition_Name_CountryLanguage) Reset() {
	*x = MedicinalProductDefinition_Name_CountryLanguage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductDefinition_Name_CountryLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductDefinition_Name_CountryLanguage) ProtoMessage() {}

func (x *MedicinalProductDefinition_Name_CountryLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductDefinition_Name_CountryLanguage.ProtoReflect.Descriptor instead.
func (*MedicinalProductDefinition_Name_CountryLanguage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *MedicinalProductDefinition_Name_CountryLanguage) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProductDefinition_Name_CountryLanguage) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProductDefinition_Name_CountryLanguage) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProductDefinition_Name_CountryLanguage) GetCountry() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *MedicinalProductDefinition_Name_CountryLanguage) GetJurisdiction() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Jurisdiction
	}
	return nil
}

func (x *MedicinalProductDefinition_Name_CountryLanguage) GetLanguage() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Language
	}
	return nil
}

// Reference to another product, e.g. for linking authorised to
// investigational product
type MedicinalProductDefinition_CrossReference_ProductX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*MedicinalProductDefinition_CrossReference_ProductX_Identifier
	//	*MedicinalProductDefinition_CrossReference_ProductX_Reference
	Choice isMedicinalProductDefinition_CrossReference_ProductX_Choice `protobuf_oneof:"choice"`
}

func (x *MedicinalProductDefinition_CrossReference_ProductX) Reset() {
	*x = MedicinalProductDefinition_CrossReference_ProductX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductDefinition_CrossReference_ProductX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductDefinition_CrossReference_ProductX) ProtoMessage() {}

func (x *MedicinalProductDefinition_CrossReference_ProductX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductDefinition_CrossReference_ProductX.ProtoReflect.Descriptor instead.
func (*MedicinalProductDefinition_CrossReference_ProductX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (m *MedicinalProductDefinition_CrossReference_ProductX) GetChoice() isMedicinalProductDefinition_CrossReference_ProductX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *MedicinalProductDefinition_CrossReference_ProductX) GetIdentifier() *datatypes_go_proto.Identifier {
	if x, ok := x.GetChoice().(*MedicinalProductDefinition_CrossReference_ProductX_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *MedicinalProductDefinition_CrossReference_ProductX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*MedicinalProductDefinition_CrossReference_ProductX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isMedicinalProductDefinition_CrossReference_ProductX_Choice interface {
	isMedicinalProductDefinition_CrossReference_ProductX_Choice()
}

type MedicinalProductDefinition_CrossReference_ProductX_Identifier struct {
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,1,opt,name=identifier,proto3,oneof"`
}

type MedicinalProductDefinition_CrossReference_ProductX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*MedicinalProductDefinition_CrossReference_ProductX_Identifier) isMedicinalProductDefinition_CrossReference_ProductX_Choice() {
}

func (*MedicinalProductDefinition_CrossReference_ProductX_Reference) isMedicinalProductDefinition_CrossReference_ProductX_Choice() {
}

// The type of manufacturing operation e.g. manufacturing itself,
// re-packaging. This may be a subtype of some other wider scope of
// authorized operation, referenced by the authorization attribute
type MedicinalProductDefinition_ManufacturingBusinessOperation_TypeX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*MedicinalProductDefinition_ManufacturingBusinessOperation_TypeX_Coding
	//	*MedicinalProductDefinition_ManufacturingBusinessOperation_TypeX_Reference
	Choice isMedicinalProductDefinition_ManufacturingBusinessOperation_TypeX_Choice `protobuf_oneof:"choice"`
}

func (x *MedicinalProductDefinition_ManufacturingBusinessOperation_TypeX) Reset() {
	*x = MedicinalProductDefinition_ManufacturingBusinessOperation_TypeX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductDefinition_ManufacturingBusinessOperation_TypeX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductDefinition_ManufacturingBusinessOperation_TypeX) ProtoMessage() {}

func (x *MedicinalProductDefinition_ManufacturingBusinessOperation_TypeX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductDefinition_ManufacturingBusinessOperation_TypeX.ProtoReflect.Descriptor instead.
func (*MedicinalProductDefinition_ManufacturingBusinessOperation_TypeX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (m *MedicinalProductDefinition_ManufacturingBusinessOperation_TypeX) GetChoice() isMedicinalProductDefinition_ManufacturingBusinessOperation_TypeX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *MedicinalProductDefinition_ManufacturingBusinessOperation_TypeX) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetChoice().(*MedicinalProductDefinition_ManufacturingBusinessOperation_TypeX_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *MedicinalProductDefinition_ManufacturingBusinessOperation_TypeX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*MedicinalProductDefinition_ManufacturingBusinessOperation_TypeX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isMedicinalProductDefinition_ManufacturingBusinessOperation_TypeX_Choice interface {
	isMedicinalProductDefinition_ManufacturingBusinessOperation_TypeX_Choice()
}

type MedicinalProductDefinition_ManufacturingBusinessOperation_TypeX_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,1,opt,name=coding,proto3,oneof"`
}

type MedicinalProductDefinition_ManufacturingBusinessOperation_TypeX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*MedicinalProductDefinition_ManufacturingBusinessOperation_TypeX_Coding) isMedicinalProductDefinition_ManufacturingBusinessOperation_TypeX_Choice() {
}

func (*MedicinalProductDefinition_ManufacturingBusinessOperation_TypeX_Reference) isMedicinalProductDefinition_ManufacturingBusinessOperation_TypeX_Choice() {
}

var File_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDesc = []byte{
	0x0a, 0x4c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc1, 0x2c, 0x0a, 0x1a, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61,
	0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x35,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6f, 0x0a, 0x21, 0x63,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x65,
	0x75, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x1e, 0x63, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x65, 0x75, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x44, 0x6f, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x3d, 0x0a, 0x0a,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52,
	0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x16, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x13, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x66,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x6c, 0x0a, 0x1f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x1d, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x18, 0x70, 0x61, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x16, 0x70,
	0x61, 0x65, 0x64, 0x69, 0x61, 0x74, 0x72, 0x69, 0x63, 0x55, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x5b, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x15, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x7b, 0x0a, 0x16, 0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x65, 0x75,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x24, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x70, 0x68, 0x61, 0x72, 0x6d,
	0x61, 0x63, 0x65, 0x75, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x7d, 0x0a, 0x1a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x19,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x1f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x19, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12,
	0x50, 0x0a, 0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x10, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x64, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x51, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x1d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x50, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x67, 0x0a, 0x0f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f,
	0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x20,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1e, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xe3, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x68, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x2e, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x1a, 0xdd, 0x09, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x12, 0x6f, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x52, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x1a, 0xb2, 0x02, 0x0a, 0x08, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x12, 0x27,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x12, 0x37, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xa3, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x46, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x0c, 0x6a, 0x75, 0x72, 0x69,
	0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x1a, 0xa6, 0x04, 0x0a,
	0x0e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x58, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x1a, 0xc1, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x58, 0x12, 0x41,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x60, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x20, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xd0, 0x06, 0x0a, 0x1e, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x68,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x58, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0d, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x0c,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1c, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x16, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0xaa, 0x01, 0x0a, 0x05,
	0x54, 0x79, 0x70, 0x65, 0x58, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x58, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x18, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x4e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x8c,
	0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x69, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67,
	0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x05, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescData = file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_goTypes = []interface{}{
	(*MedicinalProductDefinition)(nil),                                      // 0: google.fhir.r5.core.MedicinalProductDefinition
	(*MedicinalProductDefinition_Contact)(nil),                              // 1: google.fhir.r5.core.MedicinalProductDefinition.Contact
	(*MedicinalProductDefinition_Name)(nil),                                 // 2: google.fhir.r5.core.MedicinalProductDefinition.Name
	(*MedicinalProductDefinition_CrossReference)(nil),                       // 3: google.fhir.r5.core.MedicinalProductDefinition.CrossReference
	(*MedicinalProductDefinition_ManufacturingBusinessOperation)(nil),       // 4: google.fhir.r5.core.MedicinalProductDefinition.ManufacturingBusinessOperation
	(*MedicinalProductDefinition_Name_NamePart)(nil),                        // 5: google.fhir.r5.core.MedicinalProductDefinition.Name.NamePart
	(*MedicinalProductDefinition_Name_CountryLanguage)(nil),                 // 6: google.fhir.r5.core.MedicinalProductDefinition.Name.CountryLanguage
	(*MedicinalProductDefinition_CrossReference_ProductX)(nil),              // 7: google.fhir.r5.core.MedicinalProductDefinition.CrossReference.ProductX
	(*MedicinalProductDefinition_ManufacturingBusinessOperation_TypeX)(nil), // 8: google.fhir.r5.core.MedicinalProductDefinition.ManufacturingBusinessOperation.TypeX
	(*datatypes_go_proto.Id)(nil),                                           // 9: google.fhir.r5.core.Id
	(*datatypes_go_proto.Meta)(nil),                                         // 10: google.fhir.r5.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                          // 11: google.fhir.r5.core.Uri
	(*datatypes_go_proto.Code)(nil),                                         // 12: google.fhir.r5.core.Code
	(*datatypes_go_proto.Narrative)(nil),                                    // 13: google.fhir.r5.core.Narrative
	(*any.Any)(nil),                                                         // 14: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                                    // 15: google.fhir.r5.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                                   // 16: google.fhir.r5.core.Identifier
	(*datatypes_go_proto.CodeableConcept)(nil),                              // 17: google.fhir.r5.core.CodeableConcept
	(*datatypes_go_proto.Coding)(nil),                                       // 18: google.fhir.r5.core.Coding
	(*datatypes_go_proto.String)(nil),                                       // 19: google.fhir.r5.core.String
	(*datatypes_go_proto.Markdown)(nil),                                     // 20: google.fhir.r5.core.Markdown
	(*datatypes_go_proto.MarketingStatus)(nil),                              // 21: google.fhir.r5.core.MarketingStatus
	(*datatypes_go_proto.Reference)(nil),                                    // 22: google.fhir.r5.core.Reference
	(*datatypes_go_proto.Period)(nil),                                       // 23: google.fhir.r5.core.Period
}
var file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_depIdxs = []int32{
	9,  // 0: google.fhir.r5.core.MedicinalProductDefinition.id:type_name -> google.fhir.r5.core.Id
	10, // 1: google.fhir.r5.core.MedicinalProductDefinition.meta:type_name -> google.fhir.r5.core.Meta
	11, // 2: google.fhir.r5.core.MedicinalProductDefinition.implicit_rules:type_name -> google.fhir.r5.core.Uri
	12, // 3: google.fhir.r5.core.MedicinalProductDefinition.language:type_name -> google.fhir.r5.core.Code
	13, // 4: google.fhir.r5.core.MedicinalProductDefinition.text:type_name -> google.fhir.r5.core.Narrative
	14, // 5: google.fhir.r5.core.MedicinalProductDefinition.contained:type_name -> google.protobuf.Any
	15, // 6: google.fhir.r5.core.MedicinalProductDefinition.extension:type_name -> google.fhir.r5.core.Extension
	15, // 7: google.fhir.r5.core.MedicinalProductDefinition.modifier_extension:type_name -> google.fhir.r5.core.Extension
	16, // 8: google.fhir.r5.core.MedicinalProductDefinition.identifier:type_name -> google.fhir.r5.core.Identifier
	17, // 9: google.fhir.r5.core.MedicinalProductDefinition.type:type_name -> google.fhir.r5.core.CodeableConcept
	18, // 10: google.fhir.r5.core.MedicinalProductDefinition.domain:type_name -> google.fhir.r5.core.Coding
	19, // 11: google.fhir.r5.core.MedicinalProductDefinition.version:type_name -> google.fhir.r5.core.String
	18, // 12: google.fhir.r5.core.MedicinalProductDefinition.status:type_name -> google.fhir.r5.core.Coding
	20, // 13: google.fhir.r5.core.MedicinalProductDefinition.description:type_name -> google.fhir.r5.core.Markdown
	17, // 14: google.fhir.r5.core.MedicinalProductDefinition.combined_pharmaceutical_dose_form:type_name -> google.fhir.r5.core.CodeableConcept
	20, // 15: google.fhir.r5.core.MedicinalProductDefinition.indication:type_name -> google.fhir.r5.core.Markdown
	17, // 16: google.fhir.r5.core.MedicinalProductDefinition.legal_status_of_supply:type_name -> google.fhir.r5.core.CodeableConcept
	17, // 17: google.fhir.r5.core.MedicinalProductDefinition.additional_monitoring_indicator:type_name -> google.fhir.r5.core.CodeableConcept
	17, // 18: google.fhir.r5.core.MedicinalProductDefinition.special_measures:type_name -> google.fhir.r5.core.CodeableConcept
	17, // 19: google.fhir.r5.core.MedicinalProductDefinition.paediatric_use_indicator:type_name -> google.fhir.r5.core.CodeableConcept
	17, // 20: google.fhir.r5.core.MedicinalProductDefinition.product_classification:type_name -> google.fhir.r5.core.CodeableConcept
	21, // 21: google.fhir.r5.core.MedicinalProductDefinition.marketing_status:type_name -> google.fhir.r5.core.MarketingStatus
	22, // 22: google.fhir.r5.core.MedicinalProductDefinition.pharmaceutical_product:type_name -> google.fhir.r5.core.Reference
	22, // 23: google.fhir.r5.core.MedicinalProductDefinition.packaged_medicinal_product:type_name -> google.fhir.r5.core.Reference
	22, // 24: google.fhir.r5.core.MedicinalProductDefinition.ingredient:type_name -> google.fhir.r5.core.Reference
	22, // 25: google.fhir.r5.core.MedicinalProductDefinition.attached_document:type_name -> google.fhir.r5.core.Reference
	22, // 26: google.fhir.r5.core.MedicinalProductDefinition.master_file:type_name -> google.fhir.r5.core.Reference
	1,  // 27: google.fhir.r5.core.MedicinalProductDefinition.contact:type_name -> google.fhir.r5.core.MedicinalProductDefinition.Contact
	22, // 28: google.fhir.r5.core.MedicinalProductDefinition.clinical_trial:type_name -> google.fhir.r5.core.Reference
	2,  // 29: google.fhir.r5.core.MedicinalProductDefinition.name:type_name -> google.fhir.r5.core.MedicinalProductDefinition.Name
	3,  // 30: google.fhir.r5.core.MedicinalProductDefinition.cross_reference:type_name -> google.fhir.r5.core.MedicinalProductDefinition.CrossReference
	4,  // 31: google.fhir.r5.core.MedicinalProductDefinition.manufacturing_business_operation:type_name -> google.fhir.r5.core.MedicinalProductDefinition.ManufacturingBusinessOperation
	9,  // 32: google.fhir.r5.core.MedicinalProductDefinition.Contact.id:type_name -> google.fhir.r5.core.Id
	15, // 33: google.fhir.r5.core.MedicinalProductDefinition.Contact.extension:type_name -> google.fhir.r5.core.Extension
	15, // 34: google.fhir.r5.core.MedicinalProductDefinition.Contact.modifier_extension:type_name -> google.fhir.r5.core.Extension
	17, // 35: google.fhir.r5.core.MedicinalProductDefinition.Contact.type:type_name -> google.fhir.r5.core.CodeableConcept
	22, // 36: google.fhir.r5.core.MedicinalProductDefinition.Contact.contact:type_name -> google.fhir.r5.core.Reference
	9,  // 37: google.fhir.r5.core.MedicinalProductDefinition.Name.id:type_name -> google.fhir.r5.core.Id
	15, // 38: google.fhir.r5.core.MedicinalProductDefinition.Name.extension:type_name -> google.fhir.r5.core.Extension
	15, // 39: google.fhir.r5.core.MedicinalProductDefinition.Name.modifier_extension:type_name -> google.fhir.r5.core.Extension
	19, // 40: google.fhir.r5.core.MedicinalProductDefinition.Name.product_name:type_name -> google.fhir.r5.core.String
	18, // 41: google.fhir.r5.core.MedicinalProductDefinition.Name.type:type_name -> google.fhir.r5.core.Coding
	5,  // 42: google.fhir.r5.core.MedicinalProductDefinition.Name.name_part:type_name -> google.fhir.r5.core.MedicinalProductDefinition.Name.NamePart
	6,  // 43: google.fhir.r5.core.MedicinalProductDefinition.Name.country_language:type_name -> google.fhir.r5.core.MedicinalProductDefinition.Name.CountryLanguage
	9,  // 44: google.fhir.r5.core.MedicinalProductDefinition.CrossReference.id:type_name -> google.fhir.r5.core.Id
	15, // 45: google.fhir.r5.core.MedicinalProductDefinition.CrossReference.extension:type_name -> google.fhir.r5.core.Extension
	15, // 46: google.fhir.r5.core.MedicinalProductDefinition.CrossReference.modifier_extension:type_name -> google.fhir.r5.core.Extension
	7,  // 47: google.fhir.r5.core.MedicinalProductDefinition.CrossReference.product:type_name -> google.fhir.r5.core.MedicinalProductDefinition.CrossReference.ProductX
	18, // 48: google.fhir.r5.core.MedicinalProductDefinition.CrossReference.type:type_name -> google.fhir.r5.core.Coding
	9,  // 49: google.fhir.r5.core.MedicinalProductDefinition.ManufacturingBusinessOperation.id:type_name -> google.fhir.r5.core.Id
	15, // 50: google.fhir.r5.core.MedicinalProductDefinition.ManufacturingBusinessOperation.extension:type_name -> google.fhir.r5.core.Extension
	15, // 51: google.fhir.r5.core.MedicinalProductDefinition.ManufacturingBusinessOperation.modifier_extension:type_name -> google.fhir.r5.core.Extension
	8,  // 52: google.fhir.r5.core.MedicinalProductDefinition.ManufacturingBusinessOperation.type:type_name -> google.fhir.r5.core.MedicinalProductDefinition.ManufacturingBusinessOperation.TypeX
	23, // 53: google.fhir.r5.core.MedicinalProductDefinition.ManufacturingBusinessOperation.effective_date:type_name -> google.fhir.r5.core.Period
	22, // 54: google.fhir.r5.core.MedicinalProductDefinition.ManufacturingBusinessOperation.manufacturer:type_name -> google.fhir.r5.core.Reference
	22, // 55: google.fhir.r5.core.MedicinalProductDefinition.ManufacturingBusinessOperation.authorization:type_name -> google.fhir.r5.core.Reference
	17, // 56: google.fhir.r5.core.MedicinalProductDefinition.ManufacturingBusinessOperation.confidentiality_indicator:type_name -> google.fhir.r5.core.CodeableConcept
	9,  // 57: google.fhir.r5.core.MedicinalProductDefinition.Name.NamePart.id:type_name -> google.fhir.r5.core.Id
	15, // 58: google.fhir.r5.core.MedicinalProductDefinition.Name.NamePart.extension:type_name -> google.fhir.r5.core.Extension
	15, // 59: google.fhir.r5.core.MedicinalProductDefinition.Name.NamePart.modifier_extension:type_name -> google.fhir.r5.core.Extension
	19, // 60: google.fhir.r5.core.MedicinalProductDefinition.Name.NamePart.part:type_name -> google.fhir.r5.core.String
	18, // 61: google.fhir.r5.core.MedicinalProductDefinition.Name.NamePart.type:type_name -> google.fhir.r5.core.Coding
	9,  // 62: google.fhir.r5.core.MedicinalProductDefinition.Name.CountryLanguage.id:type_name -> google.fhir.r5.core.Id
	15, // 63: google.fhir.r5.core.MedicinalProductDefinition.Name.CountryLanguage.extension:type_name -> google.fhir.r5.core.Extension
	15, // 64: google.fhir.r5.core.MedicinalProductDefinition.Name.CountryLanguage.modifier_extension:type_name -> google.fhir.r5.core.Extension
	17, // 65: google.fhir.r5.core.MedicinalProductDefinition.Name.CountryLanguage.country:type_name -> google.fhir.r5.core.CodeableConcept
	17, // 66: google.fhir.r5.core.MedicinalProductDefinition.Name.CountryLanguage.jurisdiction:type_name -> google.fhir.r5.core.CodeableConcept
	17, // 67: google.fhir.r5.core.MedicinalProductDefinition.Name.CountryLanguage.language:type_name -> google.fhir.r5.core.CodeableConcept
	16, // 68: google.fhir.r5.core.MedicinalProductDefinition.CrossReference.ProductX.identifier:type_name -> google.fhir.r5.core.Identifier
	22, // 69: google.fhir.r5.core.MedicinalProductDefinition.CrossReference.ProductX.reference:type_name -> google.fhir.r5.core.Reference
	18, // 70: google.fhir.r5.core.MedicinalProductDefinition.ManufacturingBusinessOperation.TypeX.coding:type_name -> google.fhir.r5.core.Coding
	22, // 71: google.fhir.r5.core.MedicinalProductDefinition.ManufacturingBusinessOperation.TypeX.reference:type_name -> google.fhir.r5.core.Reference
	72, // [72:72] is the sub-list for method output_type
	72, // [72:72] is the sub-list for method input_type
	72, // [72:72] is the sub-list for extension type_name
	72, // [72:72] is the sub-list for extension extendee
	0,  // [0:72] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_init() }
func file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_init() {
	if File_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductDefinition_Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductDefinition_Name); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductDefinition_CrossReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductDefinition_ManufacturingBusinessOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductDefinition_Name_NamePart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductDefinition_Name_CountryLanguage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductDefinition_CrossReference_ProductX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductDefinition_ManufacturingBusinessOperation_TypeX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*MedicinalProductDefinition_CrossReference_ProductX_Identifier)(nil),
		(*MedicinalProductDefinition_CrossReference_ProductX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*MedicinalProductDefinition_ManufacturingBusinessOperation_TypeX_Coding)(nil),
		(*MedicinalProductDefinition_ManufacturingBusinessOperation_TypeX_Reference)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto = out.File
	file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_resources_medicinal_product_definition_proto_depIdxs = nil
}

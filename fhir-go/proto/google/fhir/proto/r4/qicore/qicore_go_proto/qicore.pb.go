//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r4/qicore/qicore.proto

package qicore_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/datatypes_go_proto"
	extensions_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/extensions_go_proto"
	valuesets_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/valuesets_go_proto"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/r4/qicore/codes_go_proto"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/r4/uscore_codes_go_proto"
	uscore_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/uscore_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for QICoreAdverseEvent.
// Medical care, research study or other healthcare event causing physical
// injury. See
// http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-adverseevent
type QICoreAdverseEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier for the event
	Identifier *datatypes_go_proto.Identifier    `protobuf:"bytes,10,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Actuality  *QICoreAdverseEvent_ActualityCode `protobuf:"bytes,11,opt,name=actuality,proto3" json:"actuality,omitempty"`
	// product-problem | product-quality | product-use-error | wrong-dose |
	// incorrect-prescribing-information | wrong-technique |
	// wrong-route-of-administration | wrong-rate | wrong-duration | wrong-time |
	// expired-drug | medical-device-use-error | problem-different-manufacturer |
	// unsafe-physical-environment
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	// Type of the event itself in relation to the subject
	Event *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=event,proto3" json:"event,omitempty"`
	// Subject impacted by event
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Encounter created as part of
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// When the event occurred
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,16,opt,name=date,proto3" json:"date,omitempty"`
	// When the event was detected
	Detected *datatypes_go_proto.DateTime `protobuf:"bytes,17,opt,name=detected,proto3" json:"detected,omitempty"`
	// When the event was recorded
	RecordedDate *datatypes_go_proto.DateTime `protobuf:"bytes,18,opt,name=recorded_date,json=recordedDate,proto3" json:"recorded_date,omitempty"`
	// Effect on the subject due to this event
	ResultingCondition []*datatypes_go_proto.Reference `protobuf:"bytes,19,rep,name=resulting_condition,json=resultingCondition,proto3" json:"resulting_condition,omitempty"`
	// Location where adverse event occurred
	Location *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=location,proto3" json:"location,omitempty"`
	// Seriousness of the event
	Seriousness *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=seriousness,proto3" json:"seriousness,omitempty"`
	// mild | moderate | severe
	Severity *datatypes_go_proto.CodeableConcept `protobuf:"bytes,22,opt,name=severity,proto3" json:"severity,omitempty"`
	// resolved | recovering | ongoing | resolvedWithSequelae | fatal | unknown
	Outcome *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=outcome,proto3" json:"outcome,omitempty"`
	// Who recorded the adverse event
	Recorder *datatypes_go_proto.Reference `protobuf:"bytes,24,opt,name=recorder,proto3" json:"recorder,omitempty"`
	// Who  was involved in the adverse event or the potential adverse event
	Contributor   []*datatypes_go_proto.Reference     `protobuf:"bytes,25,rep,name=contributor,proto3" json:"contributor,omitempty"`
	SuspectEntity []*QICoreAdverseEvent_SuspectEntity `protobuf:"bytes,26,rep,name=suspect_entity,json=suspectEntity,proto3" json:"suspect_entity,omitempty"`
	// AdverseEvent.subjectMedicalHistory
	SubjectMedicalHistory []*datatypes_go_proto.Reference `protobuf:"bytes,27,rep,name=subject_medical_history,json=subjectMedicalHistory,proto3" json:"subject_medical_history,omitempty"`
	// AdverseEvent.referenceDocument
	ReferenceDocument []*datatypes_go_proto.Reference `protobuf:"bytes,28,rep,name=reference_document,json=referenceDocument,proto3" json:"reference_document,omitempty"`
	// AdverseEvent.study
	Study []*datatypes_go_proto.Reference `protobuf:"bytes,29,rep,name=study,proto3" json:"study,omitempty"`
}

func (x *QICoreAdverseEvent) Reset() {
	*x = QICoreAdverseEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreAdverseEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreAdverseEvent) ProtoMessage() {}

func (x *QICoreAdverseEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreAdverseEvent.ProtoReflect.Descriptor instead.
func (*QICoreAdverseEvent) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{0}
}

func (x *QICoreAdverseEvent) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreAdverseEvent) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreAdverseEvent) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreAdverseEvent) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreAdverseEvent) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreAdverseEvent) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreAdverseEvent) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreAdverseEvent) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreAdverseEvent) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreAdverseEvent) GetActuality() *QICoreAdverseEvent_ActualityCode {
	if x != nil {
		return x.Actuality
	}
	return nil
}

func (x *QICoreAdverseEvent) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *QICoreAdverseEvent) GetEvent() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *QICoreAdverseEvent) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *QICoreAdverseEvent) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *QICoreAdverseEvent) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *QICoreAdverseEvent) GetDetected() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Detected
	}
	return nil
}

func (x *QICoreAdverseEvent) GetRecordedDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.RecordedDate
	}
	return nil
}

func (x *QICoreAdverseEvent) GetResultingCondition() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ResultingCondition
	}
	return nil
}

func (x *QICoreAdverseEvent) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *QICoreAdverseEvent) GetSeriousness() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Seriousness
	}
	return nil
}

func (x *QICoreAdverseEvent) GetSeverity() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *QICoreAdverseEvent) GetOutcome() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *QICoreAdverseEvent) GetRecorder() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Recorder
	}
	return nil
}

func (x *QICoreAdverseEvent) GetContributor() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Contributor
	}
	return nil
}

func (x *QICoreAdverseEvent) GetSuspectEntity() []*QICoreAdverseEvent_SuspectEntity {
	if x != nil {
		return x.SuspectEntity
	}
	return nil
}

func (x *QICoreAdverseEvent) GetSubjectMedicalHistory() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SubjectMedicalHistory
	}
	return nil
}

func (x *QICoreAdverseEvent) GetReferenceDocument() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReferenceDocument
	}
	return nil
}

func (x *QICoreAdverseEvent) GetStudy() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Study
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreAllergyIntolerance.
// Allergy or Intolerance (generally: Risk of adverse reaction to a substance).
// See
// http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-allergyintolerance
type QICoreAllergyIntolerance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External ids for this item
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// active | inactive | resolved
	ClinicalStatus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=clinical_status,json=clinicalStatus,proto3" json:"clinical_status,omitempty"`
	// unconfirmed | confirmed | refuted | entered-in-error
	VerificationStatus *datatypes_go_proto.CodeableConcept       `protobuf:"bytes,12,opt,name=verification_status,json=verificationStatus,proto3" json:"verification_status,omitempty"`
	Type               *QICoreAllergyIntolerance_TypeCode        `protobuf:"bytes,13,opt,name=type,proto3" json:"type,omitempty"`
	Category           []*QICoreAllergyIntolerance_CategoryCode  `protobuf:"bytes,14,rep,name=category,proto3" json:"category,omitempty"`
	Criticality        *QICoreAllergyIntolerance_CriticalityCode `protobuf:"bytes,15,opt,name=criticality,proto3" json:"criticality,omitempty"`
	// Code that identifies the allergy or intolerance
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,opt,name=code,proto3" json:"code,omitempty"`
	// Who the sensitivity is for
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=patient,proto3" json:"patient,omitempty"`
	// Encounter when the allergy or intolerance was asserted
	Encounter *datatypes_go_proto.Reference    `protobuf:"bytes,18,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Onset     *QICoreAllergyIntolerance_OnsetX `protobuf:"bytes,19,opt,name=onset,proto3" json:"onset,omitempty"`
	// Date first version of the resource instance was recorded
	RecordedDate *datatypes_go_proto.DateTime `protobuf:"bytes,20,opt,name=recorded_date,json=recordedDate,proto3" json:"recorded_date,omitempty"`
	// Who recorded the sensitivity
	Recorder *datatypes_go_proto.Reference `protobuf:"bytes,21,opt,name=recorder,proto3" json:"recorder,omitempty"`
	// Source of the information about the allergy
	Asserter *datatypes_go_proto.Reference `protobuf:"bytes,22,opt,name=asserter,proto3" json:"asserter,omitempty"`
	// Date(/time) of last known occurrence of a reaction
	LastOccurrence *datatypes_go_proto.DateTime `protobuf:"bytes,23,opt,name=last_occurrence,json=lastOccurrence,proto3" json:"last_occurrence,omitempty"`
	// Additional text not captured in other fields
	Note     []*datatypes_go_proto.Annotation     `protobuf:"bytes,24,rep,name=note,proto3" json:"note,omitempty"`
	Reaction []*QICoreAllergyIntolerance_Reaction `protobuf:"bytes,25,rep,name=reaction,proto3" json:"reaction,omitempty"`
	// Age that the allergy or intolerance resolved
	ResolutionAge *datatypes_go_proto.Age `protobuf:"bytes,26,opt,name=resolution_age,json=resolutionAge,proto3" json:"resolution_age,omitempty"`
	// Explanation associated with refuted status
	ReasonRefuted *datatypes_go_proto.CodeableConcept `protobuf:"bytes,27,opt,name=reason_refuted,json=reasonRefuted,proto3" json:"reason_refuted,omitempty"`
}

func (x *QICoreAllergyIntolerance) Reset() {
	*x = QICoreAllergyIntolerance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreAllergyIntolerance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreAllergyIntolerance) ProtoMessage() {}

func (x *QICoreAllergyIntolerance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreAllergyIntolerance.ProtoReflect.Descriptor instead.
func (*QICoreAllergyIntolerance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{1}
}

func (x *QICoreAllergyIntolerance) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreAllergyIntolerance) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreAllergyIntolerance) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreAllergyIntolerance) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreAllergyIntolerance) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreAllergyIntolerance) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreAllergyIntolerance) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreAllergyIntolerance) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreAllergyIntolerance) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreAllergyIntolerance) GetClinicalStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ClinicalStatus
	}
	return nil
}

func (x *QICoreAllergyIntolerance) GetVerificationStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.VerificationStatus
	}
	return nil
}

func (x *QICoreAllergyIntolerance) GetType() *QICoreAllergyIntolerance_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreAllergyIntolerance) GetCategory() []*QICoreAllergyIntolerance_CategoryCode {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *QICoreAllergyIntolerance) GetCriticality() *QICoreAllergyIntolerance_CriticalityCode {
	if x != nil {
		return x.Criticality
	}
	return nil
}

func (x *QICoreAllergyIntolerance) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *QICoreAllergyIntolerance) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *QICoreAllergyIntolerance) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *QICoreAllergyIntolerance) GetOnset() *QICoreAllergyIntolerance_OnsetX {
	if x != nil {
		return x.Onset
	}
	return nil
}

func (x *QICoreAllergyIntolerance) GetRecordedDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.RecordedDate
	}
	return nil
}

func (x *QICoreAllergyIntolerance) GetRecorder() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Recorder
	}
	return nil
}

func (x *QICoreAllergyIntolerance) GetAsserter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Asserter
	}
	return nil
}

func (x *QICoreAllergyIntolerance) GetLastOccurrence() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.LastOccurrence
	}
	return nil
}

func (x *QICoreAllergyIntolerance) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *QICoreAllergyIntolerance) GetReaction() []*QICoreAllergyIntolerance_Reaction {
	if x != nil {
		return x.Reaction
	}
	return nil
}

func (x *QICoreAllergyIntolerance) GetResolutionAge() *datatypes_go_proto.Age {
	if x != nil {
		return x.ResolutionAge
	}
	return nil
}

func (x *QICoreAllergyIntolerance) GetReasonRefuted() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonRefuted
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreBodyStructure.
// Specific and identified anatomical structure.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-bodystructure
type QICoreBodyStructure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Bodystructure identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Whether this record is in active use
	Active *datatypes_go_proto.Boolean `protobuf:"bytes,11,opt,name=active,proto3" json:"active,omitempty"`
	// Kind of Structure
	Morphology *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=morphology,proto3" json:"morphology,omitempty"`
	// Body site
	Location *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=location,proto3" json:"location,omitempty"`
	// Body site modifier
	LocationQualifier []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,rep,name=location_qualifier,json=locationQualifier,proto3" json:"location_qualifier,omitempty"`
	// Text description
	Description *datatypes_go_proto.String `protobuf:"bytes,15,opt,name=description,proto3" json:"description,omitempty"`
	// Attached images
	Image []*datatypes_go_proto.Attachment `protobuf:"bytes,16,rep,name=image,proto3" json:"image,omitempty"`
	// Who this is about
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=patient,proto3" json:"patient,omitempty"`
}

func (x *QICoreBodyStructure) Reset() {
	*x = QICoreBodyStructure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreBodyStructure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreBodyStructure) ProtoMessage() {}

func (x *QICoreBodyStructure) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreBodyStructure.ProtoReflect.Descriptor instead.
func (*QICoreBodyStructure) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{2}
}

func (x *QICoreBodyStructure) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreBodyStructure) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreBodyStructure) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreBodyStructure) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreBodyStructure) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreBodyStructure) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreBodyStructure) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreBodyStructure) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreBodyStructure) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreBodyStructure) GetActive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *QICoreBodyStructure) GetMorphology() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Morphology
	}
	return nil
}

func (x *QICoreBodyStructure) GetLocation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *QICoreBodyStructure) GetLocationQualifier() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.LocationQualifier
	}
	return nil
}

func (x *QICoreBodyStructure) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *QICoreBodyStructure) GetImage() []*datatypes_go_proto.Attachment {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *QICoreBodyStructure) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreCarePlan.
// Healthcare plan for patient or group.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-careplan
type QICoreCarePlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Ids for this plan
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Instantiates FHIR protocol or definition
	InstantiatesCanonical []*datatypes_go_proto.Canonical `protobuf:"bytes,11,rep,name=instantiates_canonical,json=instantiatesCanonical,proto3" json:"instantiates_canonical,omitempty"`
	// Instantiates external protocol or definition
	InstantiatesUri []*datatypes_go_proto.Uri `protobuf:"bytes,12,rep,name=instantiates_uri,json=instantiatesUri,proto3" json:"instantiates_uri,omitempty"`
	// Fulfills CarePlan
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,13,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// CarePlan replaced by this CarePlan
	Replaces []*datatypes_go_proto.Reference `protobuf:"bytes,14,rep,name=replaces,proto3" json:"replaces,omitempty"`
	// Part of referenced CarePlan
	PartOf []*datatypes_go_proto.Reference `protobuf:"bytes,15,rep,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	Status *QICoreCarePlan_StatusCode      `protobuf:"bytes,16,opt,name=status,proto3" json:"status,omitempty"`
	Intent *QICoreCarePlan_IntentCode      `protobuf:"bytes,17,opt,name=intent,proto3" json:"intent,omitempty"`
	// Type of plan
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,rep,name=category,proto3" json:"category,omitempty"`
	// Human-friendly name for the care plan
	Title *datatypes_go_proto.String `protobuf:"bytes,19,opt,name=title,proto3" json:"title,omitempty"`
	// Summary of nature of plan
	Description *datatypes_go_proto.String `protobuf:"bytes,20,opt,name=description,proto3" json:"description,omitempty"`
	// Who the care plan is for
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,21,opt,name=subject,proto3" json:"subject,omitempty"`
	// Encounter created as part of
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,22,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Time period plan covers
	Period *datatypes_go_proto.Period `protobuf:"bytes,23,opt,name=period,proto3" json:"period,omitempty"`
	// Date record was first recorded
	Created *datatypes_go_proto.DateTime `protobuf:"bytes,24,opt,name=created,proto3" json:"created,omitempty"`
	// Who is the designated responsible party
	Author *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=author,proto3" json:"author,omitempty"`
	// Who provided the content of the care plan
	Contributor []*datatypes_go_proto.Reference `protobuf:"bytes,26,rep,name=contributor,proto3" json:"contributor,omitempty"`
	// Who's involved in plan?
	CareTeam []*datatypes_go_proto.Reference `protobuf:"bytes,27,rep,name=care_team,json=careTeam,proto3" json:"care_team,omitempty"`
	// Health issues this plan addresses
	Addresses []*datatypes_go_proto.Reference `protobuf:"bytes,28,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// Information considered as part of plan
	SupportingInfo []*datatypes_go_proto.Reference `protobuf:"bytes,29,rep,name=supporting_info,json=supportingInfo,proto3" json:"supporting_info,omitempty"`
	// Desired outcome of plan
	Goal     []*datatypes_go_proto.Reference `protobuf:"bytes,30,rep,name=goal,proto3" json:"goal,omitempty"`
	Activity []*QICoreCarePlan_Activity      `protobuf:"bytes,31,rep,name=activity,proto3" json:"activity,omitempty"`
	// Comments about the plan
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,32,rep,name=note,proto3" json:"note,omitempty"`
}

func (x *QICoreCarePlan) Reset() {
	*x = QICoreCarePlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCarePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCarePlan) ProtoMessage() {}

func (x *QICoreCarePlan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCarePlan.ProtoReflect.Descriptor instead.
func (*QICoreCarePlan) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{3}
}

func (x *QICoreCarePlan) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCarePlan) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreCarePlan) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreCarePlan) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreCarePlan) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreCarePlan) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreCarePlan) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreCarePlan) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreCarePlan) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreCarePlan) GetInstantiatesCanonical() []*datatypes_go_proto.Canonical {
	if x != nil {
		return x.InstantiatesCanonical
	}
	return nil
}

func (x *QICoreCarePlan) GetInstantiatesUri() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.InstantiatesUri
	}
	return nil
}

func (x *QICoreCarePlan) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *QICoreCarePlan) GetReplaces() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Replaces
	}
	return nil
}

func (x *QICoreCarePlan) GetPartOf() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *QICoreCarePlan) GetStatus() *QICoreCarePlan_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreCarePlan) GetIntent() *QICoreCarePlan_IntentCode {
	if x != nil {
		return x.Intent
	}
	return nil
}

func (x *QICoreCarePlan) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *QICoreCarePlan) GetTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *QICoreCarePlan) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *QICoreCarePlan) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *QICoreCarePlan) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *QICoreCarePlan) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *QICoreCarePlan) GetCreated() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *QICoreCarePlan) GetAuthor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *QICoreCarePlan) GetContributor() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Contributor
	}
	return nil
}

func (x *QICoreCarePlan) GetCareTeam() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.CareTeam
	}
	return nil
}

func (x *QICoreCarePlan) GetAddresses() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *QICoreCarePlan) GetSupportingInfo() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SupportingInfo
	}
	return nil
}

func (x *QICoreCarePlan) GetGoal() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Goal
	}
	return nil
}

func (x *QICoreCarePlan) GetActivity() []*QICoreCarePlan_Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *QICoreCarePlan) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreCareTeam.
// Planned participants in the coordination and delivery of care for a patient
// or group. See
// http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-careteam
type QICoreCareTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Ids for this team
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Status     *QICoreCareTeam_StatusCode       `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Type of team
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	// Name of the team, such as crisis assessment team
	Name *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// Who care team is for
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Encounter created as part of
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Time period team covers
	Period      *datatypes_go_proto.Period    `protobuf:"bytes,16,opt,name=period,proto3" json:"period,omitempty"`
	Participant []*QICoreCareTeam_Participant `protobuf:"bytes,17,rep,name=participant,proto3" json:"participant,omitempty"`
	// Why the care team exists
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Why the care team exists
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,19,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// Organization responsible for the care team
	ManagingOrganization []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=managing_organization,json=managingOrganization,proto3" json:"managing_organization,omitempty"`
	// A contact detail for the care team (that applies to all members)
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,21,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// Comments made about the CareTeam
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,22,rep,name=note,proto3" json:"note,omitempty"`
}

func (x *QICoreCareTeam) Reset() {
	*x = QICoreCareTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCareTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCareTeam) ProtoMessage() {}

func (x *QICoreCareTeam) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCareTeam.ProtoReflect.Descriptor instead.
func (*QICoreCareTeam) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{4}
}

func (x *QICoreCareTeam) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCareTeam) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreCareTeam) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreCareTeam) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreCareTeam) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreCareTeam) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreCareTeam) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreCareTeam) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreCareTeam) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreCareTeam) GetStatus() *QICoreCareTeam_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreCareTeam) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *QICoreCareTeam) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *QICoreCareTeam) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *QICoreCareTeam) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *QICoreCareTeam) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *QICoreCareTeam) GetParticipant() []*QICoreCareTeam_Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *QICoreCareTeam) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *QICoreCareTeam) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *QICoreCareTeam) GetManagingOrganization() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ManagingOrganization
	}
	return nil
}

func (x *QICoreCareTeam) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *QICoreCareTeam) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreClaim.
// Claim, Pre-determination or Pre-authorization.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-claim
type QICoreClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for claim
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Status     *QICoreClaim_StatusCode          `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Category or discipline
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
	// More granular claim type
	SubType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	Use     *QICoreClaim_UseCode                `protobuf:"bytes,14,opt,name=use,proto3" json:"use,omitempty"`
	// The recipient of the products and services
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=patient,proto3" json:"patient,omitempty"`
	// Relevant time frame for the claim
	BillablePeriod *datatypes_go_proto.Period `protobuf:"bytes,16,opt,name=billable_period,json=billablePeriod,proto3" json:"billable_period,omitempty"`
	// Resource creation date
	Created *datatypes_go_proto.DateTime `protobuf:"bytes,17,opt,name=created,proto3" json:"created,omitempty"`
	// Author of the claim
	Enterer *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=enterer,proto3" json:"enterer,omitempty"`
	// Target
	Insurer *datatypes_go_proto.Reference `protobuf:"bytes,19,opt,name=insurer,proto3" json:"insurer,omitempty"`
	// Party responsible for the claim
	Provider *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=provider,proto3" json:"provider,omitempty"`
	// Desired processing ugency
	Priority *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=priority,proto3" json:"priority,omitempty"`
	// For whom to reserve funds
	FundsReserve *datatypes_go_proto.CodeableConcept `protobuf:"bytes,22,opt,name=funds_reserve,json=fundsReserve,proto3" json:"funds_reserve,omitempty"`
	Related      []*QICoreClaim_RelatedClaim         `protobuf:"bytes,23,rep,name=related,proto3" json:"related,omitempty"`
	// Prescription authorizing services and products
	Prescription *datatypes_go_proto.Reference `protobuf:"bytes,24,opt,name=prescription,proto3" json:"prescription,omitempty"`
	// Original prescription if superseded by fulfiller
	OriginalPrescription *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=original_prescription,json=originalPrescription,proto3" json:"original_prescription,omitempty"`
	Payee                *QICoreClaim_Payee            `protobuf:"bytes,26,opt,name=payee,proto3" json:"payee,omitempty"`
	// Treatment referral
	Referral *datatypes_go_proto.Reference `protobuf:"bytes,27,opt,name=referral,proto3" json:"referral,omitempty"`
	// Servicing facility
	Facility       *datatypes_go_proto.Reference        `protobuf:"bytes,28,opt,name=facility,proto3" json:"facility,omitempty"`
	CareTeam       []*QICoreClaim_CareTeam              `protobuf:"bytes,29,rep,name=care_team,json=careTeam,proto3" json:"care_team,omitempty"`
	SupportingInfo []*QICoreClaim_SupportingInformation `protobuf:"bytes,30,rep,name=supporting_info,json=supportingInfo,proto3" json:"supporting_info,omitempty"`
	Diagnosis      []*QICoreClaim_Diagnosis             `protobuf:"bytes,31,rep,name=diagnosis,proto3" json:"diagnosis,omitempty"`
	Procedure      []*QICoreClaim_Procedure             `protobuf:"bytes,32,rep,name=procedure,proto3" json:"procedure,omitempty"`
	Insurance      []*QICoreClaim_Insurance             `protobuf:"bytes,33,rep,name=insurance,proto3" json:"insurance,omitempty"`
	Accident       *QICoreClaim_Accident                `protobuf:"bytes,34,opt,name=accident,proto3" json:"accident,omitempty"`
	Item           []*QICoreClaim_Item                  `protobuf:"bytes,35,rep,name=item,proto3" json:"item,omitempty"`
	// Total claim cost
	Total *datatypes_go_proto.Money `protobuf:"bytes,36,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *QICoreClaim) Reset() {
	*x = QICoreClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreClaim) ProtoMessage() {}

func (x *QICoreClaim) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreClaim.ProtoReflect.Descriptor instead.
func (*QICoreClaim) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{5}
}

func (x *QICoreClaim) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreClaim) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreClaim) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreClaim) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreClaim) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreClaim) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreClaim) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreClaim) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreClaim) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreClaim) GetStatus() *QICoreClaim_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreClaim) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreClaim) GetSubType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SubType
	}
	return nil
}

func (x *QICoreClaim) GetUse() *QICoreClaim_UseCode {
	if x != nil {
		return x.Use
	}
	return nil
}

func (x *QICoreClaim) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *QICoreClaim) GetBillablePeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.BillablePeriod
	}
	return nil
}

func (x *QICoreClaim) GetCreated() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *QICoreClaim) GetEnterer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Enterer
	}
	return nil
}

func (x *QICoreClaim) GetInsurer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Insurer
	}
	return nil
}

func (x *QICoreClaim) GetProvider() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *QICoreClaim) GetPriority() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *QICoreClaim) GetFundsReserve() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.FundsReserve
	}
	return nil
}

func (x *QICoreClaim) GetRelated() []*QICoreClaim_RelatedClaim {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *QICoreClaim) GetPrescription() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Prescription
	}
	return nil
}

func (x *QICoreClaim) GetOriginalPrescription() *datatypes_go_proto.Reference {
	if x != nil {
		return x.OriginalPrescription
	}
	return nil
}

func (x *QICoreClaim) GetPayee() *QICoreClaim_Payee {
	if x != nil {
		return x.Payee
	}
	return nil
}

func (x *QICoreClaim) GetReferral() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Referral
	}
	return nil
}

func (x *QICoreClaim) GetFacility() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Facility
	}
	return nil
}

func (x *QICoreClaim) GetCareTeam() []*QICoreClaim_CareTeam {
	if x != nil {
		return x.CareTeam
	}
	return nil
}

func (x *QICoreClaim) GetSupportingInfo() []*QICoreClaim_SupportingInformation {
	if x != nil {
		return x.SupportingInfo
	}
	return nil
}

func (x *QICoreClaim) GetDiagnosis() []*QICoreClaim_Diagnosis {
	if x != nil {
		return x.Diagnosis
	}
	return nil
}

func (x *QICoreClaim) GetProcedure() []*QICoreClaim_Procedure {
	if x != nil {
		return x.Procedure
	}
	return nil
}

func (x *QICoreClaim) GetInsurance() []*QICoreClaim_Insurance {
	if x != nil {
		return x.Insurance
	}
	return nil
}

func (x *QICoreClaim) GetAccident() *QICoreClaim_Accident {
	if x != nil {
		return x.Accident
	}
	return nil
}

func (x *QICoreClaim) GetItem() []*QICoreClaim_Item {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *QICoreClaim) GetTotal() *datatypes_go_proto.Money {
	if x != nil {
		return x.Total
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreCommunication.
// A record of information transmitted from a sender to a receiver.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-communication
type QICoreCommunication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Unique identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Instantiates FHIR protocol or definition
	InstantiatesCanonical []*datatypes_go_proto.Canonical `protobuf:"bytes,11,rep,name=instantiates_canonical,json=instantiatesCanonical,proto3" json:"instantiates_canonical,omitempty"`
	// Instantiates external protocol or definition
	InstantiatesUri []*datatypes_go_proto.Uri `protobuf:"bytes,12,rep,name=instantiates_uri,json=instantiatesUri,proto3" json:"instantiates_uri,omitempty"`
	// Request fulfilled by this communication
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,13,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// Part of this action
	PartOf []*datatypes_go_proto.Reference `protobuf:"bytes,14,rep,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	// Reply to
	InResponseTo []*datatypes_go_proto.Reference `protobuf:"bytes,15,rep,name=in_response_to,json=inResponseTo,proto3" json:"in_response_to,omitempty"`
	Status       *QICoreCommunication_StatusCode `protobuf:"bytes,16,opt,name=status,proto3" json:"status,omitempty"`
	// Reason for current status
	StatusReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,17,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// Message category
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,rep,name=category,proto3" json:"category,omitempty"`
	Priority *QICoreCommunication_PriorityCode     `protobuf:"bytes,19,opt,name=priority,proto3" json:"priority,omitempty"`
	// A channel of communication
	Medium []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,rep,name=medium,proto3" json:"medium,omitempty"`
	// Focus of message
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,21,opt,name=subject,proto3" json:"subject,omitempty"`
	// Description of the purpose/content
	Topic *datatypes_go_proto.CodeableConcept `protobuf:"bytes,22,opt,name=topic,proto3" json:"topic,omitempty"`
	// Resources that pertain to this communication
	About []*datatypes_go_proto.Reference `protobuf:"bytes,23,rep,name=about,proto3" json:"about,omitempty"`
	// Encounter created as part of
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,24,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// When sent
	Sent *datatypes_go_proto.DateTime `protobuf:"bytes,25,opt,name=sent,proto3" json:"sent,omitempty"`
	// When received
	Received *datatypes_go_proto.DateTime `protobuf:"bytes,26,opt,name=received,proto3" json:"received,omitempty"`
	// Message recipient
	Recipient []*datatypes_go_proto.Reference `protobuf:"bytes,27,rep,name=recipient,proto3" json:"recipient,omitempty"`
	// Message sender
	Sender *datatypes_go_proto.Reference `protobuf:"bytes,28,opt,name=sender,proto3" json:"sender,omitempty"`
	// Indication for message
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,29,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Why was communication done?
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,30,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	Payload         []*QICoreCommunication_Payload  `protobuf:"bytes,31,rep,name=payload,proto3" json:"payload,omitempty"`
	// Comments made about the communication
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,32,rep,name=note,proto3" json:"note,omitempty"`
}

func (x *QICoreCommunication) Reset() {
	*x = QICoreCommunication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCommunication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCommunication) ProtoMessage() {}

func (x *QICoreCommunication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCommunication.ProtoReflect.Descriptor instead.
func (*QICoreCommunication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{6}
}

func (x *QICoreCommunication) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCommunication) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreCommunication) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreCommunication) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreCommunication) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreCommunication) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreCommunication) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreCommunication) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreCommunication) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreCommunication) GetInstantiatesCanonical() []*datatypes_go_proto.Canonical {
	if x != nil {
		return x.InstantiatesCanonical
	}
	return nil
}

func (x *QICoreCommunication) GetInstantiatesUri() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.InstantiatesUri
	}
	return nil
}

func (x *QICoreCommunication) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *QICoreCommunication) GetPartOf() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *QICoreCommunication) GetInResponseTo() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.InResponseTo
	}
	return nil
}

func (x *QICoreCommunication) GetStatus() *QICoreCommunication_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreCommunication) GetStatusReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

func (x *QICoreCommunication) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *QICoreCommunication) GetPriority() *QICoreCommunication_PriorityCode {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *QICoreCommunication) GetMedium() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Medium
	}
	return nil
}

func (x *QICoreCommunication) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *QICoreCommunication) GetTopic() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *QICoreCommunication) GetAbout() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.About
	}
	return nil
}

func (x *QICoreCommunication) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *QICoreCommunication) GetSent() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Sent
	}
	return nil
}

func (x *QICoreCommunication) GetReceived() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Received
	}
	return nil
}

func (x *QICoreCommunication) GetRecipient() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *QICoreCommunication) GetSender() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *QICoreCommunication) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *QICoreCommunication) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *QICoreCommunication) GetPayload() []*QICoreCommunication_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *QICoreCommunication) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreCommunicationRequest.
// A request for information to be sent to a receiver.
// See
// http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-communicationrequest
type QICoreCommunicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Unique identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan or proposal
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,11,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// Request(s) replaced by this request
	Replaces []*datatypes_go_proto.Reference `protobuf:"bytes,12,rep,name=replaces,proto3" json:"replaces,omitempty"`
	// Composite request this is part of
	GroupIdentifier *datatypes_go_proto.Identifier         `protobuf:"bytes,13,opt,name=group_identifier,json=groupIdentifier,proto3" json:"group_identifier,omitempty"`
	Status          *QICoreCommunicationRequest_StatusCode `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	// Reason for current status
	StatusReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// Message category
	Category []*datatypes_go_proto.CodeableConcept    `protobuf:"bytes,16,rep,name=category,proto3" json:"category,omitempty"`
	Priority *QICoreCommunicationRequest_PriorityCode `protobuf:"bytes,17,opt,name=priority,proto3" json:"priority,omitempty"`
	// True if request is prohibiting action
	DoNotPerform *datatypes_go_proto.Boolean `protobuf:"bytes,18,opt,name=do_not_perform,json=doNotPerform,proto3" json:"do_not_perform,omitempty"`
	// A channel of communication
	Medium []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,19,rep,name=medium,proto3" json:"medium,omitempty"`
	// Focus of message
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=subject,proto3" json:"subject,omitempty"`
	// Resources that pertain to this communication request
	About []*datatypes_go_proto.Reference `protobuf:"bytes,21,rep,name=about,proto3" json:"about,omitempty"`
	// Encounter created as part of
	Encounter  *datatypes_go_proto.Reference           `protobuf:"bytes,22,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Payload    []*QICoreCommunicationRequest_Payload   `protobuf:"bytes,23,rep,name=payload,proto3" json:"payload,omitempty"`
	Occurrence *QICoreCommunicationRequest_OccurrenceX `protobuf:"bytes,24,opt,name=occurrence,proto3" json:"occurrence,omitempty"`
	// When request transitioned to being actionable
	AuthoredOn *datatypes_go_proto.DateTime `protobuf:"bytes,25,opt,name=authored_on,json=authoredOn,proto3" json:"authored_on,omitempty"`
	// Who/what is requesting service
	Requester *datatypes_go_proto.Reference `protobuf:"bytes,26,opt,name=requester,proto3" json:"requester,omitempty"`
	// Message recipient
	Recipient []*datatypes_go_proto.Reference `protobuf:"bytes,27,rep,name=recipient,proto3" json:"recipient,omitempty"`
	// Message sender
	Sender *datatypes_go_proto.Reference `protobuf:"bytes,28,opt,name=sender,proto3" json:"sender,omitempty"`
	// Why is communication needed?
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,29,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Why is communication needed?
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,30,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// Comments made about communication request
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,31,rep,name=note,proto3" json:"note,omitempty"`
}

func (x *QICoreCommunicationRequest) Reset() {
	*x = QICoreCommunicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCommunicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCommunicationRequest) ProtoMessage() {}

func (x *QICoreCommunicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCommunicationRequest.ProtoReflect.Descriptor instead.
func (*QICoreCommunicationRequest) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{7}
}

func (x *QICoreCommunicationRequest) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetReplaces() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Replaces
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetGroupIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.GroupIdentifier
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetStatus() *QICoreCommunicationRequest_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetStatusReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetPriority() *QICoreCommunicationRequest_PriorityCode {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetDoNotPerform() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.DoNotPerform
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetMedium() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Medium
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetAbout() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.About
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetPayload() []*QICoreCommunicationRequest_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetOccurrence() *QICoreCommunicationRequest_OccurrenceX {
	if x != nil {
		return x.Occurrence
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetAuthoredOn() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.AuthoredOn
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetRequester() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Requester
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetRecipient() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetSender() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *QICoreCommunicationRequest) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreCondition.
// Detailed information about conditions, problems or diagnoses.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-condition
type QICoreCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Ids for this condition
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// active | recurrence | relapse | inactive | remission | resolved
	ClinicalStatus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=clinical_status,json=clinicalStatus,proto3" json:"clinical_status,omitempty"`
	// unconfirmed | provisional | differential | confirmed | refuted |
	// entered-in-error
	VerificationStatus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=verification_status,json=verificationStatus,proto3" json:"verification_status,omitempty"`
	// problem-list-item | encounter-diagnosis
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,rep,name=category,proto3" json:"category,omitempty"`
	// Subjective severity of condition
	Severity *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=severity,proto3" json:"severity,omitempty"`
	// Identification of the condition, problem or diagnosis
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=code,proto3" json:"code,omitempty"`
	// Anatomical location, if relevant
	BodySite []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,rep,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// Who has the condition?
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=subject,proto3" json:"subject,omitempty"`
	// Encounter created as part of
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Onset     *QICoreCondition_OnsetX       `protobuf:"bytes,19,opt,name=onset,proto3" json:"onset,omitempty"`
	Abatement *QICoreCondition_AbatementX   `protobuf:"bytes,20,opt,name=abatement,proto3" json:"abatement,omitempty"`
	// Date record was first recorded
	RecordedDate *datatypes_go_proto.DateTime `protobuf:"bytes,21,opt,name=recorded_date,json=recordedDate,proto3" json:"recorded_date,omitempty"`
	// Who recorded the condition
	Recorder *datatypes_go_proto.Reference `protobuf:"bytes,22,opt,name=recorder,proto3" json:"recorder,omitempty"`
	// Person who asserts this condition
	Asserter *datatypes_go_proto.Reference `protobuf:"bytes,23,opt,name=asserter,proto3" json:"asserter,omitempty"`
	Stage    []*QICoreCondition_Stage      `protobuf:"bytes,24,rep,name=stage,proto3" json:"stage,omitempty"`
	Evidence []*QICoreCondition_Evidence   `protobuf:"bytes,25,rep,name=evidence,proto3" json:"evidence,omitempty"`
	// Additional information about the Condition
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,26,rep,name=note,proto3" json:"note,omitempty"`
	// What caused the Condition?
	DueTo []*extensions_go_proto.ConditionDueTo_ValueX `protobuf:"bytes,27,rep,name=due_to,json=dueTo,proto3" json:"due_to,omitempty"`
	// Precedent for this Condition
	OccurredFollowing []*extensions_go_proto.ConditionOccurredFollowing_ValueX `protobuf:"bytes,28,rep,name=occurred_following,json=occurredFollowing,proto3" json:"occurred_following,omitempty"`
}

func (x *QICoreCondition) Reset() {
	*x = QICoreCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCondition) ProtoMessage() {}

func (x *QICoreCondition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCondition.ProtoReflect.Descriptor instead.
func (*QICoreCondition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{8}
}

func (x *QICoreCondition) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCondition) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreCondition) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreCondition) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreCondition) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreCondition) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreCondition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreCondition) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreCondition) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreCondition) GetClinicalStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ClinicalStatus
	}
	return nil
}

func (x *QICoreCondition) GetVerificationStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.VerificationStatus
	}
	return nil
}

func (x *QICoreCondition) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *QICoreCondition) GetSeverity() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *QICoreCondition) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *QICoreCondition) GetBodySite() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *QICoreCondition) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *QICoreCondition) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *QICoreCondition) GetOnset() *QICoreCondition_OnsetX {
	if x != nil {
		return x.Onset
	}
	return nil
}

func (x *QICoreCondition) GetAbatement() *QICoreCondition_AbatementX {
	if x != nil {
		return x.Abatement
	}
	return nil
}

func (x *QICoreCondition) GetRecordedDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.RecordedDate
	}
	return nil
}

func (x *QICoreCondition) GetRecorder() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Recorder
	}
	return nil
}

func (x *QICoreCondition) GetAsserter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Asserter
	}
	return nil
}

func (x *QICoreCondition) GetStage() []*QICoreCondition_Stage {
	if x != nil {
		return x.Stage
	}
	return nil
}

func (x *QICoreCondition) GetEvidence() []*QICoreCondition_Evidence {
	if x != nil {
		return x.Evidence
	}
	return nil
}

func (x *QICoreCondition) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *QICoreCondition) GetDueTo() []*extensions_go_proto.ConditionDueTo_ValueX {
	if x != nil {
		return x.DueTo
	}
	return nil
}

func (x *QICoreCondition) GetOccurredFollowing() []*extensions_go_proto.ConditionOccurredFollowing_ValueX {
	if x != nil {
		return x.OccurredFollowing
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreCoverage.
// Insurance or medical plan or a payment agreement.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-coverage
type QICoreCoverage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for the coverage
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Status     *QICoreCoverage_StatusCode       `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Coverage category such as medical or accident
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
	// Owner of the policy
	PolicyHolder *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=policy_holder,json=policyHolder,proto3" json:"policy_holder,omitempty"`
	// Subscriber to the policy
	Subscriber *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
	// ID assigned to the subscriber
	SubscriberId *datatypes_go_proto.String `protobuf:"bytes,15,opt,name=subscriber_id,json=subscriberId,proto3" json:"subscriber_id,omitempty"`
	// Plan beneficiary
	Beneficiary *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=beneficiary,proto3" json:"beneficiary,omitempty"`
	// Dependent number
	Dependent *datatypes_go_proto.String `protobuf:"bytes,17,opt,name=dependent,proto3" json:"dependent,omitempty"`
	// Beneficiary relationship to the subscriber
	Relationship *datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,opt,name=relationship,proto3" json:"relationship,omitempty"`
	// Coverage start and end dates
	Period *datatypes_go_proto.Period `protobuf:"bytes,19,opt,name=period,proto3" json:"period,omitempty"`
	// Issuer of the policy
	Payor      []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=payor,proto3" json:"payor,omitempty"`
	ClassValue []*QICoreCoverage_Class         `protobuf:"bytes,21,rep,name=class_value,json=class,proto3" json:"class_value,omitempty"`
	// Relative order of the coverage
	Order *datatypes_go_proto.PositiveInt `protobuf:"bytes,22,opt,name=order,proto3" json:"order,omitempty"`
	// Insurer network
	Network           *datatypes_go_proto.String          `protobuf:"bytes,23,opt,name=network,proto3" json:"network,omitempty"`
	CostToBeneficiary []*QICoreCoverage_CostToBeneficiary `protobuf:"bytes,24,rep,name=cost_to_beneficiary,json=costToBeneficiary,proto3" json:"cost_to_beneficiary,omitempty"`
	// Reimbursement to insurer
	Subrogation *datatypes_go_proto.Boolean `protobuf:"bytes,25,opt,name=subrogation,proto3" json:"subrogation,omitempty"`
	// Contract details
	Contract []*datatypes_go_proto.Reference `protobuf:"bytes,26,rep,name=contract,proto3" json:"contract,omitempty"`
}

func (x *QICoreCoverage) Reset() {
	*x = QICoreCoverage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCoverage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCoverage) ProtoMessage() {}

func (x *QICoreCoverage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCoverage.ProtoReflect.Descriptor instead.
func (*QICoreCoverage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{9}
}

func (x *QICoreCoverage) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCoverage) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreCoverage) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreCoverage) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreCoverage) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreCoverage) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreCoverage) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreCoverage) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreCoverage) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreCoverage) GetStatus() *QICoreCoverage_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreCoverage) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreCoverage) GetPolicyHolder() *datatypes_go_proto.Reference {
	if x != nil {
		return x.PolicyHolder
	}
	return nil
}

func (x *QICoreCoverage) GetSubscriber() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subscriber
	}
	return nil
}

func (x *QICoreCoverage) GetSubscriberId() *datatypes_go_proto.String {
	if x != nil {
		return x.SubscriberId
	}
	return nil
}

func (x *QICoreCoverage) GetBeneficiary() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Beneficiary
	}
	return nil
}

func (x *QICoreCoverage) GetDependent() *datatypes_go_proto.String {
	if x != nil {
		return x.Dependent
	}
	return nil
}

func (x *QICoreCoverage) GetRelationship() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *QICoreCoverage) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *QICoreCoverage) GetPayor() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Payor
	}
	return nil
}

func (x *QICoreCoverage) GetClassValue() []*QICoreCoverage_Class {
	if x != nil {
		return x.ClassValue
	}
	return nil
}

func (x *QICoreCoverage) GetOrder() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *QICoreCoverage) GetNetwork() *datatypes_go_proto.String {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *QICoreCoverage) GetCostToBeneficiary() []*QICoreCoverage_CostToBeneficiary {
	if x != nil {
		return x.CostToBeneficiary
	}
	return nil
}

func (x *QICoreCoverage) GetSubrogation() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Subrogation
	}
	return nil
}

func (x *QICoreCoverage) GetContract() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Contract
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreDevice.
// Item used in healthcare.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-device
type QICoreDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Instance identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// The reference to the definition for the device
	Definition *datatypes_go_proto.Reference `protobuf:"bytes,11,opt,name=definition,proto3" json:"definition,omitempty"`
	UdiCarrier *QICoreDevice_UdiCarrier      `protobuf:"bytes,12,opt,name=udi_carrier,json=udiCarrier,proto3" json:"udi_carrier,omitempty"`
	Status     *QICoreDevice_StatusCode      `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// online | paused | standby | offline | not-ready | transduc-discon |
	// hw-discon | off
	StatusReason []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,rep,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// The distinct identification string
	DistinctIdentifier *datatypes_go_proto.String `protobuf:"bytes,15,opt,name=distinct_identifier,json=distinctIdentifier,proto3" json:"distinct_identifier,omitempty"`
	// Name of device manufacturer
	Manufacturer *datatypes_go_proto.String `protobuf:"bytes,16,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// Date when the device was made
	ManufactureDate *datatypes_go_proto.DateTime `protobuf:"bytes,17,opt,name=manufacture_date,json=manufactureDate,proto3" json:"manufacture_date,omitempty"`
	// Date and time of expiry of this device (if applicable)
	ExpirationDate *datatypes_go_proto.DateTime `protobuf:"bytes,18,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	// Lot number of manufacture
	LotNumber *datatypes_go_proto.String `protobuf:"bytes,19,opt,name=lot_number,json=lotNumber,proto3" json:"lot_number,omitempty"`
	// Serial number assigned by the manufacturer
	SerialNumber *datatypes_go_proto.String `protobuf:"bytes,20,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	DeviceName   []*QICoreDevice_DeviceName `protobuf:"bytes,21,rep,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// The model number for the device
	ModelNumber *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=model_number,json=modelNumber,proto3" json:"model_number,omitempty"`
	// The part number of the device
	PartNumber *datatypes_go_proto.String `protobuf:"bytes,23,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	// The kind or type of device
	Type           *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=type,proto3" json:"type,omitempty"`
	Specialization []*QICoreDevice_Specialization      `protobuf:"bytes,25,rep,name=specialization,proto3" json:"specialization,omitempty"`
	Version        []*QICoreDevice_Version             `protobuf:"bytes,26,rep,name=version,proto3" json:"version,omitempty"`
	Property       []*QICoreDevice_Property            `protobuf:"bytes,27,rep,name=property,proto3" json:"property,omitempty"`
	// Patient to whom Device is affixed
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,28,opt,name=patient,proto3" json:"patient,omitempty"`
	// Organization responsible for device
	Owner *datatypes_go_proto.Reference `protobuf:"bytes,29,opt,name=owner,proto3" json:"owner,omitempty"`
	// Details for human/organization for support
	Contact []*datatypes_go_proto.ContactPoint `protobuf:"bytes,30,rep,name=contact,proto3" json:"contact,omitempty"`
	// Where the device is found
	Location *datatypes_go_proto.Reference `protobuf:"bytes,31,opt,name=location,proto3" json:"location,omitempty"`
	// Network address to contact device
	Url *datatypes_go_proto.Uri `protobuf:"bytes,32,opt,name=url,proto3" json:"url,omitempty"`
	// Device notes and comments
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,33,rep,name=note,proto3" json:"note,omitempty"`
	// Safety Characteristics of Device
	Safety []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,34,rep,name=safety,proto3" json:"safety,omitempty"`
	// The parent device
	Parent *datatypes_go_proto.Reference `protobuf:"bytes,35,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *QICoreDevice) Reset() {
	*x = QICoreDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDevice) ProtoMessage() {}

func (x *QICoreDevice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDevice.ProtoReflect.Descriptor instead.
func (*QICoreDevice) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{10}
}

func (x *QICoreDevice) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreDevice) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreDevice) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreDevice) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreDevice) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreDevice) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreDevice) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreDevice) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreDevice) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreDevice) GetDefinition() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *QICoreDevice) GetUdiCarrier() *QICoreDevice_UdiCarrier {
	if x != nil {
		return x.UdiCarrier
	}
	return nil
}

func (x *QICoreDevice) GetStatus() *QICoreDevice_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreDevice) GetStatusReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

func (x *QICoreDevice) GetDistinctIdentifier() *datatypes_go_proto.String {
	if x != nil {
		return x.DistinctIdentifier
	}
	return nil
}

func (x *QICoreDevice) GetManufacturer() *datatypes_go_proto.String {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *QICoreDevice) GetManufactureDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.ManufactureDate
	}
	return nil
}

func (x *QICoreDevice) GetExpirationDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *QICoreDevice) GetLotNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.LotNumber
	}
	return nil
}

func (x *QICoreDevice) GetSerialNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.SerialNumber
	}
	return nil
}

func (x *QICoreDevice) GetDeviceName() []*QICoreDevice_DeviceName {
	if x != nil {
		return x.DeviceName
	}
	return nil
}

func (x *QICoreDevice) GetModelNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.ModelNumber
	}
	return nil
}

func (x *QICoreDevice) GetPartNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.PartNumber
	}
	return nil
}

func (x *QICoreDevice) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreDevice) GetSpecialization() []*QICoreDevice_Specialization {
	if x != nil {
		return x.Specialization
	}
	return nil
}

func (x *QICoreDevice) GetVersion() []*QICoreDevice_Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *QICoreDevice) GetProperty() []*QICoreDevice_Property {
	if x != nil {
		return x.Property
	}
	return nil
}

func (x *QICoreDevice) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *QICoreDevice) GetOwner() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *QICoreDevice) GetContact() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *QICoreDevice) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *QICoreDevice) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *QICoreDevice) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *QICoreDevice) GetSafety() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Safety
	}
	return nil
}

func (x *QICoreDevice) GetParent() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Parent
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreDeviceRequest.
// Medical device request.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-devicerequest
type QICoreDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Request identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Instantiates FHIR protocol or definition
	InstantiatesCanonical []*datatypes_go_proto.Canonical `protobuf:"bytes,11,rep,name=instantiates_canonical,json=instantiatesCanonical,proto3" json:"instantiates_canonical,omitempty"`
	// Instantiates external protocol or definition
	InstantiatesUri []*datatypes_go_proto.Uri `protobuf:"bytes,12,rep,name=instantiates_uri,json=instantiatesUri,proto3" json:"instantiates_uri,omitempty"`
	// What request fulfills
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,13,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// What request replaces
	PriorRequest []*datatypes_go_proto.Reference `protobuf:"bytes,14,rep,name=prior_request,json=priorRequest,proto3" json:"prior_request,omitempty"`
	// Identifier of composite request
	GroupIdentifier *datatypes_go_proto.Identifier    `protobuf:"bytes,15,opt,name=group_identifier,json=groupIdentifier,proto3" json:"group_identifier,omitempty"`
	Status          *QICoreDeviceRequest_StatusCode   `protobuf:"bytes,16,opt,name=status,proto3" json:"status,omitempty"`
	Intent          *QICoreDeviceRequest_IntentCode   `protobuf:"bytes,17,opt,name=intent,proto3" json:"intent,omitempty"`
	Priority        *QICoreDeviceRequest_PriorityCode `protobuf:"bytes,18,opt,name=priority,proto3" json:"priority,omitempty"`
	Code            *QICoreDeviceRequest_CodeX        `protobuf:"bytes,19,opt,name=code,proto3" json:"code,omitempty"`
	Parameter       []*QICoreDeviceRequest_Parameter  `protobuf:"bytes,20,rep,name=parameter,proto3" json:"parameter,omitempty"`
	// Focus of request
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,21,opt,name=subject,proto3" json:"subject,omitempty"`
	// Encounter motivating request
	Encounter  *datatypes_go_proto.Reference    `protobuf:"bytes,22,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Occurrence *QICoreDeviceRequest_OccurrenceX `protobuf:"bytes,23,opt,name=occurrence,proto3" json:"occurrence,omitempty"`
	// When recorded
	AuthoredOn *datatypes_go_proto.DateTime `protobuf:"bytes,24,opt,name=authored_on,json=authoredOn,proto3" json:"authored_on,omitempty"`
	// Who/what is requesting diagnostics
	Requester *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=requester,proto3" json:"requester,omitempty"`
	// Filler role
	PerformerType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,26,opt,name=performer_type,json=performerType,proto3" json:"performer_type,omitempty"`
	// Requested Filler
	Performer *datatypes_go_proto.Reference `protobuf:"bytes,27,opt,name=performer,proto3" json:"performer,omitempty"`
	// Coded Reason for request
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,28,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Linked Reason for request
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,29,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// Associated insurance coverage
	Insurance []*datatypes_go_proto.Reference `protobuf:"bytes,30,rep,name=insurance,proto3" json:"insurance,omitempty"`
	// Additional clinical information
	SupportingInfo []*datatypes_go_proto.Reference `protobuf:"bytes,31,rep,name=supporting_info,json=supportingInfo,proto3" json:"supporting_info,omitempty"`
	// Notes or comments
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,32,rep,name=note,proto3" json:"note,omitempty"`
	// Request provenance
	RelevantHistory []*datatypes_go_proto.Reference `protobuf:"bytes,33,rep,name=relevant_history,json=relevantHistory,proto3" json:"relevant_history,omitempty"`
	// true if request is prohibiting action
	DoNotPerform *datatypes_go_proto.Boolean `protobuf:"bytes,34,opt,name=do_not_perform,json=doNotPerform,proto3" json:"do_not_perform,omitempty"`
}

func (x *QICoreDeviceRequest) Reset() {
	*x = QICoreDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDeviceRequest) ProtoMessage() {}

func (x *QICoreDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDeviceRequest.ProtoReflect.Descriptor instead.
func (*QICoreDeviceRequest) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{11}
}

func (x *QICoreDeviceRequest) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreDeviceRequest) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreDeviceRequest) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreDeviceRequest) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreDeviceRequest) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreDeviceRequest) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreDeviceRequest) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreDeviceRequest) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreDeviceRequest) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreDeviceRequest) GetInstantiatesCanonical() []*datatypes_go_proto.Canonical {
	if x != nil {
		return x.InstantiatesCanonical
	}
	return nil
}

func (x *QICoreDeviceRequest) GetInstantiatesUri() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.InstantiatesUri
	}
	return nil
}

func (x *QICoreDeviceRequest) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *QICoreDeviceRequest) GetPriorRequest() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PriorRequest
	}
	return nil
}

func (x *QICoreDeviceRequest) GetGroupIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.GroupIdentifier
	}
	return nil
}

func (x *QICoreDeviceRequest) GetStatus() *QICoreDeviceRequest_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreDeviceRequest) GetIntent() *QICoreDeviceRequest_IntentCode {
	if x != nil {
		return x.Intent
	}
	return nil
}

func (x *QICoreDeviceRequest) GetPriority() *QICoreDeviceRequest_PriorityCode {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *QICoreDeviceRequest) GetCode() *QICoreDeviceRequest_CodeX {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *QICoreDeviceRequest) GetParameter() []*QICoreDeviceRequest_Parameter {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *QICoreDeviceRequest) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *QICoreDeviceRequest) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *QICoreDeviceRequest) GetOccurrence() *QICoreDeviceRequest_OccurrenceX {
	if x != nil {
		return x.Occurrence
	}
	return nil
}

func (x *QICoreDeviceRequest) GetAuthoredOn() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.AuthoredOn
	}
	return nil
}

func (x *QICoreDeviceRequest) GetRequester() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Requester
	}
	return nil
}

func (x *QICoreDeviceRequest) GetPerformerType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PerformerType
	}
	return nil
}

func (x *QICoreDeviceRequest) GetPerformer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *QICoreDeviceRequest) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *QICoreDeviceRequest) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *QICoreDeviceRequest) GetInsurance() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Insurance
	}
	return nil
}

func (x *QICoreDeviceRequest) GetSupportingInfo() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SupportingInfo
	}
	return nil
}

func (x *QICoreDeviceRequest) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *QICoreDeviceRequest) GetRelevantHistory() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.RelevantHistory
	}
	return nil
}

func (x *QICoreDeviceRequest) GetDoNotPerform() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.DoNotPerform
	}
	return nil
}

// Auto-generated from StructureDefinition for QICore_Not_Done_Extension.
// Device Not Used Extension.
// See
// http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-deviceusestatement-notDone
type DeviceUseStatementQICoreNotDoneExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension                  `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Value     *DeviceUseStatementQICoreNotDoneExtension_ValueX `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DeviceUseStatementQICoreNotDoneExtension) Reset() {
	*x = DeviceUseStatementQICoreNotDoneExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUseStatementQICoreNotDoneExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUseStatementQICoreNotDoneExtension) ProtoMessage() {}

func (x *DeviceUseStatementQICoreNotDoneExtension) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUseStatementQICoreNotDoneExtension.ProtoReflect.Descriptor instead.
func (*DeviceUseStatementQICoreNotDoneExtension) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{12}
}

func (x *DeviceUseStatementQICoreNotDoneExtension) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceUseStatementQICoreNotDoneExtension) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DeviceUseStatementQICoreNotDoneExtension) GetValue() *DeviceUseStatementQICoreNotDoneExtension_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreDeviceUseStatement.
// Record of use of a device.
// See
// http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-deviceusestatement
type QICoreDeviceUseStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External identifier for this record
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference      `protobuf:"bytes,11,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	Status  *QICoreDeviceUseStatement_StatusCode `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// Patient using device
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=subject,proto3" json:"subject,omitempty"`
	// Supporting information
	DerivedFrom []*datatypes_go_proto.Reference   `protobuf:"bytes,14,rep,name=derived_from,json=derivedFrom,proto3" json:"derived_from,omitempty"`
	Timing      *QICoreDeviceUseStatement_TimingX `protobuf:"bytes,15,opt,name=timing,proto3" json:"timing,omitempty"`
	// When statement was recorded
	RecordedOn *datatypes_go_proto.DateTime `protobuf:"bytes,16,opt,name=recorded_on,json=recordedOn,proto3" json:"recorded_on,omitempty"`
	// Who made the statement
	Source *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=source,proto3" json:"source,omitempty"`
	// Reference to device used
	Device *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=device,proto3" json:"device,omitempty"`
	// Why device was used
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,19,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Why was DeviceUseStatement performed?
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// Target body site
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// Addition details (comments, instructions)
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,22,rep,name=note,proto3" json:"note,omitempty"`
	// Device Not Used Extension
	NotDone *datatypes_go_proto.Boolean `protobuf:"bytes,23,opt,name=not_done,json=notDone,proto3" json:"not_done,omitempty"`
}

func (x *QICoreDeviceUseStatement) Reset() {
	*x = QICoreDeviceUseStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDeviceUseStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDeviceUseStatement) ProtoMessage() {}

func (x *QICoreDeviceUseStatement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDeviceUseStatement.ProtoReflect.Descriptor instead.
func (*QICoreDeviceUseStatement) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{13}
}

func (x *QICoreDeviceUseStatement) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreDeviceUseStatement) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreDeviceUseStatement) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreDeviceUseStatement) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreDeviceUseStatement) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreDeviceUseStatement) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreDeviceUseStatement) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreDeviceUseStatement) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreDeviceUseStatement) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreDeviceUseStatement) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *QICoreDeviceUseStatement) GetStatus() *QICoreDeviceUseStatement_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreDeviceUseStatement) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *QICoreDeviceUseStatement) GetDerivedFrom() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.DerivedFrom
	}
	return nil
}

func (x *QICoreDeviceUseStatement) GetTiming() *QICoreDeviceUseStatement_TimingX {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *QICoreDeviceUseStatement) GetRecordedOn() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.RecordedOn
	}
	return nil
}

func (x *QICoreDeviceUseStatement) GetSource() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *QICoreDeviceUseStatement) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *QICoreDeviceUseStatement) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *QICoreDeviceUseStatement) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *QICoreDeviceUseStatement) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *QICoreDeviceUseStatement) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *QICoreDeviceUseStatement) GetNotDone() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.NotDone
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreDiagnosticReportLab.
// A Diagnostic report - a combination of request information, atomic results,
// images, interpretation, as well as formatted reports. See
// http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-diagnosticreport-lab
type QICoreDiagnosticReportLab struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier for report
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// What was requested
	BasedOn []*datatypes_go_proto.Reference       `protobuf:"bytes,11,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	Status  *QICoreDiagnosticReportLab_StatusCode `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// Service category
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,rep,name=category,proto3" json:"category,omitempty"`
	// US Core Laboratory Report Order Code
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=code,proto3" json:"code,omitempty"`
	// The subject of the report - usually, but not always, the patient
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=subject,proto3" json:"subject,omitempty"`
	// Health care event when test ordered
	Encounter *datatypes_go_proto.Reference         `protobuf:"bytes,16,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Effective *QICoreDiagnosticReportLab_EffectiveX `protobuf:"bytes,17,opt,name=effective,proto3" json:"effective,omitempty"`
	// DateTime this version was made
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,18,opt,name=issued,proto3" json:"issued,omitempty"`
	// Responsible Diagnostic Service
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,19,rep,name=performer,proto3" json:"performer,omitempty"`
	// Primary result interpreter
	ResultsInterpreter []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=results_interpreter,json=resultsInterpreter,proto3" json:"results_interpreter,omitempty"`
	// Specimens this report is based on
	Specimen []*datatypes_go_proto.Reference `protobuf:"bytes,21,rep,name=specimen,proto3" json:"specimen,omitempty"`
	// Observations
	Result []*datatypes_go_proto.Reference `protobuf:"bytes,22,rep,name=result,proto3" json:"result,omitempty"`
	// Reference to full details of imaging associated with the diagnostic report
	ImagingStudy []*datatypes_go_proto.Reference    `protobuf:"bytes,23,rep,name=imaging_study,json=imagingStudy,proto3" json:"imaging_study,omitempty"`
	Media        []*QICoreDiagnosticReportLab_Media `protobuf:"bytes,24,rep,name=media,proto3" json:"media,omitempty"`
	// Clinical conclusion (interpretation) of test results
	Conclusion *datatypes_go_proto.String `protobuf:"bytes,25,opt,name=conclusion,proto3" json:"conclusion,omitempty"`
	// Codes for the clinical conclusion of test results
	ConclusionCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,26,rep,name=conclusion_code,json=conclusionCode,proto3" json:"conclusion_code,omitempty"`
	// Entire report as issued
	PresentedForm []*datatypes_go_proto.Attachment `protobuf:"bytes,27,rep,name=presented_form,json=presentedForm,proto3" json:"presented_form,omitempty"`
	// Location Performed
	LocationPerformed *datatypes_go_proto.Reference `protobuf:"bytes,28,opt,name=location_performed,json=locationPerformed,proto3" json:"location_performed,omitempty"`
}

func (x *QICoreDiagnosticReportLab) Reset() {
	*x = QICoreDiagnosticReportLab{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDiagnosticReportLab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDiagnosticReportLab) ProtoMessage() {}

func (x *QICoreDiagnosticReportLab) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDiagnosticReportLab.ProtoReflect.Descriptor instead.
func (*QICoreDiagnosticReportLab) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{14}
}

func (x *QICoreDiagnosticReportLab) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetStatus() *QICoreDiagnosticReportLab_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetEffective() *QICoreDiagnosticReportLab_EffectiveX {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetResultsInterpreter() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ResultsInterpreter
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetSpecimen() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetResult() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetImagingStudy() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ImagingStudy
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetMedia() []*QICoreDiagnosticReportLab_Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetConclusion() *datatypes_go_proto.String {
	if x != nil {
		return x.Conclusion
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetConclusionCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ConclusionCode
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetPresentedForm() []*datatypes_go_proto.Attachment {
	if x != nil {
		return x.PresentedForm
	}
	return nil
}

func (x *QICoreDiagnosticReportLab) GetLocationPerformed() *datatypes_go_proto.Reference {
	if x != nil {
		return x.LocationPerformed
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreDiagnosticReportNote.
// US Core Diagnostic Report Profile for Report and Note exchange.
// See
// http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-diagnosticreport-note
type QICoreDiagnosticReportNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier for report
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// What was requested
	BasedOn []*datatypes_go_proto.Reference        `protobuf:"bytes,11,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	Status  *QICoreDiagnosticReportNote_StatusCode `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// Service category
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,rep,name=category,proto3" json:"category,omitempty"`
	// US Core Report Code
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=code,proto3" json:"code,omitempty"`
	// The subject of the report - usually, but not always, the patient
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=subject,proto3" json:"subject,omitempty"`
	// Health care event when test ordered
	Encounter *datatypes_go_proto.Reference          `protobuf:"bytes,16,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Effective *QICoreDiagnosticReportNote_EffectiveX `protobuf:"bytes,17,opt,name=effective,proto3" json:"effective,omitempty"`
	// DateTime this version was made
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,18,opt,name=issued,proto3" json:"issued,omitempty"`
	// Responsible Diagnostic Service
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,19,rep,name=performer,proto3" json:"performer,omitempty"`
	// Primary result interpreter
	ResultsInterpreter []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=results_interpreter,json=resultsInterpreter,proto3" json:"results_interpreter,omitempty"`
	// Specimens this report is based on
	Specimen []*datatypes_go_proto.Reference `protobuf:"bytes,21,rep,name=specimen,proto3" json:"specimen,omitempty"`
	// Observations
	Result []*datatypes_go_proto.Reference `protobuf:"bytes,22,rep,name=result,proto3" json:"result,omitempty"`
	// Reference to full details of imaging associated with the diagnostic report
	ImagingStudy []*datatypes_go_proto.Reference     `protobuf:"bytes,23,rep,name=imaging_study,json=imagingStudy,proto3" json:"imaging_study,omitempty"`
	Media        []*QICoreDiagnosticReportNote_Media `protobuf:"bytes,24,rep,name=media,proto3" json:"media,omitempty"`
	// Clinical conclusion (interpretation) of test results
	Conclusion *datatypes_go_proto.String `protobuf:"bytes,25,opt,name=conclusion,proto3" json:"conclusion,omitempty"`
	// Codes for the clinical conclusion of test results
	ConclusionCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,26,rep,name=conclusion_code,json=conclusionCode,proto3" json:"conclusion_code,omitempty"`
	// Entire report as issued
	PresentedForm []*datatypes_go_proto.Attachment `protobuf:"bytes,27,rep,name=presented_form,json=presentedForm,proto3" json:"presented_form,omitempty"`
	// Location Performed
	LocationPerformed *datatypes_go_proto.Reference `protobuf:"bytes,28,opt,name=location_performed,json=locationPerformed,proto3" json:"location_performed,omitempty"`
}

func (x *QICoreDiagnosticReportNote) Reset() {
	*x = QICoreDiagnosticReportNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDiagnosticReportNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDiagnosticReportNote) ProtoMessage() {}

func (x *QICoreDiagnosticReportNote) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDiagnosticReportNote.ProtoReflect.Descriptor instead.
func (*QICoreDiagnosticReportNote) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{15}
}

func (x *QICoreDiagnosticReportNote) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetStatus() *QICoreDiagnosticReportNote_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetEffective() *QICoreDiagnosticReportNote_EffectiveX {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetResultsInterpreter() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ResultsInterpreter
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetSpecimen() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetResult() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetImagingStudy() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ImagingStudy
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetMedia() []*QICoreDiagnosticReportNote_Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetConclusion() *datatypes_go_proto.String {
	if x != nil {
		return x.Conclusion
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetConclusionCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ConclusionCode
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetPresentedForm() []*datatypes_go_proto.Attachment {
	if x != nil {
		return x.PresentedForm
	}
	return nil
}

func (x *QICoreDiagnosticReportNote) GetLocationPerformed() *datatypes_go_proto.Reference {
	if x != nil {
		return x.LocationPerformed
	}
	return nil
}

// Auto-generated from StructureDefinition for EncounterProcedureExtension.
// Encounter Procedure Extension.
// See
// http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter-procedure
type EncounterEncounterProcedureExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// type
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// rank
	Rank *datatypes_go_proto.PositiveInt `protobuf:"bytes,5,opt,name=rank,proto3" json:"rank,omitempty"`
	// procedure
	Procedure *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=procedure,proto3" json:"procedure,omitempty"`
}

func (x *EncounterEncounterProcedureExtension) Reset() {
	*x = EncounterEncounterProcedureExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncounterEncounterProcedureExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncounterEncounterProcedureExtension) ProtoMessage() {}

func (x *EncounterEncounterProcedureExtension) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncounterEncounterProcedureExtension.ProtoReflect.Descriptor instead.
func (*EncounterEncounterProcedureExtension) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{16}
}

func (x *EncounterEncounterProcedureExtension) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EncounterEncounterProcedureExtension) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *EncounterEncounterProcedureExtension) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *EncounterEncounterProcedureExtension) GetRank() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Rank
	}
	return nil
}

func (x *EncounterEncounterProcedureExtension) GetProcedure() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Procedure
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreEncounter.
// An interaction during which services are provided to the patient.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter
type QICoreEncounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifier(s) by which this encounter is known
	Identifier    []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Status        *QICoreEncounter_StatusCode      `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	StatusHistory []*QICoreEncounter_StatusHistory `protobuf:"bytes,12,rep,name=status_history,json=statusHistory,proto3" json:"status_history,omitempty"`
	// Classification of patient encounter
	ClassValue   *datatypes_go_proto.Coding      `protobuf:"bytes,13,opt,name=class_value,json=class,proto3" json:"class_value,omitempty"`
	ClassHistory []*QICoreEncounter_ClassHistory `protobuf:"bytes,14,rep,name=class_history,json=classHistory,proto3" json:"class_history,omitempty"`
	// Specific type of encounter
	Type []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,rep,name=type,proto3" json:"type,omitempty"`
	// Specific type of service
	ServiceType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	// Indicates the urgency of the encounter
	Priority *datatypes_go_proto.CodeableConcept `protobuf:"bytes,17,opt,name=priority,proto3" json:"priority,omitempty"`
	// The patient or group present at the encounter
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=subject,proto3" json:"subject,omitempty"`
	// Episode(s) of care that this encounter should be recorded against
	EpisodeOfCare []*datatypes_go_proto.Reference `protobuf:"bytes,19,rep,name=episode_of_care,json=episodeOfCare,proto3" json:"episode_of_care,omitempty"`
	// The ServiceRequest that initiated this encounter
	BasedOn     []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	Participant []*QICoreEncounter_Participant  `protobuf:"bytes,21,rep,name=participant,proto3" json:"participant,omitempty"`
	// The appointment that scheduled this encounter
	Appointment []*datatypes_go_proto.Reference `protobuf:"bytes,22,rep,name=appointment,proto3" json:"appointment,omitempty"`
	// The start and end time of the encounter
	Period *datatypes_go_proto.Period `protobuf:"bytes,23,opt,name=period,proto3" json:"period,omitempty"`
	// Quantity of time the encounter lasted (less time absent)
	Length *datatypes_go_proto.Duration `protobuf:"bytes,24,opt,name=length,proto3" json:"length,omitempty"`
	// Coded reason the encounter takes place
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,25,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Reason the encounter takes place (reference)
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,26,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	Diagnosis       []*QICoreEncounter_Diagnosis    `protobuf:"bytes,27,rep,name=diagnosis,proto3" json:"diagnosis,omitempty"`
	// The set of accounts that may be used for billing for this Encounter
	Account         []*datatypes_go_proto.Reference  `protobuf:"bytes,28,rep,name=account,proto3" json:"account,omitempty"`
	Hospitalization *QICoreEncounter_Hospitalization `protobuf:"bytes,29,opt,name=hospitalization,proto3" json:"hospitalization,omitempty"`
	Location        []*QICoreEncounter_Location      `protobuf:"bytes,30,rep,name=location,proto3" json:"location,omitempty"`
	// The organization (facility) responsible for this encounter
	ServiceProvider *datatypes_go_proto.Reference `protobuf:"bytes,31,opt,name=service_provider,json=serviceProvider,proto3" json:"service_provider,omitempty"`
	// Another Encounter this encounter is part of
	PartOf *datatypes_go_proto.Reference `protobuf:"bytes,32,opt,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	// Explanation for cancellation
	ReasonCancelled *datatypes_go_proto.CodeableConcept `protobuf:"bytes,33,opt,name=reason_cancelled,json=reasonCancelled,proto3" json:"reason_cancelled,omitempty"`
	// Encounter Procedure Extension
	Procedure []*EncounterEncounterProcedureExtension `protobuf:"bytes,34,rep,name=procedure,proto3" json:"procedure,omitempty"`
}

func (x *QICoreEncounter) Reset() {
	*x = QICoreEncounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreEncounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreEncounter) ProtoMessage() {}

func (x *QICoreEncounter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreEncounter.ProtoReflect.Descriptor instead.
func (*QICoreEncounter) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{17}
}

func (x *QICoreEncounter) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreEncounter) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreEncounter) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreEncounter) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreEncounter) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreEncounter) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreEncounter) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreEncounter) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreEncounter) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreEncounter) GetStatus() *QICoreEncounter_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreEncounter) GetStatusHistory() []*QICoreEncounter_StatusHistory {
	if x != nil {
		return x.StatusHistory
	}
	return nil
}

func (x *QICoreEncounter) GetClassValue() *datatypes_go_proto.Coding {
	if x != nil {
		return x.ClassValue
	}
	return nil
}

func (x *QICoreEncounter) GetClassHistory() []*QICoreEncounter_ClassHistory {
	if x != nil {
		return x.ClassHistory
	}
	return nil
}

func (x *QICoreEncounter) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreEncounter) GetServiceType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ServiceType
	}
	return nil
}

func (x *QICoreEncounter) GetPriority() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *QICoreEncounter) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *QICoreEncounter) GetEpisodeOfCare() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.EpisodeOfCare
	}
	return nil
}

func (x *QICoreEncounter) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *QICoreEncounter) GetParticipant() []*QICoreEncounter_Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *QICoreEncounter) GetAppointment() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Appointment
	}
	return nil
}

func (x *QICoreEncounter) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *QICoreEncounter) GetLength() *datatypes_go_proto.Duration {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *QICoreEncounter) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *QICoreEncounter) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *QICoreEncounter) GetDiagnosis() []*QICoreEncounter_Diagnosis {
	if x != nil {
		return x.Diagnosis
	}
	return nil
}

func (x *QICoreEncounter) GetAccount() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *QICoreEncounter) GetHospitalization() *QICoreEncounter_Hospitalization {
	if x != nil {
		return x.Hospitalization
	}
	return nil
}

func (x *QICoreEncounter) GetLocation() []*QICoreEncounter_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *QICoreEncounter) GetServiceProvider() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ServiceProvider
	}
	return nil
}

func (x *QICoreEncounter) GetPartOf() *datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *QICoreEncounter) GetReasonCancelled() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCancelled
	}
	return nil
}

func (x *QICoreEncounter) GetProcedure() []*EncounterEncounterProcedureExtension {
	if x != nil {
		return x.Procedure
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreFamilyMemberHistory.
// Information about patient's relatives, relevant for patient.
// See
// http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-familymemberhistory
type QICoreFamilyMemberHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Id(s) for this record
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Instantiates FHIR protocol or definition
	InstantiatesCanonical []*datatypes_go_proto.Canonical `protobuf:"bytes,11,rep,name=instantiates_canonical,json=instantiatesCanonical,proto3" json:"instantiates_canonical,omitempty"`
	// Instantiates external protocol or definition
	InstantiatesUri []*datatypes_go_proto.Uri             `protobuf:"bytes,12,rep,name=instantiates_uri,json=instantiatesUri,proto3" json:"instantiates_uri,omitempty"`
	Status          *QICoreFamilyMemberHistory_StatusCode `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// subject-unknown | withheld | unable-to-obtain | deferred
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// Patient history is about
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=patient,proto3" json:"patient,omitempty"`
	// When history was recorded or last updated
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,16,opt,name=date,proto3" json:"date,omitempty"`
	// The family member described
	Name *datatypes_go_proto.String `protobuf:"bytes,17,opt,name=name,proto3" json:"name,omitempty"`
	// Relationship to the subject
	Relationship *datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,opt,name=relationship,proto3" json:"relationship,omitempty"`
	// male | female | other | unknown
	Sex  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,19,opt,name=sex,proto3" json:"sex,omitempty"`
	Born *QICoreFamilyMemberHistory_BornX    `protobuf:"bytes,20,opt,name=born,proto3" json:"born,omitempty"`
	Age  *QICoreFamilyMemberHistory_AgeX     `protobuf:"bytes,21,opt,name=age,proto3" json:"age,omitempty"`
	// Age is estimated?
	EstimatedAge *datatypes_go_proto.Boolean          `protobuf:"bytes,22,opt,name=estimated_age,json=estimatedAge,proto3" json:"estimated_age,omitempty"`
	Deceased     *QICoreFamilyMemberHistory_DeceasedX `protobuf:"bytes,23,opt,name=deceased,proto3" json:"deceased,omitempty"`
	// Why was family member history performed?
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Why was family member history performed?
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,25,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// General note about related person
	Note      []*datatypes_go_proto.Annotation       `protobuf:"bytes,26,rep,name=note,proto3" json:"note,omitempty"`
	Condition []*QICoreFamilyMemberHistory_Condition `protobuf:"bytes,27,rep,name=condition,proto3" json:"condition,omitempty"`
}

func (x *QICoreFamilyMemberHistory) Reset() {
	*x = QICoreFamilyMemberHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreFamilyMemberHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreFamilyMemberHistory) ProtoMessage() {}

func (x *QICoreFamilyMemberHistory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreFamilyMemberHistory.ProtoReflect.Descriptor instead.
func (*QICoreFamilyMemberHistory) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{18}
}

func (x *QICoreFamilyMemberHistory) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreFamilyMemberHistory) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreFamilyMemberHistory) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreFamilyMemberHistory) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreFamilyMemberHistory) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreFamilyMemberHistory) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreFamilyMemberHistory) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreFamilyMemberHistory) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreFamilyMemberHistory) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreFamilyMemberHistory) GetInstantiatesCanonical() []*datatypes_go_proto.Canonical {
	if x != nil {
		return x.InstantiatesCanonical
	}
	return nil
}

func (x *QICoreFamilyMemberHistory) GetInstantiatesUri() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.InstantiatesUri
	}
	return nil
}

func (x *QICoreFamilyMemberHistory) GetStatus() *QICoreFamilyMemberHistory_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreFamilyMemberHistory) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *QICoreFamilyMemberHistory) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *QICoreFamilyMemberHistory) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *QICoreFamilyMemberHistory) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *QICoreFamilyMemberHistory) GetRelationship() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *QICoreFamilyMemberHistory) GetSex() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Sex
	}
	return nil
}

func (x *QICoreFamilyMemberHistory) GetBorn() *QICoreFamilyMemberHistory_BornX {
	if x != nil {
		return x.Born
	}
	return nil
}

func (x *QICoreFamilyMemberHistory) GetAge() *QICoreFamilyMemberHistory_AgeX {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *QICoreFamilyMemberHistory) GetEstimatedAge() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.EstimatedAge
	}
	return nil
}

func (x *QICoreFamilyMemberHistory) GetDeceased() *QICoreFamilyMemberHistory_DeceasedX {
	if x != nil {
		return x.Deceased
	}
	return nil
}

func (x *QICoreFamilyMemberHistory) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *QICoreFamilyMemberHistory) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *QICoreFamilyMemberHistory) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *QICoreFamilyMemberHistory) GetCondition() []*QICoreFamilyMemberHistory_Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreFlag.
// Key information to flag to healthcare providers.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-flag
type QICoreFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Status     *QICoreFlag_StatusCode           `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Clinical, administrative, etc.
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	// Coded or textual message to display to user
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// Who/What is flag about?
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Time period when flag is active
	Period *datatypes_go_proto.Period `protobuf:"bytes,15,opt,name=period,proto3" json:"period,omitempty"`
	// Alert relevant during encounter
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Flag creator
	Author *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=author,proto3" json:"author,omitempty"`
}

func (x *QICoreFlag) Reset() {
	*x = QICoreFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreFlag) ProtoMessage() {}

func (x *QICoreFlag) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreFlag.ProtoReflect.Descriptor instead.
func (*QICoreFlag) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{19}
}

func (x *QICoreFlag) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreFlag) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreFlag) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreFlag) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreFlag) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreFlag) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreFlag) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreFlag) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreFlag) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreFlag) GetStatus() *QICoreFlag_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreFlag) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *QICoreFlag) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *QICoreFlag) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *QICoreFlag) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *QICoreFlag) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *QICoreFlag) GetAuthor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreGoal.
// Describes the intended objective(s) for a patient, group or organization.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-goal
type QICoreGoal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Ids for this goal
	Identifier      []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	LifecycleStatus *QICoreGoal_LifecycleStatusCode  `protobuf:"bytes,11,opt,name=lifecycle_status,json=lifecycleStatus,proto3" json:"lifecycle_status,omitempty"`
	// in-progress | improving | worsening | no-change | achieved | sustaining |
	// not-achieved | no-progress | not-attainable
	AchievementStatus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=achievement_status,json=achievementStatus,proto3" json:"achievement_status,omitempty"`
	// E.g. Treatment, dietary, behavioral, etc.
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,rep,name=category,proto3" json:"category,omitempty"`
	// high-priority | medium-priority | low-priority
	Priority *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=priority,proto3" json:"priority,omitempty"`
	// Code or text describing goal
	Description *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=description,proto3" json:"description,omitempty"`
	// Who this goal is intended for
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=subject,proto3" json:"subject,omitempty"`
	Start   *QICoreGoal_StartX            `protobuf:"bytes,17,opt,name=start,proto3" json:"start,omitempty"`
	Target  []*QICoreGoal_Target          `protobuf:"bytes,18,rep,name=target,proto3" json:"target,omitempty"`
	// When goal status took effect
	StatusDate *datatypes_go_proto.Date `protobuf:"bytes,19,opt,name=status_date,json=statusDate,proto3" json:"status_date,omitempty"`
	// Reason for current status
	StatusReason *datatypes_go_proto.String `protobuf:"bytes,20,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// Who's responsible for creating Goal?
	ExpressedBy *datatypes_go_proto.Reference `protobuf:"bytes,21,opt,name=expressed_by,json=expressedBy,proto3" json:"expressed_by,omitempty"`
	// Issues addressed by this goal
	Addresses []*datatypes_go_proto.Reference `protobuf:"bytes,22,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// Comments about the goal
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,23,rep,name=note,proto3" json:"note,omitempty"`
	// What result was achieved regarding the goal?
	OutcomeCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,rep,name=outcome_code,json=outcomeCode,proto3" json:"outcome_code,omitempty"`
	// Observation that resulted from goal
	OutcomeReference []*datatypes_go_proto.Reference `protobuf:"bytes,25,rep,name=outcome_reference,json=outcomeReference,proto3" json:"outcome_reference,omitempty"`
	// The reason the goal was not accepted
	ReasonRejected *datatypes_go_proto.CodeableConcept `protobuf:"bytes,26,opt,name=reason_rejected,json=reasonRejected,proto3" json:"reason_rejected,omitempty"`
}

func (x *QICoreGoal) Reset() {
	*x = QICoreGoal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreGoal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreGoal) ProtoMessage() {}

func (x *QICoreGoal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreGoal.ProtoReflect.Descriptor instead.
func (*QICoreGoal) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{20}
}

func (x *QICoreGoal) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreGoal) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreGoal) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreGoal) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreGoal) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreGoal) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreGoal) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreGoal) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreGoal) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreGoal) GetLifecycleStatus() *QICoreGoal_LifecycleStatusCode {
	if x != nil {
		return x.LifecycleStatus
	}
	return nil
}

func (x *QICoreGoal) GetAchievementStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AchievementStatus
	}
	return nil
}

func (x *QICoreGoal) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *QICoreGoal) GetPriority() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *QICoreGoal) GetDescription() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *QICoreGoal) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *QICoreGoal) GetStart() *QICoreGoal_StartX {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *QICoreGoal) GetTarget() []*QICoreGoal_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *QICoreGoal) GetStatusDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.StatusDate
	}
	return nil
}

func (x *QICoreGoal) GetStatusReason() *datatypes_go_proto.String {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

func (x *QICoreGoal) GetExpressedBy() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ExpressedBy
	}
	return nil
}

func (x *QICoreGoal) GetAddresses() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *QICoreGoal) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *QICoreGoal) GetOutcomeCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.OutcomeCode
	}
	return nil
}

func (x *QICoreGoal) GetOutcomeReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.OutcomeReference
	}
	return nil
}

func (x *QICoreGoal) GetReasonRejected() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonRejected
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreImagingStudy.
// A set of images produced in single study (one or more series of references
// images). See
// http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-imagingstudy
type QICoreImagingStudy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifiers for the whole study
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Status     *QICoreImagingStudy_StatusCode   `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// All series modality if actual acquisition modalities
	Modality []*datatypes_go_proto.Coding `protobuf:"bytes,12,rep,name=modality,proto3" json:"modality,omitempty"`
	// Who or what is the subject of the study
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=subject,proto3" json:"subject,omitempty"`
	// Encounter with which this imaging study is associated
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// When the study was started
	Started *datatypes_go_proto.DateTime `protobuf:"bytes,15,opt,name=started,proto3" json:"started,omitempty"`
	// Request fulfilled
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,16,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// Referring physician
	Referrer *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=referrer,proto3" json:"referrer,omitempty"`
	// Who interpreted images
	Interpreter []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=interpreter,proto3" json:"interpreter,omitempty"`
	// Study access endpoint
	Endpoint []*datatypes_go_proto.Reference `protobuf:"bytes,19,rep,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Number of Study Related Series
	NumberOfSeries *datatypes_go_proto.UnsignedInt `protobuf:"bytes,20,opt,name=number_of_series,json=numberOfSeries,proto3" json:"number_of_series,omitempty"`
	// Number of Study Related Instances
	NumberOfInstances *datatypes_go_proto.UnsignedInt `protobuf:"bytes,21,opt,name=number_of_instances,json=numberOfInstances,proto3" json:"number_of_instances,omitempty"`
	// The performed Procedure reference
	ProcedureReference *datatypes_go_proto.Reference `protobuf:"bytes,22,opt,name=procedure_reference,json=procedureReference,proto3" json:"procedure_reference,omitempty"`
	// The performed procedure code
	ProcedureCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,rep,name=procedure_code,json=procedureCode,proto3" json:"procedure_code,omitempty"`
	// Where ImagingStudy occurred
	Location *datatypes_go_proto.Reference `protobuf:"bytes,24,opt,name=location,proto3" json:"location,omitempty"`
	// Why the study was requested
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,25,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Why was study performed
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,26,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// User-defined comments
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,27,rep,name=note,proto3" json:"note,omitempty"`
	// Institution-generated description
	Description *datatypes_go_proto.String   `protobuf:"bytes,28,opt,name=description,proto3" json:"description,omitempty"`
	Series      []*QICoreImagingStudy_Series `protobuf:"bytes,29,rep,name=series,proto3" json:"series,omitempty"`
}

func (x *QICoreImagingStudy) Reset() {
	*x = QICoreImagingStudy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreImagingStudy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreImagingStudy) ProtoMessage() {}

func (x *QICoreImagingStudy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreImagingStudy.ProtoReflect.Descriptor instead.
func (*QICoreImagingStudy) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{21}
}

func (x *QICoreImagingStudy) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreImagingStudy) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreImagingStudy) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreImagingStudy) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreImagingStudy) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreImagingStudy) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreImagingStudy) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreImagingStudy) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreImagingStudy) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreImagingStudy) GetStatus() *QICoreImagingStudy_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreImagingStudy) GetModality() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Modality
	}
	return nil
}

func (x *QICoreImagingStudy) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *QICoreImagingStudy) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *QICoreImagingStudy) GetStarted() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *QICoreImagingStudy) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *QICoreImagingStudy) GetReferrer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Referrer
	}
	return nil
}

func (x *QICoreImagingStudy) GetInterpreter() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Interpreter
	}
	return nil
}

func (x *QICoreImagingStudy) GetEndpoint() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *QICoreImagingStudy) GetNumberOfSeries() *datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.NumberOfSeries
	}
	return nil
}

func (x *QICoreImagingStudy) GetNumberOfInstances() *datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.NumberOfInstances
	}
	return nil
}

func (x *QICoreImagingStudy) GetProcedureReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ProcedureReference
	}
	return nil
}

func (x *QICoreImagingStudy) GetProcedureCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ProcedureCode
	}
	return nil
}

func (x *QICoreImagingStudy) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *QICoreImagingStudy) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *QICoreImagingStudy) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *QICoreImagingStudy) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *QICoreImagingStudy) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *QICoreImagingStudy) GetSeries() []*QICoreImagingStudy_Series {
	if x != nil {
		return x.Series
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreImmunization.
// Immunization event information.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-immunization
type QICoreImmunization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Status     *QICoreImmunization_StatusCode   `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Reason not done
	StatusReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// Vaccine Product Type (bind to CVX)
	VaccineCode *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=vaccine_code,json=vaccineCode,proto3" json:"vaccine_code,omitempty"`
	// Who was immunized
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=patient,proto3" json:"patient,omitempty"`
	// Encounter immunization was part of
	Encounter  *datatypes_go_proto.Reference   `protobuf:"bytes,15,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Occurrence *QICoreImmunization_OccurrenceX `protobuf:"bytes,16,opt,name=occurrence,proto3" json:"occurrence,omitempty"`
	// When the immunization was first captured in the subject's record
	Recorded *datatypes_go_proto.DateTime `protobuf:"bytes,17,opt,name=recorded,proto3" json:"recorded,omitempty"`
	// Indicates context the data was recorded in
	PrimarySource *datatypes_go_proto.Boolean `protobuf:"bytes,18,opt,name=primary_source,json=primarySource,proto3" json:"primary_source,omitempty"`
	// Indicates the source of a secondarily reported record
	ReportOrigin *datatypes_go_proto.CodeableConcept `protobuf:"bytes,19,opt,name=report_origin,json=reportOrigin,proto3" json:"report_origin,omitempty"`
	// Where immunization occurred
	Location *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=location,proto3" json:"location,omitempty"`
	// Vaccine manufacturer
	Manufacturer *datatypes_go_proto.Reference `protobuf:"bytes,21,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// Vaccine lot number
	LotNumber *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=lot_number,json=lotNumber,proto3" json:"lot_number,omitempty"`
	// Vaccine expiration date
	ExpirationDate *datatypes_go_proto.Date `protobuf:"bytes,23,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	// Body site vaccine  was administered
	Site *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=site,proto3" json:"site,omitempty"`
	// How vaccine entered body
	Route *datatypes_go_proto.CodeableConcept `protobuf:"bytes,25,opt,name=route,proto3" json:"route,omitempty"`
	// Amount of vaccine administered
	DoseQuantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,26,opt,name=dose_quantity,json=doseQuantity,proto3" json:"dose_quantity,omitempty"`
	Performer    []*QICoreImmunization_Performer    `protobuf:"bytes,27,rep,name=performer,proto3" json:"performer,omitempty"`
	// Additional immunization notes
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,28,rep,name=note,proto3" json:"note,omitempty"`
	// Why immunization occurred
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,29,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Why immunization occurred
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,30,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// Dose potency
	IsSubpotent *datatypes_go_proto.Boolean `protobuf:"bytes,31,opt,name=is_subpotent,json=isSubpotent,proto3" json:"is_subpotent,omitempty"`
	// Reason for being subpotent
	SubpotentReason []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,32,rep,name=subpotent_reason,json=subpotentReason,proto3" json:"subpotent_reason,omitempty"`
	Education       []*QICoreImmunization_Education       `protobuf:"bytes,33,rep,name=education,proto3" json:"education,omitempty"`
	// Patient eligibility for a vaccination program
	ProgramEligibility []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,34,rep,name=program_eligibility,json=programEligibility,proto3" json:"program_eligibility,omitempty"`
	// Funding source for the vaccine
	FundingSource   *datatypes_go_proto.CodeableConcept   `protobuf:"bytes,35,opt,name=funding_source,json=fundingSource,proto3" json:"funding_source,omitempty"`
	Reaction        []*QICoreImmunization_Reaction        `protobuf:"bytes,36,rep,name=reaction,proto3" json:"reaction,omitempty"`
	ProtocolApplied []*QICoreImmunization_ProtocolApplied `protobuf:"bytes,37,rep,name=protocol_applied,json=protocolApplied,proto3" json:"protocol_applied,omitempty"`
}

func (x *QICoreImmunization) Reset() {
	*x = QICoreImmunization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreImmunization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreImmunization) ProtoMessage() {}

func (x *QICoreImmunization) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreImmunization.ProtoReflect.Descriptor instead.
func (*QICoreImmunization) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{22}
}

func (x *QICoreImmunization) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreImmunization) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreImmunization) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreImmunization) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreImmunization) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreImmunization) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreImmunization) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreImmunization) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreImmunization) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreImmunization) GetStatus() *QICoreImmunization_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreImmunization) GetStatusReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

func (x *QICoreImmunization) GetVaccineCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.VaccineCode
	}
	return nil
}

func (x *QICoreImmunization) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *QICoreImmunization) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *QICoreImmunization) GetOccurrence() *QICoreImmunization_OccurrenceX {
	if x != nil {
		return x.Occurrence
	}
	return nil
}

func (x *QICoreImmunization) GetRecorded() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Recorded
	}
	return nil
}

func (x *QICoreImmunization) GetPrimarySource() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.PrimarySource
	}
	return nil
}

func (x *QICoreImmunization) GetReportOrigin() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReportOrigin
	}
	return nil
}

func (x *QICoreImmunization) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *QICoreImmunization) GetManufacturer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *QICoreImmunization) GetLotNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.LotNumber
	}
	return nil
}

func (x *QICoreImmunization) GetExpirationDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *QICoreImmunization) GetSite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *QICoreImmunization) GetRoute() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *QICoreImmunization) GetDoseQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.DoseQuantity
	}
	return nil
}

func (x *QICoreImmunization) GetPerformer() []*QICoreImmunization_Performer {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *QICoreImmunization) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *QICoreImmunization) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *QICoreImmunization) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *QICoreImmunization) GetIsSubpotent() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.IsSubpotent
	}
	return nil
}

func (x *QICoreImmunization) GetSubpotentReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SubpotentReason
	}
	return nil
}

func (x *QICoreImmunization) GetEducation() []*QICoreImmunization_Education {
	if x != nil {
		return x.Education
	}
	return nil
}

func (x *QICoreImmunization) GetProgramEligibility() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ProgramEligibility
	}
	return nil
}

func (x *QICoreImmunization) GetFundingSource() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.FundingSource
	}
	return nil
}

func (x *QICoreImmunization) GetReaction() []*QICoreImmunization_Reaction {
	if x != nil {
		return x.Reaction
	}
	return nil
}

func (x *QICoreImmunization) GetProtocolApplied() []*QICoreImmunization_ProtocolApplied {
	if x != nil {
		return x.ProtocolApplied
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreImmunizationEvaluation.
// Immunization evaluation information.
// See
// http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-immunizationevaluation
type QICoreImmunizationEvaluation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier
	Identifier []*datatypes_go_proto.Identifier         `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Status     *QICoreImmunizationEvaluation_StatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Who this evaluation is for
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,12,opt,name=patient,proto3" json:"patient,omitempty"`
	// Date evaluation was performed
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,13,opt,name=date,proto3" json:"date,omitempty"`
	// Who is responsible for publishing the recommendations
	Authority *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=authority,proto3" json:"authority,omitempty"`
	// Evaluation target disease
	TargetDisease *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=target_disease,json=targetDisease,proto3" json:"target_disease,omitempty"`
	// Immunization being evaluated
	ImmunizationEvent *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=immunization_event,json=immunizationEvent,proto3" json:"immunization_event,omitempty"`
	// Status of the dose relative to published recommendations
	DoseStatus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,17,opt,name=dose_status,json=doseStatus,proto3" json:"dose_status,omitempty"`
	// Reason for the dose status
	DoseStatusReason []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,rep,name=dose_status_reason,json=doseStatusReason,proto3" json:"dose_status_reason,omitempty"`
	// Evaluation notes
	Description *datatypes_go_proto.String `protobuf:"bytes,19,opt,name=description,proto3" json:"description,omitempty"`
	// Name of vaccine series
	Series      *datatypes_go_proto.String                 `protobuf:"bytes,20,opt,name=series,proto3" json:"series,omitempty"`
	DoseNumber  *QICoreImmunizationEvaluation_DoseNumberX  `protobuf:"bytes,21,opt,name=dose_number,json=doseNumber,proto3" json:"dose_number,omitempty"`
	SeriesDoses *QICoreImmunizationEvaluation_SeriesDosesX `protobuf:"bytes,22,opt,name=series_doses,json=seriesDoses,proto3" json:"series_doses,omitempty"`
}

func (x *QICoreImmunizationEvaluation) Reset() {
	*x = QICoreImmunizationEvaluation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreImmunizationEvaluation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreImmunizationEvaluation) ProtoMessage() {}

func (x *QICoreImmunizationEvaluation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreImmunizationEvaluation.ProtoReflect.Descriptor instead.
func (*QICoreImmunizationEvaluation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{23}
}

func (x *QICoreImmunizationEvaluation) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreImmunizationEvaluation) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreImmunizationEvaluation) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreImmunizationEvaluation) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreImmunizationEvaluation) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreImmunizationEvaluation) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreImmunizationEvaluation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreImmunizationEvaluation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreImmunizationEvaluation) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreImmunizationEvaluation) GetStatus() *QICoreImmunizationEvaluation_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreImmunizationEvaluation) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *QICoreImmunizationEvaluation) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *QICoreImmunizationEvaluation) GetAuthority() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *QICoreImmunizationEvaluation) GetTargetDisease() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.TargetDisease
	}
	return nil
}

func (x *QICoreImmunizationEvaluation) GetImmunizationEvent() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ImmunizationEvent
	}
	return nil
}

func (x *QICoreImmunizationEvaluation) GetDoseStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DoseStatus
	}
	return nil
}

func (x *QICoreImmunizationEvaluation) GetDoseStatusReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DoseStatusReason
	}
	return nil
}

func (x *QICoreImmunizationEvaluation) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *QICoreImmunizationEvaluation) GetSeries() *datatypes_go_proto.String {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *QICoreImmunizationEvaluation) GetDoseNumber() *QICoreImmunizationEvaluation_DoseNumberX {
	if x != nil {
		return x.DoseNumber
	}
	return nil
}

func (x *QICoreImmunizationEvaluation) GetSeriesDoses() *QICoreImmunizationEvaluation_SeriesDosesX {
	if x != nil {
		return x.SeriesDoses
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreImmunizationRecommendation.
// Guidance or advice relating to an immunization.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-immunizationrec
type QICoreImmunizationRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Who this profile is for
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,11,opt,name=patient,proto3" json:"patient,omitempty"`
	// Date recommendation(s) created
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,12,opt,name=date,proto3" json:"date,omitempty"`
	// Who is responsible for protocol
	Authority      *datatypes_go_proto.Reference                      `protobuf:"bytes,13,opt,name=authority,proto3" json:"authority,omitempty"`
	Recommendation []*QICoreImmunizationRecommendation_Recommendation `protobuf:"bytes,14,rep,name=recommendation,proto3" json:"recommendation,omitempty"`
}

func (x *QICoreImmunizationRecommendation) Reset() {
	*x = QICoreImmunizationRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreImmunizationRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreImmunizationRecommendation) ProtoMessage() {}

func (x *QICoreImmunizationRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreImmunizationRecommendation.ProtoReflect.Descriptor instead.
func (*QICoreImmunizationRecommendation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{24}
}

func (x *QICoreImmunizationRecommendation) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreImmunizationRecommendation) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreImmunizationRecommendation) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreImmunizationRecommendation) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreImmunizationRecommendation) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreImmunizationRecommendation) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreImmunizationRecommendation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreImmunizationRecommendation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreImmunizationRecommendation) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreImmunizationRecommendation) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *QICoreImmunizationRecommendation) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *QICoreImmunizationRecommendation) GetAuthority() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *QICoreImmunizationRecommendation) GetRecommendation() []*QICoreImmunizationRecommendation_Recommendation {
	if x != nil {
		return x.Recommendation
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreLocation.
// Details and position information for a physical place.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-location
type QICoreLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Unique code or number identifying the location to its users
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Status     *QICoreLocation_StatusCode       `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// The operational status of the location (typically only for a bed/room)
	OperationalStatus *datatypes_go_proto.Coding `protobuf:"bytes,12,opt,name=operational_status,json=operationalStatus,proto3" json:"operational_status,omitempty"`
	// Name of the location as used by humans
	Name *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// A list of alternate names that the location is known as, or was known as,
	// in the past
	Alias []*datatypes_go_proto.String `protobuf:"bytes,14,rep,name=alias,proto3" json:"alias,omitempty"`
	// Additional details about the location that could be displayed as further
	// information to identify the location beyond its name
	Description *datatypes_go_proto.String `protobuf:"bytes,15,opt,name=description,proto3" json:"description,omitempty"`
	Mode        *QICoreLocation_ModeCode   `protobuf:"bytes,16,opt,name=mode,proto3" json:"mode,omitempty"`
	// Type of function performed
	Type []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,17,rep,name=type,proto3" json:"type,omitempty"`
	// Contact details of the location
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,18,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// Physical location
	Address *datatypes_go_proto.Address `protobuf:"bytes,19,opt,name=address,proto3" json:"address,omitempty"`
	// Physical form of the location
	PhysicalType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=physical_type,json=physicalType,proto3" json:"physical_type,omitempty"`
	Position     *QICoreLocation_Position            `protobuf:"bytes,21,opt,name=position,proto3" json:"position,omitempty"`
	// Organization responsible for provisioning and upkeep
	ManagingOrganization *datatypes_go_proto.Reference `protobuf:"bytes,22,opt,name=managing_organization,json=managingOrganization,proto3" json:"managing_organization,omitempty"`
	// Another Location this one is physically a part of
	PartOf           *datatypes_go_proto.Reference      `protobuf:"bytes,23,opt,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	HoursOfOperation []*QICoreLocation_HoursOfOperation `protobuf:"bytes,24,rep,name=hours_of_operation,json=hoursOfOperation,proto3" json:"hours_of_operation,omitempty"`
	// Description of availability exceptions
	AvailabilityExceptions *datatypes_go_proto.String `protobuf:"bytes,25,opt,name=availability_exceptions,json=availabilityExceptions,proto3" json:"availability_exceptions,omitempty"`
	// Technical endpoints providing access to services operated for the location
	Endpoint []*datatypes_go_proto.Reference `protobuf:"bytes,26,rep,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *QICoreLocation) Reset() {
	*x = QICoreLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreLocation) ProtoMessage() {}

func (x *QICoreLocation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreLocation.ProtoReflect.Descriptor instead.
func (*QICoreLocation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{25}
}

func (x *QICoreLocation) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreLocation) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreLocation) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreLocation) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreLocation) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreLocation) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreLocation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreLocation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreLocation) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreLocation) GetStatus() *QICoreLocation_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreLocation) GetOperationalStatus() *datatypes_go_proto.Coding {
	if x != nil {
		return x.OperationalStatus
	}
	return nil
}

func (x *QICoreLocation) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *QICoreLocation) GetAlias() []*datatypes_go_proto.String {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *QICoreLocation) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *QICoreLocation) GetMode() *QICoreLocation_ModeCode {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *QICoreLocation) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreLocation) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *QICoreLocation) GetAddress() *datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *QICoreLocation) GetPhysicalType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PhysicalType
	}
	return nil
}

func (x *QICoreLocation) GetPosition() *QICoreLocation_Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *QICoreLocation) GetManagingOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ManagingOrganization
	}
	return nil
}

func (x *QICoreLocation) GetPartOf() *datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *QICoreLocation) GetHoursOfOperation() []*QICoreLocation_HoursOfOperation {
	if x != nil {
		return x.HoursOfOperation
	}
	return nil
}

func (x *QICoreLocation) GetAvailabilityExceptions() *datatypes_go_proto.String {
	if x != nil {
		return x.AvailabilityExceptions
	}
	return nil
}

func (x *QICoreLocation) GetEndpoint() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreMedication.
// Definition of a Medication.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-medication
type QICoreMedication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier for this medication
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Codes that identify this medication
	Code   *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=code,proto3" json:"code,omitempty"`
	Status *QICoreMedication_StatusCode        `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// Manufacturer of the item
	Manufacturer *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// powder | tablets | capsule +
	Form *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=form,proto3" json:"form,omitempty"`
	// Amount of drug in package
	Amount     *datatypes_go_proto.Ratio      `protobuf:"bytes,15,opt,name=amount,proto3" json:"amount,omitempty"`
	Ingredient []*QICoreMedication_Ingredient `protobuf:"bytes,16,rep,name=ingredient,proto3" json:"ingredient,omitempty"`
	Batch      *QICoreMedication_Batch        `protobuf:"bytes,17,opt,name=batch,proto3" json:"batch,omitempty"`
}

func (x *QICoreMedication) Reset() {
	*x = QICoreMedication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedication) ProtoMessage() {}

func (x *QICoreMedication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedication.ProtoReflect.Descriptor instead.
func (*QICoreMedication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{26}
}

func (x *QICoreMedication) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreMedication) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreMedication) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreMedication) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreMedication) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreMedication) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreMedication) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreMedication) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreMedication) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreMedication) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *QICoreMedication) GetStatus() *QICoreMedication_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreMedication) GetManufacturer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *QICoreMedication) GetForm() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Form
	}
	return nil
}

func (x *QICoreMedication) GetAmount() *datatypes_go_proto.Ratio {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *QICoreMedication) GetIngredient() []*QICoreMedication_Ingredient {
	if x != nil {
		return x.Ingredient
	}
	return nil
}

func (x *QICoreMedication) GetBatch() *QICoreMedication_Batch {
	if x != nil {
		return x.Batch
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreMedicationAdministration.
// Administration of medication to a patient.
// See
// http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-medicationadministration
type QICoreMedicationAdministration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Instantiates protocol or definition
	Instantiates []*datatypes_go_proto.Uri `protobuf:"bytes,11,rep,name=instantiates,proto3" json:"instantiates,omitempty"`
	// Part of referenced event
	PartOf []*datatypes_go_proto.Reference            `protobuf:"bytes,12,rep,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	Status *QICoreMedicationAdministration_StatusCode `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// Reason administration not performed
	StatusReason []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,rep,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// Type of medication usage
	Category   *datatypes_go_proto.CodeableConcept         `protobuf:"bytes,15,opt,name=category,proto3" json:"category,omitempty"`
	Medication *QICoreMedicationAdministration_MedicationX `protobuf:"bytes,16,opt,name=medication,proto3" json:"medication,omitempty"`
	// Who received medication
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=subject,proto3" json:"subject,omitempty"`
	// Encounter or Episode of Care administered as part of
	Context *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=context,proto3" json:"context,omitempty"`
	// Additional information to support administration
	SupportingInformation []*datatypes_go_proto.Reference             `protobuf:"bytes,19,rep,name=supporting_information,json=supportingInformation,proto3" json:"supporting_information,omitempty"`
	Effective             *QICoreMedicationAdministration_EffectiveX  `protobuf:"bytes,20,opt,name=effective,proto3" json:"effective,omitempty"`
	Performer             []*QICoreMedicationAdministration_Performer `protobuf:"bytes,21,rep,name=performer,proto3" json:"performer,omitempty"`
	// Reason administration performed
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,22,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Condition or observation that supports why the medication was administered
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,23,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// Request administration performed against
	Request *datatypes_go_proto.Reference `protobuf:"bytes,24,opt,name=request,proto3" json:"request,omitempty"`
	// Device used to administer
	Device []*datatypes_go_proto.Reference `protobuf:"bytes,25,rep,name=device,proto3" json:"device,omitempty"`
	// Information about the administration
	Note   []*datatypes_go_proto.Annotation       `protobuf:"bytes,26,rep,name=note,proto3" json:"note,omitempty"`
	Dosage *QICoreMedicationAdministration_Dosage `protobuf:"bytes,27,opt,name=dosage,proto3" json:"dosage,omitempty"`
	// A list of events of interest in the lifecycle
	EventHistory []*datatypes_go_proto.Reference `protobuf:"bytes,28,rep,name=event_history,json=eventHistory,proto3" json:"event_history,omitempty"`
}

func (x *QICoreMedicationAdministration) Reset() {
	*x = QICoreMedicationAdministration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationAdministration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationAdministration) ProtoMessage() {}

func (x *QICoreMedicationAdministration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationAdministration.ProtoReflect.Descriptor instead.
func (*QICoreMedicationAdministration) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{27}
}

func (x *QICoreMedicationAdministration) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetInstantiates() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.Instantiates
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetPartOf() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetStatus() *QICoreMedicationAdministration_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetStatusReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetMedication() *QICoreMedicationAdministration_MedicationX {
	if x != nil {
		return x.Medication
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetSupportingInformation() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SupportingInformation
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetEffective() *QICoreMedicationAdministration_EffectiveX {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetPerformer() []*QICoreMedicationAdministration_Performer {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetRequest() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetDevice() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetDosage() *QICoreMedicationAdministration_Dosage {
	if x != nil {
		return x.Dosage
	}
	return nil
}

func (x *QICoreMedicationAdministration) GetEventHistory() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.EventHistory
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreMedicationDispense.
// Dispensing a medication to a named patient.
// See
// http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-medicationdispense
type QICoreMedicationDispense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Event that dispense is part of
	PartOf       []*datatypes_go_proto.Reference         `protobuf:"bytes,11,rep,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	Status       *QICoreMedicationDispense_StatusCode    `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	StatusReason *QICoreMedicationDispense_StatusReasonX `protobuf:"bytes,13,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// Type of medication dispense
	Category   *datatypes_go_proto.CodeableConcept   `protobuf:"bytes,14,opt,name=category,proto3" json:"category,omitempty"`
	Medication *QICoreMedicationDispense_MedicationX `protobuf:"bytes,15,opt,name=medication,proto3" json:"medication,omitempty"`
	// Who the dispense is for
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=subject,proto3" json:"subject,omitempty"`
	// Encounter / Episode associated with event
	Context *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=context,proto3" json:"context,omitempty"`
	// Information that supports the dispensing of the medication
	SupportingInformation []*datatypes_go_proto.Reference       `protobuf:"bytes,18,rep,name=supporting_information,json=supportingInformation,proto3" json:"supporting_information,omitempty"`
	Performer             []*QICoreMedicationDispense_Performer `protobuf:"bytes,19,rep,name=performer,proto3" json:"performer,omitempty"`
	// Where the dispense occurred
	Location *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=location,proto3" json:"location,omitempty"`
	// Medication order that authorizes the dispense
	AuthorizingPrescription []*datatypes_go_proto.Reference `protobuf:"bytes,21,rep,name=authorizing_prescription,json=authorizingPrescription,proto3" json:"authorizing_prescription,omitempty"`
	// Trial fill, partial fill, emergency fill, etc.
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,22,opt,name=type,proto3" json:"type,omitempty"`
	// Amount dispensed
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,23,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Amount of medication expressed as a timing amount
	DaysSupply *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,24,opt,name=days_supply,json=daysSupply,proto3" json:"days_supply,omitempty"`
	// When product was packaged and reviewed
	WhenPrepared *datatypes_go_proto.DateTime `protobuf:"bytes,25,opt,name=when_prepared,json=whenPrepared,proto3" json:"when_prepared,omitempty"`
	// When product was given out
	WhenHandedOver *datatypes_go_proto.DateTime `protobuf:"bytes,26,opt,name=when_handed_over,json=whenHandedOver,proto3" json:"when_handed_over,omitempty"`
	// Where the medication was sent
	Destination *datatypes_go_proto.Reference `protobuf:"bytes,27,opt,name=destination,proto3" json:"destination,omitempty"`
	// Who collected the medication
	Receiver []*datatypes_go_proto.Reference `protobuf:"bytes,28,rep,name=receiver,proto3" json:"receiver,omitempty"`
	// Information about the dispense
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,29,rep,name=note,proto3" json:"note,omitempty"`
	// How the medication is to be used by the patient or administered by the
	// caregiver
	DosageInstruction []*datatypes_go_proto.Dosage           `protobuf:"bytes,30,rep,name=dosage_instruction,json=dosageInstruction,proto3" json:"dosage_instruction,omitempty"`
	Substitution      *QICoreMedicationDispense_Substitution `protobuf:"bytes,31,opt,name=substitution,proto3" json:"substitution,omitempty"`
	// Clinical issue with action
	DetectedIssue []*datatypes_go_proto.Reference `protobuf:"bytes,32,rep,name=detected_issue,json=detectedIssue,proto3" json:"detected_issue,omitempty"`
	// A list of relevant lifecycle events
	EventHistory []*datatypes_go_proto.Reference `protobuf:"bytes,33,rep,name=event_history,json=eventHistory,proto3" json:"event_history,omitempty"`
}

func (x *QICoreMedicationDispense) Reset() {
	*x = QICoreMedicationDispense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationDispense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationDispense) ProtoMessage() {}

func (x *QICoreMedicationDispense) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationDispense.ProtoReflect.Descriptor instead.
func (*QICoreMedicationDispense) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{28}
}

func (x *QICoreMedicationDispense) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreMedicationDispense) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreMedicationDispense) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreMedicationDispense) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreMedicationDispense) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreMedicationDispense) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreMedicationDispense) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreMedicationDispense) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreMedicationDispense) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreMedicationDispense) GetPartOf() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *QICoreMedicationDispense) GetStatus() *QICoreMedicationDispense_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreMedicationDispense) GetStatusReason() *QICoreMedicationDispense_StatusReasonX {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

func (x *QICoreMedicationDispense) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *QICoreMedicationDispense) GetMedication() *QICoreMedicationDispense_MedicationX {
	if x != nil {
		return x.Medication
	}
	return nil
}

func (x *QICoreMedicationDispense) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *QICoreMedicationDispense) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *QICoreMedicationDispense) GetSupportingInformation() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SupportingInformation
	}
	return nil
}

func (x *QICoreMedicationDispense) GetPerformer() []*QICoreMedicationDispense_Performer {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *QICoreMedicationDispense) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *QICoreMedicationDispense) GetAuthorizingPrescription() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.AuthorizingPrescription
	}
	return nil
}

func (x *QICoreMedicationDispense) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreMedicationDispense) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *QICoreMedicationDispense) GetDaysSupply() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.DaysSupply
	}
	return nil
}

func (x *QICoreMedicationDispense) GetWhenPrepared() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.WhenPrepared
	}
	return nil
}

func (x *QICoreMedicationDispense) GetWhenHandedOver() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.WhenHandedOver
	}
	return nil
}

func (x *QICoreMedicationDispense) GetDestination() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *QICoreMedicationDispense) GetReceiver() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *QICoreMedicationDispense) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *QICoreMedicationDispense) GetDosageInstruction() []*datatypes_go_proto.Dosage {
	if x != nil {
		return x.DosageInstruction
	}
	return nil
}

func (x *QICoreMedicationDispense) GetSubstitution() *QICoreMedicationDispense_Substitution {
	if x != nil {
		return x.Substitution
	}
	return nil
}

func (x *QICoreMedicationDispense) GetDetectedIssue() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.DetectedIssue
	}
	return nil
}

func (x *QICoreMedicationDispense) GetEventHistory() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.EventHistory
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreMedicationRequest.
// Ordering of medication for patient or group.
// See
// http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-medicationrequest
type QICoreMedicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External ids for this request
	Identifier []*datatypes_go_proto.Identifier    `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Status     *QICoreMedicationRequest_StatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Reason for current status
	StatusReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	Intent       *QICoreMedicationRequest_IntentCode `protobuf:"bytes,13,opt,name=intent,proto3" json:"intent,omitempty"`
	// Type of medication usage
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,rep,name=category,proto3" json:"category,omitempty"`
	Priority *QICoreMedicationRequest_PriorityCode `protobuf:"bytes,15,opt,name=priority,proto3" json:"priority,omitempty"`
	// True if request is prohibiting action
	DoNotPerform *datatypes_go_proto.Boolean          `protobuf:"bytes,16,opt,name=do_not_perform,json=doNotPerform,proto3" json:"do_not_perform,omitempty"`
	Reported     *QICoreMedicationRequest_ReportedX   `protobuf:"bytes,17,opt,name=reported,proto3" json:"reported,omitempty"`
	Medication   *QICoreMedicationRequest_MedicationX `protobuf:"bytes,18,opt,name=medication,proto3" json:"medication,omitempty"`
	// Who or group medication request is for
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,19,opt,name=subject,proto3" json:"subject,omitempty"`
	// Encounter created as part of encounter/admission/stay
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Information to support ordering of the medication
	SupportingInformation []*datatypes_go_proto.Reference `protobuf:"bytes,21,rep,name=supporting_information,json=supportingInformation,proto3" json:"supporting_information,omitempty"`
	// When request was initially authored
	AuthoredOn *datatypes_go_proto.DateTime `protobuf:"bytes,22,opt,name=authored_on,json=authoredOn,proto3" json:"authored_on,omitempty"`
	// Who/What requested the Request
	Requester *datatypes_go_proto.Reference `protobuf:"bytes,23,opt,name=requester,proto3" json:"requester,omitempty"`
	// Intended performer of administration
	Performer *datatypes_go_proto.Reference `protobuf:"bytes,24,opt,name=performer,proto3" json:"performer,omitempty"`
	// Desired kind of performer of the medication administration
	PerformerType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,25,opt,name=performer_type,json=performerType,proto3" json:"performer_type,omitempty"`
	// Person who entered the request
	Recorder *datatypes_go_proto.Reference `protobuf:"bytes,26,opt,name=recorder,proto3" json:"recorder,omitempty"`
	// Reason or indication for ordering or not ordering the medication
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,27,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Condition or observation that supports why the prescription is being
	// written
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,28,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// Instantiates FHIR protocol or definition
	InstantiatesCanonical []*datatypes_go_proto.Canonical `protobuf:"bytes,29,rep,name=instantiates_canonical,json=instantiatesCanonical,proto3" json:"instantiates_canonical,omitempty"`
	// Instantiates external protocol or definition
	InstantiatesUri []*datatypes_go_proto.Uri `protobuf:"bytes,30,rep,name=instantiates_uri,json=instantiatesUri,proto3" json:"instantiates_uri,omitempty"`
	// What request fulfills
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,31,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// Composite request this is part of
	GroupIdentifier *datatypes_go_proto.Identifier `protobuf:"bytes,32,opt,name=group_identifier,json=groupIdentifier,proto3" json:"group_identifier,omitempty"`
	// Overall pattern of medication administration
	CourseOfTherapyType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,33,opt,name=course_of_therapy_type,json=courseOfTherapyType,proto3" json:"course_of_therapy_type,omitempty"`
	// Associated insurance coverage
	Insurance []*datatypes_go_proto.Reference `protobuf:"bytes,34,rep,name=insurance,proto3" json:"insurance,omitempty"`
	// Information about the prescription
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,35,rep,name=note,proto3" json:"note,omitempty"`
	// How the medication should be taken
	DosageInstruction []*datatypes_go_proto.Dosage             `protobuf:"bytes,36,rep,name=dosage_instruction,json=dosageInstruction,proto3" json:"dosage_instruction,omitempty"`
	DispenseRequest   *QICoreMedicationRequest_DispenseRequest `protobuf:"bytes,37,opt,name=dispense_request,json=dispenseRequest,proto3" json:"dispense_request,omitempty"`
	Substitution      *QICoreMedicationRequest_Substitution    `protobuf:"bytes,38,opt,name=substitution,proto3" json:"substitution,omitempty"`
	// An order/prescription that is being replaced
	PriorPrescription *datatypes_go_proto.Reference `protobuf:"bytes,39,opt,name=prior_prescription,json=priorPrescription,proto3" json:"prior_prescription,omitempty"`
	// Clinical Issue with action
	DetectedIssue []*datatypes_go_proto.Reference `protobuf:"bytes,40,rep,name=detected_issue,json=detectedIssue,proto3" json:"detected_issue,omitempty"`
	// A list of events of interest in the lifecycle
	EventHistory []*datatypes_go_proto.Reference `protobuf:"bytes,41,rep,name=event_history,json=eventHistory,proto3" json:"event_history,omitempty"`
}

func (x *QICoreMedicationRequest) Reset() {
	*x = QICoreMedicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationRequest) ProtoMessage() {}

func (x *QICoreMedicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationRequest.ProtoReflect.Descriptor instead.
func (*QICoreMedicationRequest) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{29}
}

func (x *QICoreMedicationRequest) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreMedicationRequest) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreMedicationRequest) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreMedicationRequest) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreMedicationRequest) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreMedicationRequest) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreMedicationRequest) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreMedicationRequest) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreMedicationRequest) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreMedicationRequest) GetStatus() *QICoreMedicationRequest_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreMedicationRequest) GetStatusReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

func (x *QICoreMedicationRequest) GetIntent() *QICoreMedicationRequest_IntentCode {
	if x != nil {
		return x.Intent
	}
	return nil
}

func (x *QICoreMedicationRequest) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *QICoreMedicationRequest) GetPriority() *QICoreMedicationRequest_PriorityCode {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *QICoreMedicationRequest) GetDoNotPerform() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.DoNotPerform
	}
	return nil
}

func (x *QICoreMedicationRequest) GetReported() *QICoreMedicationRequest_ReportedX {
	if x != nil {
		return x.Reported
	}
	return nil
}

func (x *QICoreMedicationRequest) GetMedication() *QICoreMedicationRequest_MedicationX {
	if x != nil {
		return x.Medication
	}
	return nil
}

func (x *QICoreMedicationRequest) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *QICoreMedicationRequest) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *QICoreMedicationRequest) GetSupportingInformation() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SupportingInformation
	}
	return nil
}

func (x *QICoreMedicationRequest) GetAuthoredOn() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.AuthoredOn
	}
	return nil
}

func (x *QICoreMedicationRequest) GetRequester() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Requester
	}
	return nil
}

func (x *QICoreMedicationRequest) GetPerformer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *QICoreMedicationRequest) GetPerformerType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PerformerType
	}
	return nil
}

func (x *QICoreMedicationRequest) GetRecorder() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Recorder
	}
	return nil
}

func (x *QICoreMedicationRequest) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *QICoreMedicationRequest) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *QICoreMedicationRequest) GetInstantiatesCanonical() []*datatypes_go_proto.Canonical {
	if x != nil {
		return x.InstantiatesCanonical
	}
	return nil
}

func (x *QICoreMedicationRequest) GetInstantiatesUri() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.InstantiatesUri
	}
	return nil
}

func (x *QICoreMedicationRequest) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *QICoreMedicationRequest) GetGroupIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.GroupIdentifier
	}
	return nil
}

func (x *QICoreMedicationRequest) GetCourseOfTherapyType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.CourseOfTherapyType
	}
	return nil
}

func (x *QICoreMedicationRequest) GetInsurance() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Insurance
	}
	return nil
}

func (x *QICoreMedicationRequest) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *QICoreMedicationRequest) GetDosageInstruction() []*datatypes_go_proto.Dosage {
	if x != nil {
		return x.DosageInstruction
	}
	return nil
}

func (x *QICoreMedicationRequest) GetDispenseRequest() *QICoreMedicationRequest_DispenseRequest {
	if x != nil {
		return x.DispenseRequest
	}
	return nil
}

func (x *QICoreMedicationRequest) GetSubstitution() *QICoreMedicationRequest_Substitution {
	if x != nil {
		return x.Substitution
	}
	return nil
}

func (x *QICoreMedicationRequest) GetPriorPrescription() *datatypes_go_proto.Reference {
	if x != nil {
		return x.PriorPrescription
	}
	return nil
}

func (x *QICoreMedicationRequest) GetDetectedIssue() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.DetectedIssue
	}
	return nil
}

func (x *QICoreMedicationRequest) GetEventHistory() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.EventHistory
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreMedicationStatement.
// Record of medication being taken by a patient.
// See
// http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-medicationstatement
type QICoreMedicationStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfils plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,11,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// Part of referenced event
	PartOf []*datatypes_go_proto.Reference       `protobuf:"bytes,12,rep,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	Status *QICoreMedicationStatement_StatusCode `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// Reason for current status
	StatusReason []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,rep,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// Type of medication usage
	Category   *datatypes_go_proto.CodeableConcept    `protobuf:"bytes,15,opt,name=category,proto3" json:"category,omitempty"`
	Medication *QICoreMedicationStatement_MedicationX `protobuf:"bytes,16,opt,name=medication,proto3" json:"medication,omitempty"`
	// Who is/was taking  the medication
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=subject,proto3" json:"subject,omitempty"`
	// Encounter / Episode associated with MedicationStatement
	Context   *datatypes_go_proto.Reference         `protobuf:"bytes,18,opt,name=context,proto3" json:"context,omitempty"`
	Effective *QICoreMedicationStatement_EffectiveX `protobuf:"bytes,19,opt,name=effective,proto3" json:"effective,omitempty"`
	// When the statement was asserted?
	DateAsserted *datatypes_go_proto.DateTime `protobuf:"bytes,20,opt,name=date_asserted,json=dateAsserted,proto3" json:"date_asserted,omitempty"`
	// Person or organization that provided the information about the taking of
	// this medication
	InformationSource *datatypes_go_proto.Reference `protobuf:"bytes,21,opt,name=information_source,json=informationSource,proto3" json:"information_source,omitempty"`
	// Additional supporting information
	DerivedFrom []*datatypes_go_proto.Reference `protobuf:"bytes,22,rep,name=derived_from,json=derivedFrom,proto3" json:"derived_from,omitempty"`
	// Reason for why the medication is being/was taken
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Condition or observation that supports why the medication is being/was
	// taken
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,24,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// Further information about the statement
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,25,rep,name=note,proto3" json:"note,omitempty"`
	// Details of how medication is/was taken or should be taken
	Dosage []*datatypes_go_proto.Dosage `protobuf:"bytes,26,rep,name=dosage,proto3" json:"dosage,omitempty"`
}

func (x *QICoreMedicationStatement) Reset() {
	*x = QICoreMedicationStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationStatement) ProtoMessage() {}

func (x *QICoreMedicationStatement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationStatement.ProtoReflect.Descriptor instead.
func (*QICoreMedicationStatement) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{30}
}

func (x *QICoreMedicationStatement) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreMedicationStatement) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreMedicationStatement) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreMedicationStatement) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreMedicationStatement) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreMedicationStatement) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreMedicationStatement) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreMedicationStatement) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreMedicationStatement) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreMedicationStatement) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *QICoreMedicationStatement) GetPartOf() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *QICoreMedicationStatement) GetStatus() *QICoreMedicationStatement_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreMedicationStatement) GetStatusReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

func (x *QICoreMedicationStatement) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *QICoreMedicationStatement) GetMedication() *QICoreMedicationStatement_MedicationX {
	if x != nil {
		return x.Medication
	}
	return nil
}

func (x *QICoreMedicationStatement) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *QICoreMedicationStatement) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *QICoreMedicationStatement) GetEffective() *QICoreMedicationStatement_EffectiveX {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *QICoreMedicationStatement) GetDateAsserted() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.DateAsserted
	}
	return nil
}

func (x *QICoreMedicationStatement) GetInformationSource() *datatypes_go_proto.Reference {
	if x != nil {
		return x.InformationSource
	}
	return nil
}

func (x *QICoreMedicationStatement) GetDerivedFrom() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.DerivedFrom
	}
	return nil
}

func (x *QICoreMedicationStatement) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *QICoreMedicationStatement) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *QICoreMedicationStatement) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *QICoreMedicationStatement) GetDosage() []*datatypes_go_proto.Dosage {
	if x != nil {
		return x.Dosage
	}
	return nil
}

// Auto-generated from StructureDefinition for MilitaryService.
// Explanation associated with refuted status.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-military-service
type PatientMilitaryService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *PatientMilitaryService) Reset() {
	*x = PatientMilitaryService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientMilitaryService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientMilitaryService) ProtoMessage() {}

func (x *PatientMilitaryService) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientMilitaryService.ProtoReflect.Descriptor instead.
func (*PatientMilitaryService) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{31}
}

func (x *PatientMilitaryService) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientMilitaryService) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreNutritionOrder.
// Diet, formula or nutritional supplement request.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-nutritionorder
type QICoreNutritionOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifiers assigned to this order
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Instantiates FHIR protocol or definition
	InstantiatesCanonical []*datatypes_go_proto.Canonical `protobuf:"bytes,11,rep,name=instantiates_canonical,json=instantiatesCanonical,proto3" json:"instantiates_canonical,omitempty"`
	// Instantiates external protocol or definition
	InstantiatesUri []*datatypes_go_proto.Uri `protobuf:"bytes,12,rep,name=instantiates_uri,json=instantiatesUri,proto3" json:"instantiates_uri,omitempty"`
	// Instantiates protocol or definition
	Instantiates []*datatypes_go_proto.Uri        `protobuf:"bytes,13,rep,name=instantiates,proto3" json:"instantiates,omitempty"`
	Status       *QICoreNutritionOrder_StatusCode `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	Intent       *QICoreNutritionOrder_IntentCode `protobuf:"bytes,15,opt,name=intent,proto3" json:"intent,omitempty"`
	// The person who requires the diet, formula or nutritional supplement
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=patient,proto3" json:"patient,omitempty"`
	// The encounter associated with this nutrition order
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Date and time the nutrition order was requested
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,18,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	// Who ordered the diet, formula or nutritional supplement
	Orderer *datatypes_go_proto.Reference `protobuf:"bytes,19,opt,name=orderer,proto3" json:"orderer,omitempty"`
	// List of the patient's food and nutrition-related allergies and intolerances
	AllergyIntolerance []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=allergy_intolerance,json=allergyIntolerance,proto3" json:"allergy_intolerance,omitempty"`
	// Order-specific modifier about the type of food that should be given
	FoodPreferenceModifier []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,rep,name=food_preference_modifier,json=foodPreferenceModifier,proto3" json:"food_preference_modifier,omitempty"`
	// Order-specific modifier about the type of food that should not be given
	ExcludeFoodModifier []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,22,rep,name=exclude_food_modifier,json=excludeFoodModifier,proto3" json:"exclude_food_modifier,omitempty"`
	OralDiet            *QICoreNutritionOrder_OralDiet        `protobuf:"bytes,23,opt,name=oral_diet,json=oralDiet,proto3" json:"oral_diet,omitempty"`
	Supplement          []*QICoreNutritionOrder_Supplement    `protobuf:"bytes,24,rep,name=supplement,proto3" json:"supplement,omitempty"`
	EnteralFormula      *QICoreNutritionOrder_EnteralFormula  `protobuf:"bytes,25,opt,name=enteral_formula,json=enteralFormula,proto3" json:"enteral_formula,omitempty"`
	// Comments
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,26,rep,name=note,proto3" json:"note,omitempty"`
}

func (x *QICoreNutritionOrder) Reset() {
	*x = QICoreNutritionOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreNutritionOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreNutritionOrder) ProtoMessage() {}

func (x *QICoreNutritionOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreNutritionOrder.ProtoReflect.Descriptor instead.
func (*QICoreNutritionOrder) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{32}
}

func (x *QICoreNutritionOrder) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreNutritionOrder) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreNutritionOrder) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreNutritionOrder) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreNutritionOrder) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreNutritionOrder) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreNutritionOrder) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreNutritionOrder) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreNutritionOrder) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreNutritionOrder) GetInstantiatesCanonical() []*datatypes_go_proto.Canonical {
	if x != nil {
		return x.InstantiatesCanonical
	}
	return nil
}

func (x *QICoreNutritionOrder) GetInstantiatesUri() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.InstantiatesUri
	}
	return nil
}

func (x *QICoreNutritionOrder) GetInstantiates() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.Instantiates
	}
	return nil
}

func (x *QICoreNutritionOrder) GetStatus() *QICoreNutritionOrder_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreNutritionOrder) GetIntent() *QICoreNutritionOrder_IntentCode {
	if x != nil {
		return x.Intent
	}
	return nil
}

func (x *QICoreNutritionOrder) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *QICoreNutritionOrder) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *QICoreNutritionOrder) GetDateTime() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.DateTime
	}
	return nil
}

func (x *QICoreNutritionOrder) GetOrderer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Orderer
	}
	return nil
}

func (x *QICoreNutritionOrder) GetAllergyIntolerance() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.AllergyIntolerance
	}
	return nil
}

func (x *QICoreNutritionOrder) GetFoodPreferenceModifier() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.FoodPreferenceModifier
	}
	return nil
}

func (x *QICoreNutritionOrder) GetExcludeFoodModifier() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ExcludeFoodModifier
	}
	return nil
}

func (x *QICoreNutritionOrder) GetOralDiet() *QICoreNutritionOrder_OralDiet {
	if x != nil {
		return x.OralDiet
	}
	return nil
}

func (x *QICoreNutritionOrder) GetSupplement() []*QICoreNutritionOrder_Supplement {
	if x != nil {
		return x.Supplement
	}
	return nil
}

func (x *QICoreNutritionOrder) GetEnteralFormula() *QICoreNutritionOrder_EnteralFormula {
	if x != nil {
		return x.EnteralFormula
	}
	return nil
}

func (x *QICoreNutritionOrder) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreObservation.
// Measurements and simple assertions.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-observation
type QICoreObservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,11,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// Part of referenced event
	PartOf []*datatypes_go_proto.Reference `protobuf:"bytes,12,rep,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	Status *QICoreObservation_StatusCode   `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,rep,name=category,proto3" json:"category,omitempty"`
	// Type of observation (code / type)
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what the observation is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=subject,proto3" json:"subject,omitempty"`
	// What the observation is about, when it is not about the subject of record
	Focus []*datatypes_go_proto.Reference `protobuf:"bytes,17,rep,name=focus,proto3" json:"focus,omitempty"`
	// Healthcare event during which this observation is made
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Effective *QICoreObservation_EffectiveX `protobuf:"bytes,19,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this version was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,20,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,21,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *QICoreObservation_ValueX       `protobuf:"bytes,22,opt,name=value,proto3" json:"value,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,rep,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about the observation
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,25,rep,name=note,proto3" json:"note,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,26,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,27,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,28,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference       `protobuf:"bytes,29,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange []*QICoreObservation_ReferenceRange `protobuf:"bytes,30,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	// Related resource that belongs to the Observation group
	HasMember []*datatypes_go_proto.Reference `protobuf:"bytes,31,rep,name=has_member,json=hasMember,proto3" json:"has_member,omitempty"`
	// Related measurements the observation is made from
	DerivedFrom []*datatypes_go_proto.Reference `protobuf:"bytes,32,rep,name=derived_from,json=derivedFrom,proto3" json:"derived_from,omitempty"`
	Component   []*QICoreObservation_Component  `protobuf:"bytes,33,rep,name=component,proto3" json:"component,omitempty"`
	// The body position during the observation
	BodyPosition *datatypes_go_proto.CodeableConcept `protobuf:"bytes,34,opt,name=body_position,json=bodyPosition,proto3" json:"body_position,omitempty"`
	// Qualitative change or trend in the measurement
	Delta *datatypes_go_proto.CodeableConcept `protobuf:"bytes,35,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *QICoreObservation) Reset() {
	*x = QICoreObservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreObservation) ProtoMessage() {}

func (x *QICoreObservation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreObservation.ProtoReflect.Descriptor instead.
func (*QICoreObservation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{33}
}

func (x *QICoreObservation) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreObservation) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreObservation) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreObservation) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreObservation) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreObservation) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreObservation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreObservation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreObservation) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreObservation) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *QICoreObservation) GetPartOf() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *QICoreObservation) GetStatus() *QICoreObservation_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreObservation) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *QICoreObservation) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *QICoreObservation) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *QICoreObservation) GetFocus() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Focus
	}
	return nil
}

func (x *QICoreObservation) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *QICoreObservation) GetEffective() *QICoreObservation_EffectiveX {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *QICoreObservation) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *QICoreObservation) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *QICoreObservation) GetValue() *QICoreObservation_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *QICoreObservation) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *QICoreObservation) GetInterpretation() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *QICoreObservation) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *QICoreObservation) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *QICoreObservation) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *QICoreObservation) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *QICoreObservation) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *QICoreObservation) GetReferenceRange() []*QICoreObservation_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *QICoreObservation) GetHasMember() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.HasMember
	}
	return nil
}

func (x *QICoreObservation) GetDerivedFrom() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.DerivedFrom
	}
	return nil
}

func (x *QICoreObservation) GetComponent() []*QICoreObservation_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *QICoreObservation) GetBodyPosition() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodyPosition
	}
	return nil
}

func (x *QICoreObservation) GetDelta() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Delta
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreOrganization.
// A grouping of people or organizations with a common purpose.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-organization
type QICoreOrganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifies this organization  across multiple systems
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Whether the organization's record is still in active use
	Active *datatypes_go_proto.Boolean `protobuf:"bytes,11,opt,name=active,proto3" json:"active,omitempty"`
	// Kind of organization
	Type []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=type,proto3" json:"type,omitempty"`
	// Name used for the organization
	Name *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// A list of alternate names that the organization is known as, or was known
	// as in the past
	Alias []*datatypes_go_proto.String `protobuf:"bytes,14,rep,name=alias,proto3" json:"alias,omitempty"`
	// A contact detail for the organization
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,15,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// An address for the organization
	Address []*datatypes_go_proto.Address `protobuf:"bytes,16,rep,name=address,proto3" json:"address,omitempty"`
	// The organization of which this organization forms a part
	PartOf  *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	Contact []*QICoreOrganization_Contact `protobuf:"bytes,18,rep,name=contact,proto3" json:"contact,omitempty"`
	// Technical endpoints providing access to services operated for the
	// organization
	Endpoint []*datatypes_go_proto.Reference `protobuf:"bytes,19,rep,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *QICoreOrganization) Reset() {
	*x = QICoreOrganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreOrganization) ProtoMessage() {}

func (x *QICoreOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreOrganization.ProtoReflect.Descriptor instead.
func (*QICoreOrganization) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{34}
}

func (x *QICoreOrganization) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreOrganization) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreOrganization) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreOrganization) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreOrganization) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreOrganization) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreOrganization) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreOrganization) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreOrganization) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreOrganization) GetActive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *QICoreOrganization) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreOrganization) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *QICoreOrganization) GetAlias() []*datatypes_go_proto.String {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *QICoreOrganization) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *QICoreOrganization) GetAddress() []*datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *QICoreOrganization) GetPartOf() *datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *QICoreOrganization) GetContact() []*QICoreOrganization_Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *QICoreOrganization) GetEndpoint() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

// Auto-generated from StructureDefinition for QICorePatient.
// Information about an individual or animal receiving health care services.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-patient
type QICorePatient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// An identifier for this patient
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Whether this patient's record is in active use
	Active *datatypes_go_proto.Boolean `protobuf:"bytes,11,opt,name=active,proto3" json:"active,omitempty"`
	// A name associated with the patient
	Name []*datatypes_go_proto.HumanName `protobuf:"bytes,12,rep,name=name,proto3" json:"name,omitempty"`
	// A contact detail for the individual
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,13,rep,name=telecom,proto3" json:"telecom,omitempty"`
	Gender  *QICorePatient_GenderCode          `protobuf:"bytes,14,opt,name=gender,proto3" json:"gender,omitempty"`
	// The date of birth for the individual
	BirthDate *datatypes_go_proto.Date `protobuf:"bytes,15,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
	Deceased  *QICorePatient_DeceasedX `protobuf:"bytes,16,opt,name=deceased,proto3" json:"deceased,omitempty"`
	// An address for the individual
	Address []*datatypes_go_proto.Address `protobuf:"bytes,17,rep,name=address,proto3" json:"address,omitempty"`
	// Marital (civil) status of a patient
	MaritalStatus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,opt,name=marital_status,json=maritalStatus,proto3" json:"marital_status,omitempty"`
	MultipleBirth *QICorePatient_MultipleBirthX       `protobuf:"bytes,19,opt,name=multiple_birth,json=multipleBirth,proto3" json:"multiple_birth,omitempty"`
	// Image of the patient
	Photo         []*datatypes_go_proto.Attachment `protobuf:"bytes,20,rep,name=photo,proto3" json:"photo,omitempty"`
	Contact       []*QICorePatient_Contact         `protobuf:"bytes,21,rep,name=contact,proto3" json:"contact,omitempty"`
	Communication []*QICorePatient_Communication   `protobuf:"bytes,22,rep,name=communication,proto3" json:"communication,omitempty"`
	// Patient's nominated primary care provider
	GeneralPractitioner []*datatypes_go_proto.Reference `protobuf:"bytes,23,rep,name=general_practitioner,json=generalPractitioner,proto3" json:"general_practitioner,omitempty"`
	// Organization that is the custodian of the patient record
	ManagingOrganization *datatypes_go_proto.Reference `protobuf:"bytes,24,opt,name=managing_organization,json=managingOrganization,proto3" json:"managing_organization,omitempty"`
	Link                 []*QICorePatient_Link         `protobuf:"bytes,25,rep,name=link,proto3" json:"link,omitempty"`
	// Extension
	Race *uscore_go_proto.PatientUSCoreRaceExtension `protobuf:"bytes,26,opt,name=race,proto3" json:"race,omitempty"`
	// Extension
	Ethnicity *uscore_go_proto.PatientUSCoreEthnicityExtension `protobuf:"bytes,27,opt,name=ethnicity,proto3" json:"ethnicity,omitempty"`
	// Extension
	Birthsex *uscore_go_proto.PatientUSCoreBirthSexExtension_ValueCode `protobuf:"bytes,28,opt,name=birthsex,proto3" json:"birthsex,omitempty"`
	// The patient's professed religious affiliations
	Religion *datatypes_go_proto.CodeableConcept `protobuf:"bytes,29,opt,name=religion,proto3" json:"religion,omitempty"`
	// Place of Birth for patient
	BirthPlace *datatypes_go_proto.Address `protobuf:"bytes,30,opt,name=birth_place,json=birthPlace,proto3" json:"birth_place,omitempty"`
	// Condition(s) limiting movement, senses, or activities
	Disability []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,31,rep,name=disability,proto3" json:"disability,omitempty"`
	// Nationality
	Nationality []*extensions_go_proto.PatientNationality `protobuf:"bytes,32,rep,name=nationality,proto3" json:"nationality,omitempty"`
	// Post-mortem donor status
	CadavericDonor *datatypes_go_proto.Boolean `protobuf:"bytes,33,opt,name=cadaveric_donor,json=cadavericDonor,proto3" json:"cadaveric_donor,omitempty"`
	// Explanation associated with refuted status
	MilitaryService *datatypes_go_proto.CodeableConcept `protobuf:"bytes,34,opt,name=military_service,json=militaryService,proto3" json:"military_service,omitempty"`
	// Time of day of birth
	BirthTime *datatypes_go_proto.DateTime `protobuf:"bytes,35,opt,name=birth_time,json=birthTime,proto3" json:"birth_time,omitempty"`
}

func (x *QICorePatient) Reset() {
	*x = QICorePatient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICorePatient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICorePatient) ProtoMessage() {}

func (x *QICorePatient) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICorePatient.ProtoReflect.Descriptor instead.
func (*QICorePatient) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{35}
}

func (x *QICorePatient) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICorePatient) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICorePatient) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICorePatient) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICorePatient) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICorePatient) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICorePatient) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICorePatient) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICorePatient) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICorePatient) GetActive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *QICorePatient) GetName() []*datatypes_go_proto.HumanName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *QICorePatient) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *QICorePatient) GetGender() *QICorePatient_GenderCode {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *QICorePatient) GetBirthDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.BirthDate
	}
	return nil
}

func (x *QICorePatient) GetDeceased() *QICorePatient_DeceasedX {
	if x != nil {
		return x.Deceased
	}
	return nil
}

func (x *QICorePatient) GetAddress() []*datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *QICorePatient) GetMaritalStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.MaritalStatus
	}
	return nil
}

func (x *QICorePatient) GetMultipleBirth() *QICorePatient_MultipleBirthX {
	if x != nil {
		return x.MultipleBirth
	}
	return nil
}

func (x *QICorePatient) GetPhoto() []*datatypes_go_proto.Attachment {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *QICorePatient) GetContact() []*QICorePatient_Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *QICorePatient) GetCommunication() []*QICorePatient_Communication {
	if x != nil {
		return x.Communication
	}
	return nil
}

func (x *QICorePatient) GetGeneralPractitioner() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.GeneralPractitioner
	}
	return nil
}

func (x *QICorePatient) GetManagingOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ManagingOrganization
	}
	return nil
}

func (x *QICorePatient) GetLink() []*QICorePatient_Link {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *QICorePatient) GetRace() *uscore_go_proto.PatientUSCoreRaceExtension {
	if x != nil {
		return x.Race
	}
	return nil
}

func (x *QICorePatient) GetEthnicity() *uscore_go_proto.PatientUSCoreEthnicityExtension {
	if x != nil {
		return x.Ethnicity
	}
	return nil
}

func (x *QICorePatient) GetBirthsex() *uscore_go_proto.PatientUSCoreBirthSexExtension_ValueCode {
	if x != nil {
		return x.Birthsex
	}
	return nil
}

func (x *QICorePatient) GetReligion() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Religion
	}
	return nil
}

func (x *QICorePatient) GetBirthPlace() *datatypes_go_proto.Address {
	if x != nil {
		return x.BirthPlace
	}
	return nil
}

func (x *QICorePatient) GetDisability() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Disability
	}
	return nil
}

func (x *QICorePatient) GetNationality() []*extensions_go_proto.PatientNationality {
	if x != nil {
		return x.Nationality
	}
	return nil
}

func (x *QICorePatient) GetCadavericDonor() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.CadavericDonor
	}
	return nil
}

func (x *QICorePatient) GetMilitaryService() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.MilitaryService
	}
	return nil
}

func (x *QICorePatient) GetBirthTime() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.BirthTime
	}
	return nil
}

// Auto-generated from StructureDefinition for QICorePractitioner.
// A person with a  formal responsibility in the provisioning of healthcare or
// related services. See
// http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-practitioner
type QICorePractitioner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// An identifier for the person as this agent
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Whether this practitioner's record is in active use
	Active *datatypes_go_proto.Boolean `protobuf:"bytes,11,opt,name=active,proto3" json:"active,omitempty"`
	// The name(s) associated with the practitioner
	Name *datatypes_go_proto.HumanName `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	// A contact detail for the practitioner (that apply to all roles)
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,13,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// Address(es) of the practitioner that are not role specific (typically home
	// address)
	Address []*datatypes_go_proto.Address  `protobuf:"bytes,14,rep,name=address,proto3" json:"address,omitempty"`
	Gender  *QICorePractitioner_GenderCode `protobuf:"bytes,15,opt,name=gender,proto3" json:"gender,omitempty"`
	// The date  on which the practitioner was born
	BirthDate *datatypes_go_proto.Date `protobuf:"bytes,16,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
	// Image of the person
	Photo         []*datatypes_go_proto.Attachment    `protobuf:"bytes,17,rep,name=photo,proto3" json:"photo,omitempty"`
	Qualification []*QICorePractitioner_Qualification `protobuf:"bytes,18,rep,name=qualification,proto3" json:"qualification,omitempty"`
	// A language the practitioner can use in patient communication
	Communication []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,19,rep,name=communication,proto3" json:"communication,omitempty"`
}

func (x *QICorePractitioner) Reset() {
	*x = QICorePractitioner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICorePractitioner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICorePractitioner) ProtoMessage() {}

func (x *QICorePractitioner) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICorePractitioner.ProtoReflect.Descriptor instead.
func (*QICorePractitioner) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{36}
}

func (x *QICorePractitioner) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICorePractitioner) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICorePractitioner) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICorePractitioner) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICorePractitioner) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICorePractitioner) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICorePractitioner) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICorePractitioner) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICorePractitioner) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICorePractitioner) GetActive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *QICorePractitioner) GetName() *datatypes_go_proto.HumanName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *QICorePractitioner) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *QICorePractitioner) GetAddress() []*datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *QICorePractitioner) GetGender() *QICorePractitioner_GenderCode {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *QICorePractitioner) GetBirthDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.BirthDate
	}
	return nil
}

func (x *QICorePractitioner) GetPhoto() []*datatypes_go_proto.Attachment {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *QICorePractitioner) GetQualification() []*QICorePractitioner_Qualification {
	if x != nil {
		return x.Qualification
	}
	return nil
}

func (x *QICorePractitioner) GetCommunication() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Communication
	}
	return nil
}

// Auto-generated from StructureDefinition for QICorePractitionerRole.
// Roles/organizations the practitioner is associated with.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-practitionerrole
type QICorePractitionerRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The list of healthcare services that this worker provides for this role's
	// Organization/Location(s)
	HealthcareService []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=healthcare_service,json=healthcareService,proto3" json:"healthcare_service,omitempty"`
	// Contact details that are specific to the role/location/service
	Telecom       []*datatypes_go_proto.ContactPoint      `protobuf:"bytes,11,rep,name=telecom,proto3" json:"telecom,omitempty"`
	AvailableTime []*QICorePractitionerRole_AvailableTime `protobuf:"bytes,12,rep,name=available_time,json=availableTime,proto3" json:"available_time,omitempty"`
	NotAvailable  []*QICorePractitionerRole_NotAvailable  `protobuf:"bytes,13,rep,name=not_available,json=notAvailable,proto3" json:"not_available,omitempty"`
	// Description of availability exceptions
	AvailabilityExceptions *datatypes_go_proto.String `protobuf:"bytes,14,opt,name=availability_exceptions,json=availabilityExceptions,proto3" json:"availability_exceptions,omitempty"`
	// Technical endpoints providing access to services operated for the
	// practitioner with this role
	Endpoint []*datatypes_go_proto.Reference `protobuf:"bytes,15,rep,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *QICorePractitionerRole) Reset() {
	*x = QICorePractitionerRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICorePractitionerRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICorePractitionerRole) ProtoMessage() {}

func (x *QICorePractitionerRole) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICorePractitionerRole.ProtoReflect.Descriptor instead.
func (*QICorePractitionerRole) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{37}
}

func (x *QICorePractitionerRole) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICorePractitionerRole) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICorePractitionerRole) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICorePractitionerRole) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICorePractitionerRole) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICorePractitionerRole) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICorePractitionerRole) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICorePractitionerRole) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICorePractitionerRole) GetHealthcareService() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.HealthcareService
	}
	return nil
}

func (x *QICorePractitionerRole) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *QICorePractitionerRole) GetAvailableTime() []*QICorePractitionerRole_AvailableTime {
	if x != nil {
		return x.AvailableTime
	}
	return nil
}

func (x *QICorePractitionerRole) GetNotAvailable() []*QICorePractitionerRole_NotAvailable {
	if x != nil {
		return x.NotAvailable
	}
	return nil
}

func (x *QICorePractitionerRole) GetAvailabilityExceptions() *datatypes_go_proto.String {
	if x != nil {
		return x.AvailabilityExceptions
	}
	return nil
}

func (x *QICorePractitionerRole) GetEndpoint() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreProcedure.
// An action that is being or was performed on a patient.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-procedure
type QICoreProcedure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Identifiers for this procedure
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Instantiates FHIR protocol or definition
	InstantiatesCanonical []*datatypes_go_proto.Canonical `protobuf:"bytes,11,rep,name=instantiates_canonical,json=instantiatesCanonical,proto3" json:"instantiates_canonical,omitempty"`
	// Instantiates external protocol or definition
	InstantiatesUri []*datatypes_go_proto.Uri `protobuf:"bytes,12,rep,name=instantiates_uri,json=instantiatesUri,proto3" json:"instantiates_uri,omitempty"`
	// A request for this procedure
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,13,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// Part of referenced event
	PartOf []*datatypes_go_proto.Reference `protobuf:"bytes,14,rep,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	Status *QICoreProcedure_StatusCode     `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	// Reason for current status
	StatusReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// Classification of the procedure
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,17,opt,name=category,proto3" json:"category,omitempty"`
	// SNOMED-CT | ICD-10 | CPT-4
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,opt,name=code,proto3" json:"code,omitempty"`
	// Who the procedure was performed on
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,19,opt,name=subject,proto3" json:"subject,omitempty"`
	// Encounter created as part of
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Performed *QICoreProcedure_PerformedX   `protobuf:"bytes,21,opt,name=performed,proto3" json:"performed,omitempty"`
	// Who recorded the procedure
	Recorder *datatypes_go_proto.Reference `protobuf:"bytes,22,opt,name=recorder,proto3" json:"recorder,omitempty"`
	// Person who asserts this procedure
	Asserter  *datatypes_go_proto.Reference `protobuf:"bytes,23,opt,name=asserter,proto3" json:"asserter,omitempty"`
	Performer []*QICoreProcedure_Performer  `protobuf:"bytes,24,rep,name=performer,proto3" json:"performer,omitempty"`
	// Where the procedure happened
	Location *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=location,proto3" json:"location,omitempty"`
	// Coded reason procedure performed
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,26,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// The justification that the procedure was performed
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,27,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// Target body sites
	BodySite []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,28,rep,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// The result of procedure
	Outcome *datatypes_go_proto.CodeableConcept `protobuf:"bytes,29,opt,name=outcome,proto3" json:"outcome,omitempty"`
	// Any report resulting from the procedure
	Report []*datatypes_go_proto.Reference `protobuf:"bytes,30,rep,name=report,proto3" json:"report,omitempty"`
	// Complication following the procedure
	Complication []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,31,rep,name=complication,proto3" json:"complication,omitempty"`
	// A condition that is a result of the procedure
	ComplicationDetail []*datatypes_go_proto.Reference `protobuf:"bytes,32,rep,name=complication_detail,json=complicationDetail,proto3" json:"complication_detail,omitempty"`
	// Instructions for follow up
	FollowUp []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,33,rep,name=follow_up,json=followUp,proto3" json:"follow_up,omitempty"`
	// Additional information about the procedure
	Note        []*datatypes_go_proto.Annotation `protobuf:"bytes,34,rep,name=note,proto3" json:"note,omitempty"`
	FocalDevice []*QICoreProcedure_FocalDevice   `protobuf:"bytes,35,rep,name=focal_device,json=focalDevice,proto3" json:"focal_device,omitempty"`
	// Items used during procedure
	UsedReference []*datatypes_go_proto.Reference `protobuf:"bytes,36,rep,name=used_reference,json=usedReference,proto3" json:"used_reference,omitempty"`
	// Coded items used during the procedure
	UsedCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,37,rep,name=used_code,json=usedCode,proto3" json:"used_code,omitempty"`
	// The access point or points used for this procedure
	ApproachBodyStructure []*datatypes_go_proto.Reference `protobuf:"bytes,38,rep,name=approach_body_structure,json=approachBodyStructure,proto3" json:"approach_body_structure,omitempty"`
	// The first incision time
	IncisionDateTime *datatypes_go_proto.DateTime `protobuf:"bytes,39,opt,name=incision_date_time,json=incisionDateTime,proto3" json:"incision_date_time,omitempty"`
}

func (x *QICoreProcedure) Reset() {
	*x = QICoreProcedure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreProcedure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreProcedure) ProtoMessage() {}

func (x *QICoreProcedure) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreProcedure.ProtoReflect.Descriptor instead.
func (*QICoreProcedure) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{38}
}

func (x *QICoreProcedure) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreProcedure) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreProcedure) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreProcedure) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreProcedure) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreProcedure) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreProcedure) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreProcedure) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreProcedure) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreProcedure) GetInstantiatesCanonical() []*datatypes_go_proto.Canonical {
	if x != nil {
		return x.InstantiatesCanonical
	}
	return nil
}

func (x *QICoreProcedure) GetInstantiatesUri() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.InstantiatesUri
	}
	return nil
}

func (x *QICoreProcedure) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *QICoreProcedure) GetPartOf() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *QICoreProcedure) GetStatus() *QICoreProcedure_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreProcedure) GetStatusReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

func (x *QICoreProcedure) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *QICoreProcedure) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *QICoreProcedure) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *QICoreProcedure) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *QICoreProcedure) GetPerformed() *QICoreProcedure_PerformedX {
	if x != nil {
		return x.Performed
	}
	return nil
}

func (x *QICoreProcedure) GetRecorder() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Recorder
	}
	return nil
}

func (x *QICoreProcedure) GetAsserter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Asserter
	}
	return nil
}

func (x *QICoreProcedure) GetPerformer() []*QICoreProcedure_Performer {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *QICoreProcedure) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *QICoreProcedure) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *QICoreProcedure) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *QICoreProcedure) GetBodySite() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *QICoreProcedure) GetOutcome() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *QICoreProcedure) GetReport() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *QICoreProcedure) GetComplication() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Complication
	}
	return nil
}

func (x *QICoreProcedure) GetComplicationDetail() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ComplicationDetail
	}
	return nil
}

func (x *QICoreProcedure) GetFollowUp() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.FollowUp
	}
	return nil
}

func (x *QICoreProcedure) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *QICoreProcedure) GetFocalDevice() []*QICoreProcedure_FocalDevice {
	if x != nil {
		return x.FocalDevice
	}
	return nil
}

func (x *QICoreProcedure) GetUsedReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.UsedReference
	}
	return nil
}

func (x *QICoreProcedure) GetUsedCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.UsedCode
	}
	return nil
}

func (x *QICoreProcedure) GetApproachBodyStructure() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ApproachBodyStructure
	}
	return nil
}

func (x *QICoreProcedure) GetIncisionDateTime() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.IncisionDateTime
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreRelatedPerson.
// A person that is related to a patient, but who is not a direct target of
// care. See
// http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-relatedperson
type QICoreRelatedPerson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A human identifier for this person
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Whether this related person's record is in active use
	Active *datatypes_go_proto.Boolean `protobuf:"bytes,11,opt,name=active,proto3" json:"active,omitempty"`
	// The patient this person is related to
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,12,opt,name=patient,proto3" json:"patient,omitempty"`
	// The nature of the relationship
	Relationship []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,rep,name=relationship,proto3" json:"relationship,omitempty"`
	// A name associated with the person
	Name []*datatypes_go_proto.HumanName `protobuf:"bytes,14,rep,name=name,proto3" json:"name,omitempty"`
	// A contact detail for the person
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,15,rep,name=telecom,proto3" json:"telecom,omitempty"`
	Gender  *QICoreRelatedPerson_GenderCode    `protobuf:"bytes,16,opt,name=gender,proto3" json:"gender,omitempty"`
	// The date on which the related person was born
	BirthDate *datatypes_go_proto.Date `protobuf:"bytes,17,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
	// Address where the related person can be contacted or visited
	Address []*datatypes_go_proto.Address `protobuf:"bytes,18,rep,name=address,proto3" json:"address,omitempty"`
	// Image of the person
	Photo []*datatypes_go_proto.Attachment `protobuf:"bytes,19,rep,name=photo,proto3" json:"photo,omitempty"`
	// Period of time that this relationship is considered valid
	Period        *datatypes_go_proto.Period           `protobuf:"bytes,20,opt,name=period,proto3" json:"period,omitempty"`
	Communication []*QICoreRelatedPerson_Communication `protobuf:"bytes,21,rep,name=communication,proto3" json:"communication,omitempty"`
}

func (x *QICoreRelatedPerson) Reset() {
	*x = QICoreRelatedPerson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreRelatedPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreRelatedPerson) ProtoMessage() {}

func (x *QICoreRelatedPerson) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreRelatedPerson.ProtoReflect.Descriptor instead.
func (*QICoreRelatedPerson) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{39}
}

func (x *QICoreRelatedPerson) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreRelatedPerson) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreRelatedPerson) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreRelatedPerson) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreRelatedPerson) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreRelatedPerson) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreRelatedPerson) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreRelatedPerson) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreRelatedPerson) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreRelatedPerson) GetActive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *QICoreRelatedPerson) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *QICoreRelatedPerson) GetRelationship() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *QICoreRelatedPerson) GetName() []*datatypes_go_proto.HumanName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *QICoreRelatedPerson) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *QICoreRelatedPerson) GetGender() *QICoreRelatedPerson_GenderCode {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *QICoreRelatedPerson) GetBirthDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.BirthDate
	}
	return nil
}

func (x *QICoreRelatedPerson) GetAddress() []*datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *QICoreRelatedPerson) GetPhoto() []*datatypes_go_proto.Attachment {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *QICoreRelatedPerson) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *QICoreRelatedPerson) GetCommunication() []*QICoreRelatedPerson_Communication {
	if x != nil {
		return x.Communication
	}
	return nil
}

// Auto-generated from StructureDefinition for
// QICoreServiceRequestAppropriatenessScore. Appropriateness Score. See
// http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-servicerequest-appropriatenessScore
type ServiceRequestQICoreServiceRequestAppropriatenessScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id    *datatypes_go_proto.Id                                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ServiceRequestQICoreServiceRequestAppropriatenessScore) Reset() {
	*x = ServiceRequestQICoreServiceRequestAppropriatenessScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceRequestQICoreServiceRequestAppropriatenessScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceRequestQICoreServiceRequestAppropriatenessScore) ProtoMessage() {}

func (x *ServiceRequestQICoreServiceRequestAppropriatenessScore) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceRequestQICoreServiceRequestAppropriatenessScore.ProtoReflect.Descriptor instead.
func (*ServiceRequestQICoreServiceRequestAppropriatenessScore) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{40}
}

func (x *ServiceRequestQICoreServiceRequestAppropriatenessScore) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ServiceRequestQICoreServiceRequestAppropriatenessScore) GetValue() *ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreServiceRequest.
// A request for a service to be performed.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-servicerequest
type QICoreServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifiers assigned to this order
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Instantiates FHIR protocol or definition
	InstantiatesCanonical []*datatypes_go_proto.Canonical `protobuf:"bytes,11,rep,name=instantiates_canonical,json=instantiatesCanonical,proto3" json:"instantiates_canonical,omitempty"`
	// Instantiates external protocol or definition
	InstantiatesUri []*datatypes_go_proto.Uri `protobuf:"bytes,12,rep,name=instantiates_uri,json=instantiatesUri,proto3" json:"instantiates_uri,omitempty"`
	// What request fulfills
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,13,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// What request replaces
	Replaces []*datatypes_go_proto.Reference `protobuf:"bytes,14,rep,name=replaces,proto3" json:"replaces,omitempty"`
	// Composite Request ID
	Requisition *datatypes_go_proto.Identifier   `protobuf:"bytes,15,opt,name=requisition,proto3" json:"requisition,omitempty"`
	Status      *QICoreServiceRequest_StatusCode `protobuf:"bytes,16,opt,name=status,proto3" json:"status,omitempty"`
	Intent      *QICoreServiceRequest_IntentCode `protobuf:"bytes,17,opt,name=intent,proto3" json:"intent,omitempty"`
	// Classification of service
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,rep,name=category,proto3" json:"category,omitempty"`
	Priority *QICoreServiceRequest_PriorityCode    `protobuf:"bytes,19,opt,name=priority,proto3" json:"priority,omitempty"`
	// True if service/procedure should not be performed
	DoNotPerform *datatypes_go_proto.Boolean `protobuf:"bytes,20,opt,name=do_not_perform,json=doNotPerform,proto3" json:"do_not_perform,omitempty"`
	// What is being requested/ordered
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=code,proto3" json:"code,omitempty"`
	// Additional order information
	OrderDetail []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,22,rep,name=order_detail,json=orderDetail,proto3" json:"order_detail,omitempty"`
	Quantity    *QICoreServiceRequest_QuantityX       `protobuf:"bytes,23,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Individual or Entity the service is ordered for
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,24,opt,name=subject,proto3" json:"subject,omitempty"`
	// Encounter in which the request was created
	Encounter  *datatypes_go_proto.Reference     `protobuf:"bytes,25,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Occurrence *QICoreServiceRequest_OccurrenceX `protobuf:"bytes,26,opt,name=occurrence,proto3" json:"occurrence,omitempty"`
	AsNeeded   *QICoreServiceRequest_AsNeededX   `protobuf:"bytes,27,opt,name=as_needed,json=asNeeded,proto3" json:"as_needed,omitempty"`
	// Date request signed
	AuthoredOn *datatypes_go_proto.DateTime `protobuf:"bytes,28,opt,name=authored_on,json=authoredOn,proto3" json:"authored_on,omitempty"`
	// Who/what is requesting service
	Requester *datatypes_go_proto.Reference `protobuf:"bytes,29,opt,name=requester,proto3" json:"requester,omitempty"`
	// Performer role
	PerformerType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,30,opt,name=performer_type,json=performerType,proto3" json:"performer_type,omitempty"`
	// Requested performer
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,31,rep,name=performer,proto3" json:"performer,omitempty"`
	// Requested location
	LocationCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,32,rep,name=location_code,json=locationCode,proto3" json:"location_code,omitempty"`
	// Requested location
	LocationReference []*datatypes_go_proto.Reference `protobuf:"bytes,33,rep,name=location_reference,json=locationReference,proto3" json:"location_reference,omitempty"`
	// Explanation/Justification for procedure or service
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,34,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Explanation/Justification for service or service
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,35,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// Associated insurance coverage
	Insurance []*datatypes_go_proto.Reference `protobuf:"bytes,36,rep,name=insurance,proto3" json:"insurance,omitempty"`
	// Additional clinical information
	SupportingInfo []*datatypes_go_proto.Reference `protobuf:"bytes,37,rep,name=supporting_info,json=supportingInfo,proto3" json:"supporting_info,omitempty"`
	// Procedure Samples
	Specimen []*datatypes_go_proto.Reference `protobuf:"bytes,38,rep,name=specimen,proto3" json:"specimen,omitempty"`
	// Location on Body
	BodySite []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,39,rep,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// Comments
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,40,rep,name=note,proto3" json:"note,omitempty"`
	// Patient or consumer-oriented instructions
	PatientInstruction *datatypes_go_proto.String `protobuf:"bytes,41,opt,name=patient_instruction,json=patientInstruction,proto3" json:"patient_instruction,omitempty"`
	// Request provenance
	RelevantHistory []*datatypes_go_proto.Reference `protobuf:"bytes,42,rep,name=relevant_history,json=relevantHistory,proto3" json:"relevant_history,omitempty"`
	// Reason for current status
	StatusReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,43,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// The access point or points used for this procedure
	ApproachBodyStructure []*datatypes_go_proto.Reference `protobuf:"bytes,44,rep,name=approach_body_structure,json=approachBodyStructure,proto3" json:"approach_body_structure,omitempty"`
	// Appropriateness Score
	AppropriatenessScore *ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX `protobuf:"bytes,45,opt,name=appropriateness_score,json=appropriatenessScore,proto3" json:"appropriateness_score,omitempty"`
}

func (x *QICoreServiceRequest) Reset() {
	*x = QICoreServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreServiceRequest) ProtoMessage() {}

func (x *QICoreServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreServiceRequest.ProtoReflect.Descriptor instead.
func (*QICoreServiceRequest) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{41}
}

func (x *QICoreServiceRequest) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreServiceRequest) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreServiceRequest) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreServiceRequest) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreServiceRequest) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreServiceRequest) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreServiceRequest) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreServiceRequest) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreServiceRequest) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreServiceRequest) GetInstantiatesCanonical() []*datatypes_go_proto.Canonical {
	if x != nil {
		return x.InstantiatesCanonical
	}
	return nil
}

func (x *QICoreServiceRequest) GetInstantiatesUri() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.InstantiatesUri
	}
	return nil
}

func (x *QICoreServiceRequest) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *QICoreServiceRequest) GetReplaces() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Replaces
	}
	return nil
}

func (x *QICoreServiceRequest) GetRequisition() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Requisition
	}
	return nil
}

func (x *QICoreServiceRequest) GetStatus() *QICoreServiceRequest_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreServiceRequest) GetIntent() *QICoreServiceRequest_IntentCode {
	if x != nil {
		return x.Intent
	}
	return nil
}

func (x *QICoreServiceRequest) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *QICoreServiceRequest) GetPriority() *QICoreServiceRequest_PriorityCode {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *QICoreServiceRequest) GetDoNotPerform() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.DoNotPerform
	}
	return nil
}

func (x *QICoreServiceRequest) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *QICoreServiceRequest) GetOrderDetail() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.OrderDetail
	}
	return nil
}

func (x *QICoreServiceRequest) GetQuantity() *QICoreServiceRequest_QuantityX {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *QICoreServiceRequest) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *QICoreServiceRequest) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *QICoreServiceRequest) GetOccurrence() *QICoreServiceRequest_OccurrenceX {
	if x != nil {
		return x.Occurrence
	}
	return nil
}

func (x *QICoreServiceRequest) GetAsNeeded() *QICoreServiceRequest_AsNeededX {
	if x != nil {
		return x.AsNeeded
	}
	return nil
}

func (x *QICoreServiceRequest) GetAuthoredOn() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.AuthoredOn
	}
	return nil
}

func (x *QICoreServiceRequest) GetRequester() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Requester
	}
	return nil
}

func (x *QICoreServiceRequest) GetPerformerType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PerformerType
	}
	return nil
}

func (x *QICoreServiceRequest) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *QICoreServiceRequest) GetLocationCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.LocationCode
	}
	return nil
}

func (x *QICoreServiceRequest) GetLocationReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.LocationReference
	}
	return nil
}

func (x *QICoreServiceRequest) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *QICoreServiceRequest) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *QICoreServiceRequest) GetInsurance() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Insurance
	}
	return nil
}

func (x *QICoreServiceRequest) GetSupportingInfo() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SupportingInfo
	}
	return nil
}

func (x *QICoreServiceRequest) GetSpecimen() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *QICoreServiceRequest) GetBodySite() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *QICoreServiceRequest) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *QICoreServiceRequest) GetPatientInstruction() *datatypes_go_proto.String {
	if x != nil {
		return x.PatientInstruction
	}
	return nil
}

func (x *QICoreServiceRequest) GetRelevantHistory() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.RelevantHistory
	}
	return nil
}

func (x *QICoreServiceRequest) GetStatusReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

func (x *QICoreServiceRequest) GetApproachBodyStructure() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ApproachBodyStructure
	}
	return nil
}

func (x *QICoreServiceRequest) GetAppropriatenessScore() *ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX {
	if x != nil {
		return x.AppropriatenessScore
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreSpecimen.
// Sample for analysis.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-specimen
type QICoreSpecimen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Identifier assigned by the lab
	AccessionIdentifier *datatypes_go_proto.Identifier `protobuf:"bytes,11,opt,name=accession_identifier,json=accessionIdentifier,proto3" json:"accession_identifier,omitempty"`
	Status              *QICoreSpecimen_StatusCode     `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// Kind of material that forms the specimen
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=type,proto3" json:"type,omitempty"`
	// Where the specimen came from. This may be from patient(s), from a location
	// (e.g., the source of an environmental sample), or a sampling of a substance
	// or a device
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// The time when specimen was received for processing
	ReceivedTime *datatypes_go_proto.DateTime `protobuf:"bytes,15,opt,name=received_time,json=receivedTime,proto3" json:"received_time,omitempty"`
	// Specimen from which this specimen originated
	Parent []*datatypes_go_proto.Reference `protobuf:"bytes,16,rep,name=parent,proto3" json:"parent,omitempty"`
	// Why the specimen was collected
	Request    []*datatypes_go_proto.Reference `protobuf:"bytes,17,rep,name=request,proto3" json:"request,omitempty"`
	Collection *QICoreSpecimen_Collection      `protobuf:"bytes,18,opt,name=collection,proto3" json:"collection,omitempty"`
	Processing []*QICoreSpecimen_Processing    `protobuf:"bytes,19,rep,name=processing,proto3" json:"processing,omitempty"`
	Container  []*QICoreSpecimen_Container     `protobuf:"bytes,20,rep,name=container,proto3" json:"container,omitempty"`
	// State of the specimen
	Condition []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,rep,name=condition,proto3" json:"condition,omitempty"`
	// Comments
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,22,rep,name=note,proto3" json:"note,omitempty"`
}

func (x *QICoreSpecimen) Reset() {
	*x = QICoreSpecimen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreSpecimen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreSpecimen) ProtoMessage() {}

func (x *QICoreSpecimen) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreSpecimen.ProtoReflect.Descriptor instead.
func (*QICoreSpecimen) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{42}
}

func (x *QICoreSpecimen) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreSpecimen) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreSpecimen) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreSpecimen) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreSpecimen) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreSpecimen) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreSpecimen) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreSpecimen) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreSpecimen) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreSpecimen) GetAccessionIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.AccessionIdentifier
	}
	return nil
}

func (x *QICoreSpecimen) GetStatus() *QICoreSpecimen_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreSpecimen) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreSpecimen) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *QICoreSpecimen) GetReceivedTime() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.ReceivedTime
	}
	return nil
}

func (x *QICoreSpecimen) GetParent() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *QICoreSpecimen) GetRequest() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *QICoreSpecimen) GetCollection() *QICoreSpecimen_Collection {
	if x != nil {
		return x.Collection
	}
	return nil
}

func (x *QICoreSpecimen) GetProcessing() []*QICoreSpecimen_Processing {
	if x != nil {
		return x.Processing
	}
	return nil
}

func (x *QICoreSpecimen) GetContainer() []*QICoreSpecimen_Container {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *QICoreSpecimen) GetCondition() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *QICoreSpecimen) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreSubstance.
// A homogeneous material with a definite composition.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-substance
type QICoreSubstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Unique identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Status     *QICoreSubstance_StatusCode      `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// What class/type of substance this is
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	// What substance this is
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// Textual description of the substance, comments
	Description *datatypes_go_proto.String    `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	Instance    []*QICoreSubstance_Instance   `protobuf:"bytes,15,rep,name=instance,proto3" json:"instance,omitempty"`
	Ingredient  []*QICoreSubstance_Ingredient `protobuf:"bytes,16,rep,name=ingredient,proto3" json:"ingredient,omitempty"`
}

func (x *QICoreSubstance) Reset() {
	*x = QICoreSubstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreSubstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreSubstance) ProtoMessage() {}

func (x *QICoreSubstance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreSubstance.ProtoReflect.Descriptor instead.
func (*QICoreSubstance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{43}
}

func (x *QICoreSubstance) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreSubstance) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreSubstance) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreSubstance) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreSubstance) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreSubstance) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreSubstance) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreSubstance) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreSubstance) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreSubstance) GetStatus() *QICoreSubstance_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreSubstance) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *QICoreSubstance) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *QICoreSubstance) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *QICoreSubstance) GetInstance() []*QICoreSubstance_Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *QICoreSubstance) GetIngredient() []*QICoreSubstance_Ingredient {
	if x != nil {
		return x.Ingredient
	}
	return nil
}

// Auto-generated from StructureDefinition for QICoreTask.
// A task to be performed.
// See http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-task
type QICoreTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Formal definition of task
	InstantiatesCanonical *datatypes_go_proto.Canonical `protobuf:"bytes,10,opt,name=instantiates_canonical,json=instantiatesCanonical,proto3" json:"instantiates_canonical,omitempty"`
	// Formal definition of task
	InstantiatesUri *datatypes_go_proto.Uri `protobuf:"bytes,11,opt,name=instantiates_uri,json=instantiatesUri,proto3" json:"instantiates_uri,omitempty"`
	// Request fulfilled by this task
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,12,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// Requisition or grouper id
	GroupIdentifier *datatypes_go_proto.Identifier `protobuf:"bytes,13,opt,name=group_identifier,json=groupIdentifier,proto3" json:"group_identifier,omitempty"`
	// Composite task
	PartOf []*datatypes_go_proto.Reference `protobuf:"bytes,14,rep,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	// Reason for current status
	StatusReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// E.g. "Specimen collected", "IV prepped"
	BusinessStatus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,opt,name=business_status,json=businessStatus,proto3" json:"business_status,omitempty"`
	// Human-readable explanation of task
	Description *datatypes_go_proto.String `protobuf:"bytes,17,opt,name=description,proto3" json:"description,omitempty"`
	// What task is acting on
	Focus *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=focus,proto3" json:"focus,omitempty"`
	// Beneficiary of the Task
	ForValue *datatypes_go_proto.Reference `protobuf:"bytes,19,opt,name=for_value,json=for,proto3" json:"for_value,omitempty"`
	// Healthcare event during which this task originated
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Task Creation Date
	AuthoredOn *datatypes_go_proto.DateTime `protobuf:"bytes,21,opt,name=authored_on,json=authoredOn,proto3" json:"authored_on,omitempty"`
	// Task Last Modified Date
	LastModified *datatypes_go_proto.DateTime `protobuf:"bytes,22,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	// Who is asking for task to be done
	Requester *datatypes_go_proto.Reference `protobuf:"bytes,23,opt,name=requester,proto3" json:"requester,omitempty"`
	// Requested performer
	PerformerType []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,rep,name=performer_type,json=performerType,proto3" json:"performer_type,omitempty"`
	// Responsible individual
	Owner *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=owner,proto3" json:"owner,omitempty"`
	// Where task occurs
	Location *datatypes_go_proto.Reference `protobuf:"bytes,26,opt,name=location,proto3" json:"location,omitempty"`
	// Why task is needed
	ReasonCode *datatypes_go_proto.CodeableConcept `protobuf:"bytes,27,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Why task is needed
	ReasonReference *datatypes_go_proto.Reference `protobuf:"bytes,28,opt,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// Associated insurance coverage
	Insurance []*datatypes_go_proto.Reference `protobuf:"bytes,29,rep,name=insurance,proto3" json:"insurance,omitempty"`
	// Comments made about the task
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,30,rep,name=note,proto3" json:"note,omitempty"`
	// Key events in history of the Task
	RelevantHistory []*datatypes_go_proto.Reference `protobuf:"bytes,31,rep,name=relevant_history,json=relevantHistory,proto3" json:"relevant_history,omitempty"`
	Restriction     *QICoreTask_Restriction         `protobuf:"bytes,32,opt,name=restriction,proto3" json:"restriction,omitempty"`
	Input           []*QICoreTask_Parameter         `protobuf:"bytes,33,rep,name=input,proto3" json:"input,omitempty"`
	Output          []*QICoreTask_Output            `protobuf:"bytes,34,rep,name=output,proto3" json:"output,omitempty"`
}

func (x *QICoreTask) Reset() {
	*x = QICoreTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreTask) ProtoMessage() {}

func (x *QICoreTask) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreTask.ProtoReflect.Descriptor instead.
func (*QICoreTask) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{44}
}

func (x *QICoreTask) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreTask) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QICoreTask) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QICoreTask) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreTask) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreTask) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QICoreTask) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreTask) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreTask) GetInstantiatesCanonical() *datatypes_go_proto.Canonical {
	if x != nil {
		return x.InstantiatesCanonical
	}
	return nil
}

func (x *QICoreTask) GetInstantiatesUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.InstantiatesUri
	}
	return nil
}

func (x *QICoreTask) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *QICoreTask) GetGroupIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.GroupIdentifier
	}
	return nil
}

func (x *QICoreTask) GetPartOf() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *QICoreTask) GetStatusReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

func (x *QICoreTask) GetBusinessStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BusinessStatus
	}
	return nil
}

func (x *QICoreTask) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *QICoreTask) GetFocus() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Focus
	}
	return nil
}

func (x *QICoreTask) GetForValue() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ForValue
	}
	return nil
}

func (x *QICoreTask) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *QICoreTask) GetAuthoredOn() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.AuthoredOn
	}
	return nil
}

func (x *QICoreTask) GetLastModified() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *QICoreTask) GetRequester() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Requester
	}
	return nil
}

func (x *QICoreTask) GetPerformerType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PerformerType
	}
	return nil
}

func (x *QICoreTask) GetOwner() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *QICoreTask) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *QICoreTask) GetReasonCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *QICoreTask) GetReasonReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *QICoreTask) GetInsurance() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Insurance
	}
	return nil
}

func (x *QICoreTask) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *QICoreTask) GetRelevantHistory() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.RelevantHistory
	}
	return nil
}

func (x *QICoreTask) GetRestriction() *QICoreTask_Restriction {
	if x != nil {
		return x.Restriction
	}
	return nil
}

func (x *QICoreTask) GetInput() []*QICoreTask_Parameter {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *QICoreTask) GetOutput() []*QICoreTask_Output {
	if x != nil {
		return x.Output
	}
	return nil
}

// actual | potential
type QICoreAdverseEvent_ActualityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AdverseEventActualityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.AdverseEventActualityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreAdverseEvent_ActualityCode) Reset() {
	*x = QICoreAdverseEvent_ActualityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreAdverseEvent_ActualityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreAdverseEvent_ActualityCode) ProtoMessage() {}

func (x *QICoreAdverseEvent_ActualityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreAdverseEvent_ActualityCode.ProtoReflect.Descriptor instead.
func (*QICoreAdverseEvent_ActualityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{0, 0}
}

func (x *QICoreAdverseEvent_ActualityCode) GetValue() codes_go_proto.AdverseEventActualityCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AdverseEventActualityCode_INVALID_UNINITIALIZED
}

func (x *QICoreAdverseEvent_ActualityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreAdverseEvent_ActualityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The suspected agent causing the adverse event
type QICoreAdverseEvent_SuspectEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Refers to the specific entity that caused the adverse event
	Instance  *datatypes_go_proto.Reference               `protobuf:"bytes,4,opt,name=instance,proto3" json:"instance,omitempty"`
	Causality *QICoreAdverseEvent_SuspectEntity_Causality `protobuf:"bytes,5,opt,name=causality,proto3" json:"causality,omitempty"`
}

func (x *QICoreAdverseEvent_SuspectEntity) Reset() {
	*x = QICoreAdverseEvent_SuspectEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreAdverseEvent_SuspectEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreAdverseEvent_SuspectEntity) ProtoMessage() {}

func (x *QICoreAdverseEvent_SuspectEntity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreAdverseEvent_SuspectEntity.ProtoReflect.Descriptor instead.
func (*QICoreAdverseEvent_SuspectEntity) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{0, 1}
}

func (x *QICoreAdverseEvent_SuspectEntity) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreAdverseEvent_SuspectEntity) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreAdverseEvent_SuspectEntity) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreAdverseEvent_SuspectEntity) GetInstance() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *QICoreAdverseEvent_SuspectEntity) GetCausality() *QICoreAdverseEvent_SuspectEntity_Causality {
	if x != nil {
		return x.Causality
	}
	return nil
}

// Information on the possible cause of the event
type QICoreAdverseEvent_SuspectEntity_Causality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Assessment of if the entity caused the event
	Assessment *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=assessment,proto3" json:"assessment,omitempty"`
	// AdverseEvent.suspectEntity.causalityProductRelatedness
	ProductRelatedness *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=product_relatedness,json=productRelatedness,proto3" json:"product_relatedness,omitempty"`
	// AdverseEvent.suspectEntity.causalityAuthor
	Author *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=author,proto3" json:"author,omitempty"`
	// ProbabilityScale | Bayesian | Checklist
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *QICoreAdverseEvent_SuspectEntity_Causality) Reset() {
	*x = QICoreAdverseEvent_SuspectEntity_Causality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreAdverseEvent_SuspectEntity_Causality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreAdverseEvent_SuspectEntity_Causality) ProtoMessage() {}

func (x *QICoreAdverseEvent_SuspectEntity_Causality) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreAdverseEvent_SuspectEntity_Causality.ProtoReflect.Descriptor instead.
func (*QICoreAdverseEvent_SuspectEntity_Causality) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *QICoreAdverseEvent_SuspectEntity_Causality) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreAdverseEvent_SuspectEntity_Causality) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreAdverseEvent_SuspectEntity_Causality) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreAdverseEvent_SuspectEntity_Causality) GetAssessment() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Assessment
	}
	return nil
}

func (x *QICoreAdverseEvent_SuspectEntity_Causality) GetProductRelatedness() *datatypes_go_proto.String {
	if x != nil {
		return x.ProductRelatedness
	}
	return nil
}

func (x *QICoreAdverseEvent_SuspectEntity_Causality) GetAuthor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *QICoreAdverseEvent_SuspectEntity_Causality) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

// allergy | intolerance - Underlying mechanism (if known)
type QICoreAllergyIntolerance_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AllergyIntoleranceTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.AllergyIntoleranceTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreAllergyIntolerance_TypeCode) Reset() {
	*x = QICoreAllergyIntolerance_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreAllergyIntolerance_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreAllergyIntolerance_TypeCode) ProtoMessage() {}

func (x *QICoreAllergyIntolerance_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreAllergyIntolerance_TypeCode.ProtoReflect.Descriptor instead.
func (*QICoreAllergyIntolerance_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{1, 0}
}

func (x *QICoreAllergyIntolerance_TypeCode) GetValue() codes_go_proto.AllergyIntoleranceTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AllergyIntoleranceTypeCode_INVALID_UNINITIALIZED
}

func (x *QICoreAllergyIntolerance_TypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreAllergyIntolerance_TypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// food | medication | environment | biologic
type QICoreAllergyIntolerance_CategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AllergyIntoleranceCategoryCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.AllergyIntoleranceCategoryCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                     `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreAllergyIntolerance_CategoryCode) Reset() {
	*x = QICoreAllergyIntolerance_CategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreAllergyIntolerance_CategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreAllergyIntolerance_CategoryCode) ProtoMessage() {}

func (x *QICoreAllergyIntolerance_CategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreAllergyIntolerance_CategoryCode.ProtoReflect.Descriptor instead.
func (*QICoreAllergyIntolerance_CategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{1, 1}
}

func (x *QICoreAllergyIntolerance_CategoryCode) GetValue() codes_go_proto.AllergyIntoleranceCategoryCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AllergyIntoleranceCategoryCode_INVALID_UNINITIALIZED
}

func (x *QICoreAllergyIntolerance_CategoryCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreAllergyIntolerance_CategoryCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// low | high | unable-to-assess
type QICoreAllergyIntolerance_CriticalityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AllergyIntoleranceCriticalityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.AllergyIntoleranceCriticalityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                        `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreAllergyIntolerance_CriticalityCode) Reset() {
	*x = QICoreAllergyIntolerance_CriticalityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreAllergyIntolerance_CriticalityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreAllergyIntolerance_CriticalityCode) ProtoMessage() {}

func (x *QICoreAllergyIntolerance_CriticalityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreAllergyIntolerance_CriticalityCode.ProtoReflect.Descriptor instead.
func (*QICoreAllergyIntolerance_CriticalityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{1, 2}
}

func (x *QICoreAllergyIntolerance_CriticalityCode) GetValue() codes_go_proto.AllergyIntoleranceCriticalityCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AllergyIntoleranceCriticalityCode_INVALID_UNINITIALIZED
}

func (x *QICoreAllergyIntolerance_CriticalityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreAllergyIntolerance_CriticalityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// When allergy or intolerance was identified
type QICoreAllergyIntolerance_OnsetX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreAllergyIntolerance_OnsetX_DateTime
	//	*QICoreAllergyIntolerance_OnsetX_Age
	//	*QICoreAllergyIntolerance_OnsetX_Period
	//	*QICoreAllergyIntolerance_OnsetX_Range
	Choice isQICoreAllergyIntolerance_OnsetX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreAllergyIntolerance_OnsetX) Reset() {
	*x = QICoreAllergyIntolerance_OnsetX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreAllergyIntolerance_OnsetX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreAllergyIntolerance_OnsetX) ProtoMessage() {}

func (x *QICoreAllergyIntolerance_OnsetX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreAllergyIntolerance_OnsetX.ProtoReflect.Descriptor instead.
func (*QICoreAllergyIntolerance_OnsetX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{1, 3}
}

func (m *QICoreAllergyIntolerance_OnsetX) GetChoice() isQICoreAllergyIntolerance_OnsetX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreAllergyIntolerance_OnsetX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*QICoreAllergyIntolerance_OnsetX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *QICoreAllergyIntolerance_OnsetX) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetChoice().(*QICoreAllergyIntolerance_OnsetX_Age); ok {
		return x.Age
	}
	return nil
}

func (x *QICoreAllergyIntolerance_OnsetX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*QICoreAllergyIntolerance_OnsetX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *QICoreAllergyIntolerance_OnsetX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*QICoreAllergyIntolerance_OnsetX_Range); ok {
		return x.Range
	}
	return nil
}

type isQICoreAllergyIntolerance_OnsetX_Choice interface {
	isQICoreAllergyIntolerance_OnsetX_Choice()
}

type QICoreAllergyIntolerance_OnsetX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type QICoreAllergyIntolerance_OnsetX_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,2,opt,name=age,proto3,oneof"`
}

type QICoreAllergyIntolerance_OnsetX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,3,opt,name=period,proto3,oneof"`
}

type QICoreAllergyIntolerance_OnsetX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,4,opt,name=range,proto3,oneof"`
}

func (*QICoreAllergyIntolerance_OnsetX_DateTime) isQICoreAllergyIntolerance_OnsetX_Choice() {}

func (*QICoreAllergyIntolerance_OnsetX_Age) isQICoreAllergyIntolerance_OnsetX_Choice() {}

func (*QICoreAllergyIntolerance_OnsetX_Period) isQICoreAllergyIntolerance_OnsetX_Choice() {}

func (*QICoreAllergyIntolerance_OnsetX_Range) isQICoreAllergyIntolerance_OnsetX_Choice() {}

// Adverse Reaction Events linked to exposure to substance
type QICoreAllergyIntolerance_Reaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Specific substance or pharmaceutical product considered to be responsible
	// for event
	Substance *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=substance,proto3" json:"substance,omitempty"`
	// Clinical symptoms/signs associated with the Event
	Manifestation []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,rep,name=manifestation,proto3" json:"manifestation,omitempty"`
	// Description of the event as a whole
	Description *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// Date(/time) when manifestations showed
	Onset    *datatypes_go_proto.DateTime                    `protobuf:"bytes,7,opt,name=onset,proto3" json:"onset,omitempty"`
	Severity *QICoreAllergyIntolerance_Reaction_SeverityCode `protobuf:"bytes,8,opt,name=severity,proto3" json:"severity,omitempty"`
	// How the subject was exposed to the substance
	ExposureRoute *datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,opt,name=exposure_route,json=exposureRoute,proto3" json:"exposure_route,omitempty"`
	// Text about event not captured in other fields
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,10,rep,name=note,proto3" json:"note,omitempty"`
	// How long Manifestations persisted
	ReactionDuration *datatypes_go_proto.Duration `protobuf:"bytes,11,opt,name=reaction_duration,json=reactionDuration,proto3" json:"reaction_duration,omitempty"`
}

func (x *QICoreAllergyIntolerance_Reaction) Reset() {
	*x = QICoreAllergyIntolerance_Reaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreAllergyIntolerance_Reaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreAllergyIntolerance_Reaction) ProtoMessage() {}

func (x *QICoreAllergyIntolerance_Reaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreAllergyIntolerance_Reaction.ProtoReflect.Descriptor instead.
func (*QICoreAllergyIntolerance_Reaction) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{1, 4}
}

func (x *QICoreAllergyIntolerance_Reaction) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreAllergyIntolerance_Reaction) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreAllergyIntolerance_Reaction) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreAllergyIntolerance_Reaction) GetSubstance() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Substance
	}
	return nil
}

func (x *QICoreAllergyIntolerance_Reaction) GetManifestation() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Manifestation
	}
	return nil
}

func (x *QICoreAllergyIntolerance_Reaction) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *QICoreAllergyIntolerance_Reaction) GetOnset() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Onset
	}
	return nil
}

func (x *QICoreAllergyIntolerance_Reaction) GetSeverity() *QICoreAllergyIntolerance_Reaction_SeverityCode {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *QICoreAllergyIntolerance_Reaction) GetExposureRoute() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ExposureRoute
	}
	return nil
}

func (x *QICoreAllergyIntolerance_Reaction) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *QICoreAllergyIntolerance_Reaction) GetReactionDuration() *datatypes_go_proto.Duration {
	if x != nil {
		return x.ReactionDuration
	}
	return nil
}

// mild | moderate | severe (of event as a whole)
type QICoreAllergyIntolerance_Reaction_SeverityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AllergyIntoleranceSeverityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.AllergyIntoleranceSeverityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                     `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreAllergyIntolerance_Reaction_SeverityCode) Reset() {
	*x = QICoreAllergyIntolerance_Reaction_SeverityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreAllergyIntolerance_Reaction_SeverityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreAllergyIntolerance_Reaction_SeverityCode) ProtoMessage() {}

func (x *QICoreAllergyIntolerance_Reaction_SeverityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreAllergyIntolerance_Reaction_SeverityCode.ProtoReflect.Descriptor instead.
func (*QICoreAllergyIntolerance_Reaction_SeverityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{1, 4, 0}
}

func (x *QICoreAllergyIntolerance_Reaction_SeverityCode) GetValue() codes_go_proto.AllergyIntoleranceSeverityCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AllergyIntoleranceSeverityCode_INVALID_UNINITIALIZED
}

func (x *QICoreAllergyIntolerance_Reaction_SeverityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreAllergyIntolerance_Reaction_SeverityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// draft | active | suspended | completed | entered-in-error | cancelled |
// unknown
type QICoreCarePlan_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.RequestStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.RequestStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension        `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreCarePlan_StatusCode) Reset() {
	*x = QICoreCarePlan_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCarePlan_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCarePlan_StatusCode) ProtoMessage() {}

func (x *QICoreCarePlan_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCarePlan_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreCarePlan_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{3, 0}
}

func (x *QICoreCarePlan_StatusCode) GetValue() codes_go_proto.RequestStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.RequestStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreCarePlan_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCarePlan_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// proposal | plan | order | option
type QICoreCarePlan_IntentCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     valuesets_go_proto.CarePlanIntentValueSet_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.CarePlanIntentValueSet_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreCarePlan_IntentCode) Reset() {
	*x = QICoreCarePlan_IntentCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCarePlan_IntentCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCarePlan_IntentCode) ProtoMessage() {}

func (x *QICoreCarePlan_IntentCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCarePlan_IntentCode.ProtoReflect.Descriptor instead.
func (*QICoreCarePlan_IntentCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{3, 1}
}

func (x *QICoreCarePlan_IntentCode) GetValue() valuesets_go_proto.CarePlanIntentValueSet_Value {
	if x != nil {
		return x.Value
	}
	return valuesets_go_proto.CarePlanIntentValueSet_INVALID_UNINITIALIZED
}

func (x *QICoreCarePlan_IntentCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCarePlan_IntentCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Action to occur as part of plan
type QICoreCarePlan_Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Results of the activity
	OutcomeCodeableConcept []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,rep,name=outcome_codeable_concept,json=outcomeCodeableConcept,proto3" json:"outcome_codeable_concept,omitempty"`
	// Appointment, Encounter, Procedure, etc.
	OutcomeReference []*datatypes_go_proto.Reference `protobuf:"bytes,5,rep,name=outcome_reference,json=outcomeReference,proto3" json:"outcome_reference,omitempty"`
	// Comments about the activity status/progress
	Progress []*datatypes_go_proto.Annotation `protobuf:"bytes,6,rep,name=progress,proto3" json:"progress,omitempty"`
	// Activity details defined in specific resource
	Reference *datatypes_go_proto.Reference   `protobuf:"bytes,7,opt,name=reference,proto3" json:"reference,omitempty"`
	Detail    *QICoreCarePlan_Activity_Detail `protobuf:"bytes,8,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *QICoreCarePlan_Activity) Reset() {
	*x = QICoreCarePlan_Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCarePlan_Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCarePlan_Activity) ProtoMessage() {}

func (x *QICoreCarePlan_Activity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCarePlan_Activity.ProtoReflect.Descriptor instead.
func (*QICoreCarePlan_Activity) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{3, 2}
}

func (x *QICoreCarePlan_Activity) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCarePlan_Activity) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreCarePlan_Activity) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreCarePlan_Activity) GetOutcomeCodeableConcept() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.OutcomeCodeableConcept
	}
	return nil
}

func (x *QICoreCarePlan_Activity) GetOutcomeReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.OutcomeReference
	}
	return nil
}

func (x *QICoreCarePlan_Activity) GetProgress() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *QICoreCarePlan_Activity) GetReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *QICoreCarePlan_Activity) GetDetail() *QICoreCarePlan_Activity_Detail {
	if x != nil {
		return x.Detail
	}
	return nil
}

// In-line definition of activity
type QICoreCarePlan_Activity_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension          `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Kind              *QICoreCarePlan_Activity_Detail_KindCode `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
	// Instantiates FHIR protocol or definition
	InstantiatesCanonical []*datatypes_go_proto.Canonical `protobuf:"bytes,5,rep,name=instantiates_canonical,json=instantiatesCanonical,proto3" json:"instantiates_canonical,omitempty"`
	// Instantiates external protocol or definition
	InstantiatesUri []*datatypes_go_proto.Uri `protobuf:"bytes,6,rep,name=instantiates_uri,json=instantiatesUri,proto3" json:"instantiates_uri,omitempty"`
	// Detail type of activity
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
	// Why activity should be done or why activity was prohibited
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Why activity is needed
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,9,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// Goals this activity relates to
	Goal   []*datatypes_go_proto.Reference            `protobuf:"bytes,10,rep,name=goal,proto3" json:"goal,omitempty"`
	Status *QICoreCarePlan_Activity_Detail_StatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Reason for current status
	StatusReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// If true, activity is prohibiting action
	DoNotPerform *datatypes_go_proto.Boolean                `protobuf:"bytes,13,opt,name=do_not_perform,json=doNotPerform,proto3" json:"do_not_perform,omitempty"`
	Scheduled    *QICoreCarePlan_Activity_Detail_ScheduledX `protobuf:"bytes,14,opt,name=scheduled,proto3" json:"scheduled,omitempty"`
	// Where it should happen
	Location *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=location,proto3" json:"location,omitempty"`
	// Who will be responsible?
	Performer []*datatypes_go_proto.Reference          `protobuf:"bytes,16,rep,name=performer,proto3" json:"performer,omitempty"`
	Product   *QICoreCarePlan_Activity_Detail_ProductX `protobuf:"bytes,17,opt,name=product,proto3" json:"product,omitempty"`
	// How to consume/day?
	DailyAmount *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,18,opt,name=daily_amount,json=dailyAmount,proto3" json:"daily_amount,omitempty"`
	// How much to administer/supply/consume
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,19,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Extra info describing activity to perform
	Description *datatypes_go_proto.String `protobuf:"bytes,20,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *QICoreCarePlan_Activity_Detail) Reset() {
	*x = QICoreCarePlan_Activity_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCarePlan_Activity_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCarePlan_Activity_Detail) ProtoMessage() {}

func (x *QICoreCarePlan_Activity_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCarePlan_Activity_Detail.ProtoReflect.Descriptor instead.
func (*QICoreCarePlan_Activity_Detail) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{3, 2, 0}
}

func (x *QICoreCarePlan_Activity_Detail) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail) GetKind() *QICoreCarePlan_Activity_Detail_KindCode {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail) GetInstantiatesCanonical() []*datatypes_go_proto.Canonical {
	if x != nil {
		return x.InstantiatesCanonical
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail) GetInstantiatesUri() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.InstantiatesUri
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail) GetGoal() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Goal
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail) GetStatus() *QICoreCarePlan_Activity_Detail_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail) GetStatusReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail) GetDoNotPerform() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.DoNotPerform
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail) GetScheduled() *QICoreCarePlan_Activity_Detail_ScheduledX {
	if x != nil {
		return x.Scheduled
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail) GetProduct() *QICoreCarePlan_Activity_Detail_ProductX {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail) GetDailyAmount() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.DailyAmount
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

// Kind of resource
type QICoreCarePlan_Activity_Detail_KindCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     valuesets_go_proto.CarePlanActivityKindValueSet_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.CarePlanActivityKindValueSet_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreCarePlan_Activity_Detail_KindCode) Reset() {
	*x = QICoreCarePlan_Activity_Detail_KindCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCarePlan_Activity_Detail_KindCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCarePlan_Activity_Detail_KindCode) ProtoMessage() {}

func (x *QICoreCarePlan_Activity_Detail_KindCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCarePlan_Activity_Detail_KindCode.ProtoReflect.Descriptor instead.
func (*QICoreCarePlan_Activity_Detail_KindCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{3, 2, 0, 0}
}

func (x *QICoreCarePlan_Activity_Detail_KindCode) GetValue() valuesets_go_proto.CarePlanActivityKindValueSet_Value {
	if x != nil {
		return x.Value
	}
	return valuesets_go_proto.CarePlanActivityKindValueSet_INVALID_UNINITIALIZED
}

func (x *QICoreCarePlan_Activity_Detail_KindCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail_KindCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// not-started | scheduled | in-progress | on-hold | completed | cancelled
// | stopped | unknown | entered-in-error
type QICoreCarePlan_Activity_Detail_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.CarePlanActivityStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.CarePlanActivityStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreCarePlan_Activity_Detail_StatusCode) Reset() {
	*x = QICoreCarePlan_Activity_Detail_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCarePlan_Activity_Detail_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCarePlan_Activity_Detail_StatusCode) ProtoMessage() {}

func (x *QICoreCarePlan_Activity_Detail_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCarePlan_Activity_Detail_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreCarePlan_Activity_Detail_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{3, 2, 0, 1}
}

func (x *QICoreCarePlan_Activity_Detail_StatusCode) GetValue() codes_go_proto.CarePlanActivityStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.CarePlanActivityStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreCarePlan_Activity_Detail_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// When activity is to occur
type QICoreCarePlan_Activity_Detail_ScheduledX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreCarePlan_Activity_Detail_ScheduledX_Timing
	//	*QICoreCarePlan_Activity_Detail_ScheduledX_Period
	//	*QICoreCarePlan_Activity_Detail_ScheduledX_StringValue
	Choice isQICoreCarePlan_Activity_Detail_ScheduledX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreCarePlan_Activity_Detail_ScheduledX) Reset() {
	*x = QICoreCarePlan_Activity_Detail_ScheduledX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCarePlan_Activity_Detail_ScheduledX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCarePlan_Activity_Detail_ScheduledX) ProtoMessage() {}

func (x *QICoreCarePlan_Activity_Detail_ScheduledX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCarePlan_Activity_Detail_ScheduledX.ProtoReflect.Descriptor instead.
func (*QICoreCarePlan_Activity_Detail_ScheduledX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{3, 2, 0, 2}
}

func (m *QICoreCarePlan_Activity_Detail_ScheduledX) GetChoice() isQICoreCarePlan_Activity_Detail_ScheduledX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail_ScheduledX) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetChoice().(*QICoreCarePlan_Activity_Detail_ScheduledX_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail_ScheduledX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*QICoreCarePlan_Activity_Detail_ScheduledX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail_ScheduledX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*QICoreCarePlan_Activity_Detail_ScheduledX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isQICoreCarePlan_Activity_Detail_ScheduledX_Choice interface {
	isQICoreCarePlan_Activity_Detail_ScheduledX_Choice()
}

type QICoreCarePlan_Activity_Detail_ScheduledX_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,1,opt,name=timing,proto3,oneof"`
}

type QICoreCarePlan_Activity_Detail_ScheduledX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

type QICoreCarePlan_Activity_Detail_ScheduledX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

func (*QICoreCarePlan_Activity_Detail_ScheduledX_Timing) isQICoreCarePlan_Activity_Detail_ScheduledX_Choice() {
}

func (*QICoreCarePlan_Activity_Detail_ScheduledX_Period) isQICoreCarePlan_Activity_Detail_ScheduledX_Choice() {
}

func (*QICoreCarePlan_Activity_Detail_ScheduledX_StringValue) isQICoreCarePlan_Activity_Detail_ScheduledX_Choice() {
}

// What is to be administered/supplied
type QICoreCarePlan_Activity_Detail_ProductX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreCarePlan_Activity_Detail_ProductX_CodeableConcept
	//	*QICoreCarePlan_Activity_Detail_ProductX_Reference
	Choice isQICoreCarePlan_Activity_Detail_ProductX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreCarePlan_Activity_Detail_ProductX) Reset() {
	*x = QICoreCarePlan_Activity_Detail_ProductX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCarePlan_Activity_Detail_ProductX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCarePlan_Activity_Detail_ProductX) ProtoMessage() {}

func (x *QICoreCarePlan_Activity_Detail_ProductX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCarePlan_Activity_Detail_ProductX.ProtoReflect.Descriptor instead.
func (*QICoreCarePlan_Activity_Detail_ProductX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{3, 2, 0, 3}
}

func (m *QICoreCarePlan_Activity_Detail_ProductX) GetChoice() isQICoreCarePlan_Activity_Detail_ProductX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail_ProductX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*QICoreCarePlan_Activity_Detail_ProductX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *QICoreCarePlan_Activity_Detail_ProductX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*QICoreCarePlan_Activity_Detail_ProductX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isQICoreCarePlan_Activity_Detail_ProductX_Choice interface {
	isQICoreCarePlan_Activity_Detail_ProductX_Choice()
}

type QICoreCarePlan_Activity_Detail_ProductX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type QICoreCarePlan_Activity_Detail_ProductX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*QICoreCarePlan_Activity_Detail_ProductX_CodeableConcept) isQICoreCarePlan_Activity_Detail_ProductX_Choice() {
}

func (*QICoreCarePlan_Activity_Detail_ProductX_Reference) isQICoreCarePlan_Activity_Detail_ProductX_Choice() {
}

// proposed | active | suspended | inactive | entered-in-error
type QICoreCareTeam_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.CareTeamStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.CareTeamStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension         `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreCareTeam_StatusCode) Reset() {
	*x = QICoreCareTeam_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCareTeam_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCareTeam_StatusCode) ProtoMessage() {}

func (x *QICoreCareTeam_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCareTeam_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreCareTeam_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{4, 0}
}

func (x *QICoreCareTeam_StatusCode) GetValue() codes_go_proto.CareTeamStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.CareTeamStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreCareTeam_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCareTeam_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Members of the team
type QICoreCareTeam_Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of involvement
	Role *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	// Who is involved
	Member *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=member,proto3" json:"member,omitempty"`
	// Organization of the practitioner
	OnBehalfOf *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=on_behalf_of,json=onBehalfOf,proto3" json:"on_behalf_of,omitempty"`
	// Time period of participant
	Period *datatypes_go_proto.Period `protobuf:"bytes,7,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *QICoreCareTeam_Participant) Reset() {
	*x = QICoreCareTeam_Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCareTeam_Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCareTeam_Participant) ProtoMessage() {}

func (x *QICoreCareTeam_Participant) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCareTeam_Participant.ProtoReflect.Descriptor instead.
func (*QICoreCareTeam_Participant) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{4, 1}
}

func (x *QICoreCareTeam_Participant) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCareTeam_Participant) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreCareTeam_Participant) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreCareTeam_Participant) GetRole() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *QICoreCareTeam_Participant) GetMember() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *QICoreCareTeam_Participant) GetOnBehalfOf() *datatypes_go_proto.Reference {
	if x != nil {
		return x.OnBehalfOf
	}
	return nil
}

func (x *QICoreCareTeam_Participant) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// active | cancelled | draft | entered-in-error
type QICoreClaim_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.FinancialResourceStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.FinancialResourceStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreClaim_StatusCode) Reset() {
	*x = QICoreClaim_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreClaim_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreClaim_StatusCode) ProtoMessage() {}

func (x *QICoreClaim_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreClaim_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreClaim_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{5, 0}
}

func (x *QICoreClaim_StatusCode) GetValue() codes_go_proto.FinancialResourceStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.FinancialResourceStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreClaim_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreClaim_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// claim | preauthorization | predetermination
type QICoreClaim_UseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.UseCode_Value    `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.UseCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreClaim_UseCode) Reset() {
	*x = QICoreClaim_UseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreClaim_UseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreClaim_UseCode) ProtoMessage() {}

func (x *QICoreClaim_UseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreClaim_UseCode.ProtoReflect.Descriptor instead.
func (*QICoreClaim_UseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{5, 1}
}

func (x *QICoreClaim_UseCode) GetValue() codes_go_proto.UseCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.UseCode_INVALID_UNINITIALIZED
}

func (x *QICoreClaim_UseCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreClaim_UseCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Prior or corollary claims
type QICoreClaim_RelatedClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Reference to the related claim
	Claim *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=claim,proto3" json:"claim,omitempty"`
	// How the reference claim is related
	Relationship *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=relationship,proto3" json:"relationship,omitempty"`
	// File or case reference
	Reference *datatypes_go_proto.Identifier `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *QICoreClaim_RelatedClaim) Reset() {
	*x = QICoreClaim_RelatedClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreClaim_RelatedClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreClaim_RelatedClaim) ProtoMessage() {}

func (x *QICoreClaim_RelatedClaim) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreClaim_RelatedClaim.ProtoReflect.Descriptor instead.
func (*QICoreClaim_RelatedClaim) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{5, 2}
}

func (x *QICoreClaim_RelatedClaim) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreClaim_RelatedClaim) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreClaim_RelatedClaim) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreClaim_RelatedClaim) GetClaim() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Claim
	}
	return nil
}

func (x *QICoreClaim_RelatedClaim) GetRelationship() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *QICoreClaim_RelatedClaim) GetReference() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Reference
	}
	return nil
}

// Recipient of benefits payable
type QICoreClaim_Payee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Category of recipient
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Recipient reference
	Party *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=party,proto3" json:"party,omitempty"`
}

func (x *QICoreClaim_Payee) Reset() {
	*x = QICoreClaim_Payee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreClaim_Payee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreClaim_Payee) ProtoMessage() {}

func (x *QICoreClaim_Payee) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreClaim_Payee.ProtoReflect.Descriptor instead.
func (*QICoreClaim_Payee) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{5, 3}
}

func (x *QICoreClaim_Payee) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreClaim_Payee) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreClaim_Payee) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreClaim_Payee) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreClaim_Payee) GetParty() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Party
	}
	return nil
}

// Members of the care team
type QICoreClaim_CareTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Order of care team
	Sequence *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Practitioner or organization
	Provider *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
	// Indicator of the lead practitioner
	Responsible *datatypes_go_proto.Boolean `protobuf:"bytes,6,opt,name=responsible,proto3" json:"responsible,omitempty"`
	// Function within the team
	Role *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=role,proto3" json:"role,omitempty"`
	// Practitioner credential or specialization
	Qualification *datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,opt,name=qualification,proto3" json:"qualification,omitempty"`
}

func (x *QICoreClaim_CareTeam) Reset() {
	*x = QICoreClaim_CareTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreClaim_CareTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreClaim_CareTeam) ProtoMessage() {}

func (x *QICoreClaim_CareTeam) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreClaim_CareTeam.ProtoReflect.Descriptor instead.
func (*QICoreClaim_CareTeam) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{5, 4}
}

func (x *QICoreClaim_CareTeam) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreClaim_CareTeam) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreClaim_CareTeam) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreClaim_CareTeam) GetSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *QICoreClaim_CareTeam) GetProvider() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *QICoreClaim_CareTeam) GetResponsible() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Responsible
	}
	return nil
}

func (x *QICoreClaim_CareTeam) GetRole() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *QICoreClaim_CareTeam) GetQualification() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Qualification
	}
	return nil
}

// Supporting information
type QICoreClaim_SupportingInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Information instance identifier
	Sequence *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Classification of the supplied information
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty"`
	// Type of information
	Code   *datatypes_go_proto.CodeableConcept        `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
	Timing *QICoreClaim_SupportingInformation_TimingX `protobuf:"bytes,7,opt,name=timing,proto3" json:"timing,omitempty"`
	Value  *QICoreClaim_SupportingInformation_ValueX  `protobuf:"bytes,8,opt,name=value,proto3" json:"value,omitempty"`
	// Explanation for the information
	Reason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *QICoreClaim_SupportingInformation) Reset() {
	*x = QICoreClaim_SupportingInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreClaim_SupportingInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreClaim_SupportingInformation) ProtoMessage() {}

func (x *QICoreClaim_SupportingInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreClaim_SupportingInformation.ProtoReflect.Descriptor instead.
func (*QICoreClaim_SupportingInformation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{5, 5}
}

func (x *QICoreClaim_SupportingInformation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreClaim_SupportingInformation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreClaim_SupportingInformation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreClaim_SupportingInformation) GetSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *QICoreClaim_SupportingInformation) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *QICoreClaim_SupportingInformation) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *QICoreClaim_SupportingInformation) GetTiming() *QICoreClaim_SupportingInformation_TimingX {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *QICoreClaim_SupportingInformation) GetValue() *QICoreClaim_SupportingInformation_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *QICoreClaim_SupportingInformation) GetReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Reason
	}
	return nil
}

// Pertinent diagnosis information
type QICoreClaim_Diagnosis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Diagnosis instance identifier
	Sequence  *datatypes_go_proto.PositiveInt   `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Diagnosis *QICoreClaim_Diagnosis_DiagnosisX `protobuf:"bytes,5,opt,name=diagnosis,proto3" json:"diagnosis,omitempty"`
	// Timing or nature of the diagnosis
	Type []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,rep,name=type,proto3" json:"type,omitempty"`
	// Present on admission
	OnAdmission *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=on_admission,json=onAdmission,proto3" json:"on_admission,omitempty"`
	// Package billing code
	PackageCode *datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,opt,name=package_code,json=packageCode,proto3" json:"package_code,omitempty"`
}

func (x *QICoreClaim_Diagnosis) Reset() {
	*x = QICoreClaim_Diagnosis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreClaim_Diagnosis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreClaim_Diagnosis) ProtoMessage() {}

func (x *QICoreClaim_Diagnosis) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreClaim_Diagnosis.ProtoReflect.Descriptor instead.
func (*QICoreClaim_Diagnosis) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{5, 6}
}

func (x *QICoreClaim_Diagnosis) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreClaim_Diagnosis) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreClaim_Diagnosis) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreClaim_Diagnosis) GetSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *QICoreClaim_Diagnosis) GetDiagnosis() *QICoreClaim_Diagnosis_DiagnosisX {
	if x != nil {
		return x.Diagnosis
	}
	return nil
}

func (x *QICoreClaim_Diagnosis) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreClaim_Diagnosis) GetOnAdmission() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.OnAdmission
	}
	return nil
}

func (x *QICoreClaim_Diagnosis) GetPackageCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PackageCode
	}
	return nil
}

// Clinical procedures performed
type QICoreClaim_Procedure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Procedure instance identifier
	Sequence *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Category of Procedure
	Type []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,rep,name=type,proto3" json:"type,omitempty"`
	// When the procedure was performed
	Date      *datatypes_go_proto.DateTime      `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`
	Procedure *QICoreClaim_Procedure_ProcedureX `protobuf:"bytes,7,opt,name=procedure,proto3" json:"procedure,omitempty"`
	// Unique device identifier
	Udi []*datatypes_go_proto.Reference `protobuf:"bytes,8,rep,name=udi,proto3" json:"udi,omitempty"`
}

func (x *QICoreClaim_Procedure) Reset() {
	*x = QICoreClaim_Procedure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreClaim_Procedure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreClaim_Procedure) ProtoMessage() {}

func (x *QICoreClaim_Procedure) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreClaim_Procedure.ProtoReflect.Descriptor instead.
func (*QICoreClaim_Procedure) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{5, 7}
}

func (x *QICoreClaim_Procedure) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreClaim_Procedure) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreClaim_Procedure) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreClaim_Procedure) GetSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *QICoreClaim_Procedure) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreClaim_Procedure) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *QICoreClaim_Procedure) GetProcedure() *QICoreClaim_Procedure_ProcedureX {
	if x != nil {
		return x.Procedure
	}
	return nil
}

func (x *QICoreClaim_Procedure) GetUdi() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Udi
	}
	return nil
}

// Patient insurance information
type QICoreClaim_Insurance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Insurance instance identifier
	Sequence *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Coverage to be used for adjudication
	Focal *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=focal,proto3" json:"focal,omitempty"`
	// Pre-assigned Claim number
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,6,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Insurance information
	Coverage *datatypes_go_proto.Reference `protobuf:"bytes,7,opt,name=coverage,proto3" json:"coverage,omitempty"`
	// Additional provider contract number
	BusinessArrangement *datatypes_go_proto.String `protobuf:"bytes,8,opt,name=business_arrangement,json=businessArrangement,proto3" json:"business_arrangement,omitempty"`
	// Prior authorization reference number
	PreAuthRef []*datatypes_go_proto.String `protobuf:"bytes,9,rep,name=pre_auth_ref,json=preAuthRef,proto3" json:"pre_auth_ref,omitempty"`
	// Adjudication results
	ClaimResponse *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=claim_response,json=claimResponse,proto3" json:"claim_response,omitempty"`
}

func (x *QICoreClaim_Insurance) Reset() {
	*x = QICoreClaim_Insurance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreClaim_Insurance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreClaim_Insurance) ProtoMessage() {}

func (x *QICoreClaim_Insurance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreClaim_Insurance.ProtoReflect.Descriptor instead.
func (*QICoreClaim_Insurance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{5, 8}
}

func (x *QICoreClaim_Insurance) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreClaim_Insurance) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreClaim_Insurance) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreClaim_Insurance) GetSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *QICoreClaim_Insurance) GetFocal() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Focal
	}
	return nil
}

func (x *QICoreClaim_Insurance) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreClaim_Insurance) GetCoverage() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Coverage
	}
	return nil
}

func (x *QICoreClaim_Insurance) GetBusinessArrangement() *datatypes_go_proto.String {
	if x != nil {
		return x.BusinessArrangement
	}
	return nil
}

func (x *QICoreClaim_Insurance) GetPreAuthRef() []*datatypes_go_proto.String {
	if x != nil {
		return x.PreAuthRef
	}
	return nil
}

func (x *QICoreClaim_Insurance) GetClaimResponse() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ClaimResponse
	}
	return nil
}

// Details of the event
type QICoreClaim_Accident struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// When the incident occurred
	Date *datatypes_go_proto.Date `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	// The nature of the accident
	Type     *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Location *QICoreClaim_Accident_LocationX     `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *QICoreClaim_Accident) Reset() {
	*x = QICoreClaim_Accident{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreClaim_Accident) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreClaim_Accident) ProtoMessage() {}

func (x *QICoreClaim_Accident) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreClaim_Accident.ProtoReflect.Descriptor instead.
func (*QICoreClaim_Accident) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{5, 9}
}

func (x *QICoreClaim_Accident) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreClaim_Accident) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreClaim_Accident) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreClaim_Accident) GetDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *QICoreClaim_Accident) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreClaim_Accident) GetLocation() *QICoreClaim_Accident_LocationX {
	if x != nil {
		return x.Location
	}
	return nil
}

// Product or service provided
type QICoreClaim_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Item instance identifier
	Sequence *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Applicable careTeam members
	CareTeamSequence []*datatypes_go_proto.PositiveInt `protobuf:"bytes,5,rep,name=care_team_sequence,json=careTeamSequence,proto3" json:"care_team_sequence,omitempty"`
	// Applicable diagnoses
	DiagnosisSequence []*datatypes_go_proto.PositiveInt `protobuf:"bytes,6,rep,name=diagnosis_sequence,json=diagnosisSequence,proto3" json:"diagnosis_sequence,omitempty"`
	// Applicable procedures
	ProcedureSequence []*datatypes_go_proto.PositiveInt `protobuf:"bytes,7,rep,name=procedure_sequence,json=procedureSequence,proto3" json:"procedure_sequence,omitempty"`
	// Applicable exception and supporting information
	InformationSequence []*datatypes_go_proto.PositiveInt `protobuf:"bytes,8,rep,name=information_sequence,json=informationSequence,proto3" json:"information_sequence,omitempty"`
	// Revenue or cost center code
	Revenue *datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,opt,name=revenue,proto3" json:"revenue,omitempty"`
	// Benefit classification
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,opt,name=category,proto3" json:"category,omitempty"`
	// Billing, service, product, or drug code
	ProductOrService *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=product_or_service,json=productOrService,proto3" json:"product_or_service,omitempty"`
	// Product or service billing modifiers
	Modifier []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=modifier,proto3" json:"modifier,omitempty"`
	// Program the product or service is provided under
	ProgramCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,rep,name=program_code,json=programCode,proto3" json:"program_code,omitempty"`
	Serviced    *QICoreClaim_Item_ServicedX           `protobuf:"bytes,14,opt,name=serviced,proto3" json:"serviced,omitempty"`
	Location    *QICoreClaim_Item_LocationX           `protobuf:"bytes,15,opt,name=location,proto3" json:"location,omitempty"`
	// Count of products or services
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,16,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Fee, charge or cost per item
	UnitPrice *datatypes_go_proto.Money `protobuf:"bytes,17,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	// Price scaling factor
	Factor *datatypes_go_proto.Decimal `protobuf:"bytes,18,opt,name=factor,proto3" json:"factor,omitempty"`
	// Total item cost
	Net *datatypes_go_proto.Money `protobuf:"bytes,19,opt,name=net,proto3" json:"net,omitempty"`
	// Unique device identifier
	Udi []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=udi,proto3" json:"udi,omitempty"`
	// Anatomical location
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// Anatomical sub-location
	SubSite []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,22,rep,name=sub_site,json=subSite,proto3" json:"sub_site,omitempty"`
	// Encounters related to this billed item
	Encounter []*datatypes_go_proto.Reference `protobuf:"bytes,23,rep,name=encounter,proto3" json:"encounter,omitempty"`
	Detail    []*QICoreClaim_Item_Detail      `protobuf:"bytes,24,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *QICoreClaim_Item) Reset() {
	*x = QICoreClaim_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreClaim_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreClaim_Item) ProtoMessage() {}

func (x *QICoreClaim_Item) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreClaim_Item.ProtoReflect.Descriptor instead.
func (*QICoreClaim_Item) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{5, 10}
}

func (x *QICoreClaim_Item) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreClaim_Item) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreClaim_Item) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreClaim_Item) GetSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *QICoreClaim_Item) GetCareTeamSequence() []*datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.CareTeamSequence
	}
	return nil
}

func (x *QICoreClaim_Item) GetDiagnosisSequence() []*datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.DiagnosisSequence
	}
	return nil
}

func (x *QICoreClaim_Item) GetProcedureSequence() []*datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.ProcedureSequence
	}
	return nil
}

func (x *QICoreClaim_Item) GetInformationSequence() []*datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.InformationSequence
	}
	return nil
}

func (x *QICoreClaim_Item) GetRevenue() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Revenue
	}
	return nil
}

func (x *QICoreClaim_Item) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *QICoreClaim_Item) GetProductOrService() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ProductOrService
	}
	return nil
}

func (x *QICoreClaim_Item) GetModifier() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Modifier
	}
	return nil
}

func (x *QICoreClaim_Item) GetProgramCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ProgramCode
	}
	return nil
}

func (x *QICoreClaim_Item) GetServiced() *QICoreClaim_Item_ServicedX {
	if x != nil {
		return x.Serviced
	}
	return nil
}

func (x *QICoreClaim_Item) GetLocation() *QICoreClaim_Item_LocationX {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *QICoreClaim_Item) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *QICoreClaim_Item) GetUnitPrice() *datatypes_go_proto.Money {
	if x != nil {
		return x.UnitPrice
	}
	return nil
}

func (x *QICoreClaim_Item) GetFactor() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Factor
	}
	return nil
}

func (x *QICoreClaim_Item) GetNet() *datatypes_go_proto.Money {
	if x != nil {
		return x.Net
	}
	return nil
}

func (x *QICoreClaim_Item) GetUdi() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Udi
	}
	return nil
}

func (x *QICoreClaim_Item) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *QICoreClaim_Item) GetSubSite() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SubSite
	}
	return nil
}

func (x *QICoreClaim_Item) GetEncounter() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *QICoreClaim_Item) GetDetail() []*QICoreClaim_Item_Detail {
	if x != nil {
		return x.Detail
	}
	return nil
}

// When it occurred
type QICoreClaim_SupportingInformation_TimingX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreClaim_SupportingInformation_TimingX_Date
	//	*QICoreClaim_SupportingInformation_TimingX_Period
	Choice isQICoreClaim_SupportingInformation_TimingX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreClaim_SupportingInformation_TimingX) Reset() {
	*x = QICoreClaim_SupportingInformation_TimingX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreClaim_SupportingInformation_TimingX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreClaim_SupportingInformation_TimingX) ProtoMessage() {}

func (x *QICoreClaim_SupportingInformation_TimingX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreClaim_SupportingInformation_TimingX.ProtoReflect.Descriptor instead.
func (*QICoreClaim_SupportingInformation_TimingX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{5, 5, 0}
}

func (m *QICoreClaim_SupportingInformation_TimingX) GetChoice() isQICoreClaim_SupportingInformation_TimingX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreClaim_SupportingInformation_TimingX) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetChoice().(*QICoreClaim_SupportingInformation_TimingX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *QICoreClaim_SupportingInformation_TimingX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*QICoreClaim_SupportingInformation_TimingX_Period); ok {
		return x.Period
	}
	return nil
}

type isQICoreClaim_SupportingInformation_TimingX_Choice interface {
	isQICoreClaim_SupportingInformation_TimingX_Choice()
}

type QICoreClaim_SupportingInformation_TimingX_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type QICoreClaim_SupportingInformation_TimingX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*QICoreClaim_SupportingInformation_TimingX_Date) isQICoreClaim_SupportingInformation_TimingX_Choice() {
}

func (*QICoreClaim_SupportingInformation_TimingX_Period) isQICoreClaim_SupportingInformation_TimingX_Choice() {
}

// Data to be provided
type QICoreClaim_SupportingInformation_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreClaim_SupportingInformation_ValueX_Boolean
	//	*QICoreClaim_SupportingInformation_ValueX_StringValue
	//	*QICoreClaim_SupportingInformation_ValueX_Quantity
	//	*QICoreClaim_SupportingInformation_ValueX_Attachment
	//	*QICoreClaim_SupportingInformation_ValueX_Reference
	Choice isQICoreClaim_SupportingInformation_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreClaim_SupportingInformation_ValueX) Reset() {
	*x = QICoreClaim_SupportingInformation_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreClaim_SupportingInformation_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreClaim_SupportingInformation_ValueX) ProtoMessage() {}

func (x *QICoreClaim_SupportingInformation_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreClaim_SupportingInformation_ValueX.ProtoReflect.Descriptor instead.
func (*QICoreClaim_SupportingInformation_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{5, 5, 1}
}

func (m *QICoreClaim_SupportingInformation_ValueX) GetChoice() isQICoreClaim_SupportingInformation_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreClaim_SupportingInformation_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*QICoreClaim_SupportingInformation_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *QICoreClaim_SupportingInformation_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*QICoreClaim_SupportingInformation_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *QICoreClaim_SupportingInformation_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*QICoreClaim_SupportingInformation_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *QICoreClaim_SupportingInformation_ValueX) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetChoice().(*QICoreClaim_SupportingInformation_ValueX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *QICoreClaim_SupportingInformation_ValueX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*QICoreClaim_SupportingInformation_ValueX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isQICoreClaim_SupportingInformation_ValueX_Choice interface {
	isQICoreClaim_SupportingInformation_ValueX_Choice()
}

type QICoreClaim_SupportingInformation_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type QICoreClaim_SupportingInformation_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

type QICoreClaim_SupportingInformation_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,3,opt,name=quantity,proto3,oneof"`
}

type QICoreClaim_SupportingInformation_ValueX_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,4,opt,name=attachment,proto3,oneof"`
}

type QICoreClaim_SupportingInformation_ValueX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=reference,proto3,oneof"`
}

func (*QICoreClaim_SupportingInformation_ValueX_Boolean) isQICoreClaim_SupportingInformation_ValueX_Choice() {
}

func (*QICoreClaim_SupportingInformation_ValueX_StringValue) isQICoreClaim_SupportingInformation_ValueX_Choice() {
}

func (*QICoreClaim_SupportingInformation_ValueX_Quantity) isQICoreClaim_SupportingInformation_ValueX_Choice() {
}

func (*QICoreClaim_SupportingInformation_ValueX_Attachment) isQICoreClaim_SupportingInformation_ValueX_Choice() {
}

func (*QICoreClaim_SupportingInformation_ValueX_Reference) isQICoreClaim_SupportingInformation_ValueX_Choice() {
}

// Nature of illness or problem
type QICoreClaim_Diagnosis_DiagnosisX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreClaim_Diagnosis_DiagnosisX_CodeableConcept
	//	*QICoreClaim_Diagnosis_DiagnosisX_Reference
	Choice isQICoreClaim_Diagnosis_DiagnosisX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreClaim_Diagnosis_DiagnosisX) Reset() {
	*x = QICoreClaim_Diagnosis_DiagnosisX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreClaim_Diagnosis_DiagnosisX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreClaim_Diagnosis_DiagnosisX) ProtoMessage() {}

func (x *QICoreClaim_Diagnosis_DiagnosisX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreClaim_Diagnosis_DiagnosisX.ProtoReflect.Descriptor instead.
func (*QICoreClaim_Diagnosis_DiagnosisX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{5, 6, 0}
}

func (m *QICoreClaim_Diagnosis_DiagnosisX) GetChoice() isQICoreClaim_Diagnosis_DiagnosisX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreClaim_Diagnosis_DiagnosisX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*QICoreClaim_Diagnosis_DiagnosisX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *QICoreClaim_Diagnosis_DiagnosisX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*QICoreClaim_Diagnosis_DiagnosisX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isQICoreClaim_Diagnosis_DiagnosisX_Choice interface {
	isQICoreClaim_Diagnosis_DiagnosisX_Choice()
}

type QICoreClaim_Diagnosis_DiagnosisX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type QICoreClaim_Diagnosis_DiagnosisX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*QICoreClaim_Diagnosis_DiagnosisX_CodeableConcept) isQICoreClaim_Diagnosis_DiagnosisX_Choice() {
}

func (*QICoreClaim_Diagnosis_DiagnosisX_Reference) isQICoreClaim_Diagnosis_DiagnosisX_Choice() {}

// Specific clinical procedure
type QICoreClaim_Procedure_ProcedureX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreClaim_Procedure_ProcedureX_CodeableConcept
	//	*QICoreClaim_Procedure_ProcedureX_Reference
	Choice isQICoreClaim_Procedure_ProcedureX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreClaim_Procedure_ProcedureX) Reset() {
	*x = QICoreClaim_Procedure_ProcedureX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreClaim_Procedure_ProcedureX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreClaim_Procedure_ProcedureX) ProtoMessage() {}

func (x *QICoreClaim_Procedure_ProcedureX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreClaim_Procedure_ProcedureX.ProtoReflect.Descriptor instead.
func (*QICoreClaim_Procedure_ProcedureX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{5, 7, 0}
}

func (m *QICoreClaim_Procedure_ProcedureX) GetChoice() isQICoreClaim_Procedure_ProcedureX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreClaim_Procedure_ProcedureX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*QICoreClaim_Procedure_ProcedureX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *QICoreClaim_Procedure_ProcedureX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*QICoreClaim_Procedure_ProcedureX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isQICoreClaim_Procedure_ProcedureX_Choice interface {
	isQICoreClaim_Procedure_ProcedureX_Choice()
}

type QICoreClaim_Procedure_ProcedureX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type QICoreClaim_Procedure_ProcedureX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*QICoreClaim_Procedure_ProcedureX_CodeableConcept) isQICoreClaim_Procedure_ProcedureX_Choice() {
}

func (*QICoreClaim_Procedure_ProcedureX_Reference) isQICoreClaim_Procedure_ProcedureX_Choice() {}

// Where the event occurred
type QICoreClaim_Accident_LocationX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreClaim_Accident_LocationX_Address
	//	*QICoreClaim_Accident_LocationX_Reference
	Choice isQICoreClaim_Accident_LocationX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreClaim_Accident_LocationX) Reset() {
	*x = QICoreClaim_Accident_LocationX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreClaim_Accident_LocationX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreClaim_Accident_LocationX) ProtoMessage() {}

func (x *QICoreClaim_Accident_LocationX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreClaim_Accident_LocationX.ProtoReflect.Descriptor instead.
func (*QICoreClaim_Accident_LocationX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{5, 9, 0}
}

func (m *QICoreClaim_Accident_LocationX) GetChoice() isQICoreClaim_Accident_LocationX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreClaim_Accident_LocationX) GetAddress() *datatypes_go_proto.Address {
	if x, ok := x.GetChoice().(*QICoreClaim_Accident_LocationX_Address); ok {
		return x.Address
	}
	return nil
}

func (x *QICoreClaim_Accident_LocationX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*QICoreClaim_Accident_LocationX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isQICoreClaim_Accident_LocationX_Choice interface {
	isQICoreClaim_Accident_LocationX_Choice()
}

type QICoreClaim_Accident_LocationX_Address struct {
	Address *datatypes_go_proto.Address `protobuf:"bytes,1,opt,name=address,proto3,oneof"`
}

type QICoreClaim_Accident_LocationX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*QICoreClaim_Accident_LocationX_Address) isQICoreClaim_Accident_LocationX_Choice() {}

func (*QICoreClaim_Accident_LocationX_Reference) isQICoreClaim_Accident_LocationX_Choice() {}

// Date or dates of service or product delivery
type QICoreClaim_Item_ServicedX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreClaim_Item_ServicedX_Date
	//	*QICoreClaim_Item_ServicedX_Period
	Choice isQICoreClaim_Item_ServicedX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreClaim_Item_ServicedX) Reset() {
	*x = QICoreClaim_Item_ServicedX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreClaim_Item_ServicedX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreClaim_Item_ServicedX) ProtoMessage() {}

func (x *QICoreClaim_Item_ServicedX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreClaim_Item_ServicedX.ProtoReflect.Descriptor instead.
func (*QICoreClaim_Item_ServicedX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{5, 10, 0}
}

func (m *QICoreClaim_Item_ServicedX) GetChoice() isQICoreClaim_Item_ServicedX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreClaim_Item_ServicedX) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetChoice().(*QICoreClaim_Item_ServicedX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *QICoreClaim_Item_ServicedX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*QICoreClaim_Item_ServicedX_Period); ok {
		return x.Period
	}
	return nil
}

type isQICoreClaim_Item_ServicedX_Choice interface {
	isQICoreClaim_Item_ServicedX_Choice()
}

type QICoreClaim_Item_ServicedX_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type QICoreClaim_Item_ServicedX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*QICoreClaim_Item_ServicedX_Date) isQICoreClaim_Item_ServicedX_Choice() {}

func (*QICoreClaim_Item_ServicedX_Period) isQICoreClaim_Item_ServicedX_Choice() {}

// Place of service or where product was supplied
type QICoreClaim_Item_LocationX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreClaim_Item_LocationX_CodeableConcept
	//	*QICoreClaim_Item_LocationX_Address
	//	*QICoreClaim_Item_LocationX_Reference
	Choice isQICoreClaim_Item_LocationX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreClaim_Item_LocationX) Reset() {
	*x = QICoreClaim_Item_LocationX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreClaim_Item_LocationX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreClaim_Item_LocationX) ProtoMessage() {}

func (x *QICoreClaim_Item_LocationX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreClaim_Item_LocationX.ProtoReflect.Descriptor instead.
func (*QICoreClaim_Item_LocationX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{5, 10, 1}
}

func (m *QICoreClaim_Item_LocationX) GetChoice() isQICoreClaim_Item_LocationX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreClaim_Item_LocationX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*QICoreClaim_Item_LocationX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *QICoreClaim_Item_LocationX) GetAddress() *datatypes_go_proto.Address {
	if x, ok := x.GetChoice().(*QICoreClaim_Item_LocationX_Address); ok {
		return x.Address
	}
	return nil
}

func (x *QICoreClaim_Item_LocationX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*QICoreClaim_Item_LocationX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isQICoreClaim_Item_LocationX_Choice interface {
	isQICoreClaim_Item_LocationX_Choice()
}

type QICoreClaim_Item_LocationX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type QICoreClaim_Item_LocationX_Address struct {
	Address *datatypes_go_proto.Address `protobuf:"bytes,2,opt,name=address,proto3,oneof"`
}

type QICoreClaim_Item_LocationX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=reference,proto3,oneof"`
}

func (*QICoreClaim_Item_LocationX_CodeableConcept) isQICoreClaim_Item_LocationX_Choice() {}

func (*QICoreClaim_Item_LocationX_Address) isQICoreClaim_Item_LocationX_Choice() {}

func (*QICoreClaim_Item_LocationX_Reference) isQICoreClaim_Item_LocationX_Choice() {}

// Product or service provided
type QICoreClaim_Item_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Item instance identifier
	Sequence *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Revenue or cost center code
	Revenue *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=revenue,proto3" json:"revenue,omitempty"`
	// Benefit classification
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"`
	// Billing, service, product, or drug code
	ProductOrService *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=product_or_service,json=productOrService,proto3" json:"product_or_service,omitempty"`
	// Service/Product billing modifiers
	Modifier []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,rep,name=modifier,proto3" json:"modifier,omitempty"`
	// Program the product or service is provided under
	ProgramCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,rep,name=program_code,json=programCode,proto3" json:"program_code,omitempty"`
	// Count of products or services
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,10,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Fee, charge or cost per item
	UnitPrice *datatypes_go_proto.Money `protobuf:"bytes,11,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	// Price scaling factor
	Factor *datatypes_go_proto.Decimal `protobuf:"bytes,12,opt,name=factor,proto3" json:"factor,omitempty"`
	// Total item cost
	Net *datatypes_go_proto.Money `protobuf:"bytes,13,opt,name=net,proto3" json:"net,omitempty"`
	// Unique device identifier
	Udi       []*datatypes_go_proto.Reference      `protobuf:"bytes,14,rep,name=udi,proto3" json:"udi,omitempty"`
	SubDetail []*QICoreClaim_Item_Detail_SubDetail `protobuf:"bytes,15,rep,name=sub_detail,json=subDetail,proto3" json:"sub_detail,omitempty"`
}

func (x *QICoreClaim_Item_Detail) Reset() {
	*x = QICoreClaim_Item_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreClaim_Item_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreClaim_Item_Detail) ProtoMessage() {}

func (x *QICoreClaim_Item_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreClaim_Item_Detail.ProtoReflect.Descriptor instead.
func (*QICoreClaim_Item_Detail) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{5, 10, 2}
}

func (x *QICoreClaim_Item_Detail) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreClaim_Item_Detail) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreClaim_Item_Detail) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreClaim_Item_Detail) GetSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *QICoreClaim_Item_Detail) GetRevenue() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Revenue
	}
	return nil
}

func (x *QICoreClaim_Item_Detail) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *QICoreClaim_Item_Detail) GetProductOrService() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ProductOrService
	}
	return nil
}

func (x *QICoreClaim_Item_Detail) GetModifier() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Modifier
	}
	return nil
}

func (x *QICoreClaim_Item_Detail) GetProgramCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ProgramCode
	}
	return nil
}

func (x *QICoreClaim_Item_Detail) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *QICoreClaim_Item_Detail) GetUnitPrice() *datatypes_go_proto.Money {
	if x != nil {
		return x.UnitPrice
	}
	return nil
}

func (x *QICoreClaim_Item_Detail) GetFactor() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Factor
	}
	return nil
}

func (x *QICoreClaim_Item_Detail) GetNet() *datatypes_go_proto.Money {
	if x != nil {
		return x.Net
	}
	return nil
}

func (x *QICoreClaim_Item_Detail) GetUdi() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Udi
	}
	return nil
}

func (x *QICoreClaim_Item_Detail) GetSubDetail() []*QICoreClaim_Item_Detail_SubDetail {
	if x != nil {
		return x.SubDetail
	}
	return nil
}

// Product or service provided
type QICoreClaim_Item_Detail_SubDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Item instance identifier
	Sequence *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Revenue or cost center code
	Revenue *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=revenue,proto3" json:"revenue,omitempty"`
	// Benefit classification
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"`
	// Billing, service, product, or drug code
	ProductOrService *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=product_or_service,json=productOrService,proto3" json:"product_or_service,omitempty"`
	// Service/Product billing modifiers
	Modifier []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,rep,name=modifier,proto3" json:"modifier,omitempty"`
	// Program the product or service is provided under
	ProgramCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,rep,name=program_code,json=programCode,proto3" json:"program_code,omitempty"`
	// Count of products or services
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,10,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Fee, charge or cost per item
	UnitPrice *datatypes_go_proto.Money `protobuf:"bytes,11,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	// Price scaling factor
	Factor *datatypes_go_proto.Decimal `protobuf:"bytes,12,opt,name=factor,proto3" json:"factor,omitempty"`
	// Total item cost
	Net *datatypes_go_proto.Money `protobuf:"bytes,13,opt,name=net,proto3" json:"net,omitempty"`
	// Unique device identifier
	Udi []*datatypes_go_proto.Reference `protobuf:"bytes,14,rep,name=udi,proto3" json:"udi,omitempty"`
}

func (x *QICoreClaim_Item_Detail_SubDetail) Reset() {
	*x = QICoreClaim_Item_Detail_SubDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreClaim_Item_Detail_SubDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreClaim_Item_Detail_SubDetail) ProtoMessage() {}

func (x *QICoreClaim_Item_Detail_SubDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreClaim_Item_Detail_SubDetail.ProtoReflect.Descriptor instead.
func (*QICoreClaim_Item_Detail_SubDetail) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{5, 10, 2, 0}
}

func (x *QICoreClaim_Item_Detail_SubDetail) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreClaim_Item_Detail_SubDetail) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreClaim_Item_Detail_SubDetail) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreClaim_Item_Detail_SubDetail) GetSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *QICoreClaim_Item_Detail_SubDetail) GetRevenue() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Revenue
	}
	return nil
}

func (x *QICoreClaim_Item_Detail_SubDetail) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *QICoreClaim_Item_Detail_SubDetail) GetProductOrService() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ProductOrService
	}
	return nil
}

func (x *QICoreClaim_Item_Detail_SubDetail) GetModifier() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Modifier
	}
	return nil
}

func (x *QICoreClaim_Item_Detail_SubDetail) GetProgramCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ProgramCode
	}
	return nil
}

func (x *QICoreClaim_Item_Detail_SubDetail) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *QICoreClaim_Item_Detail_SubDetail) GetUnitPrice() *datatypes_go_proto.Money {
	if x != nil {
		return x.UnitPrice
	}
	return nil
}

func (x *QICoreClaim_Item_Detail_SubDetail) GetFactor() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Factor
	}
	return nil
}

func (x *QICoreClaim_Item_Detail_SubDetail) GetNet() *datatypes_go_proto.Money {
	if x != nil {
		return x.Net
	}
	return nil
}

func (x *QICoreClaim_Item_Detail_SubDetail) GetUdi() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Udi
	}
	return nil
}

// preparation | in-progress | not-done | suspended | aborted | completed |
// entered-in-error
type QICoreCommunication_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.EventStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.EventStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension      `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreCommunication_StatusCode) Reset() {
	*x = QICoreCommunication_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCommunication_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCommunication_StatusCode) ProtoMessage() {}

func (x *QICoreCommunication_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCommunication_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreCommunication_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{6, 0}
}

func (x *QICoreCommunication_StatusCode) GetValue() codes_go_proto.EventStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.EventStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreCommunication_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCommunication_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Message urgency
type QICoreCommunication_PriorityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.RequestPriorityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.RequestPriorityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension          `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreCommunication_PriorityCode) Reset() {
	*x = QICoreCommunication_PriorityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCommunication_PriorityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCommunication_PriorityCode) ProtoMessage() {}

func (x *QICoreCommunication_PriorityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCommunication_PriorityCode.ProtoReflect.Descriptor instead.
func (*QICoreCommunication_PriorityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{6, 1}
}

func (x *QICoreCommunication_PriorityCode) GetValue() codes_go_proto.RequestPriorityCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.RequestPriorityCode_INVALID_UNINITIALIZED
}

func (x *QICoreCommunication_PriorityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCommunication_PriorityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Message payload
type QICoreCommunication_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Content           *QICoreCommunication_Payload_ContentX `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *QICoreCommunication_Payload) Reset() {
	*x = QICoreCommunication_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCommunication_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCommunication_Payload) ProtoMessage() {}

func (x *QICoreCommunication_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCommunication_Payload.ProtoReflect.Descriptor instead.
func (*QICoreCommunication_Payload) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{6, 2}
}

func (x *QICoreCommunication_Payload) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCommunication_Payload) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreCommunication_Payload) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreCommunication_Payload) GetContent() *QICoreCommunication_Payload_ContentX {
	if x != nil {
		return x.Content
	}
	return nil
}

// Message part content
type QICoreCommunication_Payload_ContentX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreCommunication_Payload_ContentX_StringValue
	//	*QICoreCommunication_Payload_ContentX_Attachment
	//	*QICoreCommunication_Payload_ContentX_Reference
	Choice isQICoreCommunication_Payload_ContentX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreCommunication_Payload_ContentX) Reset() {
	*x = QICoreCommunication_Payload_ContentX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCommunication_Payload_ContentX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCommunication_Payload_ContentX) ProtoMessage() {}

func (x *QICoreCommunication_Payload_ContentX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCommunication_Payload_ContentX.ProtoReflect.Descriptor instead.
func (*QICoreCommunication_Payload_ContentX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{6, 2, 0}
}

func (m *QICoreCommunication_Payload_ContentX) GetChoice() isQICoreCommunication_Payload_ContentX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreCommunication_Payload_ContentX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*QICoreCommunication_Payload_ContentX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *QICoreCommunication_Payload_ContentX) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetChoice().(*QICoreCommunication_Payload_ContentX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *QICoreCommunication_Payload_ContentX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*QICoreCommunication_Payload_ContentX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isQICoreCommunication_Payload_ContentX_Choice interface {
	isQICoreCommunication_Payload_ContentX_Choice()
}

type QICoreCommunication_Payload_ContentX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=string_value,json=string,proto3,oneof"`
}

type QICoreCommunication_Payload_ContentX_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,2,opt,name=attachment,proto3,oneof"`
}

type QICoreCommunication_Payload_ContentX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=reference,proto3,oneof"`
}

func (*QICoreCommunication_Payload_ContentX_StringValue) isQICoreCommunication_Payload_ContentX_Choice() {
}

func (*QICoreCommunication_Payload_ContentX_Attachment) isQICoreCommunication_Payload_ContentX_Choice() {
}

func (*QICoreCommunication_Payload_ContentX_Reference) isQICoreCommunication_Payload_ContentX_Choice() {
}

// draft | active | suspended | cancelled | completed | entered-in-error |
// unknown
type QICoreCommunicationRequest_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.RequestStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.RequestStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension        `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreCommunicationRequest_StatusCode) Reset() {
	*x = QICoreCommunicationRequest_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCommunicationRequest_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCommunicationRequest_StatusCode) ProtoMessage() {}

func (x *QICoreCommunicationRequest_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCommunicationRequest_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreCommunicationRequest_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{7, 0}
}

func (x *QICoreCommunicationRequest_StatusCode) GetValue() codes_go_proto.RequestStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.RequestStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreCommunicationRequest_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCommunicationRequest_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Message urgency
type QICoreCommunicationRequest_PriorityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.RequestPriorityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.RequestPriorityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension          `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreCommunicationRequest_PriorityCode) Reset() {
	*x = QICoreCommunicationRequest_PriorityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCommunicationRequest_PriorityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCommunicationRequest_PriorityCode) ProtoMessage() {}

func (x *QICoreCommunicationRequest_PriorityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCommunicationRequest_PriorityCode.ProtoReflect.Descriptor instead.
func (*QICoreCommunicationRequest_PriorityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{7, 1}
}

func (x *QICoreCommunicationRequest_PriorityCode) GetValue() codes_go_proto.RequestPriorityCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.RequestPriorityCode_INVALID_UNINITIALIZED
}

func (x *QICoreCommunicationRequest_PriorityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCommunicationRequest_PriorityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Message payload
type QICoreCommunicationRequest_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension              `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Content           *QICoreCommunicationRequest_Payload_ContentX `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *QICoreCommunicationRequest_Payload) Reset() {
	*x = QICoreCommunicationRequest_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCommunicationRequest_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCommunicationRequest_Payload) ProtoMessage() {}

func (x *QICoreCommunicationRequest_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCommunicationRequest_Payload.ProtoReflect.Descriptor instead.
func (*QICoreCommunicationRequest_Payload) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{7, 2}
}

func (x *QICoreCommunicationRequest_Payload) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCommunicationRequest_Payload) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreCommunicationRequest_Payload) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreCommunicationRequest_Payload) GetContent() *QICoreCommunicationRequest_Payload_ContentX {
	if x != nil {
		return x.Content
	}
	return nil
}

// When scheduled
type QICoreCommunicationRequest_OccurrenceX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreCommunicationRequest_OccurrenceX_DateTime
	//	*QICoreCommunicationRequest_OccurrenceX_Period
	Choice isQICoreCommunicationRequest_OccurrenceX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreCommunicationRequest_OccurrenceX) Reset() {
	*x = QICoreCommunicationRequest_OccurrenceX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCommunicationRequest_OccurrenceX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCommunicationRequest_OccurrenceX) ProtoMessage() {}

func (x *QICoreCommunicationRequest_OccurrenceX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCommunicationRequest_OccurrenceX.ProtoReflect.Descriptor instead.
func (*QICoreCommunicationRequest_OccurrenceX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{7, 3}
}

func (m *QICoreCommunicationRequest_OccurrenceX) GetChoice() isQICoreCommunicationRequest_OccurrenceX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreCommunicationRequest_OccurrenceX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*QICoreCommunicationRequest_OccurrenceX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *QICoreCommunicationRequest_OccurrenceX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*QICoreCommunicationRequest_OccurrenceX_Period); ok {
		return x.Period
	}
	return nil
}

type isQICoreCommunicationRequest_OccurrenceX_Choice interface {
	isQICoreCommunicationRequest_OccurrenceX_Choice()
}

type QICoreCommunicationRequest_OccurrenceX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type QICoreCommunicationRequest_OccurrenceX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*QICoreCommunicationRequest_OccurrenceX_DateTime) isQICoreCommunicationRequest_OccurrenceX_Choice() {
}

func (*QICoreCommunicationRequest_OccurrenceX_Period) isQICoreCommunicationRequest_OccurrenceX_Choice() {
}

// Message part content
type QICoreCommunicationRequest_Payload_ContentX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreCommunicationRequest_Payload_ContentX_StringValue
	//	*QICoreCommunicationRequest_Payload_ContentX_Attachment
	//	*QICoreCommunicationRequest_Payload_ContentX_Reference
	Choice isQICoreCommunicationRequest_Payload_ContentX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreCommunicationRequest_Payload_ContentX) Reset() {
	*x = QICoreCommunicationRequest_Payload_ContentX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCommunicationRequest_Payload_ContentX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCommunicationRequest_Payload_ContentX) ProtoMessage() {}

func (x *QICoreCommunicationRequest_Payload_ContentX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCommunicationRequest_Payload_ContentX.ProtoReflect.Descriptor instead.
func (*QICoreCommunicationRequest_Payload_ContentX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{7, 2, 0}
}

func (m *QICoreCommunicationRequest_Payload_ContentX) GetChoice() isQICoreCommunicationRequest_Payload_ContentX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreCommunicationRequest_Payload_ContentX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*QICoreCommunicationRequest_Payload_ContentX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *QICoreCommunicationRequest_Payload_ContentX) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetChoice().(*QICoreCommunicationRequest_Payload_ContentX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *QICoreCommunicationRequest_Payload_ContentX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*QICoreCommunicationRequest_Payload_ContentX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isQICoreCommunicationRequest_Payload_ContentX_Choice interface {
	isQICoreCommunicationRequest_Payload_ContentX_Choice()
}

type QICoreCommunicationRequest_Payload_ContentX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=string_value,json=string,proto3,oneof"`
}

type QICoreCommunicationRequest_Payload_ContentX_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,2,opt,name=attachment,proto3,oneof"`
}

type QICoreCommunicationRequest_Payload_ContentX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=reference,proto3,oneof"`
}

func (*QICoreCommunicationRequest_Payload_ContentX_StringValue) isQICoreCommunicationRequest_Payload_ContentX_Choice() {
}

func (*QICoreCommunicationRequest_Payload_ContentX_Attachment) isQICoreCommunicationRequest_Payload_ContentX_Choice() {
}

func (*QICoreCommunicationRequest_Payload_ContentX_Reference) isQICoreCommunicationRequest_Payload_ContentX_Choice() {
}

// Estimated or actual date,  date-time, or age
type QICoreCondition_OnsetX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreCondition_OnsetX_DateTime
	//	*QICoreCondition_OnsetX_Age
	//	*QICoreCondition_OnsetX_Period
	//	*QICoreCondition_OnsetX_Range
	Choice isQICoreCondition_OnsetX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreCondition_OnsetX) Reset() {
	*x = QICoreCondition_OnsetX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCondition_OnsetX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCondition_OnsetX) ProtoMessage() {}

func (x *QICoreCondition_OnsetX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCondition_OnsetX.ProtoReflect.Descriptor instead.
func (*QICoreCondition_OnsetX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{8, 0}
}

func (m *QICoreCondition_OnsetX) GetChoice() isQICoreCondition_OnsetX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreCondition_OnsetX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*QICoreCondition_OnsetX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *QICoreCondition_OnsetX) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetChoice().(*QICoreCondition_OnsetX_Age); ok {
		return x.Age
	}
	return nil
}

func (x *QICoreCondition_OnsetX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*QICoreCondition_OnsetX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *QICoreCondition_OnsetX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*QICoreCondition_OnsetX_Range); ok {
		return x.Range
	}
	return nil
}

type isQICoreCondition_OnsetX_Choice interface {
	isQICoreCondition_OnsetX_Choice()
}

type QICoreCondition_OnsetX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type QICoreCondition_OnsetX_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,2,opt,name=age,proto3,oneof"`
}

type QICoreCondition_OnsetX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,3,opt,name=period,proto3,oneof"`
}

type QICoreCondition_OnsetX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,4,opt,name=range,proto3,oneof"`
}

func (*QICoreCondition_OnsetX_DateTime) isQICoreCondition_OnsetX_Choice() {}

func (*QICoreCondition_OnsetX_Age) isQICoreCondition_OnsetX_Choice() {}

func (*QICoreCondition_OnsetX_Period) isQICoreCondition_OnsetX_Choice() {}

func (*QICoreCondition_OnsetX_Range) isQICoreCondition_OnsetX_Choice() {}

// When in resolution/remission
type QICoreCondition_AbatementX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreCondition_AbatementX_DateTime
	//	*QICoreCondition_AbatementX_Age
	//	*QICoreCondition_AbatementX_Period
	//	*QICoreCondition_AbatementX_Range
	Choice isQICoreCondition_AbatementX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreCondition_AbatementX) Reset() {
	*x = QICoreCondition_AbatementX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCondition_AbatementX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCondition_AbatementX) ProtoMessage() {}

func (x *QICoreCondition_AbatementX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCondition_AbatementX.ProtoReflect.Descriptor instead.
func (*QICoreCondition_AbatementX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{8, 1}
}

func (m *QICoreCondition_AbatementX) GetChoice() isQICoreCondition_AbatementX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreCondition_AbatementX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*QICoreCondition_AbatementX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *QICoreCondition_AbatementX) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetChoice().(*QICoreCondition_AbatementX_Age); ok {
		return x.Age
	}
	return nil
}

func (x *QICoreCondition_AbatementX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*QICoreCondition_AbatementX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *QICoreCondition_AbatementX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*QICoreCondition_AbatementX_Range); ok {
		return x.Range
	}
	return nil
}

type isQICoreCondition_AbatementX_Choice interface {
	isQICoreCondition_AbatementX_Choice()
}

type QICoreCondition_AbatementX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type QICoreCondition_AbatementX_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,2,opt,name=age,proto3,oneof"`
}

type QICoreCondition_AbatementX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,3,opt,name=period,proto3,oneof"`
}

type QICoreCondition_AbatementX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,4,opt,name=range,proto3,oneof"`
}

func (*QICoreCondition_AbatementX_DateTime) isQICoreCondition_AbatementX_Choice() {}

func (*QICoreCondition_AbatementX_Age) isQICoreCondition_AbatementX_Choice() {}

func (*QICoreCondition_AbatementX_Period) isQICoreCondition_AbatementX_Choice() {}

func (*QICoreCondition_AbatementX_Range) isQICoreCondition_AbatementX_Choice() {}

// Stage/grade, usually assessed formally
type QICoreCondition_Stage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Simple summary (disease specific)
	Summary *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
	// Formal record of assessment
	Assessment []*datatypes_go_proto.Reference `protobuf:"bytes,5,rep,name=assessment,proto3" json:"assessment,omitempty"`
	// Kind of staging
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *QICoreCondition_Stage) Reset() {
	*x = QICoreCondition_Stage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCondition_Stage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCondition_Stage) ProtoMessage() {}

func (x *QICoreCondition_Stage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCondition_Stage.ProtoReflect.Descriptor instead.
func (*QICoreCondition_Stage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{8, 2}
}

func (x *QICoreCondition_Stage) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCondition_Stage) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreCondition_Stage) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreCondition_Stage) GetSummary() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *QICoreCondition_Stage) GetAssessment() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Assessment
	}
	return nil
}

func (x *QICoreCondition_Stage) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

// Supporting evidence
type QICoreCondition_Evidence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Manifestation/symptom
	Code []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,rep,name=code,proto3" json:"code,omitempty"`
	// Supporting information found elsewhere
	Detail []*datatypes_go_proto.Reference `protobuf:"bytes,5,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *QICoreCondition_Evidence) Reset() {
	*x = QICoreCondition_Evidence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCondition_Evidence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCondition_Evidence) ProtoMessage() {}

func (x *QICoreCondition_Evidence) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCondition_Evidence.ProtoReflect.Descriptor instead.
func (*QICoreCondition_Evidence) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{8, 3}
}

func (x *QICoreCondition_Evidence) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCondition_Evidence) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreCondition_Evidence) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreCondition_Evidence) GetCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *QICoreCondition_Evidence) GetDetail() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Detail
	}
	return nil
}

// active | cancelled | draft | entered-in-error
type QICoreCoverage_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.FinancialResourceStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.FinancialResourceStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreCoverage_StatusCode) Reset() {
	*x = QICoreCoverage_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCoverage_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCoverage_StatusCode) ProtoMessage() {}

func (x *QICoreCoverage_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCoverage_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreCoverage_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{9, 0}
}

func (x *QICoreCoverage_StatusCode) GetValue() codes_go_proto.FinancialResourceStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.FinancialResourceStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreCoverage_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCoverage_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Additional coverage classifications
type QICoreCoverage_Class struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of class such as 'group' or 'plan'
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Value associated with the type
	Value *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Human readable description of the type and value
	Name *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *QICoreCoverage_Class) Reset() {
	*x = QICoreCoverage_Class{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCoverage_Class) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCoverage_Class) ProtoMessage() {}

func (x *QICoreCoverage_Class) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCoverage_Class.ProtoReflect.Descriptor instead.
func (*QICoreCoverage_Class) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{9, 1}
}

func (x *QICoreCoverage_Class) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCoverage_Class) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreCoverage_Class) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreCoverage_Class) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreCoverage_Class) GetValue() *datatypes_go_proto.String {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *QICoreCoverage_Class) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

// Patient payments for services/products
type QICoreCoverage_CostToBeneficiary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Cost category
	Type      *datatypes_go_proto.CodeableConcept           `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Value     *QICoreCoverage_CostToBeneficiary_ValueX      `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Exception []*QICoreCoverage_CostToBeneficiary_Exemption `protobuf:"bytes,6,rep,name=exception,proto3" json:"exception,omitempty"`
}

func (x *QICoreCoverage_CostToBeneficiary) Reset() {
	*x = QICoreCoverage_CostToBeneficiary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCoverage_CostToBeneficiary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCoverage_CostToBeneficiary) ProtoMessage() {}

func (x *QICoreCoverage_CostToBeneficiary) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCoverage_CostToBeneficiary.ProtoReflect.Descriptor instead.
func (*QICoreCoverage_CostToBeneficiary) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{9, 2}
}

func (x *QICoreCoverage_CostToBeneficiary) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCoverage_CostToBeneficiary) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreCoverage_CostToBeneficiary) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreCoverage_CostToBeneficiary) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreCoverage_CostToBeneficiary) GetValue() *QICoreCoverage_CostToBeneficiary_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *QICoreCoverage_CostToBeneficiary) GetException() []*QICoreCoverage_CostToBeneficiary_Exemption {
	if x != nil {
		return x.Exception
	}
	return nil
}

// The amount or percentage due from the beneficiary
type QICoreCoverage_CostToBeneficiary_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreCoverage_CostToBeneficiary_ValueX_Quantity
	//	*QICoreCoverage_CostToBeneficiary_ValueX_Money
	Choice isQICoreCoverage_CostToBeneficiary_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreCoverage_CostToBeneficiary_ValueX) Reset() {
	*x = QICoreCoverage_CostToBeneficiary_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCoverage_CostToBeneficiary_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCoverage_CostToBeneficiary_ValueX) ProtoMessage() {}

func (x *QICoreCoverage_CostToBeneficiary_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCoverage_CostToBeneficiary_ValueX.ProtoReflect.Descriptor instead.
func (*QICoreCoverage_CostToBeneficiary_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{9, 2, 0}
}

func (m *QICoreCoverage_CostToBeneficiary_ValueX) GetChoice() isQICoreCoverage_CostToBeneficiary_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreCoverage_CostToBeneficiary_ValueX) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x, ok := x.GetChoice().(*QICoreCoverage_CostToBeneficiary_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *QICoreCoverage_CostToBeneficiary_ValueX) GetMoney() *datatypes_go_proto.Money {
	if x, ok := x.GetChoice().(*QICoreCoverage_CostToBeneficiary_ValueX_Money); ok {
		return x.Money
	}
	return nil
}

type isQICoreCoverage_CostToBeneficiary_ValueX_Choice interface {
	isQICoreCoverage_CostToBeneficiary_ValueX_Choice()
}

type QICoreCoverage_CostToBeneficiary_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type QICoreCoverage_CostToBeneficiary_ValueX_Money struct {
	Money *datatypes_go_proto.Money `protobuf:"bytes,2,opt,name=money,proto3,oneof"`
}

func (*QICoreCoverage_CostToBeneficiary_ValueX_Quantity) isQICoreCoverage_CostToBeneficiary_ValueX_Choice() {
}

func (*QICoreCoverage_CostToBeneficiary_ValueX_Money) isQICoreCoverage_CostToBeneficiary_ValueX_Choice() {
}

// Exceptions for patient payments
type QICoreCoverage_CostToBeneficiary_Exemption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Exception category
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// The effective period of the exception
	Period *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *QICoreCoverage_CostToBeneficiary_Exemption) Reset() {
	*x = QICoreCoverage_CostToBeneficiary_Exemption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreCoverage_CostToBeneficiary_Exemption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreCoverage_CostToBeneficiary_Exemption) ProtoMessage() {}

func (x *QICoreCoverage_CostToBeneficiary_Exemption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreCoverage_CostToBeneficiary_Exemption.ProtoReflect.Descriptor instead.
func (*QICoreCoverage_CostToBeneficiary_Exemption) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{9, 2, 1}
}

func (x *QICoreCoverage_CostToBeneficiary_Exemption) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreCoverage_CostToBeneficiary_Exemption) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreCoverage_CostToBeneficiary_Exemption) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreCoverage_CostToBeneficiary_Exemption) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreCoverage_CostToBeneficiary_Exemption) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// Unique Device Identifier (UDI) Barcode string
type QICoreDevice_UdiCarrier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Mandatory fixed portion of UDI
	DeviceIdentifier *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=device_identifier,json=deviceIdentifier,proto3" json:"device_identifier,omitempty"`
	// UDI Issuing Organization
	Issuer *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// Regional UDI authority
	Jurisdiction *datatypes_go_proto.Uri `protobuf:"bytes,6,opt,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	// UDI Machine Readable Barcode String
	CarrierAidc *datatypes_go_proto.Base64Binary `protobuf:"bytes,7,opt,name=carrier_aidc,json=carrierAIDC,proto3" json:"carrier_aidc,omitempty"`
	// UDI Human Readable Barcode String
	CarrierHrf *datatypes_go_proto.String             `protobuf:"bytes,8,opt,name=carrier_hrf,json=carrierHRF,proto3" json:"carrier_hrf,omitempty"`
	EntryType  *QICoreDevice_UdiCarrier_EntryTypeCode `protobuf:"bytes,9,opt,name=entry_type,json=entryType,proto3" json:"entry_type,omitempty"`
}

func (x *QICoreDevice_UdiCarrier) Reset() {
	*x = QICoreDevice_UdiCarrier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDevice_UdiCarrier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDevice_UdiCarrier) ProtoMessage() {}

func (x *QICoreDevice_UdiCarrier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDevice_UdiCarrier.ProtoReflect.Descriptor instead.
func (*QICoreDevice_UdiCarrier) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{10, 0}
}

func (x *QICoreDevice_UdiCarrier) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreDevice_UdiCarrier) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreDevice_UdiCarrier) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreDevice_UdiCarrier) GetDeviceIdentifier() *datatypes_go_proto.String {
	if x != nil {
		return x.DeviceIdentifier
	}
	return nil
}

func (x *QICoreDevice_UdiCarrier) GetIssuer() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *QICoreDevice_UdiCarrier) GetJurisdiction() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Jurisdiction
	}
	return nil
}

func (x *QICoreDevice_UdiCarrier) GetCarrierAidc() *datatypes_go_proto.Base64Binary {
	if x != nil {
		return x.CarrierAidc
	}
	return nil
}

func (x *QICoreDevice_UdiCarrier) GetCarrierHrf() *datatypes_go_proto.String {
	if x != nil {
		return x.CarrierHrf
	}
	return nil
}

func (x *QICoreDevice_UdiCarrier) GetEntryType() *QICoreDevice_UdiCarrier_EntryTypeCode {
	if x != nil {
		return x.EntryType
	}
	return nil
}

// active | inactive | entered-in-error | unknown
type QICoreDevice_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.FHIRDeviceStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.FHIRDeviceStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension           `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreDevice_StatusCode) Reset() {
	*x = QICoreDevice_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDevice_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDevice_StatusCode) ProtoMessage() {}

func (x *QICoreDevice_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDevice_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreDevice_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{10, 1}
}

func (x *QICoreDevice_StatusCode) GetValue() codes_go_proto.FHIRDeviceStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.FHIRDeviceStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreDevice_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreDevice_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The name of the device as given by the manufacturer
type QICoreDevice_DeviceName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The name of the device
	Name *datatypes_go_proto.String        `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Type *QICoreDevice_DeviceName_TypeCode `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *QICoreDevice_DeviceName) Reset() {
	*x = QICoreDevice_DeviceName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDevice_DeviceName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDevice_DeviceName) ProtoMessage() {}

func (x *QICoreDevice_DeviceName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDevice_DeviceName.ProtoReflect.Descriptor instead.
func (*QICoreDevice_DeviceName) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{10, 2}
}

func (x *QICoreDevice_DeviceName) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreDevice_DeviceName) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreDevice_DeviceName) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreDevice_DeviceName) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *QICoreDevice_DeviceName) GetType() *QICoreDevice_DeviceName_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

// The capabilities supported on a  device, the standards to which the device
// conforms for a particular purpose, and used for the communication
type QICoreDevice_Specialization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The standard that is used to operate and communicate
	SystemType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=system_type,json=systemType,proto3" json:"system_type,omitempty"`
	// The version of the standard that is used to operate and communicate
	Version *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *QICoreDevice_Specialization) Reset() {
	*x = QICoreDevice_Specialization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDevice_Specialization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDevice_Specialization) ProtoMessage() {}

func (x *QICoreDevice_Specialization) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDevice_Specialization.ProtoReflect.Descriptor instead.
func (*QICoreDevice_Specialization) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{10, 3}
}

func (x *QICoreDevice_Specialization) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreDevice_Specialization) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreDevice_Specialization) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreDevice_Specialization) GetSystemType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SystemType
	}
	return nil
}

func (x *QICoreDevice_Specialization) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

// The actual design of the device or software version running on the device
type QICoreDevice_Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The type of the device version
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// A single component of the device version
	Component *datatypes_go_proto.Identifier `protobuf:"bytes,5,opt,name=component,proto3" json:"component,omitempty"`
	// The version text
	Value *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QICoreDevice_Version) Reset() {
	*x = QICoreDevice_Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDevice_Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDevice_Version) ProtoMessage() {}

func (x *QICoreDevice_Version) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDevice_Version.ProtoReflect.Descriptor instead.
func (*QICoreDevice_Version) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{10, 4}
}

func (x *QICoreDevice_Version) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreDevice_Version) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreDevice_Version) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreDevice_Version) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreDevice_Version) GetComponent() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *QICoreDevice_Version) GetValue() *datatypes_go_proto.String {
	if x != nil {
		return x.Value
	}
	return nil
}

// The actual configuration settings of a device as it actually operates,
// e.g., regulation status, time properties
type QICoreDevice_Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Code that specifies the property DeviceDefinitionPropetyCode (Extensible)
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Property value as a quantity
	ValueQuantity []*datatypes_go_proto.Quantity `protobuf:"bytes,5,rep,name=value_quantity,json=valueQuantity,proto3" json:"value_quantity,omitempty"`
	// Property value as a code, e.g., NTP4 (synced to NTP)
	ValueCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,rep,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *QICoreDevice_Property) Reset() {
	*x = QICoreDevice_Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDevice_Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDevice_Property) ProtoMessage() {}

func (x *QICoreDevice_Property) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDevice_Property.ProtoReflect.Descriptor instead.
func (*QICoreDevice_Property) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{10, 5}
}

func (x *QICoreDevice_Property) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreDevice_Property) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreDevice_Property) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreDevice_Property) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreDevice_Property) GetValueQuantity() []*datatypes_go_proto.Quantity {
	if x != nil {
		return x.ValueQuantity
	}
	return nil
}

func (x *QICoreDevice_Property) GetValueCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// barcode | rfid | manual +
type QICoreDevice_UdiCarrier_EntryTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.UDIEntryTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.UDIEntryTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreDevice_UdiCarrier_EntryTypeCode) Reset() {
	*x = QICoreDevice_UdiCarrier_EntryTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDevice_UdiCarrier_EntryTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDevice_UdiCarrier_EntryTypeCode) ProtoMessage() {}

func (x *QICoreDevice_UdiCarrier_EntryTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDevice_UdiCarrier_EntryTypeCode.ProtoReflect.Descriptor instead.
func (*QICoreDevice_UdiCarrier_EntryTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{10, 0, 0}
}

func (x *QICoreDevice_UdiCarrier_EntryTypeCode) GetValue() codes_go_proto.UDIEntryTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.UDIEntryTypeCode_INVALID_UNINITIALIZED
}

func (x *QICoreDevice_UdiCarrier_EntryTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreDevice_UdiCarrier_EntryTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// udi-label-name | user-friendly-name | patient-reported-name |
// manufacturer-name | model-name | other
type QICoreDevice_DeviceName_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.DeviceNameTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.DeviceNameTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension         `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreDevice_DeviceName_TypeCode) Reset() {
	*x = QICoreDevice_DeviceName_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDevice_DeviceName_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDevice_DeviceName_TypeCode) ProtoMessage() {}

func (x *QICoreDevice_DeviceName_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDevice_DeviceName_TypeCode.ProtoReflect.Descriptor instead.
func (*QICoreDevice_DeviceName_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{10, 2, 0}
}

func (x *QICoreDevice_DeviceName_TypeCode) GetValue() codes_go_proto.DeviceNameTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.DeviceNameTypeCode_INVALID_UNINITIALIZED
}

func (x *QICoreDevice_DeviceName_TypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreDevice_DeviceName_TypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// draft | active | suspended | completed | entered-in-error | cancelled
type QICoreDeviceRequest_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.RequestStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.RequestStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension        `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreDeviceRequest_StatusCode) Reset() {
	*x = QICoreDeviceRequest_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDeviceRequest_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDeviceRequest_StatusCode) ProtoMessage() {}

func (x *QICoreDeviceRequest_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDeviceRequest_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreDeviceRequest_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{11, 0}
}

func (x *QICoreDeviceRequest_StatusCode) GetValue() codes_go_proto.RequestStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.RequestStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreDeviceRequest_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreDeviceRequest_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// proposal | plan | original-order | encoded | reflex-order
type QICoreDeviceRequest_IntentCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.RequestIntentCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.RequestIntentCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension        `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreDeviceRequest_IntentCode) Reset() {
	*x = QICoreDeviceRequest_IntentCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDeviceRequest_IntentCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDeviceRequest_IntentCode) ProtoMessage() {}

func (x *QICoreDeviceRequest_IntentCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDeviceRequest_IntentCode.ProtoReflect.Descriptor instead.
func (*QICoreDeviceRequest_IntentCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{11, 1}
}

func (x *QICoreDeviceRequest_IntentCode) GetValue() codes_go_proto.RequestIntentCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.RequestIntentCode_INVALID_UNINITIALIZED
}

func (x *QICoreDeviceRequest_IntentCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreDeviceRequest_IntentCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Indicates how quickly the {{title}} should be addressed with respect to
// other requests
type QICoreDeviceRequest_PriorityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.RequestPriorityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.RequestPriorityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension          `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreDeviceRequest_PriorityCode) Reset() {
	*x = QICoreDeviceRequest_PriorityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDeviceRequest_PriorityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDeviceRequest_PriorityCode) ProtoMessage() {}

func (x *QICoreDeviceRequest_PriorityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDeviceRequest_PriorityCode.ProtoReflect.Descriptor instead.
func (*QICoreDeviceRequest_PriorityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{11, 2}
}

func (x *QICoreDeviceRequest_PriorityCode) GetValue() codes_go_proto.RequestPriorityCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.RequestPriorityCode_INVALID_UNINITIALIZED
}

func (x *QICoreDeviceRequest_PriorityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreDeviceRequest_PriorityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Device requested
type QICoreDeviceRequest_CodeX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreDeviceRequest_CodeX_Reference
	//	*QICoreDeviceRequest_CodeX_CodeableConcept
	Choice isQICoreDeviceRequest_CodeX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreDeviceRequest_CodeX) Reset() {
	*x = QICoreDeviceRequest_CodeX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDeviceRequest_CodeX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDeviceRequest_CodeX) ProtoMessage() {}

func (x *QICoreDeviceRequest_CodeX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDeviceRequest_CodeX.ProtoReflect.Descriptor instead.
func (*QICoreDeviceRequest_CodeX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{11, 3}
}

func (m *QICoreDeviceRequest_CodeX) GetChoice() isQICoreDeviceRequest_CodeX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreDeviceRequest_CodeX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*QICoreDeviceRequest_CodeX_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *QICoreDeviceRequest_CodeX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*QICoreDeviceRequest_CodeX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isQICoreDeviceRequest_CodeX_Choice interface {
	isQICoreDeviceRequest_CodeX_Choice()
}

type QICoreDeviceRequest_CodeX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

type QICoreDeviceRequest_CodeX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*QICoreDeviceRequest_CodeX_Reference) isQICoreDeviceRequest_CodeX_Choice() {}

func (*QICoreDeviceRequest_CodeX_CodeableConcept) isQICoreDeviceRequest_CodeX_Choice() {}

// Device details
type QICoreDeviceRequest_Parameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Device detail
	Code  *datatypes_go_proto.CodeableConcept   `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *QICoreDeviceRequest_Parameter_ValueX `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QICoreDeviceRequest_Parameter) Reset() {
	*x = QICoreDeviceRequest_Parameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDeviceRequest_Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDeviceRequest_Parameter) ProtoMessage() {}

func (x *QICoreDeviceRequest_Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDeviceRequest_Parameter.ProtoReflect.Descriptor instead.
func (*QICoreDeviceRequest_Parameter) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{11, 4}
}

func (x *QICoreDeviceRequest_Parameter) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreDeviceRequest_Parameter) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreDeviceRequest_Parameter) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreDeviceRequest_Parameter) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *QICoreDeviceRequest_Parameter) GetValue() *QICoreDeviceRequest_Parameter_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// Desired time or schedule for use
type QICoreDeviceRequest_OccurrenceX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreDeviceRequest_OccurrenceX_DateTime
	//	*QICoreDeviceRequest_OccurrenceX_Period
	//	*QICoreDeviceRequest_OccurrenceX_Timing
	Choice isQICoreDeviceRequest_OccurrenceX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreDeviceRequest_OccurrenceX) Reset() {
	*x = QICoreDeviceRequest_OccurrenceX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDeviceRequest_OccurrenceX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDeviceRequest_OccurrenceX) ProtoMessage() {}

func (x *QICoreDeviceRequest_OccurrenceX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDeviceRequest_OccurrenceX.ProtoReflect.Descriptor instead.
func (*QICoreDeviceRequest_OccurrenceX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{11, 5}
}

func (m *QICoreDeviceRequest_OccurrenceX) GetChoice() isQICoreDeviceRequest_OccurrenceX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreDeviceRequest_OccurrenceX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*QICoreDeviceRequest_OccurrenceX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *QICoreDeviceRequest_OccurrenceX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*QICoreDeviceRequest_OccurrenceX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *QICoreDeviceRequest_OccurrenceX) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetChoice().(*QICoreDeviceRequest_OccurrenceX_Timing); ok {
		return x.Timing
	}
	return nil
}

type isQICoreDeviceRequest_OccurrenceX_Choice interface {
	isQICoreDeviceRequest_OccurrenceX_Choice()
}

type QICoreDeviceRequest_OccurrenceX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type QICoreDeviceRequest_OccurrenceX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

type QICoreDeviceRequest_OccurrenceX_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,3,opt,name=timing,proto3,oneof"`
}

func (*QICoreDeviceRequest_OccurrenceX_DateTime) isQICoreDeviceRequest_OccurrenceX_Choice() {}

func (*QICoreDeviceRequest_OccurrenceX_Period) isQICoreDeviceRequest_OccurrenceX_Choice() {}

func (*QICoreDeviceRequest_OccurrenceX_Timing) isQICoreDeviceRequest_OccurrenceX_Choice() {}

// Value of detail
type QICoreDeviceRequest_Parameter_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreDeviceRequest_Parameter_ValueX_CodeableConcept
	//	*QICoreDeviceRequest_Parameter_ValueX_Quantity
	//	*QICoreDeviceRequest_Parameter_ValueX_Range
	//	*QICoreDeviceRequest_Parameter_ValueX_Boolean
	Choice isQICoreDeviceRequest_Parameter_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreDeviceRequest_Parameter_ValueX) Reset() {
	*x = QICoreDeviceRequest_Parameter_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDeviceRequest_Parameter_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDeviceRequest_Parameter_ValueX) ProtoMessage() {}

func (x *QICoreDeviceRequest_Parameter_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDeviceRequest_Parameter_ValueX.ProtoReflect.Descriptor instead.
func (*QICoreDeviceRequest_Parameter_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{11, 4, 0}
}

func (m *QICoreDeviceRequest_Parameter_ValueX) GetChoice() isQICoreDeviceRequest_Parameter_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreDeviceRequest_Parameter_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*QICoreDeviceRequest_Parameter_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *QICoreDeviceRequest_Parameter_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*QICoreDeviceRequest_Parameter_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *QICoreDeviceRequest_Parameter_ValueX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*QICoreDeviceRequest_Parameter_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *QICoreDeviceRequest_Parameter_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*QICoreDeviceRequest_Parameter_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

type isQICoreDeviceRequest_Parameter_ValueX_Choice interface {
	isQICoreDeviceRequest_Parameter_ValueX_Choice()
}

type QICoreDeviceRequest_Parameter_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type QICoreDeviceRequest_Parameter_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,2,opt,name=quantity,proto3,oneof"`
}

type QICoreDeviceRequest_Parameter_ValueX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,3,opt,name=range,proto3,oneof"`
}

type QICoreDeviceRequest_Parameter_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=boolean,proto3,oneof"`
}

func (*QICoreDeviceRequest_Parameter_ValueX_CodeableConcept) isQICoreDeviceRequest_Parameter_ValueX_Choice() {
}

func (*QICoreDeviceRequest_Parameter_ValueX_Quantity) isQICoreDeviceRequest_Parameter_ValueX_Choice() {
}

func (*QICoreDeviceRequest_Parameter_ValueX_Range) isQICoreDeviceRequest_Parameter_ValueX_Choice() {}

func (*QICoreDeviceRequest_Parameter_ValueX_Boolean) isQICoreDeviceRequest_Parameter_ValueX_Choice() {
}

// Value of extension
type DeviceUseStatementQICoreNotDoneExtension_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*DeviceUseStatementQICoreNotDoneExtension_ValueX_Boolean
	Choice isDeviceUseStatementQICoreNotDoneExtension_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *DeviceUseStatementQICoreNotDoneExtension_ValueX) Reset() {
	*x = DeviceUseStatementQICoreNotDoneExtension_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUseStatementQICoreNotDoneExtension_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUseStatementQICoreNotDoneExtension_ValueX) ProtoMessage() {}

func (x *DeviceUseStatementQICoreNotDoneExtension_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUseStatementQICoreNotDoneExtension_ValueX.ProtoReflect.Descriptor instead.
func (*DeviceUseStatementQICoreNotDoneExtension_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{12, 0}
}

func (m *DeviceUseStatementQICoreNotDoneExtension_ValueX) GetChoice() isDeviceUseStatementQICoreNotDoneExtension_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *DeviceUseStatementQICoreNotDoneExtension_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*DeviceUseStatementQICoreNotDoneExtension_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

type isDeviceUseStatementQICoreNotDoneExtension_ValueX_Choice interface {
	isDeviceUseStatementQICoreNotDoneExtension_ValueX_Choice()
}

type DeviceUseStatementQICoreNotDoneExtension_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

func (*DeviceUseStatementQICoreNotDoneExtension_ValueX_Boolean) isDeviceUseStatementQICoreNotDoneExtension_ValueX_Choice() {
}

// active | completed | entered-in-error +
type QICoreDeviceUseStatement_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.DeviceUseStatementStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.DeviceUseStatementStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreDeviceUseStatement_StatusCode) Reset() {
	*x = QICoreDeviceUseStatement_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDeviceUseStatement_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDeviceUseStatement_StatusCode) ProtoMessage() {}

func (x *QICoreDeviceUseStatement_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDeviceUseStatement_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreDeviceUseStatement_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{13, 0}
}

func (x *QICoreDeviceUseStatement_StatusCode) GetValue() codes_go_proto.DeviceUseStatementStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.DeviceUseStatementStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreDeviceUseStatement_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreDeviceUseStatement_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// How often  the device was used
type QICoreDeviceUseStatement_TimingX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreDeviceUseStatement_TimingX_Timing
	//	*QICoreDeviceUseStatement_TimingX_Period
	//	*QICoreDeviceUseStatement_TimingX_DateTime
	Choice isQICoreDeviceUseStatement_TimingX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreDeviceUseStatement_TimingX) Reset() {
	*x = QICoreDeviceUseStatement_TimingX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDeviceUseStatement_TimingX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDeviceUseStatement_TimingX) ProtoMessage() {}

func (x *QICoreDeviceUseStatement_TimingX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDeviceUseStatement_TimingX.ProtoReflect.Descriptor instead.
func (*QICoreDeviceUseStatement_TimingX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{13, 1}
}

func (m *QICoreDeviceUseStatement_TimingX) GetChoice() isQICoreDeviceUseStatement_TimingX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreDeviceUseStatement_TimingX) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetChoice().(*QICoreDeviceUseStatement_TimingX_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *QICoreDeviceUseStatement_TimingX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*QICoreDeviceUseStatement_TimingX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *QICoreDeviceUseStatement_TimingX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*QICoreDeviceUseStatement_TimingX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

type isQICoreDeviceUseStatement_TimingX_Choice interface {
	isQICoreDeviceUseStatement_TimingX_Choice()
}

type QICoreDeviceUseStatement_TimingX_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,1,opt,name=timing,proto3,oneof"`
}

type QICoreDeviceUseStatement_TimingX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

type QICoreDeviceUseStatement_TimingX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,3,opt,name=date_time,json=dateTime,proto3,oneof"`
}

func (*QICoreDeviceUseStatement_TimingX_Timing) isQICoreDeviceUseStatement_TimingX_Choice() {}

func (*QICoreDeviceUseStatement_TimingX_Period) isQICoreDeviceUseStatement_TimingX_Choice() {}

func (*QICoreDeviceUseStatement_TimingX_DateTime) isQICoreDeviceUseStatement_TimingX_Choice() {}

// registered | partial | preliminary | final +
type QICoreDiagnosticReportLab_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.DiagnosticReportStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.DiagnosticReportStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreDiagnosticReportLab_StatusCode) Reset() {
	*x = QICoreDiagnosticReportLab_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDiagnosticReportLab_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDiagnosticReportLab_StatusCode) ProtoMessage() {}

func (x *QICoreDiagnosticReportLab_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDiagnosticReportLab_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreDiagnosticReportLab_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{14, 0}
}

func (x *QICoreDiagnosticReportLab_StatusCode) GetValue() codes_go_proto.DiagnosticReportStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.DiagnosticReportStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreDiagnosticReportLab_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreDiagnosticReportLab_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Specimen Collection Datetime or Period
type QICoreDiagnosticReportLab_EffectiveX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreDiagnosticReportLab_EffectiveX_DateTime
	//	*QICoreDiagnosticReportLab_EffectiveX_Period
	Choice isQICoreDiagnosticReportLab_EffectiveX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreDiagnosticReportLab_EffectiveX) Reset() {
	*x = QICoreDiagnosticReportLab_EffectiveX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDiagnosticReportLab_EffectiveX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDiagnosticReportLab_EffectiveX) ProtoMessage() {}

func (x *QICoreDiagnosticReportLab_EffectiveX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDiagnosticReportLab_EffectiveX.ProtoReflect.Descriptor instead.
func (*QICoreDiagnosticReportLab_EffectiveX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{14, 1}
}

func (m *QICoreDiagnosticReportLab_EffectiveX) GetChoice() isQICoreDiagnosticReportLab_EffectiveX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreDiagnosticReportLab_EffectiveX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*QICoreDiagnosticReportLab_EffectiveX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *QICoreDiagnosticReportLab_EffectiveX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*QICoreDiagnosticReportLab_EffectiveX_Period); ok {
		return x.Period
	}
	return nil
}

type isQICoreDiagnosticReportLab_EffectiveX_Choice interface {
	isQICoreDiagnosticReportLab_EffectiveX_Choice()
}

type QICoreDiagnosticReportLab_EffectiveX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type QICoreDiagnosticReportLab_EffectiveX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*QICoreDiagnosticReportLab_EffectiveX_DateTime) isQICoreDiagnosticReportLab_EffectiveX_Choice() {
}

func (*QICoreDiagnosticReportLab_EffectiveX_Period) isQICoreDiagnosticReportLab_EffectiveX_Choice() {}

// Key images associated with this report
type QICoreDiagnosticReportLab_Media struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Comment about the image (e.g. explanation)
	Comment *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	// Reference to the image source
	Link *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *QICoreDiagnosticReportLab_Media) Reset() {
	*x = QICoreDiagnosticReportLab_Media{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDiagnosticReportLab_Media) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDiagnosticReportLab_Media) ProtoMessage() {}

func (x *QICoreDiagnosticReportLab_Media) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDiagnosticReportLab_Media.ProtoReflect.Descriptor instead.
func (*QICoreDiagnosticReportLab_Media) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{14, 2}
}

func (x *QICoreDiagnosticReportLab_Media) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreDiagnosticReportLab_Media) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreDiagnosticReportLab_Media) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreDiagnosticReportLab_Media) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *QICoreDiagnosticReportLab_Media) GetLink() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Link
	}
	return nil
}

// registered | partial | preliminary | final +
type QICoreDiagnosticReportNote_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.DiagnosticReportStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.DiagnosticReportStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreDiagnosticReportNote_StatusCode) Reset() {
	*x = QICoreDiagnosticReportNote_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDiagnosticReportNote_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDiagnosticReportNote_StatusCode) ProtoMessage() {}

func (x *QICoreDiagnosticReportNote_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDiagnosticReportNote_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreDiagnosticReportNote_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{15, 0}
}

func (x *QICoreDiagnosticReportNote_StatusCode) GetValue() codes_go_proto.DiagnosticReportStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.DiagnosticReportStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreDiagnosticReportNote_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreDiagnosticReportNote_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Time of the report or note
type QICoreDiagnosticReportNote_EffectiveX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreDiagnosticReportNote_EffectiveX_DateTime
	//	*QICoreDiagnosticReportNote_EffectiveX_Period
	Choice isQICoreDiagnosticReportNote_EffectiveX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreDiagnosticReportNote_EffectiveX) Reset() {
	*x = QICoreDiagnosticReportNote_EffectiveX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDiagnosticReportNote_EffectiveX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDiagnosticReportNote_EffectiveX) ProtoMessage() {}

func (x *QICoreDiagnosticReportNote_EffectiveX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDiagnosticReportNote_EffectiveX.ProtoReflect.Descriptor instead.
func (*QICoreDiagnosticReportNote_EffectiveX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{15, 1}
}

func (m *QICoreDiagnosticReportNote_EffectiveX) GetChoice() isQICoreDiagnosticReportNote_EffectiveX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreDiagnosticReportNote_EffectiveX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*QICoreDiagnosticReportNote_EffectiveX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *QICoreDiagnosticReportNote_EffectiveX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*QICoreDiagnosticReportNote_EffectiveX_Period); ok {
		return x.Period
	}
	return nil
}

type isQICoreDiagnosticReportNote_EffectiveX_Choice interface {
	isQICoreDiagnosticReportNote_EffectiveX_Choice()
}

type QICoreDiagnosticReportNote_EffectiveX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type QICoreDiagnosticReportNote_EffectiveX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*QICoreDiagnosticReportNote_EffectiveX_DateTime) isQICoreDiagnosticReportNote_EffectiveX_Choice() {
}

func (*QICoreDiagnosticReportNote_EffectiveX_Period) isQICoreDiagnosticReportNote_EffectiveX_Choice() {
}

// Key images associated with this report
type QICoreDiagnosticReportNote_Media struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Comment about the image (e.g. explanation)
	Comment *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	// Reference to the image source
	Link *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *QICoreDiagnosticReportNote_Media) Reset() {
	*x = QICoreDiagnosticReportNote_Media{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreDiagnosticReportNote_Media) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreDiagnosticReportNote_Media) ProtoMessage() {}

func (x *QICoreDiagnosticReportNote_Media) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreDiagnosticReportNote_Media.ProtoReflect.Descriptor instead.
func (*QICoreDiagnosticReportNote_Media) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{15, 2}
}

func (x *QICoreDiagnosticReportNote_Media) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreDiagnosticReportNote_Media) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreDiagnosticReportNote_Media) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreDiagnosticReportNote_Media) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *QICoreDiagnosticReportNote_Media) GetLink() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Link
	}
	return nil
}

// planned | arrived | triaged | in-progress | onleave | finished | cancelled
// +
type QICoreEncounter_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.EncounterStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.EncounterStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension          `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreEncounter_StatusCode) Reset() {
	*x = QICoreEncounter_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreEncounter_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreEncounter_StatusCode) ProtoMessage() {}

func (x *QICoreEncounter_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreEncounter_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreEncounter_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{17, 0}
}

func (x *QICoreEncounter_StatusCode) GetValue() codes_go_proto.EncounterStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.EncounterStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreEncounter_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreEncounter_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// List of past encounter statuses
type QICoreEncounter_StatusHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension           `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Status            *QICoreEncounter_StatusHistory_StatusCode `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// The time that the episode was in the specified status
	Period *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *QICoreEncounter_StatusHistory) Reset() {
	*x = QICoreEncounter_StatusHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreEncounter_StatusHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreEncounter_StatusHistory) ProtoMessage() {}

func (x *QICoreEncounter_StatusHistory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreEncounter_StatusHistory.ProtoReflect.Descriptor instead.
func (*QICoreEncounter_StatusHistory) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{17, 1}
}

func (x *QICoreEncounter_StatusHistory) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreEncounter_StatusHistory) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreEncounter_StatusHistory) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreEncounter_StatusHistory) GetStatus() *QICoreEncounter_StatusHistory_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreEncounter_StatusHistory) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// List of past encounter classes
type QICoreEncounter_ClassHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// inpatient | outpatient | ambulatory | emergency +
	ClassValue *datatypes_go_proto.Coding `protobuf:"bytes,4,opt,name=class_value,json=class,proto3" json:"class_value,omitempty"`
	// The time that the episode was in the specified class
	Period *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *QICoreEncounter_ClassHistory) Reset() {
	*x = QICoreEncounter_ClassHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreEncounter_ClassHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreEncounter_ClassHistory) ProtoMessage() {}

func (x *QICoreEncounter_ClassHistory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreEncounter_ClassHistory.ProtoReflect.Descriptor instead.
func (*QICoreEncounter_ClassHistory) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{17, 2}
}

func (x *QICoreEncounter_ClassHistory) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreEncounter_ClassHistory) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreEncounter_ClassHistory) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreEncounter_ClassHistory) GetClassValue() *datatypes_go_proto.Coding {
	if x != nil {
		return x.ClassValue
	}
	return nil
}

func (x *QICoreEncounter_ClassHistory) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// List of participants involved in the encounter
type QICoreEncounter_Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Role of participant in encounter
	Type []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,rep,name=type,proto3" json:"type,omitempty"`
	// Period of time during the encounter that the participant participated
	Period *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
	// Persons involved in the encounter other than the patient
	Individual *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=individual,proto3" json:"individual,omitempty"`
}

func (x *QICoreEncounter_Participant) Reset() {
	*x = QICoreEncounter_Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreEncounter_Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreEncounter_Participant) ProtoMessage() {}

func (x *QICoreEncounter_Participant) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreEncounter_Participant.ProtoReflect.Descriptor instead.
func (*QICoreEncounter_Participant) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{17, 3}
}

func (x *QICoreEncounter_Participant) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreEncounter_Participant) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreEncounter_Participant) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreEncounter_Participant) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreEncounter_Participant) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *QICoreEncounter_Participant) GetIndividual() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Individual
	}
	return nil
}

// The list of diagnosis relevant to this encounter
type QICoreEncounter_Diagnosis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The diagnosis or procedure relevant to the encounter
	Condition *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`
	// Role that this diagnosis has within the encounter (e.g. admission,
	// billing, discharge …)
	Use *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=use,proto3" json:"use,omitempty"`
	// Ranking of the diagnosis (for each role type)
	Rank *datatypes_go_proto.PositiveInt `protobuf:"bytes,6,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (x *QICoreEncounter_Diagnosis) Reset() {
	*x = QICoreEncounter_Diagnosis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreEncounter_Diagnosis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreEncounter_Diagnosis) ProtoMessage() {}

func (x *QICoreEncounter_Diagnosis) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreEncounter_Diagnosis.ProtoReflect.Descriptor instead.
func (*QICoreEncounter_Diagnosis) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{17, 4}
}

func (x *QICoreEncounter_Diagnosis) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreEncounter_Diagnosis) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreEncounter_Diagnosis) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreEncounter_Diagnosis) GetCondition() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *QICoreEncounter_Diagnosis) GetUse() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Use
	}
	return nil
}

func (x *QICoreEncounter_Diagnosis) GetRank() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Rank
	}
	return nil
}

// Details about the admission to a healthcare service
type QICoreEncounter_Hospitalization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Pre-admission identifier
	PreAdmissionIdentifier *datatypes_go_proto.Identifier `protobuf:"bytes,4,opt,name=pre_admission_identifier,json=preAdmissionIdentifier,proto3" json:"pre_admission_identifier,omitempty"`
	// The location/organization from which the patient came before admission
	Origin *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=origin,proto3" json:"origin,omitempty"`
	// From where patient was admitted (physician referral, transfer)
	AdmitSource *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=admit_source,json=admitSource,proto3" json:"admit_source,omitempty"`
	// The type of hospital re-admission that has occurred (if any). If the
	// value is absent, then this is not identified as a readmission
	ReAdmission *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=re_admission,json=reAdmission,proto3" json:"re_admission,omitempty"`
	// Diet preferences reported by the patient
	DietPreference []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,rep,name=diet_preference,json=dietPreference,proto3" json:"diet_preference,omitempty"`
	// Special courtesies (VIP, board member)
	SpecialCourtesy []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,rep,name=special_courtesy,json=specialCourtesy,proto3" json:"special_courtesy,omitempty"`
	// Wheelchair, translator, stretcher, etc.
	SpecialArrangement []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,rep,name=special_arrangement,json=specialArrangement,proto3" json:"special_arrangement,omitempty"`
	// Location/organization to which the patient is discharged
	Destination *datatypes_go_proto.Reference `protobuf:"bytes,11,opt,name=destination,proto3" json:"destination,omitempty"`
	// Category or kind of location after discharge
	DischargeDisposition *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=discharge_disposition,json=dischargeDisposition,proto3" json:"discharge_disposition,omitempty"`
}

func (x *QICoreEncounter_Hospitalization) Reset() {
	*x = QICoreEncounter_Hospitalization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreEncounter_Hospitalization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreEncounter_Hospitalization) ProtoMessage() {}

func (x *QICoreEncounter_Hospitalization) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreEncounter_Hospitalization.ProtoReflect.Descriptor instead.
func (*QICoreEncounter_Hospitalization) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{17, 5}
}

func (x *QICoreEncounter_Hospitalization) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreEncounter_Hospitalization) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreEncounter_Hospitalization) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreEncounter_Hospitalization) GetPreAdmissionIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.PreAdmissionIdentifier
	}
	return nil
}

func (x *QICoreEncounter_Hospitalization) GetOrigin() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *QICoreEncounter_Hospitalization) GetAdmitSource() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AdmitSource
	}
	return nil
}

func (x *QICoreEncounter_Hospitalization) GetReAdmission() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReAdmission
	}
	return nil
}

func (x *QICoreEncounter_Hospitalization) GetDietPreference() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DietPreference
	}
	return nil
}

func (x *QICoreEncounter_Hospitalization) GetSpecialCourtesy() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SpecialCourtesy
	}
	return nil
}

func (x *QICoreEncounter_Hospitalization) GetSpecialArrangement() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SpecialArrangement
	}
	return nil
}

func (x *QICoreEncounter_Hospitalization) GetDestination() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *QICoreEncounter_Hospitalization) GetDischargeDisposition() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DischargeDisposition
	}
	return nil
}

// List of locations where the patient has been
type QICoreEncounter_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Location the encounter takes place
	Location *datatypes_go_proto.Reference        `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Status   *QICoreEncounter_Location_StatusCode `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// The physical type of the location (usually the level in the location
	// hierachy - bed room ward etc.)
	PhysicalType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=physical_type,json=physicalType,proto3" json:"physical_type,omitempty"`
	// Time period during which the patient was present at the location
	Period *datatypes_go_proto.Period `protobuf:"bytes,7,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *QICoreEncounter_Location) Reset() {
	*x = QICoreEncounter_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreEncounter_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreEncounter_Location) ProtoMessage() {}

func (x *QICoreEncounter_Location) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreEncounter_Location.ProtoReflect.Descriptor instead.
func (*QICoreEncounter_Location) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{17, 6}
}

func (x *QICoreEncounter_Location) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreEncounter_Location) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreEncounter_Location) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreEncounter_Location) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *QICoreEncounter_Location) GetStatus() *QICoreEncounter_Location_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QICoreEncounter_Location) GetPhysicalType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PhysicalType
	}
	return nil
}

func (x *QICoreEncounter_Location) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// planned | arrived | triaged | in-progress | onleave | finished |
// cancelled +
type QICoreEncounter_StatusHistory_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.EncounterStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.EncounterStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension          `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreEncounter_StatusHistory_StatusCode) Reset() {
	*x = QICoreEncounter_StatusHistory_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreEncounter_StatusHistory_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreEncounter_StatusHistory_StatusCode) ProtoMessage() {}

func (x *QICoreEncounter_StatusHistory_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreEncounter_StatusHistory_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreEncounter_StatusHistory_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{17, 1, 0}
}

func (x *QICoreEncounter_StatusHistory_StatusCode) GetValue() codes_go_proto.EncounterStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.EncounterStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreEncounter_StatusHistory_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreEncounter_StatusHistory_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// planned | active | reserved | completed
type QICoreEncounter_Location_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.EncounterLocationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.EncounterLocationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreEncounter_Location_StatusCode) Reset() {
	*x = QICoreEncounter_Location_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreEncounter_Location_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreEncounter_Location_StatusCode) ProtoMessage() {}

func (x *QICoreEncounter_Location_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreEncounter_Location_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreEncounter_Location_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{17, 6, 0}
}

func (x *QICoreEncounter_Location_StatusCode) GetValue() codes_go_proto.EncounterLocationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.EncounterLocationStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreEncounter_Location_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreEncounter_Location_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// partial | completed | entered-in-error | health-unknown
type QICoreFamilyMemberHistory_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.FamilyHistoryStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.FamilyHistoryStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension              `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreFamilyMemberHistory_StatusCode) Reset() {
	*x = QICoreFamilyMemberHistory_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreFamilyMemberHistory_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreFamilyMemberHistory_StatusCode) ProtoMessage() {}

func (x *QICoreFamilyMemberHistory_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreFamilyMemberHistory_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreFamilyMemberHistory_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{18, 0}
}

func (x *QICoreFamilyMemberHistory_StatusCode) GetValue() codes_go_proto.FamilyHistoryStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.FamilyHistoryStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreFamilyMemberHistory_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreFamilyMemberHistory_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// (approximate) date of birth
type QICoreFamilyMemberHistory_BornX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreFamilyMemberHistory_BornX_Period
	//	*QICoreFamilyMemberHistory_BornX_Date
	//	*QICoreFamilyMemberHistory_BornX_StringValue
	Choice isQICoreFamilyMemberHistory_BornX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreFamilyMemberHistory_BornX) Reset() {
	*x = QICoreFamilyMemberHistory_BornX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreFamilyMemberHistory_BornX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreFamilyMemberHistory_BornX) ProtoMessage() {}

func (x *QICoreFamilyMemberHistory_BornX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreFamilyMemberHistory_BornX.ProtoReflect.Descriptor instead.
func (*QICoreFamilyMemberHistory_BornX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{18, 1}
}

func (m *QICoreFamilyMemberHistory_BornX) GetChoice() isQICoreFamilyMemberHistory_BornX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreFamilyMemberHistory_BornX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*QICoreFamilyMemberHistory_BornX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *QICoreFamilyMemberHistory_BornX) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetChoice().(*QICoreFamilyMemberHistory_BornX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *QICoreFamilyMemberHistory_BornX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*QICoreFamilyMemberHistory_BornX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isQICoreFamilyMemberHistory_BornX_Choice interface {
	isQICoreFamilyMemberHistory_BornX_Choice()
}

type QICoreFamilyMemberHistory_BornX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,1,opt,name=period,proto3,oneof"`
}

type QICoreFamilyMemberHistory_BornX_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,2,opt,name=date,proto3,oneof"`
}

type QICoreFamilyMemberHistory_BornX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

func (*QICoreFamilyMemberHistory_BornX_Period) isQICoreFamilyMemberHistory_BornX_Choice() {}

func (*QICoreFamilyMemberHistory_BornX_Date) isQICoreFamilyMemberHistory_BornX_Choice() {}

func (*QICoreFamilyMemberHistory_BornX_StringValue) isQICoreFamilyMemberHistory_BornX_Choice() {}

// (approximate) age
type QICoreFamilyMemberHistory_AgeX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreFamilyMemberHistory_AgeX_Age
	//	*QICoreFamilyMemberHistory_AgeX_Range
	//	*QICoreFamilyMemberHistory_AgeX_StringValue
	Choice isQICoreFamilyMemberHistory_AgeX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreFamilyMemberHistory_AgeX) Reset() {
	*x = QICoreFamilyMemberHistory_AgeX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreFamilyMemberHistory_AgeX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreFamilyMemberHistory_AgeX) ProtoMessage() {}

func (x *QICoreFamilyMemberHistory_AgeX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreFamilyMemberHistory_AgeX.ProtoReflect.Descriptor instead.
func (*QICoreFamilyMemberHistory_AgeX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{18, 2}
}

func (m *QICoreFamilyMemberHistory_AgeX) GetChoice() isQICoreFamilyMemberHistory_AgeX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreFamilyMemberHistory_AgeX) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetChoice().(*QICoreFamilyMemberHistory_AgeX_Age); ok {
		return x.Age
	}
	return nil
}

func (x *QICoreFamilyMemberHistory_AgeX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*QICoreFamilyMemberHistory_AgeX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *QICoreFamilyMemberHistory_AgeX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*QICoreFamilyMemberHistory_AgeX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isQICoreFamilyMemberHistory_AgeX_Choice interface {
	isQICoreFamilyMemberHistory_AgeX_Choice()
}

type QICoreFamilyMemberHistory_AgeX_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,1,opt,name=age,proto3,oneof"`
}

type QICoreFamilyMemberHistory_AgeX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

type QICoreFamilyMemberHistory_AgeX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

func (*QICoreFamilyMemberHistory_AgeX_Age) isQICoreFamilyMemberHistory_AgeX_Choice() {}

func (*QICoreFamilyMemberHistory_AgeX_Range) isQICoreFamilyMemberHistory_AgeX_Choice() {}

func (*QICoreFamilyMemberHistory_AgeX_StringValue) isQICoreFamilyMemberHistory_AgeX_Choice() {}

// Dead? How old/when?
type QICoreFamilyMemberHistory_DeceasedX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreFamilyMemberHistory_DeceasedX_Boolean
	//	*QICoreFamilyMemberHistory_DeceasedX_Age
	//	*QICoreFamilyMemberHistory_DeceasedX_Range
	//	*QICoreFamilyMemberHistory_DeceasedX_Date
	//	*QICoreFamilyMemberHistory_DeceasedX_StringValue
	Choice isQICoreFamilyMemberHistory_DeceasedX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreFamilyMemberHistory_DeceasedX) Reset() {
	*x = QICoreFamilyMemberHistory_DeceasedX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreFamilyMemberHistory_DeceasedX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreFamilyMemberHistory_DeceasedX) ProtoMessage() {}

func (x *QICoreFamilyMemberHistory_DeceasedX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreFamilyMemberHistory_DeceasedX.ProtoReflect.Descriptor instead.
func (*QICoreFamilyMemberHistory_DeceasedX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{18, 3}
}

func (m *QICoreFamilyMemberHistory_DeceasedX) GetChoice() isQICoreFamilyMemberHistory_DeceasedX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreFamilyMemberHistory_DeceasedX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*QICoreFamilyMemberHistory_DeceasedX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *QICoreFamilyMemberHistory_DeceasedX) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetChoice().(*QICoreFamilyMemberHistory_DeceasedX_Age); ok {
		return x.Age
	}
	return nil
}

func (x *QICoreFamilyMemberHistory_DeceasedX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*QICoreFamilyMemberHistory_DeceasedX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *QICoreFamilyMemberHistory_DeceasedX) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetChoice().(*QICoreFamilyMemberHistory_DeceasedX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *QICoreFamilyMemberHistory_DeceasedX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*QICoreFamilyMemberHistory_DeceasedX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isQICoreFamilyMemberHistory_DeceasedX_Choice interface {
	isQICoreFamilyMemberHistory_DeceasedX_Choice()
}

type QICoreFamilyMemberHistory_DeceasedX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type QICoreFamilyMemberHistory_DeceasedX_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,2,opt,name=age,proto3,oneof"`
}

type QICoreFamilyMemberHistory_DeceasedX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,3,opt,name=range,proto3,oneof"`
}

type QICoreFamilyMemberHistory_DeceasedX_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,4,opt,name=date,proto3,oneof"`
}

type QICoreFamilyMemberHistory_DeceasedX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=string_value,json=string,proto3,oneof"`
}

func (*QICoreFamilyMemberHistory_DeceasedX_Boolean) isQICoreFamilyMemberHistory_DeceasedX_Choice() {}

func (*QICoreFamilyMemberHistory_DeceasedX_Age) isQICoreFamilyMemberHistory_DeceasedX_Choice() {}

func (*QICoreFamilyMemberHistory_DeceasedX_Range) isQICoreFamilyMemberHistory_DeceasedX_Choice() {}

func (*QICoreFamilyMemberHistory_DeceasedX_Date) isQICoreFamilyMemberHistory_DeceasedX_Choice() {}

func (*QICoreFamilyMemberHistory_DeceasedX_StringValue) isQICoreFamilyMemberHistory_DeceasedX_Choice() {
}

// Condition that the related person had
type QICoreFamilyMemberHistory_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Condition suffered by relation
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// deceased | permanent disability | etc.
	Outcome *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=outcome,proto3" json:"outcome,omitempty"`
	// Whether the condition contributed to the cause of death
	ContributedToDeath *datatypes_go_proto.Boolean                 `protobuf:"bytes,6,opt,name=contributed_to_death,json=contributedToDeath,proto3" json:"contributed_to_death,omitempty"`
	Onset              *QICoreFamilyMemberHistory_Condition_OnsetX `protobuf:"bytes,7,opt,name=onset,proto3" json:"onset,omitempty"`
	// Extra information about condition
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,8,rep,name=note,proto3" json:"note,omitempty"`
	// When (or if) the family member's condition resolved
	ConditionAbatement *extensions_go_proto.FamilyMemberHistoryAbatement_ValueX `protobuf:"bytes,9,opt,name=condition_abatement,json=conditionAbatement,proto3" json:"condition_abatement,omitempty"`
	// The seriousness of the family member condition
	ConditionSeverity *datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,opt,name=condition_severity,json=conditionSeverity,proto3" json:"condition_severity,omitempty"`
}

func (x *QICoreFamilyMemberHistory_Condition) Reset() {
	*x = QICoreFamilyMemberHistory_Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreFamilyMemberHistory_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreFamilyMemberHistory_Condition) ProtoMessage() {}

func (x *QICoreFamilyMemberHistory_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreFamilyMemberHistory_Condition.ProtoReflect.Descriptor instead.
func (*QICoreFamilyMemberHistory_Condition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{18, 4}
}

func (x *QICoreFamilyMemberHistory_Condition) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreFamilyMemberHistory_Condition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreFamilyMemberHistory_Condition) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreFamilyMemberHistory_Condition) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *QICoreFamilyMemberHistory_Condition) GetOutcome() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *QICoreFamilyMemberHistory_Condition) GetContributedToDeath() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ContributedToDeath
	}
	return nil
}

func (x *QICoreFamilyMemberHistory_Condition) GetOnset() *QICoreFamilyMemberHistory_Condition_OnsetX {
	if x != nil {
		return x.Onset
	}
	return nil
}

func (x *QICoreFamilyMemberHistory_Condition) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *QICoreFamilyMemberHistory_Condition) GetConditionAbatement() *extensions_go_proto.FamilyMemberHistoryAbatement_ValueX {
	if x != nil {
		return x.ConditionAbatement
	}
	return nil
}

func (x *QICoreFamilyMemberHistory_Condition) GetConditionSeverity() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ConditionSeverity
	}
	return nil
}

// When condition first manifested
type QICoreFamilyMemberHistory_Condition_OnsetX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreFamilyMemberHistory_Condition_OnsetX_Age
	//	*QICoreFamilyMemberHistory_Condition_OnsetX_Range
	//	*QICoreFamilyMemberHistory_Condition_OnsetX_Period
	//	*QICoreFamilyMemberHistory_Condition_OnsetX_StringValue
	Choice isQICoreFamilyMemberHistory_Condition_OnsetX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreFamilyMemberHistory_Condition_OnsetX) Reset() {
	*x = QICoreFamilyMemberHistory_Condition_OnsetX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreFamilyMemberHistory_Condition_OnsetX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreFamilyMemberHistory_Condition_OnsetX) ProtoMessage() {}

func (x *QICoreFamilyMemberHistory_Condition_OnsetX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreFamilyMemberHistory_Condition_OnsetX.ProtoReflect.Descriptor instead.
func (*QICoreFamilyMemberHistory_Condition_OnsetX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{18, 4, 0}
}

func (m *QICoreFamilyMemberHistory_Condition_OnsetX) GetChoice() isQICoreFamilyMemberHistory_Condition_OnsetX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreFamilyMemberHistory_Condition_OnsetX) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetChoice().(*QICoreFamilyMemberHistory_Condition_OnsetX_Age); ok {
		return x.Age
	}
	return nil
}

func (x *QICoreFamilyMemberHistory_Condition_OnsetX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*QICoreFamilyMemberHistory_Condition_OnsetX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *QICoreFamilyMemberHistory_Condition_OnsetX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*QICoreFamilyMemberHistory_Condition_OnsetX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *QICoreFamilyMemberHistory_Condition_OnsetX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*QICoreFamilyMemberHistory_Condition_OnsetX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isQICoreFamilyMemberHistory_Condition_OnsetX_Choice interface {
	isQICoreFamilyMemberHistory_Condition_OnsetX_Choice()
}

type QICoreFamilyMemberHistory_Condition_OnsetX_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,1,opt,name=age,proto3,oneof"`
}

type QICoreFamilyMemberHistory_Condition_OnsetX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

type QICoreFamilyMemberHistory_Condition_OnsetX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,3,opt,name=period,proto3,oneof"`
}

type QICoreFamilyMemberHistory_Condition_OnsetX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=string_value,json=string,proto3,oneof"`
}

func (*QICoreFamilyMemberHistory_Condition_OnsetX_Age) isQICoreFamilyMemberHistory_Condition_OnsetX_Choice() {
}

func (*QICoreFamilyMemberHistory_Condition_OnsetX_Range) isQICoreFamilyMemberHistory_Condition_OnsetX_Choice() {
}

func (*QICoreFamilyMemberHistory_Condition_OnsetX_Period) isQICoreFamilyMemberHistory_Condition_OnsetX_Choice() {
}

func (*QICoreFamilyMemberHistory_Condition_OnsetX_StringValue) isQICoreFamilyMemberHistory_Condition_OnsetX_Choice() {
}

// active | inactive | entered-in-error
type QICoreFlag_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.FlagStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.FlagStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension     `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreFlag_StatusCode) Reset() {
	*x = QICoreFlag_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreFlag_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreFlag_StatusCode) ProtoMessage() {}

func (x *QICoreFlag_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreFlag_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreFlag_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{19, 0}
}

func (x *QICoreFlag_StatusCode) GetValue() codes_go_proto.FlagStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.FlagStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreFlag_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreFlag_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// proposed | planned | accepted | active | on-hold | completed | cancelled |
// entered-in-error | rejected
type QICoreGoal_LifecycleStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.GoalLifecycleStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.GoalLifecycleStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension              `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreGoal_LifecycleStatusCode) Reset() {
	*x = QICoreGoal_LifecycleStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreGoal_LifecycleStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreGoal_LifecycleStatusCode) ProtoMessage() {}

func (x *QICoreGoal_LifecycleStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreGoal_LifecycleStatusCode.ProtoReflect.Descriptor instead.
func (*QICoreGoal_LifecycleStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{20, 0}
}

func (x *QICoreGoal_LifecycleStatusCode) GetValue() codes_go_proto.GoalLifecycleStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.GoalLifecycleStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreGoal_LifecycleStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreGoal_LifecycleStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// When goal pursuit begins
type QICoreGoal_StartX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreGoal_StartX_Date
	Choice isQICoreGoal_StartX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreGoal_StartX) Reset() {
	*x = QICoreGoal_StartX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreGoal_StartX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreGoal_StartX) ProtoMessage() {}

func (x *QICoreGoal_StartX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreGoal_StartX.ProtoReflect.Descriptor instead.
func (*QICoreGoal_StartX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{20, 1}
}

func (m *QICoreGoal_StartX) GetChoice() isQICoreGoal_StartX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreGoal_StartX) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetChoice().(*QICoreGoal_StartX_Date); ok {
		return x.Date
	}
	return nil
}

type isQICoreGoal_StartX_Choice interface {
	isQICoreGoal_StartX_Choice()
}

type QICoreGoal_StartX_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

func (*QICoreGoal_StartX_Date) isQICoreGoal_StartX_Choice() {}

// Target outcome for the goal
type QICoreGoal_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The parameter whose value is being tracked
	Measure *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=measure,proto3" json:"measure,omitempty"`
	Detail  *QICoreGoal_Target_DetailX          `protobuf:"bytes,5,opt,name=detail,proto3" json:"detail,omitempty"`
	Due     *QICoreGoal_Target_DueX             `protobuf:"bytes,6,opt,name=due,proto3" json:"due,omitempty"`
}

func (x *QICoreGoal_Target) Reset() {
	*x = QICoreGoal_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreGoal_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreGoal_Target) ProtoMessage() {}

func (x *QICoreGoal_Target) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreGoal_Target.ProtoReflect.Descriptor instead.
func (*QICoreGoal_Target) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{20, 2}
}

func (x *QICoreGoal_Target) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreGoal_Target) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreGoal_Target) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreGoal_Target) GetMeasure() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Measure
	}
	return nil
}

func (x *QICoreGoal_Target) GetDetail() *QICoreGoal_Target_DetailX {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *QICoreGoal_Target) GetDue() *QICoreGoal_Target_DueX {
	if x != nil {
		return x.Due
	}
	return nil
}

// The target value to be achieved
type QICoreGoal_Target_DetailX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreGoal_Target_DetailX_Quantity
	//	*QICoreGoal_Target_DetailX_Range
	//	*QICoreGoal_Target_DetailX_CodeableConcept
	//	*QICoreGoal_Target_DetailX_StringValue
	//	*QICoreGoal_Target_DetailX_Boolean
	//	*QICoreGoal_Target_DetailX_Integer
	//	*QICoreGoal_Target_DetailX_Ratio
	Choice isQICoreGoal_Target_DetailX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreGoal_Target_DetailX) Reset() {
	*x = QICoreGoal_Target_DetailX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreGoal_Target_DetailX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreGoal_Target_DetailX) ProtoMessage() {}

func (x *QICoreGoal_Target_DetailX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreGoal_Target_DetailX.ProtoReflect.Descriptor instead.
func (*QICoreGoal_Target_DetailX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{20, 2, 0}
}

func (m *QICoreGoal_Target_DetailX) GetChoice() isQICoreGoal_Target_DetailX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreGoal_Target_DetailX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*QICoreGoal_Target_DetailX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *QICoreGoal_Target_DetailX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*QICoreGoal_Target_DetailX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *QICoreGoal_Target_DetailX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*QICoreGoal_Target_DetailX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *QICoreGoal_Target_DetailX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*QICoreGoal_Target_DetailX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *QICoreGoal_Target_DetailX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*QICoreGoal_Target_DetailX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *QICoreGoal_Target_DetailX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*QICoreGoal_Target_DetailX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *QICoreGoal_Target_DetailX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*QICoreGoal_Target_DetailX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

type isQICoreGoal_Target_DetailX_Choice interface {
	isQICoreGoal_Target_DetailX_Choice()
}

type QICoreGoal_Target_DetailX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type QICoreGoal_Target_DetailX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

type QICoreGoal_Target_DetailX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type QICoreGoal_Target_DetailX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=string_value,json=string,proto3,oneof"`
}

type QICoreGoal_Target_DetailX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=boolean,proto3,oneof"`
}

type QICoreGoal_Target_DetailX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,6,opt,name=integer,proto3,oneof"`
}

type QICoreGoal_Target_DetailX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,7,opt,name=ratio,proto3,oneof"`
}

func (*QICoreGoal_Target_DetailX_Quantity) isQICoreGoal_Target_DetailX_Choice() {}

func (*QICoreGoal_Target_DetailX_Range) isQICoreGoal_Target_DetailX_Choice() {}

func (*QICoreGoal_Target_DetailX_CodeableConcept) isQICoreGoal_Target_DetailX_Choice() {}

func (*QICoreGoal_Target_DetailX_StringValue) isQICoreGoal_Target_DetailX_Choice() {}

func (*QICoreGoal_Target_DetailX_Boolean) isQICoreGoal_Target_DetailX_Choice() {}

func (*QICoreGoal_Target_DetailX_Integer) isQICoreGoal_Target_DetailX_Choice() {}

func (*QICoreGoal_Target_DetailX_Ratio) isQICoreGoal_Target_DetailX_Choice() {}

// Reach goal on or before
type QICoreGoal_Target_DueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreGoal_Target_DueX_Date
	//	*QICoreGoal_Target_DueX_Duration
	Choice isQICoreGoal_Target_DueX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreGoal_Target_DueX) Reset() {
	*x = QICoreGoal_Target_DueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreGoal_Target_DueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreGoal_Target_DueX) ProtoMessage() {}

func (x *QICoreGoal_Target_DueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreGoal_Target_DueX.ProtoReflect.Descriptor instead.
func (*QICoreGoal_Target_DueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{20, 2, 1}
}

func (m *QICoreGoal_Target_DueX) GetChoice() isQICoreGoal_Target_DueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreGoal_Target_DueX) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetChoice().(*QICoreGoal_Target_DueX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *QICoreGoal_Target_DueX) GetDuration() *datatypes_go_proto.Duration {
	if x, ok := x.GetChoice().(*QICoreGoal_Target_DueX_Duration); ok {
		return x.Duration
	}
	return nil
}

type isQICoreGoal_Target_DueX_Choice interface {
	isQICoreGoal_Target_DueX_Choice()
}

type QICoreGoal_Target_DueX_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type QICoreGoal_Target_DueX_Duration struct {
	Duration *datatypes_go_proto.Duration `protobuf:"bytes,2,opt,name=duration,proto3,oneof"`
}

func (*QICoreGoal_Target_DueX_Date) isQICoreGoal_Target_DueX_Choice() {}

func (*QICoreGoal_Target_DueX_Duration) isQICoreGoal_Target_DueX_Choice() {}

// registered | available | cancelled | entered-in-error | unknown
type QICoreImagingStudy_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ImagingStudyStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.ImagingStudyStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension             `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreImagingStudy_StatusCode) Reset() {
	*x = QICoreImagingStudy_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreImagingStudy_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreImagingStudy_StatusCode) ProtoMessage() {}

func (x *QICoreImagingStudy_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreImagingStudy_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreImagingStudy_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{21, 0}
}

func (x *QICoreImagingStudy_StatusCode) GetValue() codes_go_proto.ImagingStudyStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ImagingStudyStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreImagingStudy_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreImagingStudy_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Each study has one or more series of instances
type QICoreImagingStudy_Series struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// DICOM Series Instance UID for the series
	Uid *datatypes_go_proto.Id `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
	// Numeric identifier of this series
	Number *datatypes_go_proto.UnsignedInt `protobuf:"bytes,5,opt,name=number,proto3" json:"number,omitempty"`
	// The modality of the instances in the series
	Modality *datatypes_go_proto.Coding `protobuf:"bytes,6,opt,name=modality,proto3" json:"modality,omitempty"`
	// A short human readable summary of the series
	Description *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// Number of Series Related Instances
	NumberOfInstances *datatypes_go_proto.UnsignedInt `protobuf:"bytes,8,opt,name=number_of_instances,json=numberOfInstances,proto3" json:"number_of_instances,omitempty"`
	// Series access endpoint
	Endpoint []*datatypes_go_proto.Reference `protobuf:"bytes,9,rep,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Body part examined
	BodySite *datatypes_go_proto.Coding `protobuf:"bytes,10,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// Body part laterality
	Laterality *datatypes_go_proto.Coding `protobuf:"bytes,11,opt,name=laterality,proto3" json:"laterality,omitempty"`
	// Specimen imaged
	Specimen []*datatypes_go_proto.Reference `protobuf:"bytes,12,rep,name=specimen,proto3" json:"specimen,omitempty"`
	// When the series started
	Started   *datatypes_go_proto.DateTime           `protobuf:"bytes,13,opt,name=started,proto3" json:"started,omitempty"`
	Performer []*QICoreImagingStudy_Series_Performer `protobuf:"bytes,14,rep,name=performer,proto3" json:"performer,omitempty"`
	Instance  []*QICoreImagingStudy_Series_Instance  `protobuf:"bytes,15,rep,name=instance,proto3" json:"instance,omitempty"`
}

func (x *QICoreImagingStudy_Series) Reset() {
	*x = QICoreImagingStudy_Series{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreImagingStudy_Series) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreImagingStudy_Series) ProtoMessage() {}

func (x *QICoreImagingStudy_Series) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreImagingStudy_Series.ProtoReflect.Descriptor instead.
func (*QICoreImagingStudy_Series) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{21, 1}
}

func (x *QICoreImagingStudy_Series) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreImagingStudy_Series) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreImagingStudy_Series) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreImagingStudy_Series) GetUid() *datatypes_go_proto.Id {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *QICoreImagingStudy_Series) GetNumber() *datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *QICoreImagingStudy_Series) GetModality() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Modality
	}
	return nil
}

func (x *QICoreImagingStudy_Series) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *QICoreImagingStudy_Series) GetNumberOfInstances() *datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.NumberOfInstances
	}
	return nil
}

func (x *QICoreImagingStudy_Series) GetEndpoint() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *QICoreImagingStudy_Series) GetBodySite() *datatypes_go_proto.Coding {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *QICoreImagingStudy_Series) GetLaterality() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Laterality
	}
	return nil
}

func (x *QICoreImagingStudy_Series) GetSpecimen() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *QICoreImagingStudy_Series) GetStarted() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *QICoreImagingStudy_Series) GetPerformer() []*QICoreImagingStudy_Series_Performer {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *QICoreImagingStudy_Series) GetInstance() []*QICoreImagingStudy_Series_Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

// Who performed the series
type QICoreImagingStudy_Series_Performer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of performance
	Function *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=function,proto3" json:"function,omitempty"`
	// Who performed the series
	Actor *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=actor,proto3" json:"actor,omitempty"`
}

func (x *QICoreImagingStudy_Series_Performer) Reset() {
	*x = QICoreImagingStudy_Series_Performer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreImagingStudy_Series_Performer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreImagingStudy_Series_Performer) ProtoMessage() {}

func (x *QICoreImagingStudy_Series_Performer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreImagingStudy_Series_Performer.ProtoReflect.Descriptor instead.
func (*QICoreImagingStudy_Series_Performer) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{21, 1, 0}
}

func (x *QICoreImagingStudy_Series_Performer) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreImagingStudy_Series_Performer) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreImagingStudy_Series_Performer) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreImagingStudy_Series_Performer) GetFunction() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *QICoreImagingStudy_Series_Performer) GetActor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Actor
	}
	return nil
}

// A single SOP instance from the series
type QICoreImagingStudy_Series_Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// DICOM SOP Instance UID
	Uid *datatypes_go_proto.Id `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
	// DICOM class type
	SopClass *datatypes_go_proto.Coding `protobuf:"bytes,5,opt,name=sop_class,json=sopClass,proto3" json:"sop_class,omitempty"`
	// The number of this instance in the series
	Number *datatypes_go_proto.UnsignedInt `protobuf:"bytes,6,opt,name=number,proto3" json:"number,omitempty"`
	// Description of instance
	Title *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *QICoreImagingStudy_Series_Instance) Reset() {
	*x = QICoreImagingStudy_Series_Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreImagingStudy_Series_Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreImagingStudy_Series_Instance) ProtoMessage() {}

func (x *QICoreImagingStudy_Series_Instance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreImagingStudy_Series_Instance.ProtoReflect.Descriptor instead.
func (*QICoreImagingStudy_Series_Instance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{21, 1, 1}
}

func (x *QICoreImagingStudy_Series_Instance) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreImagingStudy_Series_Instance) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreImagingStudy_Series_Instance) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreImagingStudy_Series_Instance) GetUid() *datatypes_go_proto.Id {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *QICoreImagingStudy_Series_Instance) GetSopClass() *datatypes_go_proto.Coding {
	if x != nil {
		return x.SopClass
	}
	return nil
}

func (x *QICoreImagingStudy_Series_Instance) GetNumber() *datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *QICoreImagingStudy_Series_Instance) GetTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Title
	}
	return nil
}

// completed | entered-in-error | not-done
type QICoreImmunization_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     valuesets_go_proto.ImmunizationStatusCodesValueSet_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.ImmunizationStatusCodesValueSet_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                          `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreImmunization_StatusCode) Reset() {
	*x = QICoreImmunization_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreImmunization_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreImmunization_StatusCode) ProtoMessage() {}

func (x *QICoreImmunization_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreImmunization_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreImmunization_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{22, 0}
}

func (x *QICoreImmunization_StatusCode) GetValue() valuesets_go_proto.ImmunizationStatusCodesValueSet_Value {
	if x != nil {
		return x.Value
	}
	return valuesets_go_proto.ImmunizationStatusCodesValueSet_INVALID_UNINITIALIZED
}

func (x *QICoreImmunization_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreImmunization_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Vaccine administration date
type QICoreImmunization_OccurrenceX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreImmunization_OccurrenceX_DateTime
	//	*QICoreImmunization_OccurrenceX_StringValue
	Choice isQICoreImmunization_OccurrenceX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreImmunization_OccurrenceX) Reset() {
	*x = QICoreImmunization_OccurrenceX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreImmunization_OccurrenceX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreImmunization_OccurrenceX) ProtoMessage() {}

func (x *QICoreImmunization_OccurrenceX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreImmunization_OccurrenceX.ProtoReflect.Descriptor instead.
func (*QICoreImmunization_OccurrenceX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{22, 1}
}

func (m *QICoreImmunization_OccurrenceX) GetChoice() isQICoreImmunization_OccurrenceX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreImmunization_OccurrenceX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*QICoreImmunization_OccurrenceX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *QICoreImmunization_OccurrenceX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*QICoreImmunization_OccurrenceX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isQICoreImmunization_OccurrenceX_Choice interface {
	isQICoreImmunization_OccurrenceX_Choice()
}

type QICoreImmunization_OccurrenceX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type QICoreImmunization_OccurrenceX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

func (*QICoreImmunization_OccurrenceX_DateTime) isQICoreImmunization_OccurrenceX_Choice() {}

func (*QICoreImmunization_OccurrenceX_StringValue) isQICoreImmunization_OccurrenceX_Choice() {}

// Who performed event
type QICoreImmunization_Performer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// What type of performance was done
	Function *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=function,proto3" json:"function,omitempty"`
	// Individual or organization who was performing
	Actor *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=actor,proto3" json:"actor,omitempty"`
}

func (x *QICoreImmunization_Performer) Reset() {
	*x = QICoreImmunization_Performer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreImmunization_Performer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreImmunization_Performer) ProtoMessage() {}

func (x *QICoreImmunization_Performer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreImmunization_Performer.ProtoReflect.Descriptor instead.
func (*QICoreImmunization_Performer) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{22, 2}
}

func (x *QICoreImmunization_Performer) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreImmunization_Performer) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreImmunization_Performer) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreImmunization_Performer) GetFunction() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *QICoreImmunization_Performer) GetActor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Actor
	}
	return nil
}

// Educational material presented to patient
type QICoreImmunization_Education struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Educational material document identifier
	DocumentType *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=document_type,json=documentType,proto3" json:"document_type,omitempty"`
	// Educational material reference pointer
	Reference *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=reference,proto3" json:"reference,omitempty"`
	// Educational material publication date
	PublicationDate *datatypes_go_proto.DateTime `protobuf:"bytes,6,opt,name=publication_date,json=publicationDate,proto3" json:"publication_date,omitempty"`
	// Educational material presentation date
	PresentationDate *datatypes_go_proto.DateTime `protobuf:"bytes,7,opt,name=presentation_date,json=presentationDate,proto3" json:"presentation_date,omitempty"`
}

func (x *QICoreImmunization_Education) Reset() {
	*x = QICoreImmunization_Education{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreImmunization_Education) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreImmunization_Education) ProtoMessage() {}

func (x *QICoreImmunization_Education) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreImmunization_Education.ProtoReflect.Descriptor instead.
func (*QICoreImmunization_Education) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{22, 3}
}

func (x *QICoreImmunization_Education) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreImmunization_Education) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreImmunization_Education) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreImmunization_Education) GetDocumentType() *datatypes_go_proto.String {
	if x != nil {
		return x.DocumentType
	}
	return nil
}

func (x *QICoreImmunization_Education) GetReference() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *QICoreImmunization_Education) GetPublicationDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.PublicationDate
	}
	return nil
}

func (x *QICoreImmunization_Education) GetPresentationDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.PresentationDate
	}
	return nil
}

// Details of a reaction that follows immunization
type QICoreImmunization_Reaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// When reaction started
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	// Additional information on reaction
	Detail *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=detail,proto3" json:"detail,omitempty"`
	// Indicates self-reported reaction
	Reported *datatypes_go_proto.Boolean `protobuf:"bytes,6,opt,name=reported,proto3" json:"reported,omitempty"`
}

func (x *QICoreImmunization_Reaction) Reset() {
	*x = QICoreImmunization_Reaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreImmunization_Reaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreImmunization_Reaction) ProtoMessage() {}

func (x *QICoreImmunization_Reaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreImmunization_Reaction.ProtoReflect.Descriptor instead.
func (*QICoreImmunization_Reaction) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{22, 4}
}

func (x *QICoreImmunization_Reaction) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreImmunization_Reaction) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreImmunization_Reaction) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreImmunization_Reaction) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *QICoreImmunization_Reaction) GetDetail() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *QICoreImmunization_Reaction) GetReported() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Reported
	}
	return nil
}

// Protocol followed by the provider
type QICoreImmunization_ProtocolApplied struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Name of vaccine series
	Series *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=series,proto3" json:"series,omitempty"`
	// Who is responsible for publishing the recommendations
	Authority *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=authority,proto3" json:"authority,omitempty"`
	// Vaccine preventatable disease being targetted
	TargetDisease []*datatypes_go_proto.CodeableConcept            `protobuf:"bytes,6,rep,name=target_disease,json=targetDisease,proto3" json:"target_disease,omitempty"`
	DoseNumber    *QICoreImmunization_ProtocolApplied_DoseNumberX  `protobuf:"bytes,7,opt,name=dose_number,json=doseNumber,proto3" json:"dose_number,omitempty"`
	SeriesDoses   *QICoreImmunization_ProtocolApplied_SeriesDosesX `protobuf:"bytes,8,opt,name=series_doses,json=seriesDoses,proto3" json:"series_doses,omitempty"`
}

func (x *QICoreImmunization_ProtocolApplied) Reset() {
	*x = QICoreImmunization_ProtocolApplied{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreImmunization_ProtocolApplied) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreImmunization_ProtocolApplied) ProtoMessage() {}

func (x *QICoreImmunization_ProtocolApplied) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreImmunization_ProtocolApplied.ProtoReflect.Descriptor instead.
func (*QICoreImmunization_ProtocolApplied) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{22, 5}
}

func (x *QICoreImmunization_ProtocolApplied) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreImmunization_ProtocolApplied) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreImmunization_ProtocolApplied) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreImmunization_ProtocolApplied) GetSeries() *datatypes_go_proto.String {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *QICoreImmunization_ProtocolApplied) GetAuthority() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *QICoreImmunization_ProtocolApplied) GetTargetDisease() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.TargetDisease
	}
	return nil
}

func (x *QICoreImmunization_ProtocolApplied) GetDoseNumber() *QICoreImmunization_ProtocolApplied_DoseNumberX {
	if x != nil {
		return x.DoseNumber
	}
	return nil
}

func (x *QICoreImmunization_ProtocolApplied) GetSeriesDoses() *QICoreImmunization_ProtocolApplied_SeriesDosesX {
	if x != nil {
		return x.SeriesDoses
	}
	return nil
}

// Dose number within series
type QICoreImmunization_ProtocolApplied_DoseNumberX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreImmunization_ProtocolApplied_DoseNumberX_PositiveInt
	//	*QICoreImmunization_ProtocolApplied_DoseNumberX_StringValue
	Choice isQICoreImmunization_ProtocolApplied_DoseNumberX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreImmunization_ProtocolApplied_DoseNumberX) Reset() {
	*x = QICoreImmunization_ProtocolApplied_DoseNumberX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreImmunization_ProtocolApplied_DoseNumberX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreImmunization_ProtocolApplied_DoseNumberX) ProtoMessage() {}

func (x *QICoreImmunization_ProtocolApplied_DoseNumberX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreImmunization_ProtocolApplied_DoseNumberX.ProtoReflect.Descriptor instead.
func (*QICoreImmunization_ProtocolApplied_DoseNumberX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{22, 5, 0}
}

func (m *QICoreImmunization_ProtocolApplied_DoseNumberX) GetChoice() isQICoreImmunization_ProtocolApplied_DoseNumberX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreImmunization_ProtocolApplied_DoseNumberX) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetChoice().(*QICoreImmunization_ProtocolApplied_DoseNumberX_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *QICoreImmunization_ProtocolApplied_DoseNumberX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*QICoreImmunization_ProtocolApplied_DoseNumberX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isQICoreImmunization_ProtocolApplied_DoseNumberX_Choice interface {
	isQICoreImmunization_ProtocolApplied_DoseNumberX_Choice()
}

type QICoreImmunization_ProtocolApplied_DoseNumberX_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,1,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type QICoreImmunization_ProtocolApplied_DoseNumberX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

func (*QICoreImmunization_ProtocolApplied_DoseNumberX_PositiveInt) isQICoreImmunization_ProtocolApplied_DoseNumberX_Choice() {
}

func (*QICoreImmunization_ProtocolApplied_DoseNumberX_StringValue) isQICoreImmunization_ProtocolApplied_DoseNumberX_Choice() {
}

// Recommended number of doses for immunity
type QICoreImmunization_ProtocolApplied_SeriesDosesX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreImmunization_ProtocolApplied_SeriesDosesX_PositiveInt
	//	*QICoreImmunization_ProtocolApplied_SeriesDosesX_StringValue
	Choice isQICoreImmunization_ProtocolApplied_SeriesDosesX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreImmunization_ProtocolApplied_SeriesDosesX) Reset() {
	*x = QICoreImmunization_ProtocolApplied_SeriesDosesX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreImmunization_ProtocolApplied_SeriesDosesX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreImmunization_ProtocolApplied_SeriesDosesX) ProtoMessage() {}

func (x *QICoreImmunization_ProtocolApplied_SeriesDosesX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreImmunization_ProtocolApplied_SeriesDosesX.ProtoReflect.Descriptor instead.
func (*QICoreImmunization_ProtocolApplied_SeriesDosesX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{22, 5, 1}
}

func (m *QICoreImmunization_ProtocolApplied_SeriesDosesX) GetChoice() isQICoreImmunization_ProtocolApplied_SeriesDosesX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreImmunization_ProtocolApplied_SeriesDosesX) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetChoice().(*QICoreImmunization_ProtocolApplied_SeriesDosesX_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *QICoreImmunization_ProtocolApplied_SeriesDosesX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*QICoreImmunization_ProtocolApplied_SeriesDosesX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isQICoreImmunization_ProtocolApplied_SeriesDosesX_Choice interface {
	isQICoreImmunization_ProtocolApplied_SeriesDosesX_Choice()
}

type QICoreImmunization_ProtocolApplied_SeriesDosesX_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,1,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type QICoreImmunization_ProtocolApplied_SeriesDosesX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

func (*QICoreImmunization_ProtocolApplied_SeriesDosesX_PositiveInt) isQICoreImmunization_ProtocolApplied_SeriesDosesX_Choice() {
}

func (*QICoreImmunization_ProtocolApplied_SeriesDosesX_StringValue) isQICoreImmunization_ProtocolApplied_SeriesDosesX_Choice() {
}

// completed | entered-in-error
type QICoreImmunizationEvaluation_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     valuesets_go_proto.ImmunizationEvaluationStatusCodesValueSet_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.ImmunizationEvaluationStatusCodesValueSet_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                                         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                                    `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreImmunizationEvaluation_StatusCode) Reset() {
	*x = QICoreImmunizationEvaluation_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreImmunizationEvaluation_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreImmunizationEvaluation_StatusCode) ProtoMessage() {}

func (x *QICoreImmunizationEvaluation_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreImmunizationEvaluation_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreImmunizationEvaluation_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{23, 0}
}

func (x *QICoreImmunizationEvaluation_StatusCode) GetValue() valuesets_go_proto.ImmunizationEvaluationStatusCodesValueSet_Value {
	if x != nil {
		return x.Value
	}
	return valuesets_go_proto.ImmunizationEvaluationStatusCodesValueSet_INVALID_UNINITIALIZED
}

func (x *QICoreImmunizationEvaluation_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreImmunizationEvaluation_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Dose number within series
type QICoreImmunizationEvaluation_DoseNumberX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreImmunizationEvaluation_DoseNumberX_PositiveInt
	//	*QICoreImmunizationEvaluation_DoseNumberX_StringValue
	Choice isQICoreImmunizationEvaluation_DoseNumberX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreImmunizationEvaluation_DoseNumberX) Reset() {
	*x = QICoreImmunizationEvaluation_DoseNumberX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreImmunizationEvaluation_DoseNumberX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreImmunizationEvaluation_DoseNumberX) ProtoMessage() {}

func (x *QICoreImmunizationEvaluation_DoseNumberX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreImmunizationEvaluation_DoseNumberX.ProtoReflect.Descriptor instead.
func (*QICoreImmunizationEvaluation_DoseNumberX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{23, 1}
}

func (m *QICoreImmunizationEvaluation_DoseNumberX) GetChoice() isQICoreImmunizationEvaluation_DoseNumberX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreImmunizationEvaluation_DoseNumberX) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetChoice().(*QICoreImmunizationEvaluation_DoseNumberX_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *QICoreImmunizationEvaluation_DoseNumberX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*QICoreImmunizationEvaluation_DoseNumberX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isQICoreImmunizationEvaluation_DoseNumberX_Choice interface {
	isQICoreImmunizationEvaluation_DoseNumberX_Choice()
}

type QICoreImmunizationEvaluation_DoseNumberX_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,1,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type QICoreImmunizationEvaluation_DoseNumberX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

func (*QICoreImmunizationEvaluation_DoseNumberX_PositiveInt) isQICoreImmunizationEvaluation_DoseNumberX_Choice() {
}

func (*QICoreImmunizationEvaluation_DoseNumberX_StringValue) isQICoreImmunizationEvaluation_DoseNumberX_Choice() {
}

// Recommended number of doses for immunity
type QICoreImmunizationEvaluation_SeriesDosesX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreImmunizationEvaluation_SeriesDosesX_PositiveInt
	//	*QICoreImmunizationEvaluation_SeriesDosesX_StringValue
	Choice isQICoreImmunizationEvaluation_SeriesDosesX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreImmunizationEvaluation_SeriesDosesX) Reset() {
	*x = QICoreImmunizationEvaluation_SeriesDosesX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreImmunizationEvaluation_SeriesDosesX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreImmunizationEvaluation_SeriesDosesX) ProtoMessage() {}

func (x *QICoreImmunizationEvaluation_SeriesDosesX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreImmunizationEvaluation_SeriesDosesX.ProtoReflect.Descriptor instead.
func (*QICoreImmunizationEvaluation_SeriesDosesX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{23, 2}
}

func (m *QICoreImmunizationEvaluation_SeriesDosesX) GetChoice() isQICoreImmunizationEvaluation_SeriesDosesX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreImmunizationEvaluation_SeriesDosesX) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetChoice().(*QICoreImmunizationEvaluation_SeriesDosesX_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *QICoreImmunizationEvaluation_SeriesDosesX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*QICoreImmunizationEvaluation_SeriesDosesX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isQICoreImmunizationEvaluation_SeriesDosesX_Choice interface {
	isQICoreImmunizationEvaluation_SeriesDosesX_Choice()
}

type QICoreImmunizationEvaluation_SeriesDosesX_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,1,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type QICoreImmunizationEvaluation_SeriesDosesX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

func (*QICoreImmunizationEvaluation_SeriesDosesX_PositiveInt) isQICoreImmunizationEvaluation_SeriesDosesX_Choice() {
}

func (*QICoreImmunizationEvaluation_SeriesDosesX_StringValue) isQICoreImmunizationEvaluation_SeriesDosesX_Choice() {
}

// Vaccine administration recommendations
type QICoreImmunizationRecommendation_Recommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Vaccine  or vaccine group recommendation applies to
	VaccineCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,rep,name=vaccine_code,json=vaccineCode,proto3" json:"vaccine_code,omitempty"`
	// Disease to be immunized against
	TargetDisease *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=target_disease,json=targetDisease,proto3" json:"target_disease,omitempty"`
	// Vaccine which is contraindicated to fulfill the recommendation
	ContraindicatedVaccineCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,rep,name=contraindicated_vaccine_code,json=contraindicatedVaccineCode,proto3" json:"contraindicated_vaccine_code,omitempty"`
	// Vaccine recommendation status
	ForecastStatus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=forecast_status,json=forecastStatus,proto3" json:"forecast_status,omitempty"`
	// Vaccine administration status reason
	ForecastReason []*datatypes_go_proto.CodeableConcept                            `protobuf:"bytes,8,rep,name=forecast_reason,json=forecastReason,proto3" json:"forecast_reason,omitempty"`
	DateCriterion  []*QICoreImmunizationRecommendation_Recommendation_DateCriterion `protobuf:"bytes,9,rep,name=date_criterion,json=dateCriterion,proto3" json:"date_criterion,omitempty"`
	// Protocol details
	Description *datatypes_go_proto.String `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	// Name of vaccination series
	Series      *datatypes_go_proto.String                                    `protobuf:"bytes,11,opt,name=series,proto3" json:"series,omitempty"`
	DoseNumber  *QICoreImmunizationRecommendation_Recommendation_DoseNumberX  `protobuf:"bytes,12,opt,name=dose_number,json=doseNumber,proto3" json:"dose_number,omitempty"`
	SeriesDoses *QICoreImmunizationRecommendation_Recommendation_SeriesDosesX `protobuf:"bytes,13,opt,name=series_doses,json=seriesDoses,proto3" json:"series_doses,omitempty"`
	// Past immunizations supporting recommendation
	SupportingImmunization []*datatypes_go_proto.Reference `protobuf:"bytes,14,rep,name=supporting_immunization,json=supportingImmunization,proto3" json:"supporting_immunization,omitempty"`
	// Patient observations supporting recommendation
	SupportingPatientInformation []*datatypes_go_proto.Reference `protobuf:"bytes,15,rep,name=supporting_patient_information,json=supportingPatientInformation,proto3" json:"supporting_patient_information,omitempty"`
}

func (x *QICoreImmunizationRecommendation_Recommendation) Reset() {
	*x = QICoreImmunizationRecommendation_Recommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreImmunizationRecommendation_Recommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreImmunizationRecommendation_Recommendation) ProtoMessage() {}

func (x *QICoreImmunizationRecommendation_Recommendation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreImmunizationRecommendation_Recommendation.ProtoReflect.Descriptor instead.
func (*QICoreImmunizationRecommendation_Recommendation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{24, 0}
}

func (x *QICoreImmunizationRecommendation_Recommendation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreImmunizationRecommendation_Recommendation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreImmunizationRecommendation_Recommendation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreImmunizationRecommendation_Recommendation) GetVaccineCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.VaccineCode
	}
	return nil
}

func (x *QICoreImmunizationRecommendation_Recommendation) GetTargetDisease() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.TargetDisease
	}
	return nil
}

func (x *QICoreImmunizationRecommendation_Recommendation) GetContraindicatedVaccineCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ContraindicatedVaccineCode
	}
	return nil
}

func (x *QICoreImmunizationRecommendation_Recommendation) GetForecastStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ForecastStatus
	}
	return nil
}

func (x *QICoreImmunizationRecommendation_Recommendation) GetForecastReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ForecastReason
	}
	return nil
}

func (x *QICoreImmunizationRecommendation_Recommendation) GetDateCriterion() []*QICoreImmunizationRecommendation_Recommendation_DateCriterion {
	if x != nil {
		return x.DateCriterion
	}
	return nil
}

func (x *QICoreImmunizationRecommendation_Recommendation) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *QICoreImmunizationRecommendation_Recommendation) GetSeries() *datatypes_go_proto.String {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *QICoreImmunizationRecommendation_Recommendation) GetDoseNumber() *QICoreImmunizationRecommendation_Recommendation_DoseNumberX {
	if x != nil {
		return x.DoseNumber
	}
	return nil
}

func (x *QICoreImmunizationRecommendation_Recommendation) GetSeriesDoses() *QICoreImmunizationRecommendation_Recommendation_SeriesDosesX {
	if x != nil {
		return x.SeriesDoses
	}
	return nil
}

func (x *QICoreImmunizationRecommendation_Recommendation) GetSupportingImmunization() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SupportingImmunization
	}
	return nil
}

func (x *QICoreImmunizationRecommendation_Recommendation) GetSupportingPatientInformation() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SupportingPatientInformation
	}
	return nil
}

// Dates governing proposed immunization
type QICoreImmunizationRecommendation_Recommendation_DateCriterion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of date
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Recommended date
	Value *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QICoreImmunizationRecommendation_Recommendation_DateCriterion) Reset() {
	*x = QICoreImmunizationRecommendation_Recommendation_DateCriterion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreImmunizationRecommendation_Recommendation_DateCriterion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreImmunizationRecommendation_Recommendation_DateCriterion) ProtoMessage() {}

func (x *QICoreImmunizationRecommendation_Recommendation_DateCriterion) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreImmunizationRecommendation_Recommendation_DateCriterion.ProtoReflect.Descriptor instead.
func (*QICoreImmunizationRecommendation_Recommendation_DateCriterion) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{24, 0, 0}
}

func (x *QICoreImmunizationRecommendation_Recommendation_DateCriterion) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreImmunizationRecommendation_Recommendation_DateCriterion) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreImmunizationRecommendation_Recommendation_DateCriterion) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreImmunizationRecommendation_Recommendation_DateCriterion) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *QICoreImmunizationRecommendation_Recommendation_DateCriterion) GetValue() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Value
	}
	return nil
}

// Recommended dose number within series
type QICoreImmunizationRecommendation_Recommendation_DoseNumberX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreImmunizationRecommendation_Recommendation_DoseNumberX_PositiveInt
	//	*QICoreImmunizationRecommendation_Recommendation_DoseNumberX_StringValue
	Choice isQICoreImmunizationRecommendation_Recommendation_DoseNumberX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreImmunizationRecommendation_Recommendation_DoseNumberX) Reset() {
	*x = QICoreImmunizationRecommendation_Recommendation_DoseNumberX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreImmunizationRecommendation_Recommendation_DoseNumberX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreImmunizationRecommendation_Recommendation_DoseNumberX) ProtoMessage() {}

func (x *QICoreImmunizationRecommendation_Recommendation_DoseNumberX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreImmunizationRecommendation_Recommendation_DoseNumberX.ProtoReflect.Descriptor instead.
func (*QICoreImmunizationRecommendation_Recommendation_DoseNumberX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{24, 0, 1}
}

func (m *QICoreImmunizationRecommendation_Recommendation_DoseNumberX) GetChoice() isQICoreImmunizationRecommendation_Recommendation_DoseNumberX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreImmunizationRecommendation_Recommendation_DoseNumberX) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetChoice().(*QICoreImmunizationRecommendation_Recommendation_DoseNumberX_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *QICoreImmunizationRecommendation_Recommendation_DoseNumberX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*QICoreImmunizationRecommendation_Recommendation_DoseNumberX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isQICoreImmunizationRecommendation_Recommendation_DoseNumberX_Choice interface {
	isQICoreImmunizationRecommendation_Recommendation_DoseNumberX_Choice()
}

type QICoreImmunizationRecommendation_Recommendation_DoseNumberX_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,1,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type QICoreImmunizationRecommendation_Recommendation_DoseNumberX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

func (*QICoreImmunizationRecommendation_Recommendation_DoseNumberX_PositiveInt) isQICoreImmunizationRecommendation_Recommendation_DoseNumberX_Choice() {
}

func (*QICoreImmunizationRecommendation_Recommendation_DoseNumberX_StringValue) isQICoreImmunizationRecommendation_Recommendation_DoseNumberX_Choice() {
}

// Recommended number of doses for immunity
type QICoreImmunizationRecommendation_Recommendation_SeriesDosesX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreImmunizationRecommendation_Recommendation_SeriesDosesX_PositiveInt
	//	*QICoreImmunizationRecommendation_Recommendation_SeriesDosesX_StringValue
	Choice isQICoreImmunizationRecommendation_Recommendation_SeriesDosesX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreImmunizationRecommendation_Recommendation_SeriesDosesX) Reset() {
	*x = QICoreImmunizationRecommendation_Recommendation_SeriesDosesX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreImmunizationRecommendation_Recommendation_SeriesDosesX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreImmunizationRecommendation_Recommendation_SeriesDosesX) ProtoMessage() {}

func (x *QICoreImmunizationRecommendation_Recommendation_SeriesDosesX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreImmunizationRecommendation_Recommendation_SeriesDosesX.ProtoReflect.Descriptor instead.
func (*QICoreImmunizationRecommendation_Recommendation_SeriesDosesX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{24, 0, 2}
}

func (m *QICoreImmunizationRecommendation_Recommendation_SeriesDosesX) GetChoice() isQICoreImmunizationRecommendation_Recommendation_SeriesDosesX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreImmunizationRecommendation_Recommendation_SeriesDosesX) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetChoice().(*QICoreImmunizationRecommendation_Recommendation_SeriesDosesX_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *QICoreImmunizationRecommendation_Recommendation_SeriesDosesX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*QICoreImmunizationRecommendation_Recommendation_SeriesDosesX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isQICoreImmunizationRecommendation_Recommendation_SeriesDosesX_Choice interface {
	isQICoreImmunizationRecommendation_Recommendation_SeriesDosesX_Choice()
}

type QICoreImmunizationRecommendation_Recommendation_SeriesDosesX_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,1,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type QICoreImmunizationRecommendation_Recommendation_SeriesDosesX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

func (*QICoreImmunizationRecommendation_Recommendation_SeriesDosesX_PositiveInt) isQICoreImmunizationRecommendation_Recommendation_SeriesDosesX_Choice() {
}

func (*QICoreImmunizationRecommendation_Recommendation_SeriesDosesX_StringValue) isQICoreImmunizationRecommendation_Recommendation_SeriesDosesX_Choice() {
}

// active | suspended | inactive
type QICoreLocation_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.LocationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.LocationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension         `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreLocation_StatusCode) Reset() {
	*x = QICoreLocation_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreLocation_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreLocation_StatusCode) ProtoMessage() {}

func (x *QICoreLocation_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreLocation_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreLocation_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{25, 0}
}

func (x *QICoreLocation_StatusCode) GetValue() codes_go_proto.LocationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.LocationStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreLocation_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreLocation_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// instance | kind
type QICoreLocation_ModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.LocationModeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.LocationModeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreLocation_ModeCode) Reset() {
	*x = QICoreLocation_ModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreLocation_ModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreLocation_ModeCode) ProtoMessage() {}

func (x *QICoreLocation_ModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreLocation_ModeCode.ProtoReflect.Descriptor instead.
func (*QICoreLocation_ModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{25, 1}
}

func (x *QICoreLocation_ModeCode) GetValue() codes_go_proto.LocationModeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.LocationModeCode_INVALID_UNINITIALIZED
}

func (x *QICoreLocation_ModeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreLocation_ModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The absolute geographic location
type QICoreLocation_Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Longitude with WGS84 datum
	Longitude *datatypes_go_proto.Decimal `protobuf:"bytes,4,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// Latitude with WGS84 datum
	Latitude *datatypes_go_proto.Decimal `protobuf:"bytes,5,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// Altitude with WGS84 datum
	Altitude *datatypes_go_proto.Decimal `protobuf:"bytes,6,opt,name=altitude,proto3" json:"altitude,omitempty"`
}

func (x *QICoreLocation_Position) Reset() {
	*x = QICoreLocation_Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreLocation_Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreLocation_Position) ProtoMessage() {}

func (x *QICoreLocation_Position) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreLocation_Position.ProtoReflect.Descriptor instead.
func (*QICoreLocation_Position) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{25, 2}
}

func (x *QICoreLocation_Position) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreLocation_Position) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreLocation_Position) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreLocation_Position) GetLongitude() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Longitude
	}
	return nil
}

func (x *QICoreLocation_Position) GetLatitude() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Latitude
	}
	return nil
}

func (x *QICoreLocation_Position) GetAltitude() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Altitude
	}
	return nil
}

// What days/times during a week is this location usually open
type QICoreLocation_HoursOfOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                   `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	DaysOfWeek        []*QICoreLocation_HoursOfOperation_DaysOfWeekCode `protobuf:"bytes,4,rep,name=days_of_week,json=daysOfWeek,proto3" json:"days_of_week,omitempty"`
	// The Location is open all day
	AllDay *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=all_day,json=allDay,proto3" json:"all_day,omitempty"`
	// Time that the Location opens
	OpeningTime *datatypes_go_proto.Time `protobuf:"bytes,6,opt,name=opening_time,json=openingTime,proto3" json:"opening_time,omitempty"`
	// Time that the Location closes
	ClosingTime *datatypes_go_proto.Time `protobuf:"bytes,7,opt,name=closing_time,json=closingTime,proto3" json:"closing_time,omitempty"`
}

func (x *QICoreLocation_HoursOfOperation) Reset() {
	*x = QICoreLocation_HoursOfOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreLocation_HoursOfOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreLocation_HoursOfOperation) ProtoMessage() {}

func (x *QICoreLocation_HoursOfOperation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreLocation_HoursOfOperation.ProtoReflect.Descriptor instead.
func (*QICoreLocation_HoursOfOperation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{25, 3}
}

func (x *QICoreLocation_HoursOfOperation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreLocation_HoursOfOperation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreLocation_HoursOfOperation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreLocation_HoursOfOperation) GetDaysOfWeek() []*QICoreLocation_HoursOfOperation_DaysOfWeekCode {
	if x != nil {
		return x.DaysOfWeek
	}
	return nil
}

func (x *QICoreLocation_HoursOfOperation) GetAllDay() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.AllDay
	}
	return nil
}

func (x *QICoreLocation_HoursOfOperation) GetOpeningTime() *datatypes_go_proto.Time {
	if x != nil {
		return x.OpeningTime
	}
	return nil
}

func (x *QICoreLocation_HoursOfOperation) GetClosingTime() *datatypes_go_proto.Time {
	if x != nil {
		return x.ClosingTime
	}
	return nil
}

// mon | tue | wed | thu | fri | sat | sun
type QICoreLocation_HoursOfOperation_DaysOfWeekCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.DaysOfWeekCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.DaysOfWeekCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension     `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreLocation_HoursOfOperation_DaysOfWeekCode) Reset() {
	*x = QICoreLocation_HoursOfOperation_DaysOfWeekCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreLocation_HoursOfOperation_DaysOfWeekCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreLocation_HoursOfOperation_DaysOfWeekCode) ProtoMessage() {}

func (x *QICoreLocation_HoursOfOperation_DaysOfWeekCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreLocation_HoursOfOperation_DaysOfWeekCode.ProtoReflect.Descriptor instead.
func (*QICoreLocation_HoursOfOperation_DaysOfWeekCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{25, 3, 0}
}

func (x *QICoreLocation_HoursOfOperation_DaysOfWeekCode) GetValue() codes_go_proto.DaysOfWeekCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.DaysOfWeekCode_INVALID_UNINITIALIZED
}

func (x *QICoreLocation_HoursOfOperation_DaysOfWeekCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreLocation_HoursOfOperation_DaysOfWeekCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// active | inactive | entered-in-error
type QICoreMedication_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.MedicationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.MedicationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension           `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreMedication_StatusCode) Reset() {
	*x = QICoreMedication_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedication_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedication_StatusCode) ProtoMessage() {}

func (x *QICoreMedication_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedication_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreMedication_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{26, 0}
}

func (x *QICoreMedication_StatusCode) GetValue() codes_go_proto.MedicationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.MedicationStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreMedication_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreMedication_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Active or inactive ingredient
type QICoreMedication_Ingredient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension    `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Item              *QICoreMedication_Ingredient_ItemX `protobuf:"bytes,4,opt,name=item,proto3" json:"item,omitempty"`
	// Active ingredient indicator
	IsActive *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// Quantity of ingredient present
	Strength *datatypes_go_proto.Ratio `protobuf:"bytes,6,opt,name=strength,proto3" json:"strength,omitempty"`
}

func (x *QICoreMedication_Ingredient) Reset() {
	*x = QICoreMedication_Ingredient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedication_Ingredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedication_Ingredient) ProtoMessage() {}

func (x *QICoreMedication_Ingredient) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedication_Ingredient.ProtoReflect.Descriptor instead.
func (*QICoreMedication_Ingredient) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{26, 1}
}

func (x *QICoreMedication_Ingredient) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreMedication_Ingredient) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreMedication_Ingredient) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreMedication_Ingredient) GetItem() *QICoreMedication_Ingredient_ItemX {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *QICoreMedication_Ingredient) GetIsActive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.IsActive
	}
	return nil
}

func (x *QICoreMedication_Ingredient) GetStrength() *datatypes_go_proto.Ratio {
	if x != nil {
		return x.Strength
	}
	return nil
}

// Details about packaged medications
type QICoreMedication_Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifier assigned to batch
	LotNumber *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=lot_number,json=lotNumber,proto3" json:"lot_number,omitempty"`
	// When batch will expire
	ExpirationDate *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
}

func (x *QICoreMedication_Batch) Reset() {
	*x = QICoreMedication_Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedication_Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedication_Batch) ProtoMessage() {}

func (x *QICoreMedication_Batch) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedication_Batch.ProtoReflect.Descriptor instead.
func (*QICoreMedication_Batch) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{26, 2}
}

func (x *QICoreMedication_Batch) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreMedication_Batch) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreMedication_Batch) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreMedication_Batch) GetLotNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.LotNumber
	}
	return nil
}

func (x *QICoreMedication_Batch) GetExpirationDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

// The actual ingredient or content
type QICoreMedication_Ingredient_ItemX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreMedication_Ingredient_ItemX_CodeableConcept
	//	*QICoreMedication_Ingredient_ItemX_Reference
	Choice isQICoreMedication_Ingredient_ItemX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreMedication_Ingredient_ItemX) Reset() {
	*x = QICoreMedication_Ingredient_ItemX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedication_Ingredient_ItemX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedication_Ingredient_ItemX) ProtoMessage() {}

func (x *QICoreMedication_Ingredient_ItemX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedication_Ingredient_ItemX.ProtoReflect.Descriptor instead.
func (*QICoreMedication_Ingredient_ItemX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{26, 1, 0}
}

func (m *QICoreMedication_Ingredient_ItemX) GetChoice() isQICoreMedication_Ingredient_ItemX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreMedication_Ingredient_ItemX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*QICoreMedication_Ingredient_ItemX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *QICoreMedication_Ingredient_ItemX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*QICoreMedication_Ingredient_ItemX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isQICoreMedication_Ingredient_ItemX_Choice interface {
	isQICoreMedication_Ingredient_ItemX_Choice()
}

type QICoreMedication_Ingredient_ItemX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type QICoreMedication_Ingredient_ItemX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*QICoreMedication_Ingredient_ItemX_CodeableConcept) isQICoreMedication_Ingredient_ItemX_Choice() {
}

func (*QICoreMedication_Ingredient_ItemX_Reference) isQICoreMedication_Ingredient_ItemX_Choice() {}

// in-progress | not-done | on-hold | completed | entered-in-error | stopped |
// unknown
type QICoreMedicationAdministration_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.MedicationAdministrationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.MedicationAdministrationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                         `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreMedicationAdministration_StatusCode) Reset() {
	*x = QICoreMedicationAdministration_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationAdministration_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationAdministration_StatusCode) ProtoMessage() {}

func (x *QICoreMedicationAdministration_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationAdministration_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreMedicationAdministration_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{27, 0}
}

func (x *QICoreMedicationAdministration_StatusCode) GetValue() codes_go_proto.MedicationAdministrationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.MedicationAdministrationStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreMedicationAdministration_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreMedicationAdministration_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// What was administered
type QICoreMedicationAdministration_MedicationX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreMedicationAdministration_MedicationX_CodeableConcept
	//	*QICoreMedicationAdministration_MedicationX_Reference
	Choice isQICoreMedicationAdministration_MedicationX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreMedicationAdministration_MedicationX) Reset() {
	*x = QICoreMedicationAdministration_MedicationX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationAdministration_MedicationX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationAdministration_MedicationX) ProtoMessage() {}

func (x *QICoreMedicationAdministration_MedicationX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationAdministration_MedicationX.ProtoReflect.Descriptor instead.
func (*QICoreMedicationAdministration_MedicationX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{27, 1}
}

func (m *QICoreMedicationAdministration_MedicationX) GetChoice() isQICoreMedicationAdministration_MedicationX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreMedicationAdministration_MedicationX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*QICoreMedicationAdministration_MedicationX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *QICoreMedicationAdministration_MedicationX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*QICoreMedicationAdministration_MedicationX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isQICoreMedicationAdministration_MedicationX_Choice interface {
	isQICoreMedicationAdministration_MedicationX_Choice()
}

type QICoreMedicationAdministration_MedicationX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type QICoreMedicationAdministration_MedicationX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*QICoreMedicationAdministration_MedicationX_CodeableConcept) isQICoreMedicationAdministration_MedicationX_Choice() {
}

func (*QICoreMedicationAdministration_MedicationX_Reference) isQICoreMedicationAdministration_MedicationX_Choice() {
}

// Start and end time of administration
type QICoreMedicationAdministration_EffectiveX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreMedicationAdministration_EffectiveX_DateTime
	//	*QICoreMedicationAdministration_EffectiveX_Period
	Choice isQICoreMedicationAdministration_EffectiveX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreMedicationAdministration_EffectiveX) Reset() {
	*x = QICoreMedicationAdministration_EffectiveX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationAdministration_EffectiveX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationAdministration_EffectiveX) ProtoMessage() {}

func (x *QICoreMedicationAdministration_EffectiveX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationAdministration_EffectiveX.ProtoReflect.Descriptor instead.
func (*QICoreMedicationAdministration_EffectiveX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{27, 2}
}

func (m *QICoreMedicationAdministration_EffectiveX) GetChoice() isQICoreMedicationAdministration_EffectiveX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreMedicationAdministration_EffectiveX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*QICoreMedicationAdministration_EffectiveX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *QICoreMedicationAdministration_EffectiveX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*QICoreMedicationAdministration_EffectiveX_Period); ok {
		return x.Period
	}
	return nil
}

type isQICoreMedicationAdministration_EffectiveX_Choice interface {
	isQICoreMedicationAdministration_EffectiveX_Choice()
}

type QICoreMedicationAdministration_EffectiveX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type QICoreMedicationAdministration_EffectiveX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*QICoreMedicationAdministration_EffectiveX_DateTime) isQICoreMedicationAdministration_EffectiveX_Choice() {
}

func (*QICoreMedicationAdministration_EffectiveX_Period) isQICoreMedicationAdministration_EffectiveX_Choice() {
}

// Who performed the medication administration and what they did
type QICoreMedicationAdministration_Performer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of performance
	Function *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=function,proto3" json:"function,omitempty"`
	// Who performed the medication administration
	Actor *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=actor,proto3" json:"actor,omitempty"`
}

func (x *QICoreMedicationAdministration_Performer) Reset() {
	*x = QICoreMedicationAdministration_Performer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationAdministration_Performer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationAdministration_Performer) ProtoMessage() {}

func (x *QICoreMedicationAdministration_Performer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationAdministration_Performer.ProtoReflect.Descriptor instead.
func (*QICoreMedicationAdministration_Performer) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{27, 3}
}

func (x *QICoreMedicationAdministration_Performer) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreMedicationAdministration_Performer) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreMedicationAdministration_Performer) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreMedicationAdministration_Performer) GetFunction() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *QICoreMedicationAdministration_Performer) GetActor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Actor
	}
	return nil
}

// Details of how medication was taken
type QICoreMedicationAdministration_Dosage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Free text dosage instructions e.g. SIG
	Text *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	// Body site administered to
	Site *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=site,proto3" json:"site,omitempty"`
	// Path of substance into body
	Route *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=route,proto3" json:"route,omitempty"`
	// How drug was administered
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=method,proto3" json:"method,omitempty"`
	// Amount of medication per dose
	Dose *datatypes_go_proto.SimpleQuantity           `protobuf:"bytes,8,opt,name=dose,proto3" json:"dose,omitempty"`
	Rate *QICoreMedicationAdministration_Dosage_RateX `protobuf:"bytes,9,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *QICoreMedicationAdministration_Dosage) Reset() {
	*x = QICoreMedicationAdministration_Dosage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationAdministration_Dosage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationAdministration_Dosage) ProtoMessage() {}

func (x *QICoreMedicationAdministration_Dosage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationAdministration_Dosage.ProtoReflect.Descriptor instead.
func (*QICoreMedicationAdministration_Dosage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{27, 4}
}

func (x *QICoreMedicationAdministration_Dosage) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreMedicationAdministration_Dosage) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreMedicationAdministration_Dosage) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreMedicationAdministration_Dosage) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QICoreMedicationAdministration_Dosage) GetSite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *QICoreMedicationAdministration_Dosage) GetRoute() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *QICoreMedicationAdministration_Dosage) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *QICoreMedicationAdministration_Dosage) GetDose() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Dose
	}
	return nil
}

func (x *QICoreMedicationAdministration_Dosage) GetRate() *QICoreMedicationAdministration_Dosage_RateX {
	if x != nil {
		return x.Rate
	}
	return nil
}

// Dose quantity per unit of time
type QICoreMedicationAdministration_Dosage_RateX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreMedicationAdministration_Dosage_RateX_Ratio
	//	*QICoreMedicationAdministration_Dosage_RateX_Quantity
	Choice isQICoreMedicationAdministration_Dosage_RateX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreMedicationAdministration_Dosage_RateX) Reset() {
	*x = QICoreMedicationAdministration_Dosage_RateX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationAdministration_Dosage_RateX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationAdministration_Dosage_RateX) ProtoMessage() {}

func (x *QICoreMedicationAdministration_Dosage_RateX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationAdministration_Dosage_RateX.ProtoReflect.Descriptor instead.
func (*QICoreMedicationAdministration_Dosage_RateX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{27, 4, 0}
}

func (m *QICoreMedicationAdministration_Dosage_RateX) GetChoice() isQICoreMedicationAdministration_Dosage_RateX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreMedicationAdministration_Dosage_RateX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*QICoreMedicationAdministration_Dosage_RateX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *QICoreMedicationAdministration_Dosage_RateX) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x, ok := x.GetChoice().(*QICoreMedicationAdministration_Dosage_RateX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isQICoreMedicationAdministration_Dosage_RateX_Choice interface {
	isQICoreMedicationAdministration_Dosage_RateX_Choice()
}

type QICoreMedicationAdministration_Dosage_RateX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,1,opt,name=ratio,proto3,oneof"`
}

type QICoreMedicationAdministration_Dosage_RateX_Quantity struct {
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,2,opt,name=quantity,proto3,oneof"`
}

func (*QICoreMedicationAdministration_Dosage_RateX_Ratio) isQICoreMedicationAdministration_Dosage_RateX_Choice() {
}

func (*QICoreMedicationAdministration_Dosage_RateX_Quantity) isQICoreMedicationAdministration_Dosage_RateX_Choice() {
}

// preparation | in-progress | cancelled | on-hold | completed |
// entered-in-error | stopped | unknown
type QICoreMedicationDispense_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.MedicationDispenseStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.MedicationDispenseStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreMedicationDispense_StatusCode) Reset() {
	*x = QICoreMedicationDispense_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationDispense_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationDispense_StatusCode) ProtoMessage() {}

func (x *QICoreMedicationDispense_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationDispense_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreMedicationDispense_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{28, 0}
}

func (x *QICoreMedicationDispense_StatusCode) GetValue() codes_go_proto.MedicationDispenseStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.MedicationDispenseStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreMedicationDispense_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreMedicationDispense_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Why a dispense was not performed
type QICoreMedicationDispense_StatusReasonX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreMedicationDispense_StatusReasonX_CodeableConcept
	//	*QICoreMedicationDispense_StatusReasonX_Reference
	Choice isQICoreMedicationDispense_StatusReasonX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreMedicationDispense_StatusReasonX) Reset() {
	*x = QICoreMedicationDispense_StatusReasonX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationDispense_StatusReasonX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationDispense_StatusReasonX) ProtoMessage() {}

func (x *QICoreMedicationDispense_StatusReasonX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationDispense_StatusReasonX.ProtoReflect.Descriptor instead.
func (*QICoreMedicationDispense_StatusReasonX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{28, 1}
}

func (m *QICoreMedicationDispense_StatusReasonX) GetChoice() isQICoreMedicationDispense_StatusReasonX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreMedicationDispense_StatusReasonX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*QICoreMedicationDispense_StatusReasonX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *QICoreMedicationDispense_StatusReasonX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*QICoreMedicationDispense_StatusReasonX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isQICoreMedicationDispense_StatusReasonX_Choice interface {
	isQICoreMedicationDispense_StatusReasonX_Choice()
}

type QICoreMedicationDispense_StatusReasonX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type QICoreMedicationDispense_StatusReasonX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*QICoreMedicationDispense_StatusReasonX_CodeableConcept) isQICoreMedicationDispense_StatusReasonX_Choice() {
}

func (*QICoreMedicationDispense_StatusReasonX_Reference) isQICoreMedicationDispense_StatusReasonX_Choice() {
}

// What medication was supplied
type QICoreMedicationDispense_MedicationX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreMedicationDispense_MedicationX_CodeableConcept
	//	*QICoreMedicationDispense_MedicationX_Reference
	Choice isQICoreMedicationDispense_MedicationX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreMedicationDispense_MedicationX) Reset() {
	*x = QICoreMedicationDispense_MedicationX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationDispense_MedicationX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationDispense_MedicationX) ProtoMessage() {}

func (x *QICoreMedicationDispense_MedicationX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationDispense_MedicationX.ProtoReflect.Descriptor instead.
func (*QICoreMedicationDispense_MedicationX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{28, 2}
}

func (m *QICoreMedicationDispense_MedicationX) GetChoice() isQICoreMedicationDispense_MedicationX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreMedicationDispense_MedicationX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*QICoreMedicationDispense_MedicationX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *QICoreMedicationDispense_MedicationX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*QICoreMedicationDispense_MedicationX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isQICoreMedicationDispense_MedicationX_Choice interface {
	isQICoreMedicationDispense_MedicationX_Choice()
}

type QICoreMedicationDispense_MedicationX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type QICoreMedicationDispense_MedicationX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*QICoreMedicationDispense_MedicationX_CodeableConcept) isQICoreMedicationDispense_MedicationX_Choice() {
}

func (*QICoreMedicationDispense_MedicationX_Reference) isQICoreMedicationDispense_MedicationX_Choice() {
}

// Who performed event
type QICoreMedicationDispense_Performer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Who performed the dispense and what they did
	Function *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=function,proto3" json:"function,omitempty"`
	// Individual who was performing
	Actor *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=actor,proto3" json:"actor,omitempty"`
}

func (x *QICoreMedicationDispense_Performer) Reset() {
	*x = QICoreMedicationDispense_Performer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationDispense_Performer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationDispense_Performer) ProtoMessage() {}

func (x *QICoreMedicationDispense_Performer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationDispense_Performer.ProtoReflect.Descriptor instead.
func (*QICoreMedicationDispense_Performer) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{28, 3}
}

func (x *QICoreMedicationDispense_Performer) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreMedicationDispense_Performer) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreMedicationDispense_Performer) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreMedicationDispense_Performer) GetFunction() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *QICoreMedicationDispense_Performer) GetActor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Actor
	}
	return nil
}

// Whether a substitution was performed on the dispense
type QICoreMedicationDispense_Substitution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Whether a substitution was or was not performed on the dispense
	WasSubstituted *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=was_substituted,json=wasSubstituted,proto3" json:"was_substituted,omitempty"`
	// Code signifying whether a different drug was dispensed from what was
	// prescribed
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// Why was substitution made
	Reason []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,rep,name=reason,proto3" json:"reason,omitempty"`
	// Who is responsible for the substitution
	ResponsibleParty []*datatypes_go_proto.Reference `protobuf:"bytes,7,rep,name=responsible_party,json=responsibleParty,proto3" json:"responsible_party,omitempty"`
}

func (x *QICoreMedicationDispense_Substitution) Reset() {
	*x = QICoreMedicationDispense_Substitution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationDispense_Substitution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationDispense_Substitution) ProtoMessage() {}

func (x *QICoreMedicationDispense_Substitution) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationDispense_Substitution.ProtoReflect.Descriptor instead.
func (*QICoreMedicationDispense_Substitution) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{28, 4}
}

func (x *QICoreMedicationDispense_Substitution) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreMedicationDispense_Substitution) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreMedicationDispense_Substitution) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreMedicationDispense_Substitution) GetWasSubstituted() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.WasSubstituted
	}
	return nil
}

func (x *QICoreMedicationDispense_Substitution) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreMedicationDispense_Substitution) GetReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *QICoreMedicationDispense_Substitution) GetResponsibleParty() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ResponsibleParty
	}
	return nil
}

// active | on-hold | cancelled | completed | entered-in-error | stopped |
// draft | unknown
type QICoreMedicationRequest_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.MedicationrequestStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.MedicationrequestStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreMedicationRequest_StatusCode) Reset() {
	*x = QICoreMedicationRequest_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationRequest_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationRequest_StatusCode) ProtoMessage() {}

func (x *QICoreMedicationRequest_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationRequest_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreMedicationRequest_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{29, 0}
}

func (x *QICoreMedicationRequest_StatusCode) GetValue() codes_go_proto.MedicationrequestStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.MedicationrequestStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreMedicationRequest_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreMedicationRequest_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// proposal | plan | order | original-order | instance-order | option
type QICoreMedicationRequest_IntentCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.MedicationRequestIntentCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.MedicationRequestIntentCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreMedicationRequest_IntentCode) Reset() {
	*x = QICoreMedicationRequest_IntentCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationRequest_IntentCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationRequest_IntentCode) ProtoMessage() {}

func (x *QICoreMedicationRequest_IntentCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationRequest_IntentCode.ProtoReflect.Descriptor instead.
func (*QICoreMedicationRequest_IntentCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{29, 1}
}

func (x *QICoreMedicationRequest_IntentCode) GetValue() codes_go_proto.MedicationRequestIntentCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.MedicationRequestIntentCode_INVALID_UNINITIALIZED
}

func (x *QICoreMedicationRequest_IntentCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreMedicationRequest_IntentCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// routine | urgent | asap | stat
type QICoreMedicationRequest_PriorityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.RequestPriorityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.RequestPriorityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension          `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreMedicationRequest_PriorityCode) Reset() {
	*x = QICoreMedicationRequest_PriorityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationRequest_PriorityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationRequest_PriorityCode) ProtoMessage() {}

func (x *QICoreMedicationRequest_PriorityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationRequest_PriorityCode.ProtoReflect.Descriptor instead.
func (*QICoreMedicationRequest_PriorityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{29, 2}
}

func (x *QICoreMedicationRequest_PriorityCode) GetValue() codes_go_proto.RequestPriorityCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.RequestPriorityCode_INVALID_UNINITIALIZED
}

func (x *QICoreMedicationRequest_PriorityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreMedicationRequest_PriorityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Reported rather than primary record
type QICoreMedicationRequest_ReportedX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreMedicationRequest_ReportedX_Boolean
	//	*QICoreMedicationRequest_ReportedX_Reference
	Choice isQICoreMedicationRequest_ReportedX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreMedicationRequest_ReportedX) Reset() {
	*x = QICoreMedicationRequest_ReportedX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationRequest_ReportedX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationRequest_ReportedX) ProtoMessage() {}

func (x *QICoreMedicationRequest_ReportedX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationRequest_ReportedX.ProtoReflect.Descriptor instead.
func (*QICoreMedicationRequest_ReportedX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{29, 3}
}

func (m *QICoreMedicationRequest_ReportedX) GetChoice() isQICoreMedicationRequest_ReportedX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreMedicationRequest_ReportedX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*QICoreMedicationRequest_ReportedX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *QICoreMedicationRequest_ReportedX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*QICoreMedicationRequest_ReportedX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isQICoreMedicationRequest_ReportedX_Choice interface {
	isQICoreMedicationRequest_ReportedX_Choice()
}

type QICoreMedicationRequest_ReportedX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type QICoreMedicationRequest_ReportedX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*QICoreMedicationRequest_ReportedX_Boolean) isQICoreMedicationRequest_ReportedX_Choice() {}

func (*QICoreMedicationRequest_ReportedX_Reference) isQICoreMedicationRequest_ReportedX_Choice() {}

// Medication to be taken
type QICoreMedicationRequest_MedicationX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreMedicationRequest_MedicationX_CodeableConcept
	//	*QICoreMedicationRequest_MedicationX_Reference
	Choice isQICoreMedicationRequest_MedicationX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreMedicationRequest_MedicationX) Reset() {
	*x = QICoreMedicationRequest_MedicationX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationRequest_MedicationX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationRequest_MedicationX) ProtoMessage() {}

func (x *QICoreMedicationRequest_MedicationX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationRequest_MedicationX.ProtoReflect.Descriptor instead.
func (*QICoreMedicationRequest_MedicationX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{29, 4}
}

func (m *QICoreMedicationRequest_MedicationX) GetChoice() isQICoreMedicationRequest_MedicationX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreMedicationRequest_MedicationX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*QICoreMedicationRequest_MedicationX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *QICoreMedicationRequest_MedicationX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*QICoreMedicationRequest_MedicationX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isQICoreMedicationRequest_MedicationX_Choice interface {
	isQICoreMedicationRequest_MedicationX_Choice()
}

type QICoreMedicationRequest_MedicationX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type QICoreMedicationRequest_MedicationX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*QICoreMedicationRequest_MedicationX_CodeableConcept) isQICoreMedicationRequest_MedicationX_Choice() {
}

func (*QICoreMedicationRequest_MedicationX_Reference) isQICoreMedicationRequest_MedicationX_Choice() {
}

// Medication supply authorization
type QICoreMedicationRequest_DispenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                      `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	InitialFill       *QICoreMedicationRequest_DispenseRequest_InitialFill `protobuf:"bytes,4,opt,name=initial_fill,json=initialFill,proto3" json:"initial_fill,omitempty"`
	// Minimum period of time between dispenses
	DispenseInterval *datatypes_go_proto.Duration `protobuf:"bytes,5,opt,name=dispense_interval,json=dispenseInterval,proto3" json:"dispense_interval,omitempty"`
	// Time period supply is authorized for
	ValidityPeriod *datatypes_go_proto.Period `protobuf:"bytes,6,opt,name=validity_period,json=validityPeriod,proto3" json:"validity_period,omitempty"`
	// Number of refills authorized
	NumberOfRepeatsAllowed *datatypes_go_proto.UnsignedInt `protobuf:"bytes,7,opt,name=number_of_repeats_allowed,json=numberOfRepeatsAllowed,proto3" json:"number_of_repeats_allowed,omitempty"`
	// Amount of medication to supply per dispense
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,8,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Number of days supply per dispense
	ExpectedSupplyDuration *datatypes_go_proto.Duration `protobuf:"bytes,9,opt,name=expected_supply_duration,json=expectedSupplyDuration,proto3" json:"expected_supply_duration,omitempty"`
	// Intended dispenser
	Performer *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=performer,proto3" json:"performer,omitempty"`
}

func (x *QICoreMedicationRequest_DispenseRequest) Reset() {
	*x = QICoreMedicationRequest_DispenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationRequest_DispenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationRequest_DispenseRequest) ProtoMessage() {}

func (x *QICoreMedicationRequest_DispenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationRequest_DispenseRequest.ProtoReflect.Descriptor instead.
func (*QICoreMedicationRequest_DispenseRequest) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{29, 5}
}

func (x *QICoreMedicationRequest_DispenseRequest) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreMedicationRequest_DispenseRequest) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreMedicationRequest_DispenseRequest) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreMedicationRequest_DispenseRequest) GetInitialFill() *QICoreMedicationRequest_DispenseRequest_InitialFill {
	if x != nil {
		return x.InitialFill
	}
	return nil
}

func (x *QICoreMedicationRequest_DispenseRequest) GetDispenseInterval() *datatypes_go_proto.Duration {
	if x != nil {
		return x.DispenseInterval
	}
	return nil
}

func (x *QICoreMedicationRequest_DispenseRequest) GetValidityPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.ValidityPeriod
	}
	return nil
}

func (x *QICoreMedicationRequest_DispenseRequest) GetNumberOfRepeatsAllowed() *datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.NumberOfRepeatsAllowed
	}
	return nil
}

func (x *QICoreMedicationRequest_DispenseRequest) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *QICoreMedicationRequest_DispenseRequest) GetExpectedSupplyDuration() *datatypes_go_proto.Duration {
	if x != nil {
		return x.ExpectedSupplyDuration
	}
	return nil
}

func (x *QICoreMedicationRequest_DispenseRequest) GetPerformer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

// Any restrictions on medication substitution
type QICoreMedicationRequest_Substitution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Allowed           *QICoreMedicationRequest_Substitution_AllowedX `protobuf:"bytes,4,opt,name=allowed,proto3" json:"allowed,omitempty"`
	// Why should (not) substitution be made
	Reason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *QICoreMedicationRequest_Substitution) Reset() {
	*x = QICoreMedicationRequest_Substitution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationRequest_Substitution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationRequest_Substitution) ProtoMessage() {}

func (x *QICoreMedicationRequest_Substitution) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationRequest_Substitution.ProtoReflect.Descriptor instead.
func (*QICoreMedicationRequest_Substitution) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{29, 6}
}

func (x *QICoreMedicationRequest_Substitution) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreMedicationRequest_Substitution) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreMedicationRequest_Substitution) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreMedicationRequest_Substitution) GetAllowed() *QICoreMedicationRequest_Substitution_AllowedX {
	if x != nil {
		return x.Allowed
	}
	return nil
}

func (x *QICoreMedicationRequest_Substitution) GetReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Reason
	}
	return nil
}

// First fill details
type QICoreMedicationRequest_DispenseRequest_InitialFill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// First fill quantity
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// First fill duration
	Duration *datatypes_go_proto.Duration `protobuf:"bytes,5,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *QICoreMedicationRequest_DispenseRequest_InitialFill) Reset() {
	*x = QICoreMedicationRequest_DispenseRequest_InitialFill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationRequest_DispenseRequest_InitialFill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationRequest_DispenseRequest_InitialFill) ProtoMessage() {}

func (x *QICoreMedicationRequest_DispenseRequest_InitialFill) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationRequest_DispenseRequest_InitialFill.ProtoReflect.Descriptor instead.
func (*QICoreMedicationRequest_DispenseRequest_InitialFill) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{29, 5, 0}
}

func (x *QICoreMedicationRequest_DispenseRequest_InitialFill) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreMedicationRequest_DispenseRequest_InitialFill) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreMedicationRequest_DispenseRequest_InitialFill) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreMedicationRequest_DispenseRequest_InitialFill) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *QICoreMedicationRequest_DispenseRequest_InitialFill) GetDuration() *datatypes_go_proto.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

// Whether substitution is allowed or not
type QICoreMedicationRequest_Substitution_AllowedX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreMedicationRequest_Substitution_AllowedX_Boolean
	//	*QICoreMedicationRequest_Substitution_AllowedX_CodeableConcept
	Choice isQICoreMedicationRequest_Substitution_AllowedX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreMedicationRequest_Substitution_AllowedX) Reset() {
	*x = QICoreMedicationRequest_Substitution_AllowedX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationRequest_Substitution_AllowedX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationRequest_Substitution_AllowedX) ProtoMessage() {}

func (x *QICoreMedicationRequest_Substitution_AllowedX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationRequest_Substitution_AllowedX.ProtoReflect.Descriptor instead.
func (*QICoreMedicationRequest_Substitution_AllowedX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{29, 6, 0}
}

func (m *QICoreMedicationRequest_Substitution_AllowedX) GetChoice() isQICoreMedicationRequest_Substitution_AllowedX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreMedicationRequest_Substitution_AllowedX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*QICoreMedicationRequest_Substitution_AllowedX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *QICoreMedicationRequest_Substitution_AllowedX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*QICoreMedicationRequest_Substitution_AllowedX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isQICoreMedicationRequest_Substitution_AllowedX_Choice interface {
	isQICoreMedicationRequest_Substitution_AllowedX_Choice()
}

type QICoreMedicationRequest_Substitution_AllowedX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type QICoreMedicationRequest_Substitution_AllowedX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*QICoreMedicationRequest_Substitution_AllowedX_Boolean) isQICoreMedicationRequest_Substitution_AllowedX_Choice() {
}

func (*QICoreMedicationRequest_Substitution_AllowedX_CodeableConcept) isQICoreMedicationRequest_Substitution_AllowedX_Choice() {
}

// active | completed | entered-in-error | intended | stopped | on-hold |
// unknown | not-taken
type QICoreMedicationStatement_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.MedicationStatementStatusCodes_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.MedicationStatementStatusCodes_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                     `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreMedicationStatement_StatusCode) Reset() {
	*x = QICoreMedicationStatement_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationStatement_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationStatement_StatusCode) ProtoMessage() {}

func (x *QICoreMedicationStatement_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationStatement_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreMedicationStatement_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{30, 0}
}

func (x *QICoreMedicationStatement_StatusCode) GetValue() codes_go_proto.MedicationStatementStatusCodes_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.MedicationStatementStatusCodes_INVALID_UNINITIALIZED
}

func (x *QICoreMedicationStatement_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreMedicationStatement_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// What medication was taken
type QICoreMedicationStatement_MedicationX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreMedicationStatement_MedicationX_CodeableConcept
	//	*QICoreMedicationStatement_MedicationX_Reference
	Choice isQICoreMedicationStatement_MedicationX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreMedicationStatement_MedicationX) Reset() {
	*x = QICoreMedicationStatement_MedicationX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationStatement_MedicationX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationStatement_MedicationX) ProtoMessage() {}

func (x *QICoreMedicationStatement_MedicationX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationStatement_MedicationX.ProtoReflect.Descriptor instead.
func (*QICoreMedicationStatement_MedicationX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{30, 1}
}

func (m *QICoreMedicationStatement_MedicationX) GetChoice() isQICoreMedicationStatement_MedicationX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreMedicationStatement_MedicationX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*QICoreMedicationStatement_MedicationX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *QICoreMedicationStatement_MedicationX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*QICoreMedicationStatement_MedicationX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isQICoreMedicationStatement_MedicationX_Choice interface {
	isQICoreMedicationStatement_MedicationX_Choice()
}

type QICoreMedicationStatement_MedicationX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type QICoreMedicationStatement_MedicationX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*QICoreMedicationStatement_MedicationX_CodeableConcept) isQICoreMedicationStatement_MedicationX_Choice() {
}

func (*QICoreMedicationStatement_MedicationX_Reference) isQICoreMedicationStatement_MedicationX_Choice() {
}

// The date/time or interval when the medication is/was/will be taken
type QICoreMedicationStatement_EffectiveX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreMedicationStatement_EffectiveX_DateTime
	//	*QICoreMedicationStatement_EffectiveX_Period
	Choice isQICoreMedicationStatement_EffectiveX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreMedicationStatement_EffectiveX) Reset() {
	*x = QICoreMedicationStatement_EffectiveX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreMedicationStatement_EffectiveX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreMedicationStatement_EffectiveX) ProtoMessage() {}

func (x *QICoreMedicationStatement_EffectiveX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreMedicationStatement_EffectiveX.ProtoReflect.Descriptor instead.
func (*QICoreMedicationStatement_EffectiveX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{30, 2}
}

func (m *QICoreMedicationStatement_EffectiveX) GetChoice() isQICoreMedicationStatement_EffectiveX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreMedicationStatement_EffectiveX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*QICoreMedicationStatement_EffectiveX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *QICoreMedicationStatement_EffectiveX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*QICoreMedicationStatement_EffectiveX_Period); ok {
		return x.Period
	}
	return nil
}

type isQICoreMedicationStatement_EffectiveX_Choice interface {
	isQICoreMedicationStatement_EffectiveX_Choice()
}

type QICoreMedicationStatement_EffectiveX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type QICoreMedicationStatement_EffectiveX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*QICoreMedicationStatement_EffectiveX_DateTime) isQICoreMedicationStatement_EffectiveX_Choice() {
}

func (*QICoreMedicationStatement_EffectiveX_Period) isQICoreMedicationStatement_EffectiveX_Choice() {}

// proposed | draft | planned | requested | active | on-hold | completed |
// cancelled | entered-in-error
type QICoreNutritionOrder_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.RequestStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.RequestStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension        `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreNutritionOrder_StatusCode) Reset() {
	*x = QICoreNutritionOrder_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreNutritionOrder_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreNutritionOrder_StatusCode) ProtoMessage() {}

func (x *QICoreNutritionOrder_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreNutritionOrder_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreNutritionOrder_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{32, 0}
}

func (x *QICoreNutritionOrder_StatusCode) GetValue() codes_go_proto.RequestStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.RequestStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreNutritionOrder_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreNutritionOrder_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// proposal | plan | order
type QICoreNutritionOrder_IntentCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.RequestIntentCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.RequestIntentCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension        `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreNutritionOrder_IntentCode) Reset() {
	*x = QICoreNutritionOrder_IntentCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreNutritionOrder_IntentCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreNutritionOrder_IntentCode) ProtoMessage() {}

func (x *QICoreNutritionOrder_IntentCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreNutritionOrder_IntentCode.ProtoReflect.Descriptor instead.
func (*QICoreNutritionOrder_IntentCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{32, 1}
}

func (x *QICoreNutritionOrder_IntentCode) GetValue() codes_go_proto.RequestIntentCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.RequestIntentCode_INVALID_UNINITIALIZED
}

func (x *QICoreNutritionOrder_IntentCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreNutritionOrder_IntentCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Oral diet components
type QICoreNutritionOrder_OralDiet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of oral diet or diet restrictions that describe what can be consumed
	// orally
	Type []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,rep,name=type,proto3" json:"type,omitempty"`
	// Scheduled frequency of diet
	Schedule []*datatypes_go_proto.Timing              `protobuf:"bytes,5,rep,name=schedule,proto3" json:"schedule,omitempty"`
	Nutrient []*QICoreNutritionOrder_OralDiet_Nutrient `protobuf:"bytes,6,rep,name=nutrient,proto3" json:"nutrient,omitempty"`
	Texture  []*QICoreNutritionOrder_OralDiet_Texture  `protobuf:"bytes,7,rep,name=texture,proto3" json:"texture,omitempty"`
	// The required consistency of fluids and liquids provided to the patient
	FluidConsistencyType []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,rep,name=fluid_consistency_type,json=fluidConsistencyType,proto3" json:"fluid_consistency_type,omitempty"`
	// Instructions or additional information about the oral diet
	Instruction *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=instruction,proto3" json:"instruction,omitempty"`
}

func (x *QICoreNutritionOrder_OralDiet) Reset() {
	*x = QICoreNutritionOrder_OralDiet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreNutritionOrder_OralDiet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreNutritionOrder_OralDiet) ProtoMessage() {}

func (x *QICoreNutritionOrder_OralDiet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreNutritionOrder_OralDiet.ProtoReflect.Descriptor instead.
func (*QICoreNutritionOrder_OralDiet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{32, 2}
}

func (x *QICoreNutritionOrder_OralDiet) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreNutritionOrder_OralDiet) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreNutritionOrder_OralDiet) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreNutritionOrder_OralDiet) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreNutritionOrder_OralDiet) GetSchedule() []*datatypes_go_proto.Timing {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *QICoreNutritionOrder_OralDiet) GetNutrient() []*QICoreNutritionOrder_OralDiet_Nutrient {
	if x != nil {
		return x.Nutrient
	}
	return nil
}

func (x *QICoreNutritionOrder_OralDiet) GetTexture() []*QICoreNutritionOrder_OralDiet_Texture {
	if x != nil {
		return x.Texture
	}
	return nil
}

func (x *QICoreNutritionOrder_OralDiet) GetFluidConsistencyType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.FluidConsistencyType
	}
	return nil
}

func (x *QICoreNutritionOrder_OralDiet) GetInstruction() *datatypes_go_proto.String {
	if x != nil {
		return x.Instruction
	}
	return nil
}

// Supplement components
type QICoreNutritionOrder_Supplement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of supplement product requested
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Product or brand name of the nutritional supplement
	ProductName *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	// Scheduled frequency of supplement
	Schedule []*datatypes_go_proto.Timing `protobuf:"bytes,6,rep,name=schedule,proto3" json:"schedule,omitempty"`
	// Amount of the nutritional supplement
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Instructions or additional information about the oral supplement
	Instruction *datatypes_go_proto.String `protobuf:"bytes,8,opt,name=instruction,proto3" json:"instruction,omitempty"`
}

func (x *QICoreNutritionOrder_Supplement) Reset() {
	*x = QICoreNutritionOrder_Supplement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreNutritionOrder_Supplement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreNutritionOrder_Supplement) ProtoMessage() {}

func (x *QICoreNutritionOrder_Supplement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreNutritionOrder_Supplement.ProtoReflect.Descriptor instead.
func (*QICoreNutritionOrder_Supplement) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{32, 3}
}

func (x *QICoreNutritionOrder_Supplement) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreNutritionOrder_Supplement) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreNutritionOrder_Supplement) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreNutritionOrder_Supplement) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreNutritionOrder_Supplement) GetProductName() *datatypes_go_proto.String {
	if x != nil {
		return x.ProductName
	}
	return nil
}

func (x *QICoreNutritionOrder_Supplement) GetSchedule() []*datatypes_go_proto.Timing {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *QICoreNutritionOrder_Supplement) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *QICoreNutritionOrder_Supplement) GetInstruction() *datatypes_go_proto.String {
	if x != nil {
		return x.Instruction
	}
	return nil
}

// Enteral formula components
type QICoreNutritionOrder_EnteralFormula struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of enteral or infant formula
	BaseFormulaType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=base_formula_type,json=baseFormulaType,proto3" json:"base_formula_type,omitempty"`
	// Product or brand name of the enteral or infant formula
	BaseFormulaProductName *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=base_formula_product_name,json=baseFormulaProductName,proto3" json:"base_formula_product_name,omitempty"`
	// Type of modular component to add to the feeding
	AdditiveType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=additive_type,json=additiveType,proto3" json:"additive_type,omitempty"`
	// Product or brand name of the modular additive
	AdditiveProductName *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=additive_product_name,json=additiveProductName,proto3" json:"additive_product_name,omitempty"`
	// Amount of energy per specified volume that is required
	CaloricDensity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,8,opt,name=caloric_density,json=caloricDensity,proto3" json:"caloric_density,omitempty"`
	// How the formula should enter the patient's gastrointestinal tract
	RouteofAdministration *datatypes_go_proto.CodeableConcept                   `protobuf:"bytes,9,opt,name=routeof_administration,json=routeofAdministration,proto3" json:"routeof_administration,omitempty"`
	Administration        []*QICoreNutritionOrder_EnteralFormula_Administration `protobuf:"bytes,10,rep,name=administration,proto3" json:"administration,omitempty"`
	// Upper limit on formula volume per unit of time
	MaxVolumeToDeliver *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,11,opt,name=max_volume_to_deliver,json=maxVolumeToDeliver,proto3" json:"max_volume_to_deliver,omitempty"`
	// Formula feeding instructions expressed as text
	AdministrationInstruction *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=administration_instruction,json=administrationInstruction,proto3" json:"administration_instruction,omitempty"`
}

func (x *QICoreNutritionOrder_EnteralFormula) Reset() {
	*x = QICoreNutritionOrder_EnteralFormula{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreNutritionOrder_EnteralFormula) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreNutritionOrder_EnteralFormula) ProtoMessage() {}

func (x *QICoreNutritionOrder_EnteralFormula) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreNutritionOrder_EnteralFormula.ProtoReflect.Descriptor instead.
func (*QICoreNutritionOrder_EnteralFormula) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{32, 4}
}

func (x *QICoreNutritionOrder_EnteralFormula) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreNutritionOrder_EnteralFormula) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreNutritionOrder_EnteralFormula) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreNutritionOrder_EnteralFormula) GetBaseFormulaType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BaseFormulaType
	}
	return nil
}

func (x *QICoreNutritionOrder_EnteralFormula) GetBaseFormulaProductName() *datatypes_go_proto.String {
	if x != nil {
		return x.BaseFormulaProductName
	}
	return nil
}

func (x *QICoreNutritionOrder_EnteralFormula) GetAdditiveType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AdditiveType
	}
	return nil
}

func (x *QICoreNutritionOrder_EnteralFormula) GetAdditiveProductName() *datatypes_go_proto.String {
	if x != nil {
		return x.AdditiveProductName
	}
	return nil
}

func (x *QICoreNutritionOrder_EnteralFormula) GetCaloricDensity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.CaloricDensity
	}
	return nil
}

func (x *QICoreNutritionOrder_EnteralFormula) GetRouteofAdministration() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.RouteofAdministration
	}
	return nil
}

func (x *QICoreNutritionOrder_EnteralFormula) GetAdministration() []*QICoreNutritionOrder_EnteralFormula_Administration {
	if x != nil {
		return x.Administration
	}
	return nil
}

func (x *QICoreNutritionOrder_EnteralFormula) GetMaxVolumeToDeliver() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.MaxVolumeToDeliver
	}
	return nil
}

func (x *QICoreNutritionOrder_EnteralFormula) GetAdministrationInstruction() *datatypes_go_proto.String {
	if x != nil {
		return x.AdministrationInstruction
	}
	return nil
}

// Required  nutrient modifications
type QICoreNutritionOrder_OralDiet_Nutrient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of nutrient that is being modified
	Modifier *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=modifier,proto3" json:"modifier,omitempty"`
	// Quantity of the specified nutrient
	Amount *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *QICoreNutritionOrder_OralDiet_Nutrient) Reset() {
	*x = QICoreNutritionOrder_OralDiet_Nutrient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreNutritionOrder_OralDiet_Nutrient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreNutritionOrder_OralDiet_Nutrient) ProtoMessage() {}

func (x *QICoreNutritionOrder_OralDiet_Nutrient) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreNutritionOrder_OralDiet_Nutrient.ProtoReflect.Descriptor instead.
func (*QICoreNutritionOrder_OralDiet_Nutrient) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{32, 2, 0}
}

func (x *QICoreNutritionOrder_OralDiet_Nutrient) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreNutritionOrder_OralDiet_Nutrient) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreNutritionOrder_OralDiet_Nutrient) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreNutritionOrder_OralDiet_Nutrient) GetModifier() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Modifier
	}
	return nil
}

func (x *QICoreNutritionOrder_OralDiet_Nutrient) GetAmount() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Amount
	}
	return nil
}

// Required  texture modifications
type QICoreNutritionOrder_OralDiet_Texture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Code to indicate how to alter the texture of the foods, e.g. pureed
	Modifier *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=modifier,proto3" json:"modifier,omitempty"`
	// Concepts that are used to identify an entity that is ingested for
	// nutritional purposes
	FoodType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=food_type,json=foodType,proto3" json:"food_type,omitempty"`
}

func (x *QICoreNutritionOrder_OralDiet_Texture) Reset() {
	*x = QICoreNutritionOrder_OralDiet_Texture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreNutritionOrder_OralDiet_Texture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreNutritionOrder_OralDiet_Texture) ProtoMessage() {}

func (x *QICoreNutritionOrder_OralDiet_Texture) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreNutritionOrder_OralDiet_Texture.ProtoReflect.Descriptor instead.
func (*QICoreNutritionOrder_OralDiet_Texture) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{32, 2, 1}
}

func (x *QICoreNutritionOrder_OralDiet_Texture) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreNutritionOrder_OralDiet_Texture) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreNutritionOrder_OralDiet_Texture) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreNutritionOrder_OralDiet_Texture) GetModifier() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Modifier
	}
	return nil
}

func (x *QICoreNutritionOrder_OralDiet_Texture) GetFoodType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.FoodType
	}
	return nil
}

// Formula feeding instruction as structured data
type QICoreNutritionOrder_EnteralFormula_Administration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Scheduled frequency of enteral feeding
	Schedule *datatypes_go_proto.Timing `protobuf:"bytes,4,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// The volume of formula to provide
	Quantity *datatypes_go_proto.SimpleQuantity                        `protobuf:"bytes,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Rate     *QICoreNutritionOrder_EnteralFormula_Administration_RateX `protobuf:"bytes,6,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *QICoreNutritionOrder_EnteralFormula_Administration) Reset() {
	*x = QICoreNutritionOrder_EnteralFormula_Administration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreNutritionOrder_EnteralFormula_Administration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreNutritionOrder_EnteralFormula_Administration) ProtoMessage() {}

func (x *QICoreNutritionOrder_EnteralFormula_Administration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreNutritionOrder_EnteralFormula_Administration.ProtoReflect.Descriptor instead.
func (*QICoreNutritionOrder_EnteralFormula_Administration) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{32, 4, 0}
}

func (x *QICoreNutritionOrder_EnteralFormula_Administration) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreNutritionOrder_EnteralFormula_Administration) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreNutritionOrder_EnteralFormula_Administration) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreNutritionOrder_EnteralFormula_Administration) GetSchedule() *datatypes_go_proto.Timing {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *QICoreNutritionOrder_EnteralFormula_Administration) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *QICoreNutritionOrder_EnteralFormula_Administration) GetRate() *QICoreNutritionOrder_EnteralFormula_Administration_RateX {
	if x != nil {
		return x.Rate
	}
	return nil
}

// Speed with which the formula is provided per period of time
type QICoreNutritionOrder_EnteralFormula_Administration_RateX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreNutritionOrder_EnteralFormula_Administration_RateX_Quantity
	//	*QICoreNutritionOrder_EnteralFormula_Administration_RateX_Ratio
	Choice isQICoreNutritionOrder_EnteralFormula_Administration_RateX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreNutritionOrder_EnteralFormula_Administration_RateX) Reset() {
	*x = QICoreNutritionOrder_EnteralFormula_Administration_RateX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreNutritionOrder_EnteralFormula_Administration_RateX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreNutritionOrder_EnteralFormula_Administration_RateX) ProtoMessage() {}

func (x *QICoreNutritionOrder_EnteralFormula_Administration_RateX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreNutritionOrder_EnteralFormula_Administration_RateX.ProtoReflect.Descriptor instead.
func (*QICoreNutritionOrder_EnteralFormula_Administration_RateX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{32, 4, 0, 0}
}

func (m *QICoreNutritionOrder_EnteralFormula_Administration_RateX) GetChoice() isQICoreNutritionOrder_EnteralFormula_Administration_RateX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreNutritionOrder_EnteralFormula_Administration_RateX) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x, ok := x.GetChoice().(*QICoreNutritionOrder_EnteralFormula_Administration_RateX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *QICoreNutritionOrder_EnteralFormula_Administration_RateX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*QICoreNutritionOrder_EnteralFormula_Administration_RateX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

type isQICoreNutritionOrder_EnteralFormula_Administration_RateX_Choice interface {
	isQICoreNutritionOrder_EnteralFormula_Administration_RateX_Choice()
}

type QICoreNutritionOrder_EnteralFormula_Administration_RateX_Quantity struct {
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type QICoreNutritionOrder_EnteralFormula_Administration_RateX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,2,opt,name=ratio,proto3,oneof"`
}

func (*QICoreNutritionOrder_EnteralFormula_Administration_RateX_Quantity) isQICoreNutritionOrder_EnteralFormula_Administration_RateX_Choice() {
}

func (*QICoreNutritionOrder_EnteralFormula_Administration_RateX_Ratio) isQICoreNutritionOrder_EnteralFormula_Administration_RateX_Choice() {
}

// registered | preliminary | final | amended +
type QICoreObservation_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ObservationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.ObservationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension            `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreObservation_StatusCode) Reset() {
	*x = QICoreObservation_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreObservation_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreObservation_StatusCode) ProtoMessage() {}

func (x *QICoreObservation_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreObservation_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreObservation_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{33, 0}
}

func (x *QICoreObservation_StatusCode) GetValue() codes_go_proto.ObservationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ObservationStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreObservation_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreObservation_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Clinically relevant time/time-period for observation
type QICoreObservation_EffectiveX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreObservation_EffectiveX_DateTime
	//	*QICoreObservation_EffectiveX_Period
	//	*QICoreObservation_EffectiveX_Timing
	//	*QICoreObservation_EffectiveX_Instant
	Choice isQICoreObservation_EffectiveX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreObservation_EffectiveX) Reset() {
	*x = QICoreObservation_EffectiveX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreObservation_EffectiveX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreObservation_EffectiveX) ProtoMessage() {}

func (x *QICoreObservation_EffectiveX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreObservation_EffectiveX.ProtoReflect.Descriptor instead.
func (*QICoreObservation_EffectiveX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{33, 1}
}

func (m *QICoreObservation_EffectiveX) GetChoice() isQICoreObservation_EffectiveX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreObservation_EffectiveX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*QICoreObservation_EffectiveX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *QICoreObservation_EffectiveX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*QICoreObservation_EffectiveX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *QICoreObservation_EffectiveX) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetChoice().(*QICoreObservation_EffectiveX_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *QICoreObservation_EffectiveX) GetInstant() *datatypes_go_proto.Instant {
	if x, ok := x.GetChoice().(*QICoreObservation_EffectiveX_Instant); ok {
		return x.Instant
	}
	return nil
}

type isQICoreObservation_EffectiveX_Choice interface {
	isQICoreObservation_EffectiveX_Choice()
}

type QICoreObservation_EffectiveX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type QICoreObservation_EffectiveX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

type QICoreObservation_EffectiveX_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,3,opt,name=timing,proto3,oneof"`
}

type QICoreObservation_EffectiveX_Instant struct {
	Instant *datatypes_go_proto.Instant `protobuf:"bytes,4,opt,name=instant,proto3,oneof"`
}

func (*QICoreObservation_EffectiveX_DateTime) isQICoreObservation_EffectiveX_Choice() {}

func (*QICoreObservation_EffectiveX_Period) isQICoreObservation_EffectiveX_Choice() {}

func (*QICoreObservation_EffectiveX_Timing) isQICoreObservation_EffectiveX_Choice() {}

func (*QICoreObservation_EffectiveX_Instant) isQICoreObservation_EffectiveX_Choice() {}

// Actual result
type QICoreObservation_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreObservation_ValueX_Quantity
	//	*QICoreObservation_ValueX_CodeableConcept
	//	*QICoreObservation_ValueX_StringValue
	//	*QICoreObservation_ValueX_Boolean
	//	*QICoreObservation_ValueX_Integer
	//	*QICoreObservation_ValueX_Range
	//	*QICoreObservation_ValueX_Ratio
	//	*QICoreObservation_ValueX_SampledData
	//	*QICoreObservation_ValueX_Time
	//	*QICoreObservation_ValueX_DateTime
	//	*QICoreObservation_ValueX_Period
	Choice isQICoreObservation_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreObservation_ValueX) Reset() {
	*x = QICoreObservation_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreObservation_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreObservation_ValueX) ProtoMessage() {}

func (x *QICoreObservation_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreObservation_ValueX.ProtoReflect.Descriptor instead.
func (*QICoreObservation_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{33, 2}
}

func (m *QICoreObservation_ValueX) GetChoice() isQICoreObservation_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreObservation_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*QICoreObservation_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *QICoreObservation_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*QICoreObservation_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *QICoreObservation_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*QICoreObservation_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *QICoreObservation_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*QICoreObservation_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *QICoreObservation_ValueX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*QICoreObservation_ValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *QICoreObservation_ValueX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*QICoreObservation_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *QICoreObservation_ValueX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*QICoreObservation_ValueX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *QICoreObservation_ValueX) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetChoice().(*QICoreObservation_ValueX_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *QICoreObservation_ValueX) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetChoice().(*QICoreObservation_ValueX_Time); ok {
		return x.Time
	}
	return nil
}

func (x *QICoreObservation_ValueX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*QICoreObservation_ValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *QICoreObservation_ValueX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*QICoreObservation_ValueX_Period); ok {
		return x.Period
	}
	return nil
}

type isQICoreObservation_ValueX_Choice interface {
	isQICoreObservation_ValueX_Choice()
}

type QICoreObservation_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type QICoreObservation_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type QICoreObservation_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type QICoreObservation_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=boolean,proto3,oneof"`
}

type QICoreObservation_ValueX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,5,opt,name=integer,proto3,oneof"`
}

type QICoreObservation_ValueX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,6,opt,name=range,proto3,oneof"`
}

type QICoreObservation_ValueX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,7,opt,name=ratio,proto3,oneof"`
}

type QICoreObservation_ValueX_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,8,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type QICoreObservation_ValueX_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,9,opt,name=time,proto3,oneof"`
}

type QICoreObservation_ValueX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,10,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type QICoreObservation_ValueX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,11,opt,name=period,proto3,oneof"`
}

func (*QICoreObservation_ValueX_Quantity) isQICoreObservation_ValueX_Choice() {}

func (*QICoreObservation_ValueX_CodeableConcept) isQICoreObservation_ValueX_Choice() {}

func (*QICoreObservation_ValueX_StringValue) isQICoreObservation_ValueX_Choice() {}

func (*QICoreObservation_ValueX_Boolean) isQICoreObservation_ValueX_Choice() {}

func (*QICoreObservation_ValueX_Integer) isQICoreObservation_ValueX_Choice() {}

func (*QICoreObservation_ValueX_Range) isQICoreObservation_ValueX_Choice() {}

func (*QICoreObservation_ValueX_Ratio) isQICoreObservation_ValueX_Choice() {}

func (*QICoreObservation_ValueX_SampledData) isQICoreObservation_ValueX_Choice() {}

func (*QICoreObservation_ValueX_Time) isQICoreObservation_ValueX_Choice() {}

func (*QICoreObservation_ValueX_DateTime) isQICoreObservation_ValueX_Choice() {}

func (*QICoreObservation_ValueX_Period) isQICoreObservation_ValueX_Choice() {}

// Provides guide for interpretation
type QICoreObservation_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Low Range, if relevant
	Low *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// High Range, if relevant
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Reference range qualifier
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Reference range population
	AppliesTo []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
	// Applicable age range, if relevant
	Age *datatypes_go_proto.Range `protobuf:"bytes,8,opt,name=age,proto3" json:"age,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *QICoreObservation_ReferenceRange) Reset() {
	*x = QICoreObservation_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreObservation_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreObservation_ReferenceRange) ProtoMessage() {}

func (x *QICoreObservation_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreObservation_ReferenceRange.ProtoReflect.Descriptor instead.
func (*QICoreObservation_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{33, 3}
}

func (x *QICoreObservation_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreObservation_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreObservation_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreObservation_ReferenceRange) GetLow() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *QICoreObservation_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *QICoreObservation_ReferenceRange) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreObservation_ReferenceRange) GetAppliesTo() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AppliesTo
	}
	return nil
}

func (x *QICoreObservation_ReferenceRange) GetAge() *datatypes_go_proto.Range {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *QICoreObservation_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Component results
type QICoreObservation_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *QICoreObservation_Component_ValueX `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*QICoreObservation_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *QICoreObservation_Component) Reset() {
	*x = QICoreObservation_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreObservation_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreObservation_Component) ProtoMessage() {}

func (x *QICoreObservation_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreObservation_Component.ProtoReflect.Descriptor instead.
func (*QICoreObservation_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{33, 4}
}

func (x *QICoreObservation_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreObservation_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreObservation_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreObservation_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *QICoreObservation_Component) GetValue() *QICoreObservation_Component_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *QICoreObservation_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *QICoreObservation_Component) GetInterpretation() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *QICoreObservation_Component) GetReferenceRange() []*QICoreObservation_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Actual component result
type QICoreObservation_Component_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreObservation_Component_ValueX_Quantity
	//	*QICoreObservation_Component_ValueX_CodeableConcept
	//	*QICoreObservation_Component_ValueX_StringValue
	//	*QICoreObservation_Component_ValueX_Boolean
	//	*QICoreObservation_Component_ValueX_Integer
	//	*QICoreObservation_Component_ValueX_Range
	//	*QICoreObservation_Component_ValueX_Ratio
	//	*QICoreObservation_Component_ValueX_SampledData
	//	*QICoreObservation_Component_ValueX_Time
	//	*QICoreObservation_Component_ValueX_DateTime
	//	*QICoreObservation_Component_ValueX_Period
	Choice isQICoreObservation_Component_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreObservation_Component_ValueX) Reset() {
	*x = QICoreObservation_Component_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreObservation_Component_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreObservation_Component_ValueX) ProtoMessage() {}

func (x *QICoreObservation_Component_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreObservation_Component_ValueX.ProtoReflect.Descriptor instead.
func (*QICoreObservation_Component_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{33, 4, 0}
}

func (m *QICoreObservation_Component_ValueX) GetChoice() isQICoreObservation_Component_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreObservation_Component_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*QICoreObservation_Component_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *QICoreObservation_Component_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*QICoreObservation_Component_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *QICoreObservation_Component_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*QICoreObservation_Component_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *QICoreObservation_Component_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*QICoreObservation_Component_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *QICoreObservation_Component_ValueX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*QICoreObservation_Component_ValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *QICoreObservation_Component_ValueX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*QICoreObservation_Component_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *QICoreObservation_Component_ValueX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*QICoreObservation_Component_ValueX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *QICoreObservation_Component_ValueX) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetChoice().(*QICoreObservation_Component_ValueX_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *QICoreObservation_Component_ValueX) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetChoice().(*QICoreObservation_Component_ValueX_Time); ok {
		return x.Time
	}
	return nil
}

func (x *QICoreObservation_Component_ValueX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*QICoreObservation_Component_ValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *QICoreObservation_Component_ValueX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*QICoreObservation_Component_ValueX_Period); ok {
		return x.Period
	}
	return nil
}

type isQICoreObservation_Component_ValueX_Choice interface {
	isQICoreObservation_Component_ValueX_Choice()
}

type QICoreObservation_Component_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type QICoreObservation_Component_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type QICoreObservation_Component_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type QICoreObservation_Component_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=boolean,proto3,oneof"`
}

type QICoreObservation_Component_ValueX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,5,opt,name=integer,proto3,oneof"`
}

type QICoreObservation_Component_ValueX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,6,opt,name=range,proto3,oneof"`
}

type QICoreObservation_Component_ValueX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,7,opt,name=ratio,proto3,oneof"`
}

type QICoreObservation_Component_ValueX_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,8,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type QICoreObservation_Component_ValueX_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,9,opt,name=time,proto3,oneof"`
}

type QICoreObservation_Component_ValueX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,10,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type QICoreObservation_Component_ValueX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,11,opt,name=period,proto3,oneof"`
}

func (*QICoreObservation_Component_ValueX_Quantity) isQICoreObservation_Component_ValueX_Choice() {}

func (*QICoreObservation_Component_ValueX_CodeableConcept) isQICoreObservation_Component_ValueX_Choice() {
}

func (*QICoreObservation_Component_ValueX_StringValue) isQICoreObservation_Component_ValueX_Choice() {
}

func (*QICoreObservation_Component_ValueX_Boolean) isQICoreObservation_Component_ValueX_Choice() {}

func (*QICoreObservation_Component_ValueX_Integer) isQICoreObservation_Component_ValueX_Choice() {}

func (*QICoreObservation_Component_ValueX_Range) isQICoreObservation_Component_ValueX_Choice() {}

func (*QICoreObservation_Component_ValueX_Ratio) isQICoreObservation_Component_ValueX_Choice() {}

func (*QICoreObservation_Component_ValueX_SampledData) isQICoreObservation_Component_ValueX_Choice() {
}

func (*QICoreObservation_Component_ValueX_Time) isQICoreObservation_Component_ValueX_Choice() {}

func (*QICoreObservation_Component_ValueX_DateTime) isQICoreObservation_Component_ValueX_Choice() {}

func (*QICoreObservation_Component_ValueX_Period) isQICoreObservation_Component_ValueX_Choice() {}

// Contact for the organization for a certain purpose
type QICoreOrganization_Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The type of contact
	Purpose *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=purpose,proto3" json:"purpose,omitempty"`
	// A name associated with the contact
	Name *datatypes_go_proto.HumanName `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Contact details (telephone, email, etc.)  for a contact
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,6,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// Visiting or postal addresses for the contact
	Address *datatypes_go_proto.Address `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *QICoreOrganization_Contact) Reset() {
	*x = QICoreOrganization_Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreOrganization_Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreOrganization_Contact) ProtoMessage() {}

func (x *QICoreOrganization_Contact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreOrganization_Contact.ProtoReflect.Descriptor instead.
func (*QICoreOrganization_Contact) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{34, 0}
}

func (x *QICoreOrganization_Contact) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreOrganization_Contact) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreOrganization_Contact) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreOrganization_Contact) GetPurpose() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Purpose
	}
	return nil
}

func (x *QICoreOrganization_Contact) GetName() *datatypes_go_proto.HumanName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *QICoreOrganization_Contact) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *QICoreOrganization_Contact) GetAddress() *datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

// male | female | other | unknown
type QICorePatient_GenderCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AdministrativeGenderCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.AdministrativeGenderCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension               `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICorePatient_GenderCode) Reset() {
	*x = QICorePatient_GenderCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICorePatient_GenderCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICorePatient_GenderCode) ProtoMessage() {}

func (x *QICorePatient_GenderCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICorePatient_GenderCode.ProtoReflect.Descriptor instead.
func (*QICorePatient_GenderCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{35, 0}
}

func (x *QICorePatient_GenderCode) GetValue() codes_go_proto.AdministrativeGenderCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AdministrativeGenderCode_INVALID_UNINITIALIZED
}

func (x *QICorePatient_GenderCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICorePatient_GenderCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Indicates if the individual is deceased or not
type QICorePatient_DeceasedX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICorePatient_DeceasedX_Boolean
	//	*QICorePatient_DeceasedX_DateTime
	Choice isQICorePatient_DeceasedX_Choice `protobuf_oneof:"choice"`
}

func (x *QICorePatient_DeceasedX) Reset() {
	*x = QICorePatient_DeceasedX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICorePatient_DeceasedX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICorePatient_DeceasedX) ProtoMessage() {}

func (x *QICorePatient_DeceasedX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICorePatient_DeceasedX.ProtoReflect.Descriptor instead.
func (*QICorePatient_DeceasedX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{35, 1}
}

func (m *QICorePatient_DeceasedX) GetChoice() isQICorePatient_DeceasedX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICorePatient_DeceasedX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*QICorePatient_DeceasedX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *QICorePatient_DeceasedX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*QICorePatient_DeceasedX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

type isQICorePatient_DeceasedX_Choice interface {
	isQICorePatient_DeceasedX_Choice()
}

type QICorePatient_DeceasedX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type QICorePatient_DeceasedX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3,oneof"`
}

func (*QICorePatient_DeceasedX_Boolean) isQICorePatient_DeceasedX_Choice() {}

func (*QICorePatient_DeceasedX_DateTime) isQICorePatient_DeceasedX_Choice() {}

// Whether patient is part of a multiple birth
type QICorePatient_MultipleBirthX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICorePatient_MultipleBirthX_Boolean
	//	*QICorePatient_MultipleBirthX_Integer
	Choice isQICorePatient_MultipleBirthX_Choice `protobuf_oneof:"choice"`
}

func (x *QICorePatient_MultipleBirthX) Reset() {
	*x = QICorePatient_MultipleBirthX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICorePatient_MultipleBirthX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICorePatient_MultipleBirthX) ProtoMessage() {}

func (x *QICorePatient_MultipleBirthX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICorePatient_MultipleBirthX.ProtoReflect.Descriptor instead.
func (*QICorePatient_MultipleBirthX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{35, 2}
}

func (m *QICorePatient_MultipleBirthX) GetChoice() isQICorePatient_MultipleBirthX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICorePatient_MultipleBirthX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*QICorePatient_MultipleBirthX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *QICorePatient_MultipleBirthX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*QICorePatient_MultipleBirthX_Integer); ok {
		return x.Integer
	}
	return nil
}

type isQICorePatient_MultipleBirthX_Choice interface {
	isQICorePatient_MultipleBirthX_Choice()
}

type QICorePatient_MultipleBirthX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type QICorePatient_MultipleBirthX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,2,opt,name=integer,proto3,oneof"`
}

func (*QICorePatient_MultipleBirthX_Boolean) isQICorePatient_MultipleBirthX_Choice() {}

func (*QICorePatient_MultipleBirthX_Integer) isQICorePatient_MultipleBirthX_Choice() {}

// A contact party (e.g. guardian, partner, friend) for the patient
type QICorePatient_Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The kind of relationship
	Relationship []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,rep,name=relationship,proto3" json:"relationship,omitempty"`
	// A name associated with the contact person
	Name *datatypes_go_proto.HumanName `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// A contact detail for the person
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,6,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// Address for the contact person
	Address *datatypes_go_proto.Address       `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	Gender  *QICorePatient_Contact_GenderCode `protobuf:"bytes,8,opt,name=gender,proto3" json:"gender,omitempty"`
	// Organization that is associated with the contact
	Organization *datatypes_go_proto.Reference `protobuf:"bytes,9,opt,name=organization,proto3" json:"organization,omitempty"`
	// The period during which this contact person or organization is valid to
	// be contacted relating to this patient
	Period *datatypes_go_proto.Period `protobuf:"bytes,10,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *QICorePatient_Contact) Reset() {
	*x = QICorePatient_Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICorePatient_Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICorePatient_Contact) ProtoMessage() {}

func (x *QICorePatient_Contact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICorePatient_Contact.ProtoReflect.Descriptor instead.
func (*QICorePatient_Contact) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{35, 3}
}

func (x *QICorePatient_Contact) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICorePatient_Contact) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICorePatient_Contact) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICorePatient_Contact) GetRelationship() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *QICorePatient_Contact) GetName() *datatypes_go_proto.HumanName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *QICorePatient_Contact) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *QICorePatient_Contact) GetAddress() *datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *QICorePatient_Contact) GetGender() *QICorePatient_Contact_GenderCode {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *QICorePatient_Contact) GetOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *QICorePatient_Contact) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// A language which may be used to communicate with the patient about his or
// her health
type QICorePatient_Communication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The language which can be used to communicate with the patient about his
	// or her health
	Language *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Language preference indicator
	Preferred *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=preferred,proto3" json:"preferred,omitempty"`
}

func (x *QICorePatient_Communication) Reset() {
	*x = QICorePatient_Communication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICorePatient_Communication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICorePatient_Communication) ProtoMessage() {}

func (x *QICorePatient_Communication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICorePatient_Communication.ProtoReflect.Descriptor instead.
func (*QICorePatient_Communication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{35, 4}
}

func (x *QICorePatient_Communication) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICorePatient_Communication) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICorePatient_Communication) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICorePatient_Communication) GetLanguage() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICorePatient_Communication) GetPreferred() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Preferred
	}
	return nil
}

// Link to another patient resource that concerns the same actual person
type QICorePatient_Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The other patient or related person resource that the link refers to
	Other *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=other,proto3" json:"other,omitempty"`
	Type  *QICorePatient_Link_TypeCode  `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *QICorePatient_Link) Reset() {
	*x = QICorePatient_Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICorePatient_Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICorePatient_Link) ProtoMessage() {}

func (x *QICorePatient_Link) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICorePatient_Link.ProtoReflect.Descriptor instead.
func (*QICorePatient_Link) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{35, 5}
}

func (x *QICorePatient_Link) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICorePatient_Link) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICorePatient_Link) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICorePatient_Link) GetOther() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Other
	}
	return nil
}

func (x *QICorePatient_Link) GetType() *QICorePatient_Link_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

// male | female | other | unknown
type QICorePatient_Contact_GenderCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AdministrativeGenderCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.AdministrativeGenderCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension               `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICorePatient_Contact_GenderCode) Reset() {
	*x = QICorePatient_Contact_GenderCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICorePatient_Contact_GenderCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICorePatient_Contact_GenderCode) ProtoMessage() {}

func (x *QICorePatient_Contact_GenderCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICorePatient_Contact_GenderCode.ProtoReflect.Descriptor instead.
func (*QICorePatient_Contact_GenderCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{35, 3, 0}
}

func (x *QICorePatient_Contact_GenderCode) GetValue() codes_go_proto.AdministrativeGenderCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AdministrativeGenderCode_INVALID_UNINITIALIZED
}

func (x *QICorePatient_Contact_GenderCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICorePatient_Contact_GenderCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// replaced-by | replaces | refer | seealso
type QICorePatient_Link_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.LinkTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.LinkTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICorePatient_Link_TypeCode) Reset() {
	*x = QICorePatient_Link_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICorePatient_Link_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICorePatient_Link_TypeCode) ProtoMessage() {}

func (x *QICorePatient_Link_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICorePatient_Link_TypeCode.ProtoReflect.Descriptor instead.
func (*QICorePatient_Link_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{35, 5, 0}
}

func (x *QICorePatient_Link_TypeCode) GetValue() codes_go_proto.LinkTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.LinkTypeCode_INVALID_UNINITIALIZED
}

func (x *QICorePatient_Link_TypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICorePatient_Link_TypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// male | female | other | unknown
type QICorePractitioner_GenderCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AdministrativeGenderCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.AdministrativeGenderCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension               `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICorePractitioner_GenderCode) Reset() {
	*x = QICorePractitioner_GenderCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICorePractitioner_GenderCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICorePractitioner_GenderCode) ProtoMessage() {}

func (x *QICorePractitioner_GenderCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICorePractitioner_GenderCode.ProtoReflect.Descriptor instead.
func (*QICorePractitioner_GenderCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{36, 0}
}

func (x *QICorePractitioner_GenderCode) GetValue() codes_go_proto.AdministrativeGenderCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AdministrativeGenderCode_INVALID_UNINITIALIZED
}

func (x *QICorePractitioner_GenderCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICorePractitioner_GenderCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Certification, licenses, or training pertaining to the provision of care
type QICorePractitioner_Qualification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// An identifier for this qualification for the practitioner
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,4,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Coded representation of the qualification
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	// Period during which the qualification is valid
	Period *datatypes_go_proto.Period `protobuf:"bytes,6,opt,name=period,proto3" json:"period,omitempty"`
	// Organization that regulates and issues the qualification
	Issuer *datatypes_go_proto.Reference `protobuf:"bytes,7,opt,name=issuer,proto3" json:"issuer,omitempty"`
}

func (x *QICorePractitioner_Qualification) Reset() {
	*x = QICorePractitioner_Qualification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICorePractitioner_Qualification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICorePractitioner_Qualification) ProtoMessage() {}

func (x *QICorePractitioner_Qualification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICorePractitioner_Qualification.ProtoReflect.Descriptor instead.
func (*QICorePractitioner_Qualification) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{36, 1}
}

func (x *QICorePractitioner_Qualification) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICorePractitioner_Qualification) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICorePractitioner_Qualification) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICorePractitioner_Qualification) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICorePractitioner_Qualification) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *QICorePractitioner_Qualification) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *QICorePractitioner_Qualification) GetIssuer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Issuer
	}
	return nil
}

// Times the Service Site is available
type QICorePractitionerRole_AvailableTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                        `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	DaysOfWeek        []*QICorePractitionerRole_AvailableTime_DaysOfWeekCode `protobuf:"bytes,4,rep,name=days_of_week,json=daysOfWeek,proto3" json:"days_of_week,omitempty"`
	// Always available? e.g. 24 hour service
	AllDay *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=all_day,json=allDay,proto3" json:"all_day,omitempty"`
	// Opening time of day (ignored if allDay = true)
	AvailableStartTime *datatypes_go_proto.Time `protobuf:"bytes,6,opt,name=available_start_time,json=availableStartTime,proto3" json:"available_start_time,omitempty"`
	// Closing time of day (ignored if allDay = true)
	AvailableEndTime *datatypes_go_proto.Time `protobuf:"bytes,7,opt,name=available_end_time,json=availableEndTime,proto3" json:"available_end_time,omitempty"`
}

func (x *QICorePractitionerRole_AvailableTime) Reset() {
	*x = QICorePractitionerRole_AvailableTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICorePractitionerRole_AvailableTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICorePractitionerRole_AvailableTime) ProtoMessage() {}

func (x *QICorePractitionerRole_AvailableTime) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICorePractitionerRole_AvailableTime.ProtoReflect.Descriptor instead.
func (*QICorePractitionerRole_AvailableTime) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{37, 0}
}

func (x *QICorePractitionerRole_AvailableTime) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICorePractitionerRole_AvailableTime) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICorePractitionerRole_AvailableTime) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICorePractitionerRole_AvailableTime) GetDaysOfWeek() []*QICorePractitionerRole_AvailableTime_DaysOfWeekCode {
	if x != nil {
		return x.DaysOfWeek
	}
	return nil
}

func (x *QICorePractitionerRole_AvailableTime) GetAllDay() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.AllDay
	}
	return nil
}

func (x *QICorePractitionerRole_AvailableTime) GetAvailableStartTime() *datatypes_go_proto.Time {
	if x != nil {
		return x.AvailableStartTime
	}
	return nil
}

func (x *QICorePractitionerRole_AvailableTime) GetAvailableEndTime() *datatypes_go_proto.Time {
	if x != nil {
		return x.AvailableEndTime
	}
	return nil
}

// Not available during this time due to provided reason
type QICorePractitionerRole_NotAvailable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Reason presented to the user explaining why time not available
	Description *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Service not available from this date
	During *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=during,proto3" json:"during,omitempty"`
}

func (x *QICorePractitionerRole_NotAvailable) Reset() {
	*x = QICorePractitionerRole_NotAvailable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICorePractitionerRole_NotAvailable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICorePractitionerRole_NotAvailable) ProtoMessage() {}

func (x *QICorePractitionerRole_NotAvailable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICorePractitionerRole_NotAvailable.ProtoReflect.Descriptor instead.
func (*QICorePractitionerRole_NotAvailable) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{37, 1}
}

func (x *QICorePractitionerRole_NotAvailable) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICorePractitionerRole_NotAvailable) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICorePractitionerRole_NotAvailable) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICorePractitionerRole_NotAvailable) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *QICorePractitionerRole_NotAvailable) GetDuring() *datatypes_go_proto.Period {
	if x != nil {
		return x.During
	}
	return nil
}

// mon | tue | wed | thu | fri | sat | sun
type QICorePractitionerRole_AvailableTime_DaysOfWeekCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.DaysOfWeekCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.DaysOfWeekCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension     `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICorePractitionerRole_AvailableTime_DaysOfWeekCode) Reset() {
	*x = QICorePractitionerRole_AvailableTime_DaysOfWeekCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICorePractitionerRole_AvailableTime_DaysOfWeekCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICorePractitionerRole_AvailableTime_DaysOfWeekCode) ProtoMessage() {}

func (x *QICorePractitionerRole_AvailableTime_DaysOfWeekCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICorePractitionerRole_AvailableTime_DaysOfWeekCode.ProtoReflect.Descriptor instead.
func (*QICorePractitionerRole_AvailableTime_DaysOfWeekCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{37, 0, 0}
}

func (x *QICorePractitionerRole_AvailableTime_DaysOfWeekCode) GetValue() codes_go_proto.DaysOfWeekCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.DaysOfWeekCode_INVALID_UNINITIALIZED
}

func (x *QICorePractitionerRole_AvailableTime_DaysOfWeekCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICorePractitionerRole_AvailableTime_DaysOfWeekCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// preparation | in-progress | not-done | suspended | aborted | completed |
// entered-in-error | unknown
type QICoreProcedure_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.EventStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.EventStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension      `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreProcedure_StatusCode) Reset() {
	*x = QICoreProcedure_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreProcedure_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreProcedure_StatusCode) ProtoMessage() {}

func (x *QICoreProcedure_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreProcedure_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreProcedure_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{38, 0}
}

func (x *QICoreProcedure_StatusCode) GetValue() codes_go_proto.EventStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.EventStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreProcedure_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreProcedure_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// When the procedure was performed
type QICoreProcedure_PerformedX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreProcedure_PerformedX_DateTime
	//	*QICoreProcedure_PerformedX_Period
	Choice isQICoreProcedure_PerformedX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreProcedure_PerformedX) Reset() {
	*x = QICoreProcedure_PerformedX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreProcedure_PerformedX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreProcedure_PerformedX) ProtoMessage() {}

func (x *QICoreProcedure_PerformedX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreProcedure_PerformedX.ProtoReflect.Descriptor instead.
func (*QICoreProcedure_PerformedX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{38, 1}
}

func (m *QICoreProcedure_PerformedX) GetChoice() isQICoreProcedure_PerformedX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreProcedure_PerformedX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*QICoreProcedure_PerformedX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *QICoreProcedure_PerformedX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*QICoreProcedure_PerformedX_Period); ok {
		return x.Period
	}
	return nil
}

type isQICoreProcedure_PerformedX_Choice interface {
	isQICoreProcedure_PerformedX_Choice()
}

type QICoreProcedure_PerformedX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type QICoreProcedure_PerformedX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*QICoreProcedure_PerformedX_DateTime) isQICoreProcedure_PerformedX_Choice() {}

func (*QICoreProcedure_PerformedX_Period) isQICoreProcedure_PerformedX_Choice() {}

// The people who performed the procedure
type QICoreProcedure_Performer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of performance
	Function *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=function,proto3" json:"function,omitempty"`
	// The reference to the practitioner
	Actor *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=actor,proto3" json:"actor,omitempty"`
	// Organization the device or practitioner was acting for
	OnBehalfOf *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=on_behalf_of,json=onBehalfOf,proto3" json:"on_behalf_of,omitempty"`
}

func (x *QICoreProcedure_Performer) Reset() {
	*x = QICoreProcedure_Performer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreProcedure_Performer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreProcedure_Performer) ProtoMessage() {}

func (x *QICoreProcedure_Performer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreProcedure_Performer.ProtoReflect.Descriptor instead.
func (*QICoreProcedure_Performer) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{38, 2}
}

func (x *QICoreProcedure_Performer) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreProcedure_Performer) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreProcedure_Performer) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreProcedure_Performer) GetFunction() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *QICoreProcedure_Performer) GetActor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *QICoreProcedure_Performer) GetOnBehalfOf() *datatypes_go_proto.Reference {
	if x != nil {
		return x.OnBehalfOf
	}
	return nil
}

// Manipulated, implanted, or removed device
type QICoreProcedure_FocalDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Kind of change to device
	Action *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	// Device that was changed
	Manipulated *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=manipulated,proto3" json:"manipulated,omitempty"`
}

func (x *QICoreProcedure_FocalDevice) Reset() {
	*x = QICoreProcedure_FocalDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreProcedure_FocalDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreProcedure_FocalDevice) ProtoMessage() {}

func (x *QICoreProcedure_FocalDevice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreProcedure_FocalDevice.ProtoReflect.Descriptor instead.
func (*QICoreProcedure_FocalDevice) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{38, 3}
}

func (x *QICoreProcedure_FocalDevice) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreProcedure_FocalDevice) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreProcedure_FocalDevice) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreProcedure_FocalDevice) GetAction() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *QICoreProcedure_FocalDevice) GetManipulated() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Manipulated
	}
	return nil
}

// male | female | other | unknown
type QICoreRelatedPerson_GenderCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AdministrativeGenderCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.AdministrativeGenderCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension               `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreRelatedPerson_GenderCode) Reset() {
	*x = QICoreRelatedPerson_GenderCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreRelatedPerson_GenderCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreRelatedPerson_GenderCode) ProtoMessage() {}

func (x *QICoreRelatedPerson_GenderCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreRelatedPerson_GenderCode.ProtoReflect.Descriptor instead.
func (*QICoreRelatedPerson_GenderCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{39, 0}
}

func (x *QICoreRelatedPerson_GenderCode) GetValue() codes_go_proto.AdministrativeGenderCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AdministrativeGenderCode_INVALID_UNINITIALIZED
}

func (x *QICoreRelatedPerson_GenderCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreRelatedPerson_GenderCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A language which may be used to communicate with about the patient's health
type QICoreRelatedPerson_Communication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The language which can be used to communicate with the patient about his
	// or her health
	Language *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Language preference indicator
	Preferred *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=preferred,proto3" json:"preferred,omitempty"`
}

func (x *QICoreRelatedPerson_Communication) Reset() {
	*x = QICoreRelatedPerson_Communication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreRelatedPerson_Communication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreRelatedPerson_Communication) ProtoMessage() {}

func (x *QICoreRelatedPerson_Communication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreRelatedPerson_Communication.ProtoReflect.Descriptor instead.
func (*QICoreRelatedPerson_Communication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{39, 1}
}

func (x *QICoreRelatedPerson_Communication) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreRelatedPerson_Communication) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreRelatedPerson_Communication) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreRelatedPerson_Communication) GetLanguage() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QICoreRelatedPerson_Communication) GetPreferred() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Preferred
	}
	return nil
}

// Value of extension
type ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX_Code
	//	*ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX_Decimal
	Choice isServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX) Reset() {
	*x = ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX) ProtoMessage() {}

func (x *ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX.ProtoReflect.Descriptor instead.
func (*ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{40, 0}
}

func (m *ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX) GetChoice() isServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX) GetCode() *datatypes_go_proto.Code {
	if x, ok := x.GetChoice().(*ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX_Code); ok {
		return x.Code
	}
	return nil
}

func (x *ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetChoice().(*ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX_Decimal); ok {
		return x.Decimal
	}
	return nil
}

type isServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX_Choice interface {
	isServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX_Choice()
}

type ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX_Code struct {
	Code *datatypes_go_proto.Code `protobuf:"bytes,1,opt,name=code,proto3,oneof"`
}

type ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,2,opt,name=decimal,proto3,oneof"`
}

func (*ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX_Code) isServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX_Choice() {
}

func (*ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX_Decimal) isServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX_Choice() {
}

// draft | active | suspended | completed | entered-in-error | cancelled
type QICoreServiceRequest_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.RequestStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.RequestStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension        `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreServiceRequest_StatusCode) Reset() {
	*x = QICoreServiceRequest_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreServiceRequest_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreServiceRequest_StatusCode) ProtoMessage() {}

func (x *QICoreServiceRequest_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreServiceRequest_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreServiceRequest_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{41, 0}
}

func (x *QICoreServiceRequest_StatusCode) GetValue() codes_go_proto.RequestStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.RequestStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreServiceRequest_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreServiceRequest_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// proposal | plan | order +
type QICoreServiceRequest_IntentCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.RequestIntentCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.RequestIntentCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension        `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreServiceRequest_IntentCode) Reset() {
	*x = QICoreServiceRequest_IntentCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreServiceRequest_IntentCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreServiceRequest_IntentCode) ProtoMessage() {}

func (x *QICoreServiceRequest_IntentCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreServiceRequest_IntentCode.ProtoReflect.Descriptor instead.
func (*QICoreServiceRequest_IntentCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{41, 1}
}

func (x *QICoreServiceRequest_IntentCode) GetValue() codes_go_proto.RequestIntentCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.RequestIntentCode_INVALID_UNINITIALIZED
}

func (x *QICoreServiceRequest_IntentCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreServiceRequest_IntentCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// routine | urgent | asap | stat
type QICoreServiceRequest_PriorityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.RequestPriorityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.RequestPriorityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension          `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreServiceRequest_PriorityCode) Reset() {
	*x = QICoreServiceRequest_PriorityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreServiceRequest_PriorityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreServiceRequest_PriorityCode) ProtoMessage() {}

func (x *QICoreServiceRequest_PriorityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreServiceRequest_PriorityCode.ProtoReflect.Descriptor instead.
func (*QICoreServiceRequest_PriorityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{41, 2}
}

func (x *QICoreServiceRequest_PriorityCode) GetValue() codes_go_proto.RequestPriorityCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.RequestPriorityCode_INVALID_UNINITIALIZED
}

func (x *QICoreServiceRequest_PriorityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreServiceRequest_PriorityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Service amount
type QICoreServiceRequest_QuantityX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreServiceRequest_QuantityX_Quantity
	//	*QICoreServiceRequest_QuantityX_Ratio
	//	*QICoreServiceRequest_QuantityX_Range
	Choice isQICoreServiceRequest_QuantityX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreServiceRequest_QuantityX) Reset() {
	*x = QICoreServiceRequest_QuantityX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreServiceRequest_QuantityX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreServiceRequest_QuantityX) ProtoMessage() {}

func (x *QICoreServiceRequest_QuantityX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreServiceRequest_QuantityX.ProtoReflect.Descriptor instead.
func (*QICoreServiceRequest_QuantityX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{41, 3}
}

func (m *QICoreServiceRequest_QuantityX) GetChoice() isQICoreServiceRequest_QuantityX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreServiceRequest_QuantityX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*QICoreServiceRequest_QuantityX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *QICoreServiceRequest_QuantityX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*QICoreServiceRequest_QuantityX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *QICoreServiceRequest_QuantityX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*QICoreServiceRequest_QuantityX_Range); ok {
		return x.Range
	}
	return nil
}

type isQICoreServiceRequest_QuantityX_Choice interface {
	isQICoreServiceRequest_QuantityX_Choice()
}

type QICoreServiceRequest_QuantityX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type QICoreServiceRequest_QuantityX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,2,opt,name=ratio,proto3,oneof"`
}

type QICoreServiceRequest_QuantityX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,3,opt,name=range,proto3,oneof"`
}

func (*QICoreServiceRequest_QuantityX_Quantity) isQICoreServiceRequest_QuantityX_Choice() {}

func (*QICoreServiceRequest_QuantityX_Ratio) isQICoreServiceRequest_QuantityX_Choice() {}

func (*QICoreServiceRequest_QuantityX_Range) isQICoreServiceRequest_QuantityX_Choice() {}

// When service should occur
type QICoreServiceRequest_OccurrenceX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreServiceRequest_OccurrenceX_DateTime
	//	*QICoreServiceRequest_OccurrenceX_Period
	//	*QICoreServiceRequest_OccurrenceX_Timing
	Choice isQICoreServiceRequest_OccurrenceX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreServiceRequest_OccurrenceX) Reset() {
	*x = QICoreServiceRequest_OccurrenceX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreServiceRequest_OccurrenceX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreServiceRequest_OccurrenceX) ProtoMessage() {}

func (x *QICoreServiceRequest_OccurrenceX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreServiceRequest_OccurrenceX.ProtoReflect.Descriptor instead.
func (*QICoreServiceRequest_OccurrenceX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{41, 4}
}

func (m *QICoreServiceRequest_OccurrenceX) GetChoice() isQICoreServiceRequest_OccurrenceX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreServiceRequest_OccurrenceX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*QICoreServiceRequest_OccurrenceX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *QICoreServiceRequest_OccurrenceX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*QICoreServiceRequest_OccurrenceX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *QICoreServiceRequest_OccurrenceX) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetChoice().(*QICoreServiceRequest_OccurrenceX_Timing); ok {
		return x.Timing
	}
	return nil
}

type isQICoreServiceRequest_OccurrenceX_Choice interface {
	isQICoreServiceRequest_OccurrenceX_Choice()
}

type QICoreServiceRequest_OccurrenceX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type QICoreServiceRequest_OccurrenceX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

type QICoreServiceRequest_OccurrenceX_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,3,opt,name=timing,proto3,oneof"`
}

func (*QICoreServiceRequest_OccurrenceX_DateTime) isQICoreServiceRequest_OccurrenceX_Choice() {}

func (*QICoreServiceRequest_OccurrenceX_Period) isQICoreServiceRequest_OccurrenceX_Choice() {}

func (*QICoreServiceRequest_OccurrenceX_Timing) isQICoreServiceRequest_OccurrenceX_Choice() {}

// Preconditions for service
type QICoreServiceRequest_AsNeededX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreServiceRequest_AsNeededX_Boolean
	//	*QICoreServiceRequest_AsNeededX_CodeableConcept
	Choice isQICoreServiceRequest_AsNeededX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreServiceRequest_AsNeededX) Reset() {
	*x = QICoreServiceRequest_AsNeededX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreServiceRequest_AsNeededX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreServiceRequest_AsNeededX) ProtoMessage() {}

func (x *QICoreServiceRequest_AsNeededX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreServiceRequest_AsNeededX.ProtoReflect.Descriptor instead.
func (*QICoreServiceRequest_AsNeededX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{41, 5}
}

func (m *QICoreServiceRequest_AsNeededX) GetChoice() isQICoreServiceRequest_AsNeededX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreServiceRequest_AsNeededX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*QICoreServiceRequest_AsNeededX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *QICoreServiceRequest_AsNeededX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*QICoreServiceRequest_AsNeededX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isQICoreServiceRequest_AsNeededX_Choice interface {
	isQICoreServiceRequest_AsNeededX_Choice()
}

type QICoreServiceRequest_AsNeededX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type QICoreServiceRequest_AsNeededX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*QICoreServiceRequest_AsNeededX_Boolean) isQICoreServiceRequest_AsNeededX_Choice() {}

func (*QICoreServiceRequest_AsNeededX_CodeableConcept) isQICoreServiceRequest_AsNeededX_Choice() {}

// available | unavailable | unsatisfactory | entered-in-error
type QICoreSpecimen_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.SpecimenStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.SpecimenStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension         `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreSpecimen_StatusCode) Reset() {
	*x = QICoreSpecimen_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreSpecimen_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreSpecimen_StatusCode) ProtoMessage() {}

func (x *QICoreSpecimen_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreSpecimen_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreSpecimen_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{42, 0}
}

func (x *QICoreSpecimen_StatusCode) GetValue() codes_go_proto.SpecimenStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.SpecimenStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreSpecimen_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreSpecimen_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Collection details
type QICoreSpecimen_Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Who collected the specimen
	Collector *datatypes_go_proto.Reference         `protobuf:"bytes,4,opt,name=collector,proto3" json:"collector,omitempty"`
	Collected *QICoreSpecimen_Collection_CollectedX `protobuf:"bytes,5,opt,name=collected,proto3" json:"collected,omitempty"`
	// How long it took to collect specimen
	Duration *datatypes_go_proto.Duration `protobuf:"bytes,6,opt,name=duration,proto3" json:"duration,omitempty"`
	// The quantity of specimen collected
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Technique used to perform collection
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,opt,name=method,proto3" json:"method,omitempty"`
	// Anatomical collection site
	BodySite      *datatypes_go_proto.CodeableConcept       `protobuf:"bytes,9,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	FastingStatus *QICoreSpecimen_Collection_FastingStatusX `protobuf:"bytes,10,opt,name=fasting_status,json=fastingStatus,proto3" json:"fasting_status,omitempty"`
}

func (x *QICoreSpecimen_Collection) Reset() {
	*x = QICoreSpecimen_Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreSpecimen_Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreSpecimen_Collection) ProtoMessage() {}

func (x *QICoreSpecimen_Collection) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreSpecimen_Collection.ProtoReflect.Descriptor instead.
func (*QICoreSpecimen_Collection) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{42, 1}
}

func (x *QICoreSpecimen_Collection) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreSpecimen_Collection) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreSpecimen_Collection) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreSpecimen_Collection) GetCollector() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Collector
	}
	return nil
}

func (x *QICoreSpecimen_Collection) GetCollected() *QICoreSpecimen_Collection_CollectedX {
	if x != nil {
		return x.Collected
	}
	return nil
}

func (x *QICoreSpecimen_Collection) GetDuration() *datatypes_go_proto.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *QICoreSpecimen_Collection) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *QICoreSpecimen_Collection) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *QICoreSpecimen_Collection) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *QICoreSpecimen_Collection) GetFastingStatus() *QICoreSpecimen_Collection_FastingStatusX {
	if x != nil {
		return x.FastingStatus
	}
	return nil
}

// Processing and processing step details
type QICoreSpecimen_Processing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Textual description of procedure
	Description *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Indicates the treatment step  applied to the specimen
	Procedure *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=procedure,proto3" json:"procedure,omitempty"`
	// Material used in the processing step
	Additive []*datatypes_go_proto.Reference  `protobuf:"bytes,6,rep,name=additive,proto3" json:"additive,omitempty"`
	Time     *QICoreSpecimen_Processing_TimeX `protobuf:"bytes,7,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *QICoreSpecimen_Processing) Reset() {
	*x = QICoreSpecimen_Processing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreSpecimen_Processing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreSpecimen_Processing) ProtoMessage() {}

func (x *QICoreSpecimen_Processing) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreSpecimen_Processing.ProtoReflect.Descriptor instead.
func (*QICoreSpecimen_Processing) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{42, 2}
}

func (x *QICoreSpecimen_Processing) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreSpecimen_Processing) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreSpecimen_Processing) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreSpecimen_Processing) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *QICoreSpecimen_Processing) GetProcedure() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Procedure
	}
	return nil
}

func (x *QICoreSpecimen_Processing) GetAdditive() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Additive
	}
	return nil
}

func (x *QICoreSpecimen_Processing) GetTime() *QICoreSpecimen_Processing_TimeX {
	if x != nil {
		return x.Time
	}
	return nil
}

// Direct container of specimen (tube/slide, etc.)
type QICoreSpecimen_Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Id for the container
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,4,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Textual description of the container
	Description *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Kind of container directly associated with specimen
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Container volume or size
	Capacity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,7,opt,name=capacity,proto3" json:"capacity,omitempty"`
	// Quantity of specimen within container
	SpecimenQuantity *datatypes_go_proto.SimpleQuantity  `protobuf:"bytes,8,opt,name=specimen_quantity,json=specimenQuantity,proto3" json:"specimen_quantity,omitempty"`
	Additive         *QICoreSpecimen_Container_AdditiveX `protobuf:"bytes,9,opt,name=additive,proto3" json:"additive,omitempty"`
	// The sequence number of the sample
	ContainerSequenceNumber *datatypes_go_proto.Integer `protobuf:"bytes,10,opt,name=container_sequence_number,json=containerSequenceNumber,proto3" json:"container_sequence_number,omitempty"`
}

func (x *QICoreSpecimen_Container) Reset() {
	*x = QICoreSpecimen_Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreSpecimen_Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreSpecimen_Container) ProtoMessage() {}

func (x *QICoreSpecimen_Container) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreSpecimen_Container.ProtoReflect.Descriptor instead.
func (*QICoreSpecimen_Container) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{42, 3}
}

func (x *QICoreSpecimen_Container) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreSpecimen_Container) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreSpecimen_Container) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreSpecimen_Container) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreSpecimen_Container) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *QICoreSpecimen_Container) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreSpecimen_Container) GetCapacity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Capacity
	}
	return nil
}

func (x *QICoreSpecimen_Container) GetSpecimenQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.SpecimenQuantity
	}
	return nil
}

func (x *QICoreSpecimen_Container) GetAdditive() *QICoreSpecimen_Container_AdditiveX {
	if x != nil {
		return x.Additive
	}
	return nil
}

func (x *QICoreSpecimen_Container) GetContainerSequenceNumber() *datatypes_go_proto.Integer {
	if x != nil {
		return x.ContainerSequenceNumber
	}
	return nil
}

// Collection time
type QICoreSpecimen_Collection_CollectedX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreSpecimen_Collection_CollectedX_DateTime
	//	*QICoreSpecimen_Collection_CollectedX_Period
	Choice isQICoreSpecimen_Collection_CollectedX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreSpecimen_Collection_CollectedX) Reset() {
	*x = QICoreSpecimen_Collection_CollectedX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreSpecimen_Collection_CollectedX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreSpecimen_Collection_CollectedX) ProtoMessage() {}

func (x *QICoreSpecimen_Collection_CollectedX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreSpecimen_Collection_CollectedX.ProtoReflect.Descriptor instead.
func (*QICoreSpecimen_Collection_CollectedX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{42, 1, 0}
}

func (m *QICoreSpecimen_Collection_CollectedX) GetChoice() isQICoreSpecimen_Collection_CollectedX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreSpecimen_Collection_CollectedX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*QICoreSpecimen_Collection_CollectedX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *QICoreSpecimen_Collection_CollectedX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*QICoreSpecimen_Collection_CollectedX_Period); ok {
		return x.Period
	}
	return nil
}

type isQICoreSpecimen_Collection_CollectedX_Choice interface {
	isQICoreSpecimen_Collection_CollectedX_Choice()
}

type QICoreSpecimen_Collection_CollectedX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type QICoreSpecimen_Collection_CollectedX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*QICoreSpecimen_Collection_CollectedX_DateTime) isQICoreSpecimen_Collection_CollectedX_Choice() {
}

func (*QICoreSpecimen_Collection_CollectedX_Period) isQICoreSpecimen_Collection_CollectedX_Choice() {}

// Whether or how long patient abstained from food and/or drink
type QICoreSpecimen_Collection_FastingStatusX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreSpecimen_Collection_FastingStatusX_CodeableConcept
	//	*QICoreSpecimen_Collection_FastingStatusX_Duration
	Choice isQICoreSpecimen_Collection_FastingStatusX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreSpecimen_Collection_FastingStatusX) Reset() {
	*x = QICoreSpecimen_Collection_FastingStatusX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreSpecimen_Collection_FastingStatusX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreSpecimen_Collection_FastingStatusX) ProtoMessage() {}

func (x *QICoreSpecimen_Collection_FastingStatusX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreSpecimen_Collection_FastingStatusX.ProtoReflect.Descriptor instead.
func (*QICoreSpecimen_Collection_FastingStatusX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{42, 1, 1}
}

func (m *QICoreSpecimen_Collection_FastingStatusX) GetChoice() isQICoreSpecimen_Collection_FastingStatusX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreSpecimen_Collection_FastingStatusX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*QICoreSpecimen_Collection_FastingStatusX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *QICoreSpecimen_Collection_FastingStatusX) GetDuration() *datatypes_go_proto.Duration {
	if x, ok := x.GetChoice().(*QICoreSpecimen_Collection_FastingStatusX_Duration); ok {
		return x.Duration
	}
	return nil
}

type isQICoreSpecimen_Collection_FastingStatusX_Choice interface {
	isQICoreSpecimen_Collection_FastingStatusX_Choice()
}

type QICoreSpecimen_Collection_FastingStatusX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type QICoreSpecimen_Collection_FastingStatusX_Duration struct {
	Duration *datatypes_go_proto.Duration `protobuf:"bytes,2,opt,name=duration,proto3,oneof"`
}

func (*QICoreSpecimen_Collection_FastingStatusX_CodeableConcept) isQICoreSpecimen_Collection_FastingStatusX_Choice() {
}

func (*QICoreSpecimen_Collection_FastingStatusX_Duration) isQICoreSpecimen_Collection_FastingStatusX_Choice() {
}

// Date and time of specimen processing
type QICoreSpecimen_Processing_TimeX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreSpecimen_Processing_TimeX_DateTime
	//	*QICoreSpecimen_Processing_TimeX_Period
	Choice isQICoreSpecimen_Processing_TimeX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreSpecimen_Processing_TimeX) Reset() {
	*x = QICoreSpecimen_Processing_TimeX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreSpecimen_Processing_TimeX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreSpecimen_Processing_TimeX) ProtoMessage() {}

func (x *QICoreSpecimen_Processing_TimeX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreSpecimen_Processing_TimeX.ProtoReflect.Descriptor instead.
func (*QICoreSpecimen_Processing_TimeX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{42, 2, 0}
}

func (m *QICoreSpecimen_Processing_TimeX) GetChoice() isQICoreSpecimen_Processing_TimeX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreSpecimen_Processing_TimeX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*QICoreSpecimen_Processing_TimeX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *QICoreSpecimen_Processing_TimeX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*QICoreSpecimen_Processing_TimeX_Period); ok {
		return x.Period
	}
	return nil
}

type isQICoreSpecimen_Processing_TimeX_Choice interface {
	isQICoreSpecimen_Processing_TimeX_Choice()
}

type QICoreSpecimen_Processing_TimeX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type QICoreSpecimen_Processing_TimeX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*QICoreSpecimen_Processing_TimeX_DateTime) isQICoreSpecimen_Processing_TimeX_Choice() {}

func (*QICoreSpecimen_Processing_TimeX_Period) isQICoreSpecimen_Processing_TimeX_Choice() {}

// Additive associated with container
type QICoreSpecimen_Container_AdditiveX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreSpecimen_Container_AdditiveX_CodeableConcept
	//	*QICoreSpecimen_Container_AdditiveX_Reference
	Choice isQICoreSpecimen_Container_AdditiveX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreSpecimen_Container_AdditiveX) Reset() {
	*x = QICoreSpecimen_Container_AdditiveX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreSpecimen_Container_AdditiveX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreSpecimen_Container_AdditiveX) ProtoMessage() {}

func (x *QICoreSpecimen_Container_AdditiveX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreSpecimen_Container_AdditiveX.ProtoReflect.Descriptor instead.
func (*QICoreSpecimen_Container_AdditiveX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{42, 3, 0}
}

func (m *QICoreSpecimen_Container_AdditiveX) GetChoice() isQICoreSpecimen_Container_AdditiveX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreSpecimen_Container_AdditiveX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*QICoreSpecimen_Container_AdditiveX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *QICoreSpecimen_Container_AdditiveX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*QICoreSpecimen_Container_AdditiveX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isQICoreSpecimen_Container_AdditiveX_Choice interface {
	isQICoreSpecimen_Container_AdditiveX_Choice()
}

type QICoreSpecimen_Container_AdditiveX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type QICoreSpecimen_Container_AdditiveX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*QICoreSpecimen_Container_AdditiveX_CodeableConcept) isQICoreSpecimen_Container_AdditiveX_Choice() {
}

func (*QICoreSpecimen_Container_AdditiveX_Reference) isQICoreSpecimen_Container_AdditiveX_Choice() {}

// active | inactive | entered-in-error
type QICoreSubstance_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.FHIRSubstanceStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.FHIRSubstanceStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension              `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QICoreSubstance_StatusCode) Reset() {
	*x = QICoreSubstance_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreSubstance_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreSubstance_StatusCode) ProtoMessage() {}

func (x *QICoreSubstance_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreSubstance_StatusCode.ProtoReflect.Descriptor instead.
func (*QICoreSubstance_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{43, 0}
}

func (x *QICoreSubstance_StatusCode) GetValue() codes_go_proto.FHIRSubstanceStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.FHIRSubstanceStatusCode_INVALID_UNINITIALIZED
}

func (x *QICoreSubstance_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreSubstance_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// If this describes a specific package/container of the substance
type QICoreSubstance_Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifier of the package/container
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// When no longer valid to use
	Expiry *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// Amount of substance in the package
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *QICoreSubstance_Instance) Reset() {
	*x = QICoreSubstance_Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreSubstance_Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreSubstance_Instance) ProtoMessage() {}

func (x *QICoreSubstance_Instance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreSubstance_Instance.ProtoReflect.Descriptor instead.
func (*QICoreSubstance_Instance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{43, 1}
}

func (x *QICoreSubstance_Instance) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreSubstance_Instance) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreSubstance_Instance) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreSubstance_Instance) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QICoreSubstance_Instance) GetExpiry() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Expiry
	}
	return nil
}

func (x *QICoreSubstance_Instance) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

// Composition information about the substance
type QICoreSubstance_Ingredient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Optional amount (concentration)
	Quantity  *datatypes_go_proto.Ratio              `protobuf:"bytes,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Substance *QICoreSubstance_Ingredient_SubstanceX `protobuf:"bytes,5,opt,name=substance,proto3" json:"substance,omitempty"`
}

func (x *QICoreSubstance_Ingredient) Reset() {
	*x = QICoreSubstance_Ingredient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreSubstance_Ingredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreSubstance_Ingredient) ProtoMessage() {}

func (x *QICoreSubstance_Ingredient) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreSubstance_Ingredient.ProtoReflect.Descriptor instead.
func (*QICoreSubstance_Ingredient) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{43, 2}
}

func (x *QICoreSubstance_Ingredient) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreSubstance_Ingredient) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreSubstance_Ingredient) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreSubstance_Ingredient) GetQuantity() *datatypes_go_proto.Ratio {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *QICoreSubstance_Ingredient) GetSubstance() *QICoreSubstance_Ingredient_SubstanceX {
	if x != nil {
		return x.Substance
	}
	return nil
}

// A component of the substance
type QICoreSubstance_Ingredient_SubstanceX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreSubstance_Ingredient_SubstanceX_Reference
	Choice isQICoreSubstance_Ingredient_SubstanceX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreSubstance_Ingredient_SubstanceX) Reset() {
	*x = QICoreSubstance_Ingredient_SubstanceX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreSubstance_Ingredient_SubstanceX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreSubstance_Ingredient_SubstanceX) ProtoMessage() {}

func (x *QICoreSubstance_Ingredient_SubstanceX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreSubstance_Ingredient_SubstanceX.ProtoReflect.Descriptor instead.
func (*QICoreSubstance_Ingredient_SubstanceX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{43, 2, 0}
}

func (m *QICoreSubstance_Ingredient_SubstanceX) GetChoice() isQICoreSubstance_Ingredient_SubstanceX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreSubstance_Ingredient_SubstanceX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*QICoreSubstance_Ingredient_SubstanceX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isQICoreSubstance_Ingredient_SubstanceX_Choice interface {
	isQICoreSubstance_Ingredient_SubstanceX_Choice()
}

type QICoreSubstance_Ingredient_SubstanceX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*QICoreSubstance_Ingredient_SubstanceX_Reference) isQICoreSubstance_Ingredient_SubstanceX_Choice() {
}

// Constraints on fulfillment tasks
type QICoreTask_Restriction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// How many times to repeat
	Repetitions *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=repetitions,proto3" json:"repetitions,omitempty"`
	// When fulfillment sought
	Period *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
	// For whom is fulfillment sought?
	Recipient []*datatypes_go_proto.Reference `protobuf:"bytes,6,rep,name=recipient,proto3" json:"recipient,omitempty"`
}

func (x *QICoreTask_Restriction) Reset() {
	*x = QICoreTask_Restriction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreTask_Restriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreTask_Restriction) ProtoMessage() {}

func (x *QICoreTask_Restriction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreTask_Restriction.ProtoReflect.Descriptor instead.
func (*QICoreTask_Restriction) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{44, 0}
}

func (x *QICoreTask_Restriction) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreTask_Restriction) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreTask_Restriction) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreTask_Restriction) GetRepetitions() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Repetitions
	}
	return nil
}

func (x *QICoreTask_Restriction) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *QICoreTask_Restriction) GetRecipient() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Recipient
	}
	return nil
}

// Information used to perform task
type QICoreTask_Parameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Label for the input
	Type  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Value *QICoreTask_Parameter_ValueX        `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QICoreTask_Parameter) Reset() {
	*x = QICoreTask_Parameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreTask_Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreTask_Parameter) ProtoMessage() {}

func (x *QICoreTask_Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreTask_Parameter.ProtoReflect.Descriptor instead.
func (*QICoreTask_Parameter) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{44, 1}
}

func (x *QICoreTask_Parameter) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreTask_Parameter) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreTask_Parameter) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreTask_Parameter) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreTask_Parameter) GetValue() *QICoreTask_Parameter_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// Information produced as part of task
type QICoreTask_Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Label for output
	Type  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Value *QICoreTask_Output_ValueX           `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QICoreTask_Output) Reset() {
	*x = QICoreTask_Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreTask_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreTask_Output) ProtoMessage() {}

func (x *QICoreTask_Output) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreTask_Output.ProtoReflect.Descriptor instead.
func (*QICoreTask_Output) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{44, 2}
}

func (x *QICoreTask_Output) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QICoreTask_Output) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QICoreTask_Output) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QICoreTask_Output) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QICoreTask_Output) GetValue() *QICoreTask_Output_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// Content to use in performing the task
type QICoreTask_Parameter_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreTask_Parameter_ValueX_Base64Binary
	//	*QICoreTask_Parameter_ValueX_Boolean
	//	*QICoreTask_Parameter_ValueX_Canonical
	//	*QICoreTask_Parameter_ValueX_Code
	//	*QICoreTask_Parameter_ValueX_Date
	//	*QICoreTask_Parameter_ValueX_DateTime
	//	*QICoreTask_Parameter_ValueX_Decimal
	//	*QICoreTask_Parameter_ValueX_Id
	//	*QICoreTask_Parameter_ValueX_Instant
	//	*QICoreTask_Parameter_ValueX_Integer
	//	*QICoreTask_Parameter_ValueX_Markdown
	//	*QICoreTask_Parameter_ValueX_Oid
	//	*QICoreTask_Parameter_ValueX_PositiveInt
	//	*QICoreTask_Parameter_ValueX_StringValue
	//	*QICoreTask_Parameter_ValueX_Time
	//	*QICoreTask_Parameter_ValueX_UnsignedInt
	//	*QICoreTask_Parameter_ValueX_Uri
	//	*QICoreTask_Parameter_ValueX_Url
	//	*QICoreTask_Parameter_ValueX_Uuid
	//	*QICoreTask_Parameter_ValueX_Address
	//	*QICoreTask_Parameter_ValueX_Age
	//	*QICoreTask_Parameter_ValueX_Annotation
	//	*QICoreTask_Parameter_ValueX_Attachment
	//	*QICoreTask_Parameter_ValueX_CodeableConcept
	//	*QICoreTask_Parameter_ValueX_Coding
	//	*QICoreTask_Parameter_ValueX_ContactPoint
	//	*QICoreTask_Parameter_ValueX_Count
	//	*QICoreTask_Parameter_ValueX_Distance
	//	*QICoreTask_Parameter_ValueX_Duration
	//	*QICoreTask_Parameter_ValueX_HumanName
	//	*QICoreTask_Parameter_ValueX_Identifier
	//	*QICoreTask_Parameter_ValueX_Money
	//	*QICoreTask_Parameter_ValueX_Period
	//	*QICoreTask_Parameter_ValueX_Quantity
	//	*QICoreTask_Parameter_ValueX_Range
	//	*QICoreTask_Parameter_ValueX_Ratio
	//	*QICoreTask_Parameter_ValueX_Reference
	//	*QICoreTask_Parameter_ValueX_SampledData
	//	*QICoreTask_Parameter_ValueX_Signature
	//	*QICoreTask_Parameter_ValueX_Timing
	//	*QICoreTask_Parameter_ValueX_ContactDetail
	//	*QICoreTask_Parameter_ValueX_Contributor
	//	*QICoreTask_Parameter_ValueX_DataRequirement
	//	*QICoreTask_Parameter_ValueX_Expression
	//	*QICoreTask_Parameter_ValueX_ParameterDefinition
	//	*QICoreTask_Parameter_ValueX_RelatedArtifact
	//	*QICoreTask_Parameter_ValueX_TriggerDefinition
	//	*QICoreTask_Parameter_ValueX_UsageContext
	//	*QICoreTask_Parameter_ValueX_Dosage
	Choice isQICoreTask_Parameter_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreTask_Parameter_ValueX) Reset() {
	*x = QICoreTask_Parameter_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreTask_Parameter_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreTask_Parameter_ValueX) ProtoMessage() {}

func (x *QICoreTask_Parameter_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreTask_Parameter_ValueX.ProtoReflect.Descriptor instead.
func (*QICoreTask_Parameter_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{44, 1, 0}
}

func (m *QICoreTask_Parameter_ValueX) GetChoice() isQICoreTask_Parameter_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetBase64Binary() *datatypes_go_proto.Base64Binary {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetCanonical() *datatypes_go_proto.Canonical {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Canonical); ok {
		return x.Canonical
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetCode() *datatypes_go_proto.Code {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Code); ok {
		return x.Code
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetId() *datatypes_go_proto.Id {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Id); ok {
		return x.Id
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetInstant() *datatypes_go_proto.Instant {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetMarkdown() *datatypes_go_proto.Markdown {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetOid() *datatypes_go_proto.Oid {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Oid); ok {
		return x.Oid
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Time); ok {
		return x.Time
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetUnsignedInt() *datatypes_go_proto.UnsignedInt {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetUrl() *datatypes_go_proto.Url {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Url); ok {
		return x.Url
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetUuid() *datatypes_go_proto.Uuid {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Uuid); ok {
		return x.Uuid
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetAddress() *datatypes_go_proto.Address {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Address); ok {
		return x.Address
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Age); ok {
		return x.Age
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetAnnotation() *datatypes_go_proto.Annotation {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetContactPoint() *datatypes_go_proto.ContactPoint {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetCount() *datatypes_go_proto.Count {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Count); ok {
		return x.Count
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetDistance() *datatypes_go_proto.Distance {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Distance); ok {
		return x.Distance
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetDuration() *datatypes_go_proto.Duration {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetHumanName() *datatypes_go_proto.HumanName {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetIdentifier() *datatypes_go_proto.Identifier {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetMoney() *datatypes_go_proto.Money {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Money); ok {
		return x.Money
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetSignature() *datatypes_go_proto.Signature {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Signature); ok {
		return x.Signature
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetContactDetail() *datatypes_go_proto.ContactDetail {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_ContactDetail); ok {
		return x.ContactDetail
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetContributor() *datatypes_go_proto.Contributor {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Contributor); ok {
		return x.Contributor
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetDataRequirement() *datatypes_go_proto.DataRequirement {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_DataRequirement); ok {
		return x.DataRequirement
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetExpression() *datatypes_go_proto.Expression {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Expression); ok {
		return x.Expression
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetParameterDefinition() *datatypes_go_proto.ParameterDefinition {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_ParameterDefinition); ok {
		return x.ParameterDefinition
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetRelatedArtifact() *datatypes_go_proto.RelatedArtifact {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_RelatedArtifact); ok {
		return x.RelatedArtifact
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetTriggerDefinition() *datatypes_go_proto.TriggerDefinition {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_TriggerDefinition); ok {
		return x.TriggerDefinition
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetUsageContext() *datatypes_go_proto.UsageContext {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_UsageContext); ok {
		return x.UsageContext
	}
	return nil
}

func (x *QICoreTask_Parameter_ValueX) GetDosage() *datatypes_go_proto.Dosage {
	if x, ok := x.GetChoice().(*QICoreTask_Parameter_ValueX_Dosage); ok {
		return x.Dosage
	}
	return nil
}

type isQICoreTask_Parameter_ValueX_Choice interface {
	isQICoreTask_Parameter_ValueX_Choice()
}

type QICoreTask_Parameter_ValueX_Base64Binary struct {
	Base64Binary *datatypes_go_proto.Base64Binary `protobuf:"bytes,1,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Canonical struct {
	Canonical *datatypes_go_proto.Canonical `protobuf:"bytes,3,opt,name=canonical,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Code struct {
	Code *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=code,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,5,opt,name=date,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,6,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,7,opt,name=decimal,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Id struct {
	Id *datatypes_go_proto.Id `protobuf:"bytes,8,opt,name=id,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Instant struct {
	Instant *datatypes_go_proto.Instant `protobuf:"bytes,9,opt,name=instant,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,10,opt,name=integer,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Markdown struct {
	Markdown *datatypes_go_proto.Markdown `protobuf:"bytes,11,opt,name=markdown,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Oid struct {
	Oid *datatypes_go_proto.Oid `protobuf:"bytes,12,opt,name=oid,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,13,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,14,opt,name=string_value,json=string,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,15,opt,name=time,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_UnsignedInt struct {
	UnsignedInt *datatypes_go_proto.UnsignedInt `protobuf:"bytes,16,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,17,opt,name=uri,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Url struct {
	Url *datatypes_go_proto.Url `protobuf:"bytes,18,opt,name=url,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Uuid struct {
	Uuid *datatypes_go_proto.Uuid `protobuf:"bytes,19,opt,name=uuid,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Address struct {
	Address *datatypes_go_proto.Address `protobuf:"bytes,20,opt,name=address,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,21,opt,name=age,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Annotation struct {
	Annotation *datatypes_go_proto.Annotation `protobuf:"bytes,22,opt,name=annotation,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,23,opt,name=attachment,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,25,opt,name=coding,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_ContactPoint struct {
	ContactPoint *datatypes_go_proto.ContactPoint `protobuf:"bytes,26,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Count struct {
	Count *datatypes_go_proto.Count `protobuf:"bytes,27,opt,name=count,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Distance struct {
	Distance *datatypes_go_proto.Distance `protobuf:"bytes,28,opt,name=distance,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Duration struct {
	Duration *datatypes_go_proto.Duration `protobuf:"bytes,29,opt,name=duration,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_HumanName struct {
	HumanName *datatypes_go_proto.HumanName `protobuf:"bytes,30,opt,name=human_name,json=humanName,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Identifier struct {
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,31,opt,name=identifier,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Money struct {
	Money *datatypes_go_proto.Money `protobuf:"bytes,32,opt,name=money,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,33,opt,name=period,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,34,opt,name=quantity,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,35,opt,name=range,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,36,opt,name=ratio,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,37,opt,name=reference,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,38,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Signature struct {
	Signature *datatypes_go_proto.Signature `protobuf:"bytes,39,opt,name=signature,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,40,opt,name=timing,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_ContactDetail struct {
	ContactDetail *datatypes_go_proto.ContactDetail `protobuf:"bytes,41,opt,name=contact_detail,json=contactDetail,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Contributor struct {
	Contributor *datatypes_go_proto.Contributor `protobuf:"bytes,42,opt,name=contributor,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_DataRequirement struct {
	DataRequirement *datatypes_go_proto.DataRequirement `protobuf:"bytes,43,opt,name=data_requirement,json=dataRequirement,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Expression struct {
	Expression *datatypes_go_proto.Expression `protobuf:"bytes,44,opt,name=expression,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_ParameterDefinition struct {
	ParameterDefinition *datatypes_go_proto.ParameterDefinition `protobuf:"bytes,45,opt,name=parameter_definition,json=parameterDefinition,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_RelatedArtifact struct {
	RelatedArtifact *datatypes_go_proto.RelatedArtifact `protobuf:"bytes,46,opt,name=related_artifact,json=relatedArtifact,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_TriggerDefinition struct {
	TriggerDefinition *datatypes_go_proto.TriggerDefinition `protobuf:"bytes,47,opt,name=trigger_definition,json=triggerDefinition,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_UsageContext struct {
	UsageContext *datatypes_go_proto.UsageContext `protobuf:"bytes,48,opt,name=usage_context,json=usageContext,proto3,oneof"`
}

type QICoreTask_Parameter_ValueX_Dosage struct {
	Dosage *datatypes_go_proto.Dosage `protobuf:"bytes,49,opt,name=dosage,proto3,oneof"`
}

func (*QICoreTask_Parameter_ValueX_Base64Binary) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Boolean) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Canonical) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Code) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Date) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_DateTime) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Decimal) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Id) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Instant) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Integer) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Markdown) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Oid) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_PositiveInt) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_StringValue) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Time) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_UnsignedInt) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Uri) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Url) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Uuid) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Address) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Age) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Annotation) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Attachment) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_CodeableConcept) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Coding) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_ContactPoint) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Count) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Distance) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Duration) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_HumanName) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Identifier) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Money) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Period) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Quantity) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Range) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Ratio) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Reference) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_SampledData) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Signature) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Timing) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_ContactDetail) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Contributor) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_DataRequirement) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Expression) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_ParameterDefinition) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_RelatedArtifact) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_TriggerDefinition) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_UsageContext) isQICoreTask_Parameter_ValueX_Choice() {}

func (*QICoreTask_Parameter_ValueX_Dosage) isQICoreTask_Parameter_ValueX_Choice() {}

// Result of output
type QICoreTask_Output_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*QICoreTask_Output_ValueX_Base64Binary
	//	*QICoreTask_Output_ValueX_Boolean
	//	*QICoreTask_Output_ValueX_Canonical
	//	*QICoreTask_Output_ValueX_Code
	//	*QICoreTask_Output_ValueX_Date
	//	*QICoreTask_Output_ValueX_DateTime
	//	*QICoreTask_Output_ValueX_Decimal
	//	*QICoreTask_Output_ValueX_Id
	//	*QICoreTask_Output_ValueX_Instant
	//	*QICoreTask_Output_ValueX_Integer
	//	*QICoreTask_Output_ValueX_Markdown
	//	*QICoreTask_Output_ValueX_Oid
	//	*QICoreTask_Output_ValueX_PositiveInt
	//	*QICoreTask_Output_ValueX_StringValue
	//	*QICoreTask_Output_ValueX_Time
	//	*QICoreTask_Output_ValueX_UnsignedInt
	//	*QICoreTask_Output_ValueX_Uri
	//	*QICoreTask_Output_ValueX_Url
	//	*QICoreTask_Output_ValueX_Uuid
	//	*QICoreTask_Output_ValueX_Address
	//	*QICoreTask_Output_ValueX_Age
	//	*QICoreTask_Output_ValueX_Annotation
	//	*QICoreTask_Output_ValueX_Attachment
	//	*QICoreTask_Output_ValueX_CodeableConcept
	//	*QICoreTask_Output_ValueX_Coding
	//	*QICoreTask_Output_ValueX_ContactPoint
	//	*QICoreTask_Output_ValueX_Count
	//	*QICoreTask_Output_ValueX_Distance
	//	*QICoreTask_Output_ValueX_Duration
	//	*QICoreTask_Output_ValueX_HumanName
	//	*QICoreTask_Output_ValueX_Identifier
	//	*QICoreTask_Output_ValueX_Money
	//	*QICoreTask_Output_ValueX_Period
	//	*QICoreTask_Output_ValueX_Quantity
	//	*QICoreTask_Output_ValueX_Range
	//	*QICoreTask_Output_ValueX_Ratio
	//	*QICoreTask_Output_ValueX_Reference
	//	*QICoreTask_Output_ValueX_SampledData
	//	*QICoreTask_Output_ValueX_Signature
	//	*QICoreTask_Output_ValueX_Timing
	//	*QICoreTask_Output_ValueX_ContactDetail
	//	*QICoreTask_Output_ValueX_Contributor
	//	*QICoreTask_Output_ValueX_DataRequirement
	//	*QICoreTask_Output_ValueX_Expression
	//	*QICoreTask_Output_ValueX_ParameterDefinition
	//	*QICoreTask_Output_ValueX_RelatedArtifact
	//	*QICoreTask_Output_ValueX_TriggerDefinition
	//	*QICoreTask_Output_ValueX_UsageContext
	//	*QICoreTask_Output_ValueX_Dosage
	Choice isQICoreTask_Output_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *QICoreTask_Output_ValueX) Reset() {
	*x = QICoreTask_Output_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QICoreTask_Output_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QICoreTask_Output_ValueX) ProtoMessage() {}

func (x *QICoreTask_Output_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QICoreTask_Output_ValueX.ProtoReflect.Descriptor instead.
func (*QICoreTask_Output_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP(), []int{44, 2, 0}
}

func (m *QICoreTask_Output_ValueX) GetChoice() isQICoreTask_Output_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetBase64Binary() *datatypes_go_proto.Base64Binary {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetCanonical() *datatypes_go_proto.Canonical {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Canonical); ok {
		return x.Canonical
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetCode() *datatypes_go_proto.Code {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Code); ok {
		return x.Code
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetId() *datatypes_go_proto.Id {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Id); ok {
		return x.Id
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetInstant() *datatypes_go_proto.Instant {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetMarkdown() *datatypes_go_proto.Markdown {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetOid() *datatypes_go_proto.Oid {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Oid); ok {
		return x.Oid
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Time); ok {
		return x.Time
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetUnsignedInt() *datatypes_go_proto.UnsignedInt {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetUrl() *datatypes_go_proto.Url {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Url); ok {
		return x.Url
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetUuid() *datatypes_go_proto.Uuid {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Uuid); ok {
		return x.Uuid
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetAddress() *datatypes_go_proto.Address {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Address); ok {
		return x.Address
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Age); ok {
		return x.Age
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetAnnotation() *datatypes_go_proto.Annotation {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetContactPoint() *datatypes_go_proto.ContactPoint {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetCount() *datatypes_go_proto.Count {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Count); ok {
		return x.Count
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetDistance() *datatypes_go_proto.Distance {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Distance); ok {
		return x.Distance
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetDuration() *datatypes_go_proto.Duration {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetHumanName() *datatypes_go_proto.HumanName {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetIdentifier() *datatypes_go_proto.Identifier {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetMoney() *datatypes_go_proto.Money {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Money); ok {
		return x.Money
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetSignature() *datatypes_go_proto.Signature {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Signature); ok {
		return x.Signature
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetContactDetail() *datatypes_go_proto.ContactDetail {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_ContactDetail); ok {
		return x.ContactDetail
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetContributor() *datatypes_go_proto.Contributor {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Contributor); ok {
		return x.Contributor
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetDataRequirement() *datatypes_go_proto.DataRequirement {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_DataRequirement); ok {
		return x.DataRequirement
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetExpression() *datatypes_go_proto.Expression {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Expression); ok {
		return x.Expression
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetParameterDefinition() *datatypes_go_proto.ParameterDefinition {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_ParameterDefinition); ok {
		return x.ParameterDefinition
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetRelatedArtifact() *datatypes_go_proto.RelatedArtifact {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_RelatedArtifact); ok {
		return x.RelatedArtifact
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetTriggerDefinition() *datatypes_go_proto.TriggerDefinition {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_TriggerDefinition); ok {
		return x.TriggerDefinition
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetUsageContext() *datatypes_go_proto.UsageContext {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_UsageContext); ok {
		return x.UsageContext
	}
	return nil
}

func (x *QICoreTask_Output_ValueX) GetDosage() *datatypes_go_proto.Dosage {
	if x, ok := x.GetChoice().(*QICoreTask_Output_ValueX_Dosage); ok {
		return x.Dosage
	}
	return nil
}

type isQICoreTask_Output_ValueX_Choice interface {
	isQICoreTask_Output_ValueX_Choice()
}

type QICoreTask_Output_ValueX_Base64Binary struct {
	Base64Binary *datatypes_go_proto.Base64Binary `protobuf:"bytes,1,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Canonical struct {
	Canonical *datatypes_go_proto.Canonical `protobuf:"bytes,3,opt,name=canonical,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Code struct {
	Code *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=code,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,5,opt,name=date,proto3,oneof"`
}

type QICoreTask_Output_ValueX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,6,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,7,opt,name=decimal,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Id struct {
	Id *datatypes_go_proto.Id `protobuf:"bytes,8,opt,name=id,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Instant struct {
	Instant *datatypes_go_proto.Instant `protobuf:"bytes,9,opt,name=instant,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,10,opt,name=integer,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Markdown struct {
	Markdown *datatypes_go_proto.Markdown `protobuf:"bytes,11,opt,name=markdown,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Oid struct {
	Oid *datatypes_go_proto.Oid `protobuf:"bytes,12,opt,name=oid,proto3,oneof"`
}

type QICoreTask_Output_ValueX_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,13,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type QICoreTask_Output_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,14,opt,name=string_value,json=string,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,15,opt,name=time,proto3,oneof"`
}

type QICoreTask_Output_ValueX_UnsignedInt struct {
	UnsignedInt *datatypes_go_proto.UnsignedInt `protobuf:"bytes,16,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,17,opt,name=uri,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Url struct {
	Url *datatypes_go_proto.Url `protobuf:"bytes,18,opt,name=url,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Uuid struct {
	Uuid *datatypes_go_proto.Uuid `protobuf:"bytes,19,opt,name=uuid,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Address struct {
	Address *datatypes_go_proto.Address `protobuf:"bytes,20,opt,name=address,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,21,opt,name=age,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Annotation struct {
	Annotation *datatypes_go_proto.Annotation `protobuf:"bytes,22,opt,name=annotation,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,23,opt,name=attachment,proto3,oneof"`
}

type QICoreTask_Output_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,25,opt,name=coding,proto3,oneof"`
}

type QICoreTask_Output_ValueX_ContactPoint struct {
	ContactPoint *datatypes_go_proto.ContactPoint `protobuf:"bytes,26,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Count struct {
	Count *datatypes_go_proto.Count `protobuf:"bytes,27,opt,name=count,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Distance struct {
	Distance *datatypes_go_proto.Distance `protobuf:"bytes,28,opt,name=distance,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Duration struct {
	Duration *datatypes_go_proto.Duration `protobuf:"bytes,29,opt,name=duration,proto3,oneof"`
}

type QICoreTask_Output_ValueX_HumanName struct {
	HumanName *datatypes_go_proto.HumanName `protobuf:"bytes,30,opt,name=human_name,json=humanName,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Identifier struct {
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,31,opt,name=identifier,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Money struct {
	Money *datatypes_go_proto.Money `protobuf:"bytes,32,opt,name=money,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,33,opt,name=period,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,34,opt,name=quantity,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,35,opt,name=range,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,36,opt,name=ratio,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,37,opt,name=reference,proto3,oneof"`
}

type QICoreTask_Output_ValueX_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,38,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Signature struct {
	Signature *datatypes_go_proto.Signature `protobuf:"bytes,39,opt,name=signature,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,40,opt,name=timing,proto3,oneof"`
}

type QICoreTask_Output_ValueX_ContactDetail struct {
	ContactDetail *datatypes_go_proto.ContactDetail `protobuf:"bytes,41,opt,name=contact_detail,json=contactDetail,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Contributor struct {
	Contributor *datatypes_go_proto.Contributor `protobuf:"bytes,42,opt,name=contributor,proto3,oneof"`
}

type QICoreTask_Output_ValueX_DataRequirement struct {
	DataRequirement *datatypes_go_proto.DataRequirement `protobuf:"bytes,43,opt,name=data_requirement,json=dataRequirement,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Expression struct {
	Expression *datatypes_go_proto.Expression `protobuf:"bytes,44,opt,name=expression,proto3,oneof"`
}

type QICoreTask_Output_ValueX_ParameterDefinition struct {
	ParameterDefinition *datatypes_go_proto.ParameterDefinition `protobuf:"bytes,45,opt,name=parameter_definition,json=parameterDefinition,proto3,oneof"`
}

type QICoreTask_Output_ValueX_RelatedArtifact struct {
	RelatedArtifact *datatypes_go_proto.RelatedArtifact `protobuf:"bytes,46,opt,name=related_artifact,json=relatedArtifact,proto3,oneof"`
}

type QICoreTask_Output_ValueX_TriggerDefinition struct {
	TriggerDefinition *datatypes_go_proto.TriggerDefinition `protobuf:"bytes,47,opt,name=trigger_definition,json=triggerDefinition,proto3,oneof"`
}

type QICoreTask_Output_ValueX_UsageContext struct {
	UsageContext *datatypes_go_proto.UsageContext `protobuf:"bytes,48,opt,name=usage_context,json=usageContext,proto3,oneof"`
}

type QICoreTask_Output_ValueX_Dosage struct {
	Dosage *datatypes_go_proto.Dosage `protobuf:"bytes,49,opt,name=dosage,proto3,oneof"`
}

func (*QICoreTask_Output_ValueX_Base64Binary) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Boolean) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Canonical) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Code) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Date) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_DateTime) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Decimal) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Id) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Instant) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Integer) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Markdown) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Oid) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_PositiveInt) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_StringValue) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Time) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_UnsignedInt) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Uri) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Url) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Uuid) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Address) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Age) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Annotation) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Attachment) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_CodeableConcept) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Coding) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_ContactPoint) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Count) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Distance) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Duration) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_HumanName) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Identifier) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Money) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Period) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Quantity) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Range) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Ratio) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Reference) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_SampledData) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Signature) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Timing) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_ContactDetail) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Contributor) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_DataRequirement) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Expression) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_ParameterDefinition) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_RelatedArtifact) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_TriggerDefinition) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_UsageContext) isQICoreTask_Output_ValueX_Choice() {}

func (*QICoreTask_Output_ValueX_Dosage) isQICoreTask_Output_ValueX_Choice() {}

var File_proto_google_fhir_proto_r4_qicore_qicore_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x71, 0x69, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x72, 0x34, 0x2f, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x1e, 0x0a, 0x12, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x5d, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49,
	0x43, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x43, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x60, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x6f, 0x75, 0x73,
	0x6e, 0x65, 0x73, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x40, 0x0a,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x3e, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12,
	0x84, 0x01, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x48, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x76, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x34, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x95,
	0x01, 0x0a, 0x0e, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28,
	0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x0d, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0xed, 0x01, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x94, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x12, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x13, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x15, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x66, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x49,
	0x0a, 0x05, 0x73, 0x74, 0x75, 0x64, 0x79, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x75,
	0x64, 0x79, 0x52, 0x05, 0x73, 0x74, 0x75, 0x64, 0x79, 0x1a, 0xba, 0x02, 0x0a, 0x0d, 0x41, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x72, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xa7, 0x08, 0x0a, 0x0d, 0x53, 0x75, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0xc6, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x89, 0x01, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x18, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x09,
	0x63, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x41, 0x64,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64,
	0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x09, 0x63, 0x61, 0x75, 0x73, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x1a, 0xf9, 0x03, 0x0a, 0x09, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0a,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x73,
	0x12, 0x60, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x28, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x3a, 0x8b, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x34, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x45, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f,
	0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72,
	0x65, 0x2d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4a, 0x04,
	0x08, 0x07, 0x10, 0x08, 0x22, 0xf8, 0x27, 0x0a, 0x18, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x41,
	0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5d, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f,
	0x72, 0x65, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49,
	0x43, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x61, 0x0a,
	0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72,
	0x65, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x4c, 0x0a, 0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x41, 0x6c,
	0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x4f, 0x6e, 0x73, 0x65, 0x74, 0x58, 0x52, 0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x42,
	0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x48, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x61, 0x73,
	0x73, 0x65, 0x72, 0x74, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x48, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x12, 0x46, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x63,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x8b, 0x01,
	0x0a, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x41,
	0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4,
	0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29,
	0x29, 0x52, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xef, 0x01, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x42, 0xad,
	0x01, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x48, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0xf2,
	0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20,
	0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x28, 0x29, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x12, 0xfb, 0x01,
	0x0a, 0x0e, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x74, 0x65, 0x64,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0xad, 0x01, 0xaa,
	0xfc, 0x8f, 0x93, 0x06, 0x48, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x67, 0x79, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2d,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x75, 0x74, 0x65, 0x64, 0xf2, 0xbe, 0xc0,
	0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28,
	0x29, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x0d, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x75, 0x74, 0x65, 0x64, 0x1a, 0xb7, 0x02, 0x0a, 0x08,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6c,
	0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x3a, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x67, 0x79, 0x2d, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xc3, 0x02, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x65,
	0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x77, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x39,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x67, 0x79, 0x2d, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xcc, 0x02, 0x0a, 0x0f,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x7a,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79,
	0x2d, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x63, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xf1, 0x01, 0x0a, 0x06, 0x4f,
	0x6e, 0x73, 0x65, 0x74, 0x58, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x67,
	0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00,
	0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xee,
	0x09, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x6d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0d,
	0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x05,
	0x6f, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x05, 0x6f, 0x6e, 0x73, 0x65,
	0x74, 0x12, 0x61, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f,
	0x72, 0x65, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0xf5, 0x01, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0xa8, 0x01, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x43, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x2d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xbe, 0xc0,
	0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28,
	0x29, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x10, 0x72, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xbe,
	0x02, 0x0a, 0x0c, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x72, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a,
	0xe7, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x4a, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73,
	0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x69, 0x6e, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x3a, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4b, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x69, 0x6e,
	0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22,
	0x99, 0x09, 0x0a, 0x13, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3c, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x6d,
	0x6f, 0x72, 0x70, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x12, 0x48, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x12, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x11, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x3a, 0x8d, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x42, 0x6f, 0x64, 0x79,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x46, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x62, 0x6f, 0x64, 0x79, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xa5, 0x35, 0x0a, 0x0e,
	0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x27,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x3a,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x16,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6e,
	0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x15, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x73, 0x55, 0x72, 0x69, 0x12, 0x49, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65,
	0x64, 0x4f, 0x6e, 0x12, 0x4a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x47, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x06, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0xac, 0x01, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x12, 0xb6, 0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x09,
	0x63, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x08, 0x63, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x4d, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3e, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x0a, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x04, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x04, 0x67, 0x6f, 0x61,
	0x6c, 0x12, 0xaa, 0x01, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x1f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43,
	0x6f, 0x72, 0x65, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x42, 0x5e, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20,
	0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07,
	0x23, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20,
	0x6f, 0x72, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x28, 0x29, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x33,
	0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x1a, 0xa6, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x3a, 0x69, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xad, 0x02, 0x0a,
	0x0a, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a,
	0x6b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x72, 0x65, 0x2d, 0x70,
	0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xec, 0x1b, 0x0a,
	0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x18, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x16, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x12, 0x5b, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x10,
	0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x3b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0xf0, 0x01,
	0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0xb1, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e,
	0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x04, 0x54, 0x61, 0x73, 0x6b, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x12, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x84, 0x01, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65,
	0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f,
	0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28,
	0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0xb1, 0x15, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x55, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73,
	0x5f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x52, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x43, 0x61,
	0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x55, 0x72, 0x69, 0x12, 0x38, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x98, 0x01,
	0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x4d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0a, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x04, 0x47, 0x6f,
	0x61, 0x6c, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x60, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0e, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x64, 0x6f, 0x4e,
	0x6f, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x5e, 0x0a, 0x09, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x72, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x58, 0x52, 0x09,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xca, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x8b, 0x01, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x63, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x12, 0x58, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f,
	0x72, 0x65, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x58, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x46, 0x0a, 0x0c,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb8, 0x02, 0x0a, 0x08, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x72, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x72, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2d,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2d, 0x6b, 0x69, 0x6e, 0x64, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a,
	0xba, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x74, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x63, 0x61, 0x72, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xc9, 0x01, 0x0a,
	0x0a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x58, 0x12, 0x35, 0x0a, 0x06, 0x74,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48,
	0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xd0, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x5f, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1f, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0xc9, 0x01, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72,
	0x65, 0x2d, 0x63, 0x61, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x30,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x63,
	0x61, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08,
	0x21, 0x10, 0x22, 0x22, 0x95, 0x14, 0x0a, 0x0e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61,
	0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f,
	0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x72, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0xd4, 0x01, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72,
	0x65, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x42, 0x7f, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0,
	0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28,
	0x29, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x3e, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x6c, 0x66,
	0x4f, 0x66, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x20, 0x28, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x28, 0x29, 0x20, 0x69, 0x73, 0x20, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0x29, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5a, 0x0a, 0x10, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x15, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x33, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x1a, 0xa9, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x3a, 0x6b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x72, 0x65, 0x2d,
	0x74, 0x65, 0x61, 0x6d, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x99, 0x04,
	0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x4a, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x54,
	0x0a, 0x0c, 0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x6f, 0x66, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61,
	0x6c, 0x66, 0x4f, 0x66, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0xc9, 0x01, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d,
	0x63, 0x61, 0x72, 0x65, 0x74, 0x65, 0x61, 0x6d, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x30, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x63, 0x61, 0x72,
	0x65, 0x74, 0x65, 0x61, 0x6d, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xfb, 0x67, 0x0a, 0x0b,
	0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x27, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x62, 0x69, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0e,
	0x62, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3f,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x62, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x28, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x72, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x65,
	0x72, 0x12, 0x7c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x40, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x48, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x0d, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68,
	0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29,
	0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x07,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x42,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12,
	0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x97, 0x01, 0x0a, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x42, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x12, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x75, 0x0a, 0x05, 0x70, 0x61,
	0x79, 0x65, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x50, 0x61,
	0x79, 0x65, 0x65, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69,
	0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65,
	0x65, 0x12, 0x50, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x14, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x7f, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x1d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72,
	0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x42,
	0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29,
	0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x08, 0x63, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x98, 0x01, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20,
	0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x0e, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x81, 0x01, 0x0a, 0x09,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x42, 0x35, 0xf2,
	0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20,
	0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x28, 0x29, 0x29, 0x52, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12,
	0x81, 0x01, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x18, 0x20, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f,
	0x72, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x49, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x3b, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0,
	0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28,
	0x29, 0x29, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x7e, 0x0a,
	0x08, 0x61, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x2e, 0x41, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x35, 0xf2, 0xbe,
	0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f,
	0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x28, 0x29, 0x29, 0x52, 0x08, 0x61, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x72, 0x0a,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20,
	0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x1a, 0xab, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x64, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x26, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x66, 0x6d, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64,
	0x65, 0x1a, 0x94, 0x02, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x64, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x26,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x2d, 0x75, 0x73, 0x65, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x94, 0x03, 0x0a, 0x0c, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x0b, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52,
	0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x48, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x12, 0x3d, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a,
	0x96, 0x03, 0x0a, 0x05, 0x50, 0x61, 0x79, 0x65, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x5a, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x1a, 0xce, 0x04, 0x0a, 0x08, 0x43, 0x61, 0x72,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x44, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x7c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x40, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x4a, 0x0a,
	0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xf4, 0x08, 0x0a, 0x15, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x58, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x58, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x12, 0x55, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x58, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0x83, 0x01, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x58, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8,
	0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xe1, 0x02, 0x0a,
	0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3b,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4e,
	0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x1a, 0xfb, 0x05, 0x0a, 0x09, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d,
	0x0a, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x38, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x6f, 0x6e, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x0b, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x47, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0xc2, 0x01, 0x0a, 0x0a, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xdc,
	0x05, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5d, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x3e, 0x0a, 0x03, 0x75, 0x64, 0x69, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0c, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x03, 0x75, 0x64, 0x69, 0x1a, 0xc2, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83,
	0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xc5, 0x05,
	0x0a, 0x09, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x66,
	0x6f, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x05, 0x66, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x08, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x14, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41,
	0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x72,
	0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70,
	0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x66, 0x12, 0x5a, 0x0a, 0x0e, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x13, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0xb2, 0x04, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x2e, 0x41, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0xa7, 0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x38,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4e, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x87, 0x20, 0x0a, 0x04, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0x52, 0x10, 0x63, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0x52, 0x11, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x6e, 0x74, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x14, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x13, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x5a, 0x0a, 0x12,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49,
	0x43, 0x6f, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x58, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43,
	0x6f, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a,
	0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x03, 0x6e, 0x65,
	0x74, 0x12, 0x3e, 0x0a, 0x03, 0x75, 0x64, 0x69, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0c,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x03, 0x75, 0x64,
	0x69, 0x12, 0x41, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79,
	0x53, 0x69, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x69, 0x74, 0x65,
	0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x53, 0x69, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09,
	0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x7d, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x18,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43,
	0x6f, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20,
	0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x1a, 0x85, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64,
	0x58, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48,
	0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xfa, 0x01, 0x0a, 0x09,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x38, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4e, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xb9, 0x0f, 0x0a, 0x06, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x5a, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x09, 0x75,
	0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2c,
	0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x03, 0x6e, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x03,
	0x75, 0x64, 0x69, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0c, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x03, 0x75, 0x64, 0x69, 0x12, 0x8e, 0x01, 0x0a,
	0x0a, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x53, 0x75, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x35, 0xf2, 0xbe, 0xc0,
	0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28,
	0x29, 0x29, 0x52, 0x09, 0x73, 0x75, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x94, 0x07,
	0x0a, 0x09, 0x53, 0x75, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x5a, 0x0a,
	0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x34, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52,
	0x03, 0x6e, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x03, 0x75, 0x64, 0x69, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0c, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x03, 0x75, 0x64, 0x69, 0x3a, 0x7d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x3e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xf2, 0x1c, 0x0a, 0x13, 0x51, 0x49,
	0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61,
	0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x43,
	0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73,
	0x55, 0x72, 0x69, 0x12, 0x49, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x47,
	0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x12, 0x59, 0x0a, 0x0e, 0x69, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x13, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x6f, 0x12, 0x55, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x53, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x06, 0x6d,
	0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x52, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x18, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3a, 0x0a,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x44, 0x0a, 0x05, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12,
	0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x31,
	0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x73, 0x65, 0x6e,
	0x74, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x99, 0x01, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x5b, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x06, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x50, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x10, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x4d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x35, 0xf2, 0xbe, 0xc0,
	0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28,
	0x29, 0x29, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x1a, 0xa2, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x67, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xac, 0x02, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x1a, 0x91, 0x04, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0xec, 0x01, 0x0a, 0x08, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x58, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x8d, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x46, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0x85,
	0x1f, 0x0a, 0x1a, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x56,
	0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x1a, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x5c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x49, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x5a, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0e, 0x64, 0x6f, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52,
	0x0c, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x3c, 0x0a,
	0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x47, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0d, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09,
	0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x8a, 0x01, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20,
	0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x5d, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x63,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x58, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x65,
	0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0xa4, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x66, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0xa7, 0x01, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x69, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x09, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x50, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x10, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x4d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a, 0xa6, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x69, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64,
	0x65, 0x1a, 0xac, 0x02, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x6b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x1a, 0x98, 0x04, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0xec, 0x01, 0x0a,
	0x08, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x58, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x94, 0x01, 0x0a, 0x0b,
	0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x58, 0x12, 0x3c, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x3a, 0x9b, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x4d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0x85, 0x1f, 0x0a, 0x0f, 0x51, 0x49, 0x43, 0x6f, 0x72,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x4d, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x0e, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x55, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x40, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74,
	0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62,
	0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43,
	0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x6e, 0x73,
	0x65, 0x74, 0x58, 0x52, 0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x61, 0x62,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71,
	0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x58,
	0x52, 0x09, 0x61, 0x62, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0d, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x84, 0x01, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x48, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x6e, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x32, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x08, 0x61, 0x73,
	0x73, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0xa6, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x42, 0x62, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20,
	0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07,
	0x27, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12,
	0xa8, 0x01, 0x0a, 0x08, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x19, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x5b, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69,
	0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x20,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0x52, 0x08, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12,
	0xe0, 0x01, 0x0a, 0x06, 0x64, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x75, 0x65, 0x54, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x42, 0x9c, 0x01, 0xaa,
	0xfc, 0x8f, 0x93, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x75, 0x65, 0x54, 0x6f, 0xf2, 0xbe, 0xc0, 0xa4,
	0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29,
	0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x05, 0x64, 0x75, 0x65,
	0x54, 0x6f, 0x12, 0x90, 0x02, 0x0a, 0x12, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x5f,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x42, 0xa8, 0x01, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x43,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x69, 0x6e, 0x67, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0x20, 0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x28, 0x29, 0x52, 0x11, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x69, 0x6e, 0x67, 0x1a, 0xf1, 0x01, 0x0a, 0x06, 0x4f, 0x6e, 0x73, 0x65, 0x74, 0x58,
	0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xf5, 0x01, 0x0a, 0x0a, 0x41, 0x62,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x58, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x03, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x1a, 0xbc, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x7f, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x3f, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x12, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x1a, 0xc6, 0x02, 0x0a, 0x08, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x46, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x3a, 0xcc, 0x01, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xdc,
	0x1c, 0x0a, 0x0e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x77, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x32, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x0c,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x0a,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x20, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x40,
	0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x55, 0x0a, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x33, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x6e, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x38, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x79, 0x6f,
	0x72, 0x12, 0x7e, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69,
	0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x36, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x6e, 0x74, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x9e, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68,
	0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29,
	0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x11,
	0x63, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72,
	0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x72, 0x6f, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x72, 0x6f, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x1a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0xab, 0x02,
	0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x64, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x26, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x66, 0x6d, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xef, 0x02, 0x0a, 0x05,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xd1, 0x07,
	0x0a, 0x11, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f,
	0x73, 0x74, 0x54, 0x6f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x72, 0x79, 0x2e, 0x45, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x35, 0xf2, 0xbe,
	0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f,
	0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x28, 0x29, 0x29, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x91,
	0x01, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x41, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05,
	0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x1a, 0xbc, 0x02, 0x0a, 0x09, 0x45, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x3a, 0x83, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x30,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xf9, 0x2c,
	0x0a, 0x0c, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x27,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0a,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x16, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x86, 0x01, 0x0a, 0x0b, 0x75, 0x64, 0x69, 0x5f, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x64, 0x69, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4,
	0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29,
	0x29, 0x52, 0x0a, 0x75, 0x64, 0x69, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x46, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71,
	0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x4c, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x64, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3f,
	0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12,
	0x48, 0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x40, 0x0a,
	0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x86, 0x01, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49,
	0x43, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e,
	0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x0e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e,
	0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x0e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7c, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71,
	0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4,
	0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29,
	0x29, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7f, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4,
	0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29,
	0x29, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x07, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18,
	0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x12, 0x4a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x72, 0x69, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x3c,
	0x0a, 0x06, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0c, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x1a, 0x8c, 0x07, 0x0a, 0x0a, 0x55, 0x64, 0x69, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x11, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x5f, 0x61, 0x69, 0x64, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x0b,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x41, 0x49, 0x44, 0x43, 0x12, 0x3c, 0x0a, 0x0b, 0x63,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x68, 0x72, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x63,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x48, 0x52, 0x46, 0x12, 0x5b, 0x0a, 0x0a, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71,
	0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x64, 0x69, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xa8, 0x02, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x44,
	0x49, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x69, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x75, 0x64, 0x69, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64,
	0x65, 0x1a, 0xa8, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x48, 0x49, 0x52, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x68, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2a,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xfd, 0x04, 0x0a,
	0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x1a, 0xa6, 0x02, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x3a, 0x6a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2c, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xd0, 0x02, 0x0a,
	0x0e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0b, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a,
	0xf7, 0x02, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x39,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x91, 0x03, 0x0a, 0x08, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0xc3, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x3e, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63,
	0x6f, 0x72, 0x65, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2e,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xb2, 0x26, 0x0a, 0x13, 0x51, 0x49,
	0x43, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61,
	0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x43,
	0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73,
	0x55, 0x72, 0x69, 0x12, 0x49, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x53,
	0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55,
	0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64,
	0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x56, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x49, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x58, 0x52, 0x0a,
	0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0a,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x84, 0x01, 0x0a, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x46,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x4b, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x0d, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xb2,
	0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x6b, 0x0a, 0x10, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x20, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x75, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x21, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x69,
	0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61,
	0x6e, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x10, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0xe6, 0x01, 0x0a, 0x0e, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0xa1, 0x01, 0xaa, 0xfc, 0x8f,
	0x93, 0x06, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2d, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0xf2,
	0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20,
	0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x28, 0x29, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x0c,
	0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x1a, 0xa6, 0x02, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x69, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xa6, 0x02, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x69, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xac,
	0x02, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x3a, 0x6b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xba, 0x01,
	0x0a, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x58, 0x12, 0x4c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0c, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xed, 0x04, 0x0a, 0x09, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x98, 0x02, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3b, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38,
	0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52,
	0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xcb, 0x01, 0x0a, 0x0b, 0x4f,
	0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x58, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x35, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06,
	0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x8d, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x46, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xe8,
	0x03, 0x0a, 0x28, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x44, 0x6f,
	0x6e, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x54, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x38,
	0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52,
	0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x96, 0x01, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x53,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x75,
	0x73, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6e, 0x6f, 0x74, 0x44,
	0x6f, 0x6e, 0x65, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0xb4, 0x14, 0x0a, 0x18, 0x51, 0x49,
	0x43, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f,
	0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x08,
	0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x14,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x5a, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71,
	0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0xb4, 0x01, 0x0a, 0x0c, 0x64, 0x65, 0x72,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x71, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61,
	0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x4f, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x58, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x12, 0x3e, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x4f, 0x6e,
	0x12, 0x80, 0x01, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x48, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x12, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x45, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x58, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x0f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x09,
	0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12,
	0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x12, 0xf2, 0x01, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x5f, 0x64, 0x6f, 0x6e,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0xb8, 0x01, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x53, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x75, 0x73, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6e, 0x6f, 0x74, 0x44, 0x6f, 0x6e,
	0x65, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29,
	0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21,
	0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0x52, 0x07, 0x6e, 0x6f, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x1a, 0xba, 0x02, 0x0a, 0x0a, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x72, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xc7, 0x01, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x58, 0x12, 0x35, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x3a, 0x97, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x3a, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4b, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x75, 0x73,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08,
	0x22, 0xc2, 0x1b, 0x0a, 0x19, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x62, 0x12, 0x27,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0xa8, 0x01, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x6d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43,
	0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12,
	0x5b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61,
	0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x62, 0x2e, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x78, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x3a, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x12, 0x99, 0x01, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x48, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x12, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x78, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x40, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xbe, 0xc0, 0xa4,
	0x07, 0x29, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x46, 0x6f,
	0x72, 0x6d, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x57, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x0c,
	0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x83, 0x01, 0x0a,
	0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x62, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20,
	0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x05, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x77,
	0x0a, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x2f, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x29, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f,
	0x72, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x2e,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0xff, 0x01, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0xaf, 0x01, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x4a, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e,
	0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0xf2, 0xbe, 0xc0, 0xa4,
	0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x1a, 0xb9, 0x02, 0x0a, 0x0a, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x3a, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x93, 0x01, 0x0a, 0x0a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x58, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48,
	0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xbf, 0x02, 0x0a, 0x05,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x11, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x3a, 0xe9, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x4c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63,
	0x6f, 0x72, 0x65, 0x2d, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6c, 0x61, 0x62, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x38, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4d, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69,
	0x63, 0x6f, 0x72, 0x65, 0x2d, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6c, 0x61, 0x62, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a,
	0x04, 0x08, 0x1d, 0x10, 0x1e, 0x22, 0xda, 0x1a, 0x0a, 0x1a, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x6f, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xa8, 0x01, 0x0a, 0x08, 0x62,
	0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x6d, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61,
	0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x5c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49,
	0x43, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4d,
	0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x62, 0x0a,
	0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x6f, 0x74, 0x65, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x58, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x78, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x3a, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x12, 0x99, 0x01, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x48, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x12, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x49, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x11, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x57, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52,
	0x0c, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x84, 0x01,
	0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71,
	0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x65,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20,
	0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x05, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x46, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0xff, 0x01, 0x0a, 0x12, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0xaf, 0x01, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x4a, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20,
	0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0xf2, 0xbe, 0xc0,
	0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x1a, 0xb9, 0x02, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x3a, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x93, 0x01, 0x0a, 0x0a, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x58, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8,
	0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xbf, 0x02, 0x0a,
	0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x11, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x3a, 0xeb,
	0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x4d, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d,
	0x63, 0x6f, 0x72, 0x65, 0x2d, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6e, 0x6f, 0x74, 0x65, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x38,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4e, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6e, 0x6f, 0x74, 0x65, 0x4a, 0x04, 0x08, 0x07,
	0x10, 0x08, 0x22, 0xe9, 0x03, 0x0a, 0x24, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x44, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x3a, 0x8f, 0x01, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x4c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x65, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x22, 0xe1,
	0x38, 0x0a, 0x0f, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43,
	0x6f, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4,
	0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29,
	0x29, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x8f, 0x01, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x35,
	0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29,
	0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x5b, 0x0a, 0x0f, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x61,
	0x72, 0x65, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d,
	0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52, 0x0d, 0x65,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x12, 0x4f, 0x0a, 0x08,
	0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x14,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x8b, 0x01,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f,
	0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68,
	0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29,
	0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x0b, 0x61,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x11, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x33, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x45, 0x0a, 0x0b,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x4f,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x85, 0x01, 0x0a, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x1b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43,
	0x6f, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20,
	0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x09, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x47, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0d, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x97, 0x01, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69,
	0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x0f, 0x68, 0x6f, 0x73, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29,
	0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5d, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x48, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x12, 0xf8, 0x01, 0x0a, 0x10, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0xa6, 0x01, 0xaa, 0xfc, 0x8f,
	0x93, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x65, 0x64, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64,
	0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x65, 0x64, 0x12, 0x8d, 0x02, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0xb1, 0x01, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x4c, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x2d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f,
	0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28,
	0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0xf2,
	0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x1a, 0xaa, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x65,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64,
	0x65, 0x1a, 0x94, 0x05, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71,
	0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0xaa, 0x02, 0x0a, 0x0a,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6b, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xc6, 0x02, 0x0a, 0x0c, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x1a, 0x9d, 0x03, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x65, 0x0a, 0x0a, 0x69, 0x6e,
	0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x25,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61,
	0x6c, 0x1a, 0x97, 0x03, 0x0a, 0x09, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x24, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a,
	0x03, 0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x1a, 0xa4, 0x07, 0x0a, 0x0f,
	0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x18, 0x70, 0x72, 0x65,
	0x5f, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x16, 0x70, 0x72,
	0x65, 0x41, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x47, 0x0a, 0x0c,
	0x61, 0x64, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x0b, 0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x0f, 0x64, 0x69, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x64,
	0x69, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a,
	0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x74, 0x65, 0x73,
	0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x72, 0x74, 0x65, 0x73, 0x79, 0x12, 0x55,
	0x0a, 0x13, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x12, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x64, 0x69,
	0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0xa8, 0x06, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x14, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x49, 0x0a, 0x0d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a,
	0xbb, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x74, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0xcc, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63,
	0x6f, 0x72, 0x65, 0x2d, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73,
	0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f,
	0x72, 0x65, 0x2d, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x07,
	0x10, 0x08, 0x22, 0xe4, 0x22, 0x0a, 0x19, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e,
	0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x43, 0x0a,
	0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x55,
	0x72, 0x69, 0x12, 0x5b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72,
	0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x52, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x36, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x03, 0x73, 0x65, 0x78,
	0x12, 0x4a, 0x0a, 0x04, 0x62, 0x6f, 0x72, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x42, 0x6f, 0x72, 0x6e, 0x58, 0x52, 0x04, 0x62, 0x6f, 0x72, 0x6e, 0x12, 0x47, 0x0a, 0x03,
	0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41, 0x67, 0x65, 0x58,
	0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x65,
	0x61, 0x73, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x63,
	0x65, 0x61, 0x73, 0x65, 0x64, 0x58, 0x52, 0x08, 0x64, 0x65, 0x63, 0x65, 0x61, 0x73, 0x65, 0x64,
	0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0xcc, 0x01, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x19, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x80, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x41, 0x6c, 0x6c, 0x65, 0x72,
	0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x1a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x35, 0xf2, 0xbe, 0xc0,
	0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28,
	0x29, 0x29, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xac, 0x02,
	0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x3a, 0x69, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xbe, 0x01, 0x0a,
	0x05, 0x42, 0x6f, 0x72, 0x6e, 0x58, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2f, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3b,
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83,
	0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xb7, 0x01,
	0x0a, 0x04, 0x41, 0x67, 0x65, 0x58, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x03, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xa7, 0x02, 0x0a, 0x09, 0x44, 0x65, 0x63, 0x65,
	0x61, 0x73, 0x65, 0x64, 0x58, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12,
	0x2c, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x1a, 0xb3, 0x0a, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x6f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65,
	0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x44, 0x65, 0x61, 0x74, 0x68, 0x12, 0x57, 0x0a, 0x05, 0x6f,
	0x6e, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x6e, 0x73, 0x65, 0x74, 0x58, 0x52, 0x05, 0x6f,
	0x6e, 0x73, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x96, 0x02, 0x0a, 0x13, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x62, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x41, 0x62, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x58, 0x42, 0xaa, 0x01, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x45, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x61, 0x62, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xf2,
	0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20,
	0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x28, 0x29, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x12,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x62, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0xff, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0xa9, 0x01, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x44, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28,
	0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20,
	0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x1a, 0xf0, 0x01, 0x0a, 0x06, 0x4f, 0x6e, 0x73, 0x65, 0x74, 0x58, 0x12,
	0x2c, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00,
	0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x99, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xa9, 0x0c, 0x0a, 0x0a, 0x51, 0x49,
	0x43, 0x6f, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4c,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x40,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x8a, 0x01, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x50, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x33, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x8b, 0x01, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x53, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x1a,
	0xa0, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x66, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x66, 0x6c, 0x61, 0x67, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x3a, 0x7b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x46, 0x6c, 0x61, 0x67, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x3d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x66, 0x6c, 0x61, 0x67, 0x4a,
	0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xb9, 0x1d, 0x0a, 0x0a, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65,
	0x47, 0x6f, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x68, 0x0a, 0x10, 0x6c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43,
	0x6f, 0x72, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x0f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x53, 0x0a, 0x12, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x11, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x25,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3e,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71,
	0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x47, 0x6f, 0x61, 0x6c,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x58, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0xbc,
	0x01, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x47, 0x6f,
	0x61, 0x6c, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x7a, 0xf2, 0xbe, 0xc0, 0xa4, 0x07,
	0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29,
	0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x3f, 0x28, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x2e,
	0x6e, 0x6f, 0x74, 0x28, 0x29, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3a, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x75, 0x0a, 0x0c, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x32, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x42, 0x79, 0x12, 0xb3, 0x01, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x75, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x13, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x52,
	0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x47, 0x0a,
	0x0c, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x19, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x11, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0xf0, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0xa0, 0x01, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x3b, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x6f, 0x61, 0x6c, 0x2d, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f,
	0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28,
	0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0xf2,
	0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x1a, 0xb2, 0x02, 0x0a, 0x13, 0x4c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x4c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x66, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x67, 0x6f, 0x61, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x4b,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x72, 0x74, 0x58, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xed, 0x07, 0x0a, 0x06,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x46, 0x0a, 0x07, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x07, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x2e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3f, 0x0a, 0x03, 0x64, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x2e, 0x44, 0x75, 0x65, 0x58, 0x52, 0x03, 0x64, 0x75, 0x65, 0x1a, 0xc4, 0x03, 0x0a, 0x07,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x58, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x1a, 0x86, 0x01, 0x0a, 0x04, 0x44, 0x75, 0x65, 0x58, 0x12, 0x2f, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0xbd, 0x01, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72,
	0x65, 0x2d, 0x67, 0x6f, 0x61, 0x6c, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x47, 0x6f, 0x61, 0x6c, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3d, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x67, 0x6f, 0x61, 0x6c, 0x4a, 0x04, 0x08, 0x07, 0x10,
	0x08, 0x22, 0xe6, 0x23, 0x0a, 0x12, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x54,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4d, 0x0a, 0x09,
	0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x5d, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65,
	0x64, 0x4f, 0x6e, 0x12, 0x4e, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74,
	0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x0b, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e,
	0x74, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x50, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74,
	0x52, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x58, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x10, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x7f, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x1a, 0xb0, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x6e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x69, 0x6d,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x73, 0x74, 0x75, 0x64, 0x79, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x1a, 0xd0, 0x0f, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x49, 0x6e, 0x74, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3b, 0x0a,
	0x0a, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x08, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x8f, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f,
	0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x2e, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x42,
	0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29,
	0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x12, 0x8c, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43,
	0x6f, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x2e,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42,
	0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29,
	0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x1a, 0xba, 0x03, 0x0a, 0x09, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb0, 0x01, 0x0a, 0x05, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x7a, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0xa6, 0x03,
	0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x73, 0x6f, 0x70, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x08, 0x73, 0x6f, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3a, 0x8b, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x49, 0x6d, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x45, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0x86, 0x2e, 0x0a, 0x12, 0x51,
	0x49, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x8f, 0x01, 0x0a, 0x0c, 0x76, 0x61, 0x63,
	0x63, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x46, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0,
	0xa4, 0x07, 0x3a, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x77, 0x68, 0x65, 0x72, 0x65, 0x28,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3d, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x69, 0x64, 0x2f,
	0x6e, 0x64, 0x63, 0x27, 0x29, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x52, 0x0b, 0x76,
	0x61, 0x63, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x6f, 0x63, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x0e, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56,
	0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0a, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x42, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65,
	0x12, 0x3a, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x0d,
	0x64, 0x6f, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x64, 0x6f, 0x73, 0x65, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x88, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x42,
	0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29,
	0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x81, 0x01,
	0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x36, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x70, 0x6f, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x75, 0x62, 0x70, 0x6f, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0xb9, 0x01, 0x0a, 0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x66, 0xf2, 0xbe,
	0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f,
	0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x28, 0x29, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f,
	0x72, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x52, 0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x55, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x45, 0x6c, 0x69, 0x67, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x49, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4,
	0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29,
	0x29, 0x52, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9b, 0x01, 0x0a, 0x10,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x49, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x1a, 0xb9, 0x02, 0x0a, 0x0a, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x9a, 0x01, 0x0a, 0x0b, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x58, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x1a, 0xff, 0x02, 0x0a, 0x09, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x05,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x40, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x1a, 0xd5, 0x03, 0x0a, 0x09, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0d,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36,
	0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x4a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x10, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x1a, 0xfc, 0x02, 0x0a,
	0x08, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x11, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x1a, 0xc7, 0x07, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x50,
	0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x4b, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x65, 0x61,
	0x73, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x12, 0x6e, 0x0a,
	0x0b, 0x64, 0x6f, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72,
	0x65, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x2e, 0x44, 0x6f,
	0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x0a, 0x64, 0x6f, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x69, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x64, 0x6f, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f,
	0x72, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x2e, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x6f, 0x73, 0x65, 0x73, 0x58, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x44, 0x6f, 0x73, 0x65, 0x73, 0x1a, 0xa3, 0x01, 0x0a, 0x0b, 0x44, 0x6f, 0x73,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x58, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12,
	0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xa4,
	0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x6f, 0x73, 0x65, 0x73, 0x58, 0x12,
	0x45, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0xd5, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x69, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x34, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x45, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71,
	0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65,
	0x2d, 0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08,
	0x07, 0x10, 0x08, 0x22, 0xc2, 0x12, 0x0a, 0x1c, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x07, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x53, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0d, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x12, 0x69,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x18, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x64, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x64, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x0b, 0x64,
	0x6f, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x49,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x58, 0x52, 0x0a, 0x64, 0x6f, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x63, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x64, 0x6f, 0x73, 0x65, 0x73, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f,
	0x72, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44,
	0x6f, 0x73, 0x65, 0x73, 0x58, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x6f, 0x73,
	0x65, 0x73, 0x1a, 0xce, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x5a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x79, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x1a, 0xa3, 0x01, 0x0a, 0x0b, 0x44, 0x6f, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x58, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xa4, 0x01, 0x0a, 0x0c, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x44, 0x6f, 0x73, 0x65, 0x73, 0x58, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x3a, 0x9f, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x3e, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x4f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x69, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xa9, 0x19, 0x0a, 0x20, 0x51, 0x49, 0x43,
	0x6f, 0x72, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a,
	0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0xdf, 0x01, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6f, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20,
	0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0xf2, 0xbe, 0xc0,
	0xa4, 0x07, 0x2e, 0x76, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x9b, 0x10, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47,
	0x0a, 0x0c, 0x76, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x76, 0x61, 0x63, 0x63,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x73,
	0x65, 0x61, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x56, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x55, 0x0a, 0x0f,
	0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0xb2, 0x01, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f,
	0x6e, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x73, 0x0a, 0x0b, 0x64,
	0x6f, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x52, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x49,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x73, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x58, 0x52, 0x0a, 0x64, 0x6f, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x76, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x64, 0x6f, 0x73, 0x65, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x49, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x6f, 0x73, 0x65, 0x73, 0x58, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x44, 0x6f, 0x73, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x17, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8f, 0x01, 0x0a, 0x1e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x29,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e,
	0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x1c, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xc8, 0x02, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x65,
	0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0xa3, 0x01, 0x0a, 0x0b, 0x44, 0x6f, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x58, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xa4, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x44, 0x6f, 0x73, 0x65, 0x73, 0x58, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74,
	0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a,
	0x9c, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x42, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x48, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x69,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x63, 0x4a, 0x04,
	0x08, 0x07, 0x10, 0x08, 0x22, 0xc7, 0x1d, 0x0a, 0x0e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x48, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71,
	0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x07,
	0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x49, 0x0a, 0x0d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x81, 0x01, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29,
	0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x67, 0x0a, 0x15, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x5f, 0x6f, 0x66, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74,
	0x4f, 0x66, 0x12, 0x9b, 0x01, 0x0a, 0x12, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x5f, 0x6f, 0x66, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x4f, 0x66, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68,
	0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29,
	0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x10,
	0x68, 0x6f, 0x75, 0x72, 0x73, 0x4f, 0x66, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x54, 0x0a, 0x17, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x16,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x1a, 0xa8, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x3a, 0x6a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2c, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xa2, 0x02,
	0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x68, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x1a, 0x84, 0x03, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x40, 0x0a,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x38, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52,
	0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x1a, 0x90, 0x06, 0x0a, 0x10, 0x48, 0x6f,
	0x75, 0x72, 0x73, 0x4f, 0x66, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x73,
	0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x4f, 0x66, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65,
	0x6b, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65,
	0x6b, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x52, 0x06, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x79, 0x12, 0x3c, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x1a, 0xa5, 0x02, 0x0a, 0x0e, 0x44, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57,
	0x65, 0x65, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x79,
	0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x67, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x61,
	0x79, 0x73, 0x2d, 0x6f, 0x66, 0x2d, 0x77, 0x65, 0x65, 0x6b, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0xc9, 0x01, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75,
	0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f,
	0x72, 0x65, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xa5,
	0x14, 0x0a, 0x10, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x89, 0x01,
	0x0a, 0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20,
	0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x0a, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x7a, 0x0a, 0x05, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68,
	0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29,
	0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x05,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x1a, 0xac, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x1a, 0xdf, 0x04, 0x0a, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x36,
	0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x08, 0x73, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a, 0xcd, 0x01, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x58,
	0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x12, 0x5f, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xc5, 0x02, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x6c, 0x6f,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x6c, 0x6f, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0e,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x3a, 0xcf,
	0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x42, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d,
	0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x43, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71,
	0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xfb, 0x20, 0x0a, 0x1e, 0x51, 0x49, 0x43, 0x6f, 0x72,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61,
	0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x3c, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x12, 0x66, 0x0a,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x2d,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x18, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x74, 0x4f, 0x66, 0x12, 0x60, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49,
	0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x69, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5c,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43,
	0x61, 0x72, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x65, 0x0a, 0x16,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x15, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x49, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x09,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28,
	0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x17,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x36, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x51, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x44, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0c, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x1a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x06,
	0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x42, 0x59, 0xf2, 0xbe, 0xc0, 0xa4,
	0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29,
	0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x1e, 0x64, 0x6f, 0x73, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x06, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x12, 0x55, 0x0a,
	0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x1c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x10, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x50, 0x72, 0x6f, 0x76,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x1a, 0xc0, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x72, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xc4, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x50, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x10, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x93,
	0x01, 0x0a, 0x0a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x58, 0x12, 0x3c, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x1a, 0x83, 0x03, 0x0a, 0x09, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7a,
	0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x44, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0xcb, 0x05, 0x0a, 0x06, 0x44,
	0x6f, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2f, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x38, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x6f, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x64, 0x6f, 0x73, 0x65, 0x12, 0x56, 0x0a,
	0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x58, 0x52,
	0x04, 0x72, 0x61, 0x74, 0x65, 0x1a, 0x90, 0x01, 0x0a, 0x05, 0x52, 0x61, 0x74, 0x65, 0x58, 0x12,
	0x32, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0xa3, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x51, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71,
	0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04,
	0x08, 0x07, 0x10, 0x08, 0x22, 0x8f, 0x22, 0x0a, 0x18, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73,
	0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f,
	0x6f, 0x66, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x4f,
	0x66, 0x12, 0x5a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x62, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43,
	0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73,
	0x70, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x58, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x63, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0d, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x5c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x65, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8e, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e,
	0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x09, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x72, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x17,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x3f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x44, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x64, 0x61,
	0x79, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x0d, 0x77, 0x68, 0x65, 0x6e,
	0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c,
	0x77, 0x68, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x10,
	0x77, 0x68, 0x65, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0e, 0x77, 0x68, 0x65, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x65,
	0x64, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1f, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x64, 0x6f, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x6f, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x11, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x97, 0x01, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4,
	0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29,
	0x29, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5a, 0x0a, 0x0e, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x0d, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x0d, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x21, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x10, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x1a, 0xbc, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x74, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64,
	0x65, 0x1a, 0xc9, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x53, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0d, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83,
	0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xc4, 0x01,
	0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x51, 0x0a,
	0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x12, 0x50, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x10, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x1a, 0xac, 0x03, 0x0a, 0x09, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa2,
	0x01, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x6c,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x05, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x1a, 0xf0, 0x03, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x0f, 0x77, 0x61, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0e, 0x77,
	0x61, 0x73, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x3a, 0x97, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x4b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xe9, 0x35, 0x0a, 0x17, 0x51, 0x49, 0x43, 0x6f, 0x72,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x59,
	0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x57, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71,
	0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0e, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x64, 0x6f, 0x4e, 0x6f,
	0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x54, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x58, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x62,
	0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x65, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x12,
	0xaa, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x6c, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0xb2, 0x01, 0x0a,
	0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61,
	0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x12, 0x4b, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x0d, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x64,
	0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x28, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x6b, 0x0a, 0x10, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x20, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12,
	0x43, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x73, 0x55, 0x72, 0x69, 0x12, 0x94, 0x01, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f,
	0x6e, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x59, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43,
	0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x4a, 0x0a, 0x10, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x16, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x13, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x5f, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x21, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x23, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x64, 0x6f, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x11, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa0, 0x01, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29,
	0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x35, 0xf2, 0xbe, 0xc0,
	0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28,
	0x29, 0x29, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x66, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0e, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x13, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x10, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0xba, 0x02, 0x0a, 0x0a,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xba, 0x02, 0x0a, 0x0a, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x3a, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xac, 0x02, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x1a, 0xf4, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x58, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x9a, 0x01, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x5a, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xc4, 0x01, 0x0a, 0x0b,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x50,
	0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x10, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x1a, 0x93, 0x09, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0xa4, 0x01, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x6c, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69,
	0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x4a, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x5b, 0x0a, 0x19, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x73, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x52, 0x16,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x73, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x18, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x50, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x1a, 0xc3, 0x02, 0x0a, 0x0b, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x46, 0x69,
	0x6c, 0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x9a, 0x04, 0x0a, 0x0c, 0x53, 0x75, 0x62,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43,
	0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0xa9, 0x01, 0x0a, 0x08, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x58, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0xe4, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x49, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x4a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x04, 0x08, 0x07,
	0x10, 0x08, 0x22, 0x85, 0x17, 0x0a, 0x19, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x74, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x39, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0xa8, 0x01, 0x0a,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x6f,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x18, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69,
	0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x13, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x12, 0x5b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x40, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x64, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49,
	0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x45, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x59, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x58, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x4a, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0c, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x12, 0x81, 0x01, 0x0a, 0x12,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x32, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x11, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x51, 0x0a, 0x0c, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x18,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x36, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x06, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x1a, 0xc0, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x76, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x38,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xc4, 0x01, 0x0a, 0x0b, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x50, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x10, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x1a, 0x93, 0x01, 0x0a, 0x0a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x58,
	0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0xea, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x4b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71,
	0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65,
	0x2d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xb0, 0x02, 0x0a, 0x16, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6c, 0x69, 0x74, 0x61, 0x72, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x5a, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x8c,
	0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x49, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6d, 0x69, 0x6c,
	0x69, 0x74, 0x61, 0x72, 0x79, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xc9, 0x31,
	0x0a, 0x14, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f,
	0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x16,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6e,
	0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x15, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x73, 0x55, 0x72, 0x69, 0x12, 0x3c, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x49, 0x43, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56,
	0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x74,
	0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09,
	0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x28, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x13,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x18, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x12, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x18, 0x66, 0x6f, 0x6f, 0x64, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x16, 0x66, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x13, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x6f, 0x6f, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x88, 0x01, 0x0a, 0x09, 0x6f, 0x72, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x65, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49,
	0x43, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x4f, 0x72, 0x61, 0x6c, 0x44, 0x69, 0x65, 0x74, 0x42, 0x35, 0xf2, 0xbe, 0xc0,
	0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28,
	0x29, 0x29, 0x52, 0x08, 0x6f, 0x72, 0x61, 0x6c, 0x44, 0x69, 0x65, 0x74, 0x12, 0x8d, 0x01, 0x0a,
	0x0a, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65,
	0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07,
	0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29,
	0x52, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x9a, 0x01, 0x0a,
	0x0f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x49, 0x43, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64,
	0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a, 0xa6,
	0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x69, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xa6, 0x02, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x69, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x1a, 0x86, 0x0b, 0x0a, 0x08, 0x4f, 0x72, 0x61, 0x6c, 0x44, 0x69, 0x65, 0x74, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x08, 0x6e,
	0x75, 0x74, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71,
	0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x74, 0x72,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x61, 0x6c, 0x44,
	0x69, 0x65, 0x74, 0x2e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x35, 0xf2, 0xbe,
	0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f,
	0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x28, 0x29, 0x29, 0x52, 0x08, 0x6e, 0x75, 0x74, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x8d, 0x01,
	0x0a, 0x07, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4e, 0x75,
	0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x61,
	0x6c, 0x44, 0x69, 0x65, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x42, 0x35, 0xf2,
	0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20,
	0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x28, 0x29, 0x29, 0x52, 0x07, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x12, 0x5a, 0x0a,
	0x16, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x14, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xc3, 0x02, 0x0a, 0x08, 0x4e, 0x75, 0x74,
	0x72, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x40, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x3b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xc8,
	0x02, 0x0a, 0x07, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x09, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x08, 0x66, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xf9, 0x03, 0x0a, 0x0a, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xd9, 0x0c, 0x0a, 0x0e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x19, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x62, 0x61, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0d,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6f,
	0x72, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x6f, 0x72, 0x69, 0x63, 0x44,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x5b, 0x0a, 0x16, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x6f,
	0x66, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x15, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x6f, 0x66, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0xa8, 0x01, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x74, 0x72, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68,
	0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29,
	0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x0e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56,
	0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x1a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x19, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0xbc, 0x04, 0x0a, 0x0e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x37, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x08,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x63, 0x0a, 0x04, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x58, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x1a, 0x90,
	0x01, 0x0a, 0x05, 0x52, 0x61, 0x74, 0x65, 0x58, 0x12, 0x41, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x3a, 0x8f, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x36,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x47, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69,
	0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0x91, 0x33, 0x0a, 0x11, 0x51, 0x49,
	0x43, 0x6f, 0x72, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xbc, 0x01, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x80, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73,
	0x65, 0x64, 0x4f, 0x6e, 0x12, 0xbc, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x82, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x18, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49,
	0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x74, 0x4f, 0x66, 0x12, 0x53, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f,
	0x72, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x67, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x2d, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x44, 0x0a,
	0x05, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x66, 0x6f,
	0x63, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x51, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49,
	0x43, 0x6f, 0x72, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x58, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x82, 0x01, 0x0a, 0x09,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x44, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41,
	0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x41,
	0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74,
	0x65, 0x12, 0x3c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x4a, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65,
	0x6e, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x56, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0xcb, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71,
	0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20,
	0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0xf2, 0xbe, 0xc0,
	0xa4, 0x07, 0x2e, 0x6c, 0x6f, 0x77, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20,
	0x6f, 0x72, 0x20, 0x68, 0x69, 0x67, 0x68, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0x20, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x82, 0x01, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x43, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x15, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75,
	0x6c, 0x61, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x68, 0x61, 0x73,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x6f, 0x0a, 0x0c, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x2c, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x72, 0x69,
	0x76, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x87, 0x01, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42,
	0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29,
	0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x12, 0xf1, 0x01, 0x0a, 0x0d, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42,
	0xa5, 0x01, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x62, 0x6f, 0x64, 0x79,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20,
	0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0xf2, 0xbe, 0xc0,
	0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x0c, 0x62, 0x6f, 0x64, 0x79, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xdb, 0x01, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x9e, 0x01, 0xaa, 0xfc,
	0x8f, 0x93, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x65, 0x6c, 0x74, 0x61, 0xf2, 0xbe, 0xc0,
	0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28,
	0x29, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x05, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x1a, 0xae, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x1a, 0x84, 0x02, 0x0a, 0x0a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x58, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00,
	0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12,
	0x38, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xb0, 0x05, 0x0a, 0x06,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x38, 0x0a,
	0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x45, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x98,
	0x04, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x03, 0x6c,
	0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x03, 0x6c,
	0x6f, 0x77, 0x12, 0x37, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x38, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73,
	0x5f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x09, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x8f, 0x0a, 0x0a, 0x09, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72,
	0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0xb0, 0x05, 0x0a, 0x06, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x58, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48,
	0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x45, 0x0a, 0x0c,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48,
	0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x89, 0x01, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xf8, 0x0e,
	0x0a, 0x12, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x64, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f,
	0x6d, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x27, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x1b, 0x77, 0x68, 0x65, 0x72, 0x65, 0x28, 0x75, 0x73,
	0x65, 0x20, 0x3d, 0x20, 0x27, 0x68, 0x6f, 0x6d, 0x65, 0x27, 0x29, 0x2e, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x28, 0x29, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x5f, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x27, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x1b, 0x77, 0x68, 0x65, 0x72, 0x65, 0x28, 0x75,
	0x73, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x68, 0x6f, 0x6d, 0x65, 0x27, 0x29, 0x2e, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x28, 0x29, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x12, 0x82, 0x01, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42,
	0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29,
	0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12,
	0x4a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0xac, 0x03, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3e, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63,
	0x6f, 0x6d, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0xd5, 0x01, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65,
	0x2d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x45, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71,
	0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0x91, 0x30, 0x0a, 0x0d, 0x51, 0x49, 0x43,
	0x6f, 0x72, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x47, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x61,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x2d, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x21, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x67, 0x69, 0x76,
	0x65, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x4f,
	0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x64, 0x65, 0x63,
	0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x65, 0x63, 0x65, 0x61, 0x73, 0x65, 0x64, 0x58, 0x52, 0x08, 0x64, 0x65, 0x63,
	0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a,
	0x0e, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x6d, 0x61, 0x72,
	0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x0e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72,
	0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x58, 0x52, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0xd2, 0x01,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x89, 0x01,
	0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29,
	0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x28, 0x29, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x4e, 0x6e, 0x61, 0x6d, 0x65, 0x2e,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x6c, 0x65,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0x20, 0x6f, 0x72, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x8f, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x35,
	0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29,
	0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x77, 0x0a, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x18, 0x17, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x24, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x12, 0x67, 0x0a,
	0x15, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x19,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43,
	0x6f, 0x72, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x42,
	0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29,
	0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x89, 0x01, 0x0a,
	0x04, 0x72, 0x61, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x53, 0x43, 0x6f, 0x72,
	0x65, 0x52, 0x61, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x42,
	0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x72, 0x61,
	0x63, 0x65, 0x52, 0x04, 0x72, 0x61, 0x63, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x09, 0x65, 0x74, 0x68,
	0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x53, 0x43, 0x6f,
	0x72, 0x65, 0x45, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x47, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63,
	0x6f, 0x72, 0x65, 0x2d, 0x65, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x52, 0x09, 0x65,
	0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0xa3, 0x01, 0x0a, 0x08, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x73, 0x65, 0x78, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x53, 0x43, 0x6f, 0x72,
	0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x53, 0x65, 0x78, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x46, 0xaa, 0xfc,
	0x8f, 0x93, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x73, 0x65, 0x78, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x73, 0x65, 0x78, 0x12, 0x80,
	0x01, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x3e, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x38, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x72,
	0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x7f, 0x0a, 0x0b, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x40, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x3a, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x40, 0xaa,
	0xfc, 0x8f, 0x93, 0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x2d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x0a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x8c, 0x01, 0x0a, 0x0b,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x20, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x41, 0xaa, 0xfc, 0x8f, 0x93,
	0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x2d, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x8b, 0x01, 0x0a, 0x0f, 0x63,
	0x61, 0x64, 0x61, 0x76, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x6f, 0x6e, 0x6f, 0x72, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x42, 0x44, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x3e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x61, 0x64, 0x61, 0x76, 0x65,
	0x72, 0x69, 0x63, 0x44, 0x6f, 0x6e, 0x6f, 0x72, 0x52, 0x0e, 0x63, 0x61, 0x64, 0x61, 0x76, 0x65,
	0x72, 0x69, 0x63, 0x44, 0x6f, 0x6e, 0x6f, 0x72, 0x12, 0xa0, 0x01, 0x0a, 0x10, 0x6d, 0x69, 0x6c,
	0x69, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x4f, 0xaa, 0xfc, 0x8f, 0x93, 0x06,
	0x49, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6d, 0x69, 0x6c, 0x69, 0x74, 0x61,
	0x72, 0x79, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0f, 0x6d, 0x69, 0x6c, 0x69,
	0x74, 0x61, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7d, 0x0a, 0x0a, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x3f,
	0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x62, 0x69, 0x72, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xb4, 0x02, 0x0a, 0x0a, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a,
	0x70, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x32, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64,
	0x65, 0x1a, 0x95, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x63, 0x65, 0x61, 0x73, 0x65, 0x64, 0x58, 0x12,
	0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00,
	0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x96, 0x01, 0x0a, 0x0e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x58, 0x12, 0x38, 0x0a, 0x07,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x1a, 0xcb, 0x07, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f,
	0x6d, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65,
	0x63, 0x6f, 0x6d, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4f, 0x0a, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0c,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0xb4, 0x02, 0x0a, 0x0a, 0x47, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x70,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x32, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x1a, 0xcf, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x1a, 0xf8, 0x04, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x12, 0x4e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x1a, 0x9a, 0x02, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x64, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x26, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0xc6, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x3f, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63,
	0x6f, 0x72, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0x96, 0x11, 0x0a,
	0x12, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x75, 0x6d, 0x61,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d,
	0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4c, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x35, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x94, 0x01, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f,
	0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28,
	0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52,
	0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a,
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb4, 0x02, 0x0a, 0x0a, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a,
	0x70, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x32, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64,
	0x65, 0x1a, 0xcd, 0x03, 0x0a, 0x0d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x40,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x4a, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x3a, 0xd5, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x44,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x45, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x70, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a,
	0x04, 0x08, 0x14, 0x10, 0x15, 0x22, 0xe9, 0x13, 0x0a, 0x16, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x12, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63,
	0x61, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63,
	0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x11, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a,
	0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x99, 0x01, 0x0a, 0x0e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f,
	0x72, 0x65, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28,
	0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x0d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x5f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x2e, 0x4e, 0x6f,
	0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4,
	0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29,
	0x29, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x54, 0x0a, 0x17, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x1a, 0xac, 0x06, 0x0a, 0x0d, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a,
	0x0c, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f,
	0x72, 0x65, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x2e, 0x44, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x0a, 0x64, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x35, 0x0a, 0x07, 0x61,
	0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x06, 0x61, 0x6c, 0x6c, 0x44,
	0x61, 0x79, 0x12, 0x4b, 0x0a, 0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x12, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x47, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xa5, 0x02, 0x0a, 0x0e, 0x44, 0x61, 0x79,
	0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x67, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x64, 0x61, 0x79, 0x73, 0x2d, 0x6f, 0x66, 0x2d, 0x77, 0x65, 0x65, 0x6b, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x1a, 0xc4, 0x02, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52,
	0x06, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0xe1, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x48, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x70, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x72, 0x6f, 0x6c, 0x65, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x49, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x70, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x72, 0x6f, 0x6c, 0x65, 0x4a, 0x04, 0x08, 0x07, 0x10,
	0x08, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x4a, 0x04, 0x08, 0x11, 0x10, 0x12, 0x4a, 0x04, 0x08,
	0x12, 0x10, 0x13, 0x4a, 0x04, 0x08, 0x13, 0x10, 0x14, 0x4a, 0x04, 0x08, 0x14, 0x10, 0x15, 0x4a,
	0x04, 0x08, 0x15, 0x10, 0x16, 0x4a, 0x04, 0x08, 0x16, 0x10, 0x17, 0x4a, 0x04, 0x08, 0x17, 0x10,
	0x18, 0x22, 0x90, 0x27, 0x0a, 0x0f, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a,
	0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x16, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x15, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x12, 0x43, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x73, 0x55, 0x72, 0x69, 0x12, 0x5d, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64,
	0x5f, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62,
	0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x77, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f,
	0x66, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x3e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x18, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x12,
	0x51, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x40, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x58, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x1a, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x09, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71,
	0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x58,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x64, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x48, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x61,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x48, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18,
	0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49,
	0x43, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68,
	0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29,
	0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x09,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0xa7, 0x01, 0x0a,
	0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x5c, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73,
	0x69, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x16, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x10, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x41, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x75, 0x70, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x8c, 0x01,
	0x0a, 0x0c, 0x66, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x23,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43,
	0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x6f, 0x63,
	0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f,
	0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28,
	0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52,
	0x0b, 0x66, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x72, 0x0a, 0x0e,
	0x75, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x24,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x2b, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x41, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x25, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x75, 0x73, 0x65, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x85, 0x02, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0xac, 0x01, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x47, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x2d,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69,
	0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x52, 0x15, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x42, 0x6f,
	0x64, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0xf5, 0x01, 0x0a, 0x12,
	0x69, 0x6e, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0xa7, 0x01, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x42,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x2d, 0x69, 0x6e, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28,
	0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20,
	0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x1a, 0xa2, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a,
	0x67, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x29, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x93, 0x01, 0x0a, 0x0a, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x58, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xe0,
	0x03, 0x0a, 0x09, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x80, 0x01, 0x0a, 0x05, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x4a, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x0c, 0x6f,
	0x6e, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x6f, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x4f,
	0x66, 0x1a, 0xdb, 0x02, 0x0a, 0x0b, 0x46, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0b, 0x6d, 0x61, 0x6e,
	0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x3a,
	0xcc, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x41, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73,
	0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69,
	0x63, 0x6f, 0x72, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x4a, 0x04,
	0x08, 0x07, 0x10, 0x08, 0x22, 0xbf, 0x10, 0x0a, 0x13, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63,
	0x6f, 0x6d, 0x12, 0x4d, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x38, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x95, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb4, 0x02, 0x0a, 0x0a, 0x47, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x70, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xcf,
	0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x3a, 0x8d, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x35, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x46, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73,
	0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f,
	0x72, 0x65, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xff, 0x03, 0x0a, 0x36, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x72, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x6e,
	0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x85,
	0x01, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x9f, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x5c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69,
	0x63, 0x6f, 0x72, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x6e,
	0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xd5, 0x2c, 0x0a, 0x14, 0x51, 0x49, 0x43,
	0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61,
	0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x43,
	0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73,
	0x55, 0x72, 0x69, 0x12, 0x74, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x39, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x50, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x14, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x49, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x40,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x54, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0e, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x64, 0x6f,
	0x4e, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x51, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x58, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x60, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x57, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49,
	0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x58, 0x52, 0x0a,
	0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x61, 0x73,
	0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71,
	0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x73, 0x4e, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x58, 0x52, 0x08, 0x61, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x3e,
	0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0xa4,
	0x01, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x66, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x67, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0d, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x20, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x21, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x10,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x4d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x21, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x08, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x69, 0x6e,
	0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4a, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18, 0x26, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x41, 0x0a, 0x09,
	0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12,
	0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x10, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0f,
	0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0xed, 0x01, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0xa1, 0x01,
	0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28,
	0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20,
	0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x85, 0x02, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x2c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0xac, 0x01, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x47, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x2d, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x61, 0x63, 0x68, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29,
	0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21,
	0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0x52, 0x15, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0xed, 0x01, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x49,
	0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x6e, 0x65, 0x73,
	0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x42, 0x62, 0xaa,
	0xfc, 0x8f, 0x93, 0x06, 0x5c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x14, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0xa6, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x69, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x1a, 0xa6, 0x02, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x69,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xac, 0x02, 0x0a, 0x0c, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6b, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xc2, 0x01, 0x0a, 0x09, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x58, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83,
	0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xcb, 0x01,
	0x0a, 0x0b, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x58, 0x12, 0x3c, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xaa, 0x01, 0x0a, 0x09,
	0x41, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x58, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x8f, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x47, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08,
	0x22, 0xd2, 0x25, 0x0a, 0x0e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x6d, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x14, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x48, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71,
	0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x6d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x33, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x14, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x87, 0x01, 0x0a,
	0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69,
	0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x87, 0x01, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x35, 0xf2,
	0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20,
	0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x28, 0x29, 0x29, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x12, 0x84, 0x01, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43,
	0x6f, 0x72, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e,
	0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x1a, 0xa8, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a,
	0x6a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2c, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xa3, 0x08, 0x0a, 0x0a,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x59, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x58, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x39, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x62,
	0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x66,
	0x0a, 0x0e, 0x66, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x49, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x58, 0x52, 0x0d, 0x66, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x93, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x58, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8,
	0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xb2, 0x01, 0x0a,
	0x0e, 0x46, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x58, 0x12,
	0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48,
	0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x1a, 0xf3, 0x04, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x4b, 0x0a,
	0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x58,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x8e, 0x01, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x58,
	0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xaf, 0x08, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x11, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x55, 0x0a, 0x08,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x58, 0x52, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x12, 0xff, 0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x42, 0xa4, 0x01, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x3f, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2d, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xf2, 0xbe, 0xc0,
	0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28,
	0x29, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x17, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0xc1, 0x01, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x83, 0x01, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x41, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x4a,
	0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xca, 0x12, 0x0a, 0x0f, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61,
	0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x49, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3d,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x82, 0x01,
	0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4,
	0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29,
	0x29, 0x52, 0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0xae, 0x02,
	0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x46, 0x48, 0x49, 0x52, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x3a, 0x6b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xfd,
	0x02, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x3f, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0xd3,
	0x03, 0x0a, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x62, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x58,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x1a, 0x6f, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x58, 0x12, 0x4f, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x3a, 0x85, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x53, 0x75, 0x62, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73,
	0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f,
	0x72, 0x65, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x04, 0x08, 0x07,
	0x10, 0x08, 0x22, 0xe5, 0x4f, 0x0a, 0x0a, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e,
	0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x43, 0x0a,
	0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x55,
	0x72, 0x69, 0x12, 0x49, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x4a, 0x0a,
	0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x5f, 0x6f, 0x66, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0a, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x12, 0x49,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0f, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x05, 0x66, 0x6f, 0x63, 0x75, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x46, 0x0a,
	0x09, 0x66, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x03, 0x66, 0x6f, 0x72, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09,
	0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x65, 0x64,
	0x5f, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x65, 0x64, 0x4f, 0x6e, 0x12, 0x42, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0xa4, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x66, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x4b, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xc2, 0x01, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x8b, 0x01, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43,
	0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x4a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a,
	0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x5f, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x21, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e,
	0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x10, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x86, 0x01, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68,
	0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29,
	0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x0b,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x78, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x42, 0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68,
	0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29,
	0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x77, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49,
	0x43, 0x6f, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42,
	0x35, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2f, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29,
	0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3e, 0x20, 0x69, 0x64, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x1a, 0xe6,
	0x03, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52,
	0x0b, 0x72, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0xa3, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0xde, 0x1a, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x82, 0x18, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x48,
	0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2c, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x69, 0x64, 0x48,
	0x00, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x75,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69,
	0x12, 0x2c, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x6c, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x2f,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x48, 0x00, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x38, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x67, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a,
	0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3f, 0x0a, 0x0a, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x41, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x48, 0x00,
	0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3b,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x3e, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x74, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x12, 0x4b, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x44,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x14, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x10, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x57, 0x0a, 0x12,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x75, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x35, 0x0a, 0x06, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xd8, 0x1a, 0x0a, 0x06, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x49, 0x43, 0x6f, 0x72, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x82,
	0x18, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x48, 0x0a, 0x0d, 0x62, 0x61, 0x73,
	0x65, 0x36, 0x34, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x3e, 0x0a,
	0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x2f, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2f,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x07,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x12, 0x2c, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x03, 0x75, 0x72, 0x69, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x2c, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x72, 0x6c, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x75,
	0x69, 0x64, 0x48, 0x00, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61,
	0x67, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x48, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3b, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x68, 0x75,
	0x6d, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x32,
	0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48,
	0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x3e,
	0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x45,
	0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x44, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x12,
	0x51, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x13, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x57, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x48, 0x0a, 0x0d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x64, 0x6f,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x73, 0x61, 0x67,
	0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x3a, 0x7b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x54, 0x61, 0x73, 0x6b, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x3d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x74, 0x61, 0x73, 0x6b,
	0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x23, 0x10, 0x24, 0x4a, 0x04, 0x08, 0x24,
	0x10, 0x25, 0x4a, 0x04, 0x08, 0x25, 0x10, 0x26, 0x4a, 0x04, 0x08, 0x26, 0x10, 0x27, 0x4a, 0x04,
	0x08, 0x27, 0x10, 0x28, 0x4a, 0x04, 0x08, 0x28, 0x10, 0x29, 0x42, 0x70, 0x0a, 0x19, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f,
	0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x71, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x67, 0x6f,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x04, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescData = file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDesc
)

func file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDescData
}

var file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes = make([]protoimpl.MessageInfo, 257)
var file_proto_google_fhir_proto_r4_qicore_qicore_proto_goTypes = []interface{}{
	(*QICoreAdverseEvent)(nil),                                              // 0: google.fhir.r4.qicore.QICoreAdverseEvent
	(*QICoreAllergyIntolerance)(nil),                                        // 1: google.fhir.r4.qicore.QICoreAllergyIntolerance
	(*QICoreBodyStructure)(nil),                                             // 2: google.fhir.r4.qicore.QICoreBodyStructure
	(*QICoreCarePlan)(nil),                                                  // 3: google.fhir.r4.qicore.QICoreCarePlan
	(*QICoreCareTeam)(nil),                                                  // 4: google.fhir.r4.qicore.QICoreCareTeam
	(*QICoreClaim)(nil),                                                     // 5: google.fhir.r4.qicore.QICoreClaim
	(*QICoreCommunication)(nil),                                             // 6: google.fhir.r4.qicore.QICoreCommunication
	(*QICoreCommunicationRequest)(nil),                                      // 7: google.fhir.r4.qicore.QICoreCommunicationRequest
	(*QICoreCondition)(nil),                                                 // 8: google.fhir.r4.qicore.QICoreCondition
	(*QICoreCoverage)(nil),                                                  // 9: google.fhir.r4.qicore.QICoreCoverage
	(*QICoreDevice)(nil),                                                    // 10: google.fhir.r4.qicore.QICoreDevice
	(*QICoreDeviceRequest)(nil),                                             // 11: google.fhir.r4.qicore.QICoreDeviceRequest
	(*DeviceUseStatementQICoreNotDoneExtension)(nil),                        // 12: google.fhir.r4.qicore.DeviceUseStatementQICoreNotDoneExtension
	(*QICoreDeviceUseStatement)(nil),                                        // 13: google.fhir.r4.qicore.QICoreDeviceUseStatement
	(*QICoreDiagnosticReportLab)(nil),                                       // 14: google.fhir.r4.qicore.QICoreDiagnosticReportLab
	(*QICoreDiagnosticReportNote)(nil),                                      // 15: google.fhir.r4.qicore.QICoreDiagnosticReportNote
	(*EncounterEncounterProcedureExtension)(nil),                            // 16: google.fhir.r4.qicore.EncounterEncounterProcedureExtension
	(*QICoreEncounter)(nil),                                                 // 17: google.fhir.r4.qicore.QICoreEncounter
	(*QICoreFamilyMemberHistory)(nil),                                       // 18: google.fhir.r4.qicore.QICoreFamilyMemberHistory
	(*QICoreFlag)(nil),                                                      // 19: google.fhir.r4.qicore.QICoreFlag
	(*QICoreGoal)(nil),                                                      // 20: google.fhir.r4.qicore.QICoreGoal
	(*QICoreImagingStudy)(nil),                                              // 21: google.fhir.r4.qicore.QICoreImagingStudy
	(*QICoreImmunization)(nil),                                              // 22: google.fhir.r4.qicore.QICoreImmunization
	(*QICoreImmunizationEvaluation)(nil),                                    // 23: google.fhir.r4.qicore.QICoreImmunizationEvaluation
	(*QICoreImmunizationRecommendation)(nil),                                // 24: google.fhir.r4.qicore.QICoreImmunizationRecommendation
	(*QICoreLocation)(nil),                                                  // 25: google.fhir.r4.qicore.QICoreLocation
	(*QICoreMedication)(nil),                                                // 26: google.fhir.r4.qicore.QICoreMedication
	(*QICoreMedicationAdministration)(nil),                                  // 27: google.fhir.r4.qicore.QICoreMedicationAdministration
	(*QICoreMedicationDispense)(nil),                                        // 28: google.fhir.r4.qicore.QICoreMedicationDispense
	(*QICoreMedicationRequest)(nil),                                         // 29: google.fhir.r4.qicore.QICoreMedicationRequest
	(*QICoreMedicationStatement)(nil),                                       // 30: google.fhir.r4.qicore.QICoreMedicationStatement
	(*PatientMilitaryService)(nil),                                          // 31: google.fhir.r4.qicore.PatientMilitaryService
	(*QICoreNutritionOrder)(nil),                                            // 32: google.fhir.r4.qicore.QICoreNutritionOrder
	(*QICoreObservation)(nil),                                               // 33: google.fhir.r4.qicore.QICoreObservation
	(*QICoreOrganization)(nil),                                              // 34: google.fhir.r4.qicore.QICoreOrganization
	(*QICorePatient)(nil),                                                   // 35: google.fhir.r4.qicore.QICorePatient
	(*QICorePractitioner)(nil),                                              // 36: google.fhir.r4.qicore.QICorePractitioner
	(*QICorePractitionerRole)(nil),                                          // 37: google.fhir.r4.qicore.QICorePractitionerRole
	(*QICoreProcedure)(nil),                                                 // 38: google.fhir.r4.qicore.QICoreProcedure
	(*QICoreRelatedPerson)(nil),                                             // 39: google.fhir.r4.qicore.QICoreRelatedPerson
	(*ServiceRequestQICoreServiceRequestAppropriatenessScore)(nil),          // 40: google.fhir.r4.qicore.ServiceRequestQICoreServiceRequestAppropriatenessScore
	(*QICoreServiceRequest)(nil),                                            // 41: google.fhir.r4.qicore.QICoreServiceRequest
	(*QICoreSpecimen)(nil),                                                  // 42: google.fhir.r4.qicore.QICoreSpecimen
	(*QICoreSubstance)(nil),                                                 // 43: google.fhir.r4.qicore.QICoreSubstance
	(*QICoreTask)(nil),                                                      // 44: google.fhir.r4.qicore.QICoreTask
	(*QICoreAdverseEvent_ActualityCode)(nil),                                // 45: google.fhir.r4.qicore.QICoreAdverseEvent.ActualityCode
	(*QICoreAdverseEvent_SuspectEntity)(nil),                                // 46: google.fhir.r4.qicore.QICoreAdverseEvent.SuspectEntity
	(*QICoreAdverseEvent_SuspectEntity_Causality)(nil),                      // 47: google.fhir.r4.qicore.QICoreAdverseEvent.SuspectEntity.Causality
	(*QICoreAllergyIntolerance_TypeCode)(nil),                               // 48: google.fhir.r4.qicore.QICoreAllergyIntolerance.TypeCode
	(*QICoreAllergyIntolerance_CategoryCode)(nil),                           // 49: google.fhir.r4.qicore.QICoreAllergyIntolerance.CategoryCode
	(*QICoreAllergyIntolerance_CriticalityCode)(nil),                        // 50: google.fhir.r4.qicore.QICoreAllergyIntolerance.CriticalityCode
	(*QICoreAllergyIntolerance_OnsetX)(nil),                                 // 51: google.fhir.r4.qicore.QICoreAllergyIntolerance.OnsetX
	(*QICoreAllergyIntolerance_Reaction)(nil),                               // 52: google.fhir.r4.qicore.QICoreAllergyIntolerance.Reaction
	(*QICoreAllergyIntolerance_Reaction_SeverityCode)(nil),                  // 53: google.fhir.r4.qicore.QICoreAllergyIntolerance.Reaction.SeverityCode
	(*QICoreCarePlan_StatusCode)(nil),                                       // 54: google.fhir.r4.qicore.QICoreCarePlan.StatusCode
	(*QICoreCarePlan_IntentCode)(nil),                                       // 55: google.fhir.r4.qicore.QICoreCarePlan.IntentCode
	(*QICoreCarePlan_Activity)(nil),                                         // 56: google.fhir.r4.qicore.QICoreCarePlan.Activity
	(*QICoreCarePlan_Activity_Detail)(nil),                                  // 57: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail
	(*QICoreCarePlan_Activity_Detail_KindCode)(nil),                         // 58: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.KindCode
	(*QICoreCarePlan_Activity_Detail_StatusCode)(nil),                       // 59: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.StatusCode
	(*QICoreCarePlan_Activity_Detail_ScheduledX)(nil),                       // 60: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.ScheduledX
	(*QICoreCarePlan_Activity_Detail_ProductX)(nil),                         // 61: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.ProductX
	(*QICoreCareTeam_StatusCode)(nil),                                       // 62: google.fhir.r4.qicore.QICoreCareTeam.StatusCode
	(*QICoreCareTeam_Participant)(nil),                                      // 63: google.fhir.r4.qicore.QICoreCareTeam.Participant
	(*QICoreClaim_StatusCode)(nil),                                          // 64: google.fhir.r4.qicore.QICoreClaim.StatusCode
	(*QICoreClaim_UseCode)(nil),                                             // 65: google.fhir.r4.qicore.QICoreClaim.UseCode
	(*QICoreClaim_RelatedClaim)(nil),                                        // 66: google.fhir.r4.qicore.QICoreClaim.RelatedClaim
	(*QICoreClaim_Payee)(nil),                                               // 67: google.fhir.r4.qicore.QICoreClaim.Payee
	(*QICoreClaim_CareTeam)(nil),                                            // 68: google.fhir.r4.qicore.QICoreClaim.CareTeam
	(*QICoreClaim_SupportingInformation)(nil),                               // 69: google.fhir.r4.qicore.QICoreClaim.SupportingInformation
	(*QICoreClaim_Diagnosis)(nil),                                           // 70: google.fhir.r4.qicore.QICoreClaim.Diagnosis
	(*QICoreClaim_Procedure)(nil),                                           // 71: google.fhir.r4.qicore.QICoreClaim.Procedure
	(*QICoreClaim_Insurance)(nil),                                           // 72: google.fhir.r4.qicore.QICoreClaim.Insurance
	(*QICoreClaim_Accident)(nil),                                            // 73: google.fhir.r4.qicore.QICoreClaim.Accident
	(*QICoreClaim_Item)(nil),                                                // 74: google.fhir.r4.qicore.QICoreClaim.Item
	(*QICoreClaim_SupportingInformation_TimingX)(nil),                       // 75: google.fhir.r4.qicore.QICoreClaim.SupportingInformation.TimingX
	(*QICoreClaim_SupportingInformation_ValueX)(nil),                        // 76: google.fhir.r4.qicore.QICoreClaim.SupportingInformation.ValueX
	(*QICoreClaim_Diagnosis_DiagnosisX)(nil),                                // 77: google.fhir.r4.qicore.QICoreClaim.Diagnosis.DiagnosisX
	(*QICoreClaim_Procedure_ProcedureX)(nil),                                // 78: google.fhir.r4.qicore.QICoreClaim.Procedure.ProcedureX
	(*QICoreClaim_Accident_LocationX)(nil),                                  // 79: google.fhir.r4.qicore.QICoreClaim.Accident.LocationX
	(*QICoreClaim_Item_ServicedX)(nil),                                      // 80: google.fhir.r4.qicore.QICoreClaim.Item.ServicedX
	(*QICoreClaim_Item_LocationX)(nil),                                      // 81: google.fhir.r4.qicore.QICoreClaim.Item.LocationX
	(*QICoreClaim_Item_Detail)(nil),                                         // 82: google.fhir.r4.qicore.QICoreClaim.Item.Detail
	(*QICoreClaim_Item_Detail_SubDetail)(nil),                               // 83: google.fhir.r4.qicore.QICoreClaim.Item.Detail.SubDetail
	(*QICoreCommunication_StatusCode)(nil),                                  // 84: google.fhir.r4.qicore.QICoreCommunication.StatusCode
	(*QICoreCommunication_PriorityCode)(nil),                                // 85: google.fhir.r4.qicore.QICoreCommunication.PriorityCode
	(*QICoreCommunication_Payload)(nil),                                     // 86: google.fhir.r4.qicore.QICoreCommunication.Payload
	(*QICoreCommunication_Payload_ContentX)(nil),                            // 87: google.fhir.r4.qicore.QICoreCommunication.Payload.ContentX
	(*QICoreCommunicationRequest_StatusCode)(nil),                           // 88: google.fhir.r4.qicore.QICoreCommunicationRequest.StatusCode
	(*QICoreCommunicationRequest_PriorityCode)(nil),                         // 89: google.fhir.r4.qicore.QICoreCommunicationRequest.PriorityCode
	(*QICoreCommunicationRequest_Payload)(nil),                              // 90: google.fhir.r4.qicore.QICoreCommunicationRequest.Payload
	(*QICoreCommunicationRequest_OccurrenceX)(nil),                          // 91: google.fhir.r4.qicore.QICoreCommunicationRequest.OccurrenceX
	(*QICoreCommunicationRequest_Payload_ContentX)(nil),                     // 92: google.fhir.r4.qicore.QICoreCommunicationRequest.Payload.ContentX
	(*QICoreCondition_OnsetX)(nil),                                          // 93: google.fhir.r4.qicore.QICoreCondition.OnsetX
	(*QICoreCondition_AbatementX)(nil),                                      // 94: google.fhir.r4.qicore.QICoreCondition.AbatementX
	(*QICoreCondition_Stage)(nil),                                           // 95: google.fhir.r4.qicore.QICoreCondition.Stage
	(*QICoreCondition_Evidence)(nil),                                        // 96: google.fhir.r4.qicore.QICoreCondition.Evidence
	(*QICoreCoverage_StatusCode)(nil),                                       // 97: google.fhir.r4.qicore.QICoreCoverage.StatusCode
	(*QICoreCoverage_Class)(nil),                                            // 98: google.fhir.r4.qicore.QICoreCoverage.Class
	(*QICoreCoverage_CostToBeneficiary)(nil),                                // 99: google.fhir.r4.qicore.QICoreCoverage.CostToBeneficiary
	(*QICoreCoverage_CostToBeneficiary_ValueX)(nil),                         // 100: google.fhir.r4.qicore.QICoreCoverage.CostToBeneficiary.ValueX
	(*QICoreCoverage_CostToBeneficiary_Exemption)(nil),                      // 101: google.fhir.r4.qicore.QICoreCoverage.CostToBeneficiary.Exemption
	(*QICoreDevice_UdiCarrier)(nil),                                         // 102: google.fhir.r4.qicore.QICoreDevice.UdiCarrier
	(*QICoreDevice_StatusCode)(nil),                                         // 103: google.fhir.r4.qicore.QICoreDevice.StatusCode
	(*QICoreDevice_DeviceName)(nil),                                         // 104: google.fhir.r4.qicore.QICoreDevice.DeviceName
	(*QICoreDevice_Specialization)(nil),                                     // 105: google.fhir.r4.qicore.QICoreDevice.Specialization
	(*QICoreDevice_Version)(nil),                                            // 106: google.fhir.r4.qicore.QICoreDevice.Version
	(*QICoreDevice_Property)(nil),                                           // 107: google.fhir.r4.qicore.QICoreDevice.Property
	(*QICoreDevice_UdiCarrier_EntryTypeCode)(nil),                           // 108: google.fhir.r4.qicore.QICoreDevice.UdiCarrier.EntryTypeCode
	(*QICoreDevice_DeviceName_TypeCode)(nil),                                // 109: google.fhir.r4.qicore.QICoreDevice.DeviceName.TypeCode
	(*QICoreDeviceRequest_StatusCode)(nil),                                  // 110: google.fhir.r4.qicore.QICoreDeviceRequest.StatusCode
	(*QICoreDeviceRequest_IntentCode)(nil),                                  // 111: google.fhir.r4.qicore.QICoreDeviceRequest.IntentCode
	(*QICoreDeviceRequest_PriorityCode)(nil),                                // 112: google.fhir.r4.qicore.QICoreDeviceRequest.PriorityCode
	(*QICoreDeviceRequest_CodeX)(nil),                                       // 113: google.fhir.r4.qicore.QICoreDeviceRequest.CodeX
	(*QICoreDeviceRequest_Parameter)(nil),                                   // 114: google.fhir.r4.qicore.QICoreDeviceRequest.Parameter
	(*QICoreDeviceRequest_OccurrenceX)(nil),                                 // 115: google.fhir.r4.qicore.QICoreDeviceRequest.OccurrenceX
	(*QICoreDeviceRequest_Parameter_ValueX)(nil),                            // 116: google.fhir.r4.qicore.QICoreDeviceRequest.Parameter.ValueX
	(*DeviceUseStatementQICoreNotDoneExtension_ValueX)(nil),                 // 117: google.fhir.r4.qicore.DeviceUseStatementQICoreNotDoneExtension.ValueX
	(*QICoreDeviceUseStatement_StatusCode)(nil),                             // 118: google.fhir.r4.qicore.QICoreDeviceUseStatement.StatusCode
	(*QICoreDeviceUseStatement_TimingX)(nil),                                // 119: google.fhir.r4.qicore.QICoreDeviceUseStatement.TimingX
	(*QICoreDiagnosticReportLab_StatusCode)(nil),                            // 120: google.fhir.r4.qicore.QICoreDiagnosticReportLab.StatusCode
	(*QICoreDiagnosticReportLab_EffectiveX)(nil),                            // 121: google.fhir.r4.qicore.QICoreDiagnosticReportLab.EffectiveX
	(*QICoreDiagnosticReportLab_Media)(nil),                                 // 122: google.fhir.r4.qicore.QICoreDiagnosticReportLab.Media
	(*QICoreDiagnosticReportNote_StatusCode)(nil),                           // 123: google.fhir.r4.qicore.QICoreDiagnosticReportNote.StatusCode
	(*QICoreDiagnosticReportNote_EffectiveX)(nil),                           // 124: google.fhir.r4.qicore.QICoreDiagnosticReportNote.EffectiveX
	(*QICoreDiagnosticReportNote_Media)(nil),                                // 125: google.fhir.r4.qicore.QICoreDiagnosticReportNote.Media
	(*QICoreEncounter_StatusCode)(nil),                                      // 126: google.fhir.r4.qicore.QICoreEncounter.StatusCode
	(*QICoreEncounter_StatusHistory)(nil),                                   // 127: google.fhir.r4.qicore.QICoreEncounter.StatusHistory
	(*QICoreEncounter_ClassHistory)(nil),                                    // 128: google.fhir.r4.qicore.QICoreEncounter.ClassHistory
	(*QICoreEncounter_Participant)(nil),                                     // 129: google.fhir.r4.qicore.QICoreEncounter.Participant
	(*QICoreEncounter_Diagnosis)(nil),                                       // 130: google.fhir.r4.qicore.QICoreEncounter.Diagnosis
	(*QICoreEncounter_Hospitalization)(nil),                                 // 131: google.fhir.r4.qicore.QICoreEncounter.Hospitalization
	(*QICoreEncounter_Location)(nil),                                        // 132: google.fhir.r4.qicore.QICoreEncounter.Location
	(*QICoreEncounter_StatusHistory_StatusCode)(nil),                        // 133: google.fhir.r4.qicore.QICoreEncounter.StatusHistory.StatusCode
	(*QICoreEncounter_Location_StatusCode)(nil),                             // 134: google.fhir.r4.qicore.QICoreEncounter.Location.StatusCode
	(*QICoreFamilyMemberHistory_StatusCode)(nil),                            // 135: google.fhir.r4.qicore.QICoreFamilyMemberHistory.StatusCode
	(*QICoreFamilyMemberHistory_BornX)(nil),                                 // 136: google.fhir.r4.qicore.QICoreFamilyMemberHistory.BornX
	(*QICoreFamilyMemberHistory_AgeX)(nil),                                  // 137: google.fhir.r4.qicore.QICoreFamilyMemberHistory.AgeX
	(*QICoreFamilyMemberHistory_DeceasedX)(nil),                             // 138: google.fhir.r4.qicore.QICoreFamilyMemberHistory.DeceasedX
	(*QICoreFamilyMemberHistory_Condition)(nil),                             // 139: google.fhir.r4.qicore.QICoreFamilyMemberHistory.Condition
	(*QICoreFamilyMemberHistory_Condition_OnsetX)(nil),                      // 140: google.fhir.r4.qicore.QICoreFamilyMemberHistory.Condition.OnsetX
	(*QICoreFlag_StatusCode)(nil),                                           // 141: google.fhir.r4.qicore.QICoreFlag.StatusCode
	(*QICoreGoal_LifecycleStatusCode)(nil),                                  // 142: google.fhir.r4.qicore.QICoreGoal.LifecycleStatusCode
	(*QICoreGoal_StartX)(nil),                                               // 143: google.fhir.r4.qicore.QICoreGoal.StartX
	(*QICoreGoal_Target)(nil),                                               // 144: google.fhir.r4.qicore.QICoreGoal.Target
	(*QICoreGoal_Target_DetailX)(nil),                                       // 145: google.fhir.r4.qicore.QICoreGoal.Target.DetailX
	(*QICoreGoal_Target_DueX)(nil),                                          // 146: google.fhir.r4.qicore.QICoreGoal.Target.DueX
	(*QICoreImagingStudy_StatusCode)(nil),                                   // 147: google.fhir.r4.qicore.QICoreImagingStudy.StatusCode
	(*QICoreImagingStudy_Series)(nil),                                       // 148: google.fhir.r4.qicore.QICoreImagingStudy.Series
	(*QICoreImagingStudy_Series_Performer)(nil),                             // 149: google.fhir.r4.qicore.QICoreImagingStudy.Series.Performer
	(*QICoreImagingStudy_Series_Instance)(nil),                              // 150: google.fhir.r4.qicore.QICoreImagingStudy.Series.Instance
	(*QICoreImmunization_StatusCode)(nil),                                   // 151: google.fhir.r4.qicore.QICoreImmunization.StatusCode
	(*QICoreImmunization_OccurrenceX)(nil),                                  // 152: google.fhir.r4.qicore.QICoreImmunization.OccurrenceX
	(*QICoreImmunization_Performer)(nil),                                    // 153: google.fhir.r4.qicore.QICoreImmunization.Performer
	(*QICoreImmunization_Education)(nil),                                    // 154: google.fhir.r4.qicore.QICoreImmunization.Education
	(*QICoreImmunization_Reaction)(nil),                                     // 155: google.fhir.r4.qicore.QICoreImmunization.Reaction
	(*QICoreImmunization_ProtocolApplied)(nil),                              // 156: google.fhir.r4.qicore.QICoreImmunization.ProtocolApplied
	(*QICoreImmunization_ProtocolApplied_DoseNumberX)(nil),                  // 157: google.fhir.r4.qicore.QICoreImmunization.ProtocolApplied.DoseNumberX
	(*QICoreImmunization_ProtocolApplied_SeriesDosesX)(nil),                 // 158: google.fhir.r4.qicore.QICoreImmunization.ProtocolApplied.SeriesDosesX
	(*QICoreImmunizationEvaluation_StatusCode)(nil),                         // 159: google.fhir.r4.qicore.QICoreImmunizationEvaluation.StatusCode
	(*QICoreImmunizationEvaluation_DoseNumberX)(nil),                        // 160: google.fhir.r4.qicore.QICoreImmunizationEvaluation.DoseNumberX
	(*QICoreImmunizationEvaluation_SeriesDosesX)(nil),                       // 161: google.fhir.r4.qicore.QICoreImmunizationEvaluation.SeriesDosesX
	(*QICoreImmunizationRecommendation_Recommendation)(nil),                 // 162: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation
	(*QICoreImmunizationRecommendation_Recommendation_DateCriterion)(nil),   // 163: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.DateCriterion
	(*QICoreImmunizationRecommendation_Recommendation_DoseNumberX)(nil),     // 164: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.DoseNumberX
	(*QICoreImmunizationRecommendation_Recommendation_SeriesDosesX)(nil),    // 165: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.SeriesDosesX
	(*QICoreLocation_StatusCode)(nil),                                       // 166: google.fhir.r4.qicore.QICoreLocation.StatusCode
	(*QICoreLocation_ModeCode)(nil),                                         // 167: google.fhir.r4.qicore.QICoreLocation.ModeCode
	(*QICoreLocation_Position)(nil),                                         // 168: google.fhir.r4.qicore.QICoreLocation.Position
	(*QICoreLocation_HoursOfOperation)(nil),                                 // 169: google.fhir.r4.qicore.QICoreLocation.HoursOfOperation
	(*QICoreLocation_HoursOfOperation_DaysOfWeekCode)(nil),                  // 170: google.fhir.r4.qicore.QICoreLocation.HoursOfOperation.DaysOfWeekCode
	(*QICoreMedication_StatusCode)(nil),                                     // 171: google.fhir.r4.qicore.QICoreMedication.StatusCode
	(*QICoreMedication_Ingredient)(nil),                                     // 172: google.fhir.r4.qicore.QICoreMedication.Ingredient
	(*QICoreMedication_Batch)(nil),                                          // 173: google.fhir.r4.qicore.QICoreMedication.Batch
	(*QICoreMedication_Ingredient_ItemX)(nil),                               // 174: google.fhir.r4.qicore.QICoreMedication.Ingredient.ItemX
	(*QICoreMedicationAdministration_StatusCode)(nil),                       // 175: google.fhir.r4.qicore.QICoreMedicationAdministration.StatusCode
	(*QICoreMedicationAdministration_MedicationX)(nil),                      // 176: google.fhir.r4.qicore.QICoreMedicationAdministration.MedicationX
	(*QICoreMedicationAdministration_EffectiveX)(nil),                       // 177: google.fhir.r4.qicore.QICoreMedicationAdministration.EffectiveX
	(*QICoreMedicationAdministration_Performer)(nil),                        // 178: google.fhir.r4.qicore.QICoreMedicationAdministration.Performer
	(*QICoreMedicationAdministration_Dosage)(nil),                           // 179: google.fhir.r4.qicore.QICoreMedicationAdministration.Dosage
	(*QICoreMedicationAdministration_Dosage_RateX)(nil),                     // 180: google.fhir.r4.qicore.QICoreMedicationAdministration.Dosage.RateX
	(*QICoreMedicationDispense_StatusCode)(nil),                             // 181: google.fhir.r4.qicore.QICoreMedicationDispense.StatusCode
	(*QICoreMedicationDispense_StatusReasonX)(nil),                          // 182: google.fhir.r4.qicore.QICoreMedicationDispense.StatusReasonX
	(*QICoreMedicationDispense_MedicationX)(nil),                            // 183: google.fhir.r4.qicore.QICoreMedicationDispense.MedicationX
	(*QICoreMedicationDispense_Performer)(nil),                              // 184: google.fhir.r4.qicore.QICoreMedicationDispense.Performer
	(*QICoreMedicationDispense_Substitution)(nil),                           // 185: google.fhir.r4.qicore.QICoreMedicationDispense.Substitution
	(*QICoreMedicationRequest_StatusCode)(nil),                              // 186: google.fhir.r4.qicore.QICoreMedicationRequest.StatusCode
	(*QICoreMedicationRequest_IntentCode)(nil),                              // 187: google.fhir.r4.qicore.QICoreMedicationRequest.IntentCode
	(*QICoreMedicationRequest_PriorityCode)(nil),                            // 188: google.fhir.r4.qicore.QICoreMedicationRequest.PriorityCode
	(*QICoreMedicationRequest_ReportedX)(nil),                               // 189: google.fhir.r4.qicore.QICoreMedicationRequest.ReportedX
	(*QICoreMedicationRequest_MedicationX)(nil),                             // 190: google.fhir.r4.qicore.QICoreMedicationRequest.MedicationX
	(*QICoreMedicationRequest_DispenseRequest)(nil),                         // 191: google.fhir.r4.qicore.QICoreMedicationRequest.DispenseRequest
	(*QICoreMedicationRequest_Substitution)(nil),                            // 192: google.fhir.r4.qicore.QICoreMedicationRequest.Substitution
	(*QICoreMedicationRequest_DispenseRequest_InitialFill)(nil),             // 193: google.fhir.r4.qicore.QICoreMedicationRequest.DispenseRequest.InitialFill
	(*QICoreMedicationRequest_Substitution_AllowedX)(nil),                   // 194: google.fhir.r4.qicore.QICoreMedicationRequest.Substitution.AllowedX
	(*QICoreMedicationStatement_StatusCode)(nil),                            // 195: google.fhir.r4.qicore.QICoreMedicationStatement.StatusCode
	(*QICoreMedicationStatement_MedicationX)(nil),                           // 196: google.fhir.r4.qicore.QICoreMedicationStatement.MedicationX
	(*QICoreMedicationStatement_EffectiveX)(nil),                            // 197: google.fhir.r4.qicore.QICoreMedicationStatement.EffectiveX
	(*QICoreNutritionOrder_StatusCode)(nil),                                 // 198: google.fhir.r4.qicore.QICoreNutritionOrder.StatusCode
	(*QICoreNutritionOrder_IntentCode)(nil),                                 // 199: google.fhir.r4.qicore.QICoreNutritionOrder.IntentCode
	(*QICoreNutritionOrder_OralDiet)(nil),                                   // 200: google.fhir.r4.qicore.QICoreNutritionOrder.OralDiet
	(*QICoreNutritionOrder_Supplement)(nil),                                 // 201: google.fhir.r4.qicore.QICoreNutritionOrder.Supplement
	(*QICoreNutritionOrder_EnteralFormula)(nil),                             // 202: google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula
	(*QICoreNutritionOrder_OralDiet_Nutrient)(nil),                          // 203: google.fhir.r4.qicore.QICoreNutritionOrder.OralDiet.Nutrient
	(*QICoreNutritionOrder_OralDiet_Texture)(nil),                           // 204: google.fhir.r4.qicore.QICoreNutritionOrder.OralDiet.Texture
	(*QICoreNutritionOrder_EnteralFormula_Administration)(nil),              // 205: google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula.Administration
	(*QICoreNutritionOrder_EnteralFormula_Administration_RateX)(nil),        // 206: google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula.Administration.RateX
	(*QICoreObservation_StatusCode)(nil),                                    // 207: google.fhir.r4.qicore.QICoreObservation.StatusCode
	(*QICoreObservation_EffectiveX)(nil),                                    // 208: google.fhir.r4.qicore.QICoreObservation.EffectiveX
	(*QICoreObservation_ValueX)(nil),                                        // 209: google.fhir.r4.qicore.QICoreObservation.ValueX
	(*QICoreObservation_ReferenceRange)(nil),                                // 210: google.fhir.r4.qicore.QICoreObservation.ReferenceRange
	(*QICoreObservation_Component)(nil),                                     // 211: google.fhir.r4.qicore.QICoreObservation.Component
	(*QICoreObservation_Component_ValueX)(nil),                              // 212: google.fhir.r4.qicore.QICoreObservation.Component.ValueX
	(*QICoreOrganization_Contact)(nil),                                      // 213: google.fhir.r4.qicore.QICoreOrganization.Contact
	(*QICorePatient_GenderCode)(nil),                                        // 214: google.fhir.r4.qicore.QICorePatient.GenderCode
	(*QICorePatient_DeceasedX)(nil),                                         // 215: google.fhir.r4.qicore.QICorePatient.DeceasedX
	(*QICorePatient_MultipleBirthX)(nil),                                    // 216: google.fhir.r4.qicore.QICorePatient.MultipleBirthX
	(*QICorePatient_Contact)(nil),                                           // 217: google.fhir.r4.qicore.QICorePatient.Contact
	(*QICorePatient_Communication)(nil),                                     // 218: google.fhir.r4.qicore.QICorePatient.Communication
	(*QICorePatient_Link)(nil),                                              // 219: google.fhir.r4.qicore.QICorePatient.Link
	(*QICorePatient_Contact_GenderCode)(nil),                                // 220: google.fhir.r4.qicore.QICorePatient.Contact.GenderCode
	(*QICorePatient_Link_TypeCode)(nil),                                     // 221: google.fhir.r4.qicore.QICorePatient.Link.TypeCode
	(*QICorePractitioner_GenderCode)(nil),                                   // 222: google.fhir.r4.qicore.QICorePractitioner.GenderCode
	(*QICorePractitioner_Qualification)(nil),                                // 223: google.fhir.r4.qicore.QICorePractitioner.Qualification
	(*QICorePractitionerRole_AvailableTime)(nil),                            // 224: google.fhir.r4.qicore.QICorePractitionerRole.AvailableTime
	(*QICorePractitionerRole_NotAvailable)(nil),                             // 225: google.fhir.r4.qicore.QICorePractitionerRole.NotAvailable
	(*QICorePractitionerRole_AvailableTime_DaysOfWeekCode)(nil),             // 226: google.fhir.r4.qicore.QICorePractitionerRole.AvailableTime.DaysOfWeekCode
	(*QICoreProcedure_StatusCode)(nil),                                      // 227: google.fhir.r4.qicore.QICoreProcedure.StatusCode
	(*QICoreProcedure_PerformedX)(nil),                                      // 228: google.fhir.r4.qicore.QICoreProcedure.PerformedX
	(*QICoreProcedure_Performer)(nil),                                       // 229: google.fhir.r4.qicore.QICoreProcedure.Performer
	(*QICoreProcedure_FocalDevice)(nil),                                     // 230: google.fhir.r4.qicore.QICoreProcedure.FocalDevice
	(*QICoreRelatedPerson_GenderCode)(nil),                                  // 231: google.fhir.r4.qicore.QICoreRelatedPerson.GenderCode
	(*QICoreRelatedPerson_Communication)(nil),                               // 232: google.fhir.r4.qicore.QICoreRelatedPerson.Communication
	(*ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX)(nil),   // 233: google.fhir.r4.qicore.ServiceRequestQICoreServiceRequestAppropriatenessScore.ValueX
	(*QICoreServiceRequest_StatusCode)(nil),                                 // 234: google.fhir.r4.qicore.QICoreServiceRequest.StatusCode
	(*QICoreServiceRequest_IntentCode)(nil),                                 // 235: google.fhir.r4.qicore.QICoreServiceRequest.IntentCode
	(*QICoreServiceRequest_PriorityCode)(nil),                               // 236: google.fhir.r4.qicore.QICoreServiceRequest.PriorityCode
	(*QICoreServiceRequest_QuantityX)(nil),                                  // 237: google.fhir.r4.qicore.QICoreServiceRequest.QuantityX
	(*QICoreServiceRequest_OccurrenceX)(nil),                                // 238: google.fhir.r4.qicore.QICoreServiceRequest.OccurrenceX
	(*QICoreServiceRequest_AsNeededX)(nil),                                  // 239: google.fhir.r4.qicore.QICoreServiceRequest.AsNeededX
	(*QICoreSpecimen_StatusCode)(nil),                                       // 240: google.fhir.r4.qicore.QICoreSpecimen.StatusCode
	(*QICoreSpecimen_Collection)(nil),                                       // 241: google.fhir.r4.qicore.QICoreSpecimen.Collection
	(*QICoreSpecimen_Processing)(nil),                                       // 242: google.fhir.r4.qicore.QICoreSpecimen.Processing
	(*QICoreSpecimen_Container)(nil),                                        // 243: google.fhir.r4.qicore.QICoreSpecimen.Container
	(*QICoreSpecimen_Collection_CollectedX)(nil),                            // 244: google.fhir.r4.qicore.QICoreSpecimen.Collection.CollectedX
	(*QICoreSpecimen_Collection_FastingStatusX)(nil),                        // 245: google.fhir.r4.qicore.QICoreSpecimen.Collection.FastingStatusX
	(*QICoreSpecimen_Processing_TimeX)(nil),                                 // 246: google.fhir.r4.qicore.QICoreSpecimen.Processing.TimeX
	(*QICoreSpecimen_Container_AdditiveX)(nil),                              // 247: google.fhir.r4.qicore.QICoreSpecimen.Container.AdditiveX
	(*QICoreSubstance_StatusCode)(nil),                                      // 248: google.fhir.r4.qicore.QICoreSubstance.StatusCode
	(*QICoreSubstance_Instance)(nil),                                        // 249: google.fhir.r4.qicore.QICoreSubstance.Instance
	(*QICoreSubstance_Ingredient)(nil),                                      // 250: google.fhir.r4.qicore.QICoreSubstance.Ingredient
	(*QICoreSubstance_Ingredient_SubstanceX)(nil),                           // 251: google.fhir.r4.qicore.QICoreSubstance.Ingredient.SubstanceX
	(*QICoreTask_Restriction)(nil),                                          // 252: google.fhir.r4.qicore.QICoreTask.Restriction
	(*QICoreTask_Parameter)(nil),                                            // 253: google.fhir.r4.qicore.QICoreTask.Parameter
	(*QICoreTask_Output)(nil),                                               // 254: google.fhir.r4.qicore.QICoreTask.Output
	(*QICoreTask_Parameter_ValueX)(nil),                                     // 255: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX
	(*QICoreTask_Output_ValueX)(nil),                                        // 256: google.fhir.r4.qicore.QICoreTask.Output.ValueX
	(*datatypes_go_proto.Id)(nil),                                           // 257: google.fhir.r4.core.Id
	(*datatypes_go_proto.Meta)(nil),                                         // 258: google.fhir.r4.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                          // 259: google.fhir.r4.core.Uri
	(*datatypes_go_proto.Code)(nil),                                         // 260: google.fhir.r4.core.Code
	(*datatypes_go_proto.Narrative)(nil),                                    // 261: google.fhir.r4.core.Narrative
	(*any.Any)(nil),                                                         // 262: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                                    // 263: google.fhir.r4.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                                   // 264: google.fhir.r4.core.Identifier
	(*datatypes_go_proto.CodeableConcept)(nil),                              // 265: google.fhir.r4.core.CodeableConcept
	(*datatypes_go_proto.Reference)(nil),                                    // 266: google.fhir.r4.core.Reference
	(*datatypes_go_proto.DateTime)(nil),                                     // 267: google.fhir.r4.core.DateTime
	(*datatypes_go_proto.Annotation)(nil),                                   // 268: google.fhir.r4.core.Annotation
	(*datatypes_go_proto.Age)(nil),                                          // 269: google.fhir.r4.core.Age
	(*datatypes_go_proto.Boolean)(nil),                                      // 270: google.fhir.r4.core.Boolean
	(*datatypes_go_proto.String)(nil),                                       // 271: google.fhir.r4.core.String
	(*datatypes_go_proto.Attachment)(nil),                                   // 272: google.fhir.r4.core.Attachment
	(*datatypes_go_proto.Canonical)(nil),                                    // 273: google.fhir.r4.core.Canonical
	(*datatypes_go_proto.Period)(nil),                                       // 274: google.fhir.r4.core.Period
	(*datatypes_go_proto.ContactPoint)(nil),                                 // 275: google.fhir.r4.core.ContactPoint
	(*datatypes_go_proto.Money)(nil),                                        // 276: google.fhir.r4.core.Money
	(*extensions_go_proto.ConditionDueTo_ValueX)(nil),                       // 277: google.fhir.r4.core.ConditionDueTo.ValueX
	(*extensions_go_proto.ConditionOccurredFollowing_ValueX)(nil),           // 278: google.fhir.r4.core.ConditionOccurredFollowing.ValueX
	(*datatypes_go_proto.PositiveInt)(nil),                                  // 279: google.fhir.r4.core.PositiveInt
	(*datatypes_go_proto.Instant)(nil),                                      // 280: google.fhir.r4.core.Instant
	(*datatypes_go_proto.Coding)(nil),                                       // 281: google.fhir.r4.core.Coding
	(*datatypes_go_proto.Duration)(nil),                                     // 282: google.fhir.r4.core.Duration
	(*datatypes_go_proto.Date)(nil),                                         // 283: google.fhir.r4.core.Date
	(*datatypes_go_proto.UnsignedInt)(nil),                                  // 284: google.fhir.r4.core.UnsignedInt
	(*datatypes_go_proto.SimpleQuantity)(nil),                               // 285: google.fhir.r4.core.SimpleQuantity
	(*datatypes_go_proto.Address)(nil),                                      // 286: google.fhir.r4.core.Address
	(*datatypes_go_proto.Ratio)(nil),                                        // 287: google.fhir.r4.core.Ratio
	(*datatypes_go_proto.Dosage)(nil),                                       // 288: google.fhir.r4.core.Dosage
	(*datatypes_go_proto.HumanName)(nil),                                    // 289: google.fhir.r4.core.HumanName
	(*uscore_go_proto.PatientUSCoreRaceExtension)(nil),                      // 290: google.fhir.r4.uscore.PatientUSCoreRaceExtension
	(*uscore_go_proto.PatientUSCoreEthnicityExtension)(nil),                 // 291: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension
	(*uscore_go_proto.PatientUSCoreBirthSexExtension_ValueCode)(nil),        // 292: google.fhir.r4.uscore.PatientUSCoreBirthSexExtension.ValueCode
	(*extensions_go_proto.PatientNationality)(nil),                          // 293: google.fhir.r4.core.PatientNationality
	(codes_go_proto.AdverseEventActualityCode_Value)(0),                     // 294: google.fhir.r4.core.AdverseEventActualityCode.Value
	(codes_go_proto.AllergyIntoleranceTypeCode_Value)(0),                    // 295: google.fhir.r4.core.AllergyIntoleranceTypeCode.Value
	(codes_go_proto.AllergyIntoleranceCategoryCode_Value)(0),                // 296: google.fhir.r4.core.AllergyIntoleranceCategoryCode.Value
	(codes_go_proto.AllergyIntoleranceCriticalityCode_Value)(0),             // 297: google.fhir.r4.core.AllergyIntoleranceCriticalityCode.Value
	(*datatypes_go_proto.Range)(nil),                                        // 298: google.fhir.r4.core.Range
	(codes_go_proto.AllergyIntoleranceSeverityCode_Value)(0),                // 299: google.fhir.r4.core.AllergyIntoleranceSeverityCode.Value
	(codes_go_proto.RequestStatusCode_Value)(0),                             // 300: google.fhir.r4.core.RequestStatusCode.Value
	(valuesets_go_proto.CarePlanIntentValueSet_Value)(0),                    // 301: google.fhir.r4.core.CarePlanIntentValueSet.Value
	(valuesets_go_proto.CarePlanActivityKindValueSet_Value)(0),              // 302: google.fhir.r4.core.CarePlanActivityKindValueSet.Value
	(codes_go_proto.CarePlanActivityStatusCode_Value)(0),                    // 303: google.fhir.r4.core.CarePlanActivityStatusCode.Value
	(*datatypes_go_proto.Timing)(nil),                                       // 304: google.fhir.r4.core.Timing
	(codes_go_proto.CareTeamStatusCode_Value)(0),                            // 305: google.fhir.r4.core.CareTeamStatusCode.Value
	(codes_go_proto.FinancialResourceStatusCode_Value)(0),                   // 306: google.fhir.r4.core.FinancialResourceStatusCode.Value
	(codes_go_proto.UseCode_Value)(0),                                       // 307: google.fhir.r4.core.UseCode.Value
	(*datatypes_go_proto.Decimal)(nil),                                      // 308: google.fhir.r4.core.Decimal
	(*datatypes_go_proto.Quantity)(nil),                                     // 309: google.fhir.r4.core.Quantity
	(codes_go_proto.EventStatusCode_Value)(0),                               // 310: google.fhir.r4.core.EventStatusCode.Value
	(codes_go_proto.RequestPriorityCode_Value)(0),                           // 311: google.fhir.r4.core.RequestPriorityCode.Value
	(*datatypes_go_proto.Base64Binary)(nil),                                 // 312: google.fhir.r4.core.Base64Binary
	(codes_go_proto.FHIRDeviceStatusCode_Value)(0),                          // 313: google.fhir.r4.core.FHIRDeviceStatusCode.Value
	(codes_go_proto.UDIEntryTypeCode_Value)(0),                              // 314: google.fhir.r4.core.UDIEntryTypeCode.Value
	(codes_go_proto.DeviceNameTypeCode_Value)(0),                            // 315: google.fhir.r4.core.DeviceNameTypeCode.Value
	(codes_go_proto.RequestIntentCode_Value)(0),                             // 316: google.fhir.r4.core.RequestIntentCode.Value
	(codes_go_proto.DeviceUseStatementStatusCode_Value)(0),                  // 317: google.fhir.r4.core.DeviceUseStatementStatusCode.Value
	(codes_go_proto.DiagnosticReportStatusCode_Value)(0),                    // 318: google.fhir.r4.core.DiagnosticReportStatusCode.Value
	(codes_go_proto.EncounterStatusCode_Value)(0),                           // 319: google.fhir.r4.core.EncounterStatusCode.Value
	(codes_go_proto.EncounterLocationStatusCode_Value)(0),                   // 320: google.fhir.r4.core.EncounterLocationStatusCode.Value
	(codes_go_proto.FamilyHistoryStatusCode_Value)(0),                       // 321: google.fhir.r4.core.FamilyHistoryStatusCode.Value
	(*extensions_go_proto.FamilyMemberHistoryAbatement_ValueX)(nil),         // 322: google.fhir.r4.core.FamilyMemberHistoryAbatement.ValueX
	(codes_go_proto.FlagStatusCode_Value)(0),                                // 323: google.fhir.r4.core.FlagStatusCode.Value
	(codes_go_proto.GoalLifecycleStatusCode_Value)(0),                       // 324: google.fhir.r4.core.GoalLifecycleStatusCode.Value
	(*datatypes_go_proto.Integer)(nil),                                      // 325: google.fhir.r4.core.Integer
	(codes_go_proto.ImagingStudyStatusCode_Value)(0),                        // 326: google.fhir.r4.core.ImagingStudyStatusCode.Value
	(valuesets_go_proto.ImmunizationStatusCodesValueSet_Value)(0),           // 327: google.fhir.r4.core.ImmunizationStatusCodesValueSet.Value
	(valuesets_go_proto.ImmunizationEvaluationStatusCodesValueSet_Value)(0), // 328: google.fhir.r4.core.ImmunizationEvaluationStatusCodesValueSet.Value
	(codes_go_proto.LocationStatusCode_Value)(0),                            // 329: google.fhir.r4.core.LocationStatusCode.Value
	(codes_go_proto.LocationModeCode_Value)(0),                              // 330: google.fhir.r4.core.LocationModeCode.Value
	(*datatypes_go_proto.Time)(nil),                                         // 331: google.fhir.r4.core.Time
	(codes_go_proto.DaysOfWeekCode_Value)(0),                                // 332: google.fhir.r4.core.DaysOfWeekCode.Value
	(codes_go_proto.MedicationStatusCode_Value)(0),                          // 333: google.fhir.r4.core.MedicationStatusCode.Value
	(codes_go_proto.MedicationAdministrationStatusCode_Value)(0),            // 334: google.fhir.r4.core.MedicationAdministrationStatusCode.Value
	(codes_go_proto.MedicationDispenseStatusCode_Value)(0),                  // 335: google.fhir.r4.core.MedicationDispenseStatusCode.Value
	(codes_go_proto.MedicationrequestStatusCode_Value)(0),                   // 336: google.fhir.r4.core.MedicationrequestStatusCode.Value
	(codes_go_proto.MedicationRequestIntentCode_Value)(0),                   // 337: google.fhir.r4.core.MedicationRequestIntentCode.Value
	(codes_go_proto.MedicationStatementStatusCodes_Value)(0),                // 338: google.fhir.r4.core.MedicationStatementStatusCodes.Value
	(codes_go_proto.ObservationStatusCode_Value)(0),                         // 339: google.fhir.r4.core.ObservationStatusCode.Value
	(*datatypes_go_proto.SampledData)(nil),                                  // 340: google.fhir.r4.core.SampledData
	(codes_go_proto.AdministrativeGenderCode_Value)(0),                      // 341: google.fhir.r4.core.AdministrativeGenderCode.Value
	(codes_go_proto.LinkTypeCode_Value)(0),                                  // 342: google.fhir.r4.core.LinkTypeCode.Value
	(codes_go_proto.SpecimenStatusCode_Value)(0),                            // 343: google.fhir.r4.core.SpecimenStatusCode.Value
	(codes_go_proto.FHIRSubstanceStatusCode_Value)(0),                       // 344: google.fhir.r4.core.FHIRSubstanceStatusCode.Value
	(*datatypes_go_proto.Markdown)(nil),                                     // 345: google.fhir.r4.core.Markdown
	(*datatypes_go_proto.Oid)(nil),                                          // 346: google.fhir.r4.core.Oid
	(*datatypes_go_proto.Url)(nil),                                          // 347: google.fhir.r4.core.Url
	(*datatypes_go_proto.Uuid)(nil),                                         // 348: google.fhir.r4.core.Uuid
	(*datatypes_go_proto.Count)(nil),                                        // 349: google.fhir.r4.core.Count
	(*datatypes_go_proto.Distance)(nil),                                     // 350: google.fhir.r4.core.Distance
	(*datatypes_go_proto.Signature)(nil),                                    // 351: google.fhir.r4.core.Signature
	(*datatypes_go_proto.ContactDetail)(nil),                                // 352: google.fhir.r4.core.ContactDetail
	(*datatypes_go_proto.Contributor)(nil),                                  // 353: google.fhir.r4.core.Contributor
	(*datatypes_go_proto.DataRequirement)(nil),                              // 354: google.fhir.r4.core.DataRequirement
	(*datatypes_go_proto.Expression)(nil),                                   // 355: google.fhir.r4.core.Expression
	(*datatypes_go_proto.ParameterDefinition)(nil),                          // 356: google.fhir.r4.core.ParameterDefinition
	(*datatypes_go_proto.RelatedArtifact)(nil),                              // 357: google.fhir.r4.core.RelatedArtifact
	(*datatypes_go_proto.TriggerDefinition)(nil),                            // 358: google.fhir.r4.core.TriggerDefinition
	(*datatypes_go_proto.UsageContext)(nil),                                 // 359: google.fhir.r4.core.UsageContext
}
var file_proto_google_fhir_proto_r4_qicore_qicore_proto_depIdxs = []int32{
	257,  // 0: google.fhir.r4.qicore.QICoreAdverseEvent.id:type_name -> google.fhir.r4.core.Id
	258,  // 1: google.fhir.r4.qicore.QICoreAdverseEvent.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 2: google.fhir.r4.qicore.QICoreAdverseEvent.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 3: google.fhir.r4.qicore.QICoreAdverseEvent.language:type_name -> google.fhir.r4.core.Code
	261,  // 4: google.fhir.r4.qicore.QICoreAdverseEvent.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 5: google.fhir.r4.qicore.QICoreAdverseEvent.contained:type_name -> google.protobuf.Any
	263,  // 6: google.fhir.r4.qicore.QICoreAdverseEvent.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 7: google.fhir.r4.qicore.QICoreAdverseEvent.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 8: google.fhir.r4.qicore.QICoreAdverseEvent.identifier:type_name -> google.fhir.r4.core.Identifier
	45,   // 9: google.fhir.r4.qicore.QICoreAdverseEvent.actuality:type_name -> google.fhir.r4.qicore.QICoreAdverseEvent.ActualityCode
	265,  // 10: google.fhir.r4.qicore.QICoreAdverseEvent.category:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 11: google.fhir.r4.qicore.QICoreAdverseEvent.event:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 12: google.fhir.r4.qicore.QICoreAdverseEvent.subject:type_name -> google.fhir.r4.core.Reference
	266,  // 13: google.fhir.r4.qicore.QICoreAdverseEvent.encounter:type_name -> google.fhir.r4.core.Reference
	267,  // 14: google.fhir.r4.qicore.QICoreAdverseEvent.date:type_name -> google.fhir.r4.core.DateTime
	267,  // 15: google.fhir.r4.qicore.QICoreAdverseEvent.detected:type_name -> google.fhir.r4.core.DateTime
	267,  // 16: google.fhir.r4.qicore.QICoreAdverseEvent.recorded_date:type_name -> google.fhir.r4.core.DateTime
	266,  // 17: google.fhir.r4.qicore.QICoreAdverseEvent.resulting_condition:type_name -> google.fhir.r4.core.Reference
	266,  // 18: google.fhir.r4.qicore.QICoreAdverseEvent.location:type_name -> google.fhir.r4.core.Reference
	265,  // 19: google.fhir.r4.qicore.QICoreAdverseEvent.seriousness:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 20: google.fhir.r4.qicore.QICoreAdverseEvent.severity:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 21: google.fhir.r4.qicore.QICoreAdverseEvent.outcome:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 22: google.fhir.r4.qicore.QICoreAdverseEvent.recorder:type_name -> google.fhir.r4.core.Reference
	266,  // 23: google.fhir.r4.qicore.QICoreAdverseEvent.contributor:type_name -> google.fhir.r4.core.Reference
	46,   // 24: google.fhir.r4.qicore.QICoreAdverseEvent.suspect_entity:type_name -> google.fhir.r4.qicore.QICoreAdverseEvent.SuspectEntity
	266,  // 25: google.fhir.r4.qicore.QICoreAdverseEvent.subject_medical_history:type_name -> google.fhir.r4.core.Reference
	266,  // 26: google.fhir.r4.qicore.QICoreAdverseEvent.reference_document:type_name -> google.fhir.r4.core.Reference
	266,  // 27: google.fhir.r4.qicore.QICoreAdverseEvent.study:type_name -> google.fhir.r4.core.Reference
	257,  // 28: google.fhir.r4.qicore.QICoreAllergyIntolerance.id:type_name -> google.fhir.r4.core.Id
	258,  // 29: google.fhir.r4.qicore.QICoreAllergyIntolerance.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 30: google.fhir.r4.qicore.QICoreAllergyIntolerance.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 31: google.fhir.r4.qicore.QICoreAllergyIntolerance.language:type_name -> google.fhir.r4.core.Code
	261,  // 32: google.fhir.r4.qicore.QICoreAllergyIntolerance.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 33: google.fhir.r4.qicore.QICoreAllergyIntolerance.contained:type_name -> google.protobuf.Any
	263,  // 34: google.fhir.r4.qicore.QICoreAllergyIntolerance.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 35: google.fhir.r4.qicore.QICoreAllergyIntolerance.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 36: google.fhir.r4.qicore.QICoreAllergyIntolerance.identifier:type_name -> google.fhir.r4.core.Identifier
	265,  // 37: google.fhir.r4.qicore.QICoreAllergyIntolerance.clinical_status:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 38: google.fhir.r4.qicore.QICoreAllergyIntolerance.verification_status:type_name -> google.fhir.r4.core.CodeableConcept
	48,   // 39: google.fhir.r4.qicore.QICoreAllergyIntolerance.type:type_name -> google.fhir.r4.qicore.QICoreAllergyIntolerance.TypeCode
	49,   // 40: google.fhir.r4.qicore.QICoreAllergyIntolerance.category:type_name -> google.fhir.r4.qicore.QICoreAllergyIntolerance.CategoryCode
	50,   // 41: google.fhir.r4.qicore.QICoreAllergyIntolerance.criticality:type_name -> google.fhir.r4.qicore.QICoreAllergyIntolerance.CriticalityCode
	265,  // 42: google.fhir.r4.qicore.QICoreAllergyIntolerance.code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 43: google.fhir.r4.qicore.QICoreAllergyIntolerance.patient:type_name -> google.fhir.r4.core.Reference
	266,  // 44: google.fhir.r4.qicore.QICoreAllergyIntolerance.encounter:type_name -> google.fhir.r4.core.Reference
	51,   // 45: google.fhir.r4.qicore.QICoreAllergyIntolerance.onset:type_name -> google.fhir.r4.qicore.QICoreAllergyIntolerance.OnsetX
	267,  // 46: google.fhir.r4.qicore.QICoreAllergyIntolerance.recorded_date:type_name -> google.fhir.r4.core.DateTime
	266,  // 47: google.fhir.r4.qicore.QICoreAllergyIntolerance.recorder:type_name -> google.fhir.r4.core.Reference
	266,  // 48: google.fhir.r4.qicore.QICoreAllergyIntolerance.asserter:type_name -> google.fhir.r4.core.Reference
	267,  // 49: google.fhir.r4.qicore.QICoreAllergyIntolerance.last_occurrence:type_name -> google.fhir.r4.core.DateTime
	268,  // 50: google.fhir.r4.qicore.QICoreAllergyIntolerance.note:type_name -> google.fhir.r4.core.Annotation
	52,   // 51: google.fhir.r4.qicore.QICoreAllergyIntolerance.reaction:type_name -> google.fhir.r4.qicore.QICoreAllergyIntolerance.Reaction
	269,  // 52: google.fhir.r4.qicore.QICoreAllergyIntolerance.resolution_age:type_name -> google.fhir.r4.core.Age
	265,  // 53: google.fhir.r4.qicore.QICoreAllergyIntolerance.reason_refuted:type_name -> google.fhir.r4.core.CodeableConcept
	257,  // 54: google.fhir.r4.qicore.QICoreBodyStructure.id:type_name -> google.fhir.r4.core.Id
	258,  // 55: google.fhir.r4.qicore.QICoreBodyStructure.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 56: google.fhir.r4.qicore.QICoreBodyStructure.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 57: google.fhir.r4.qicore.QICoreBodyStructure.language:type_name -> google.fhir.r4.core.Code
	261,  // 58: google.fhir.r4.qicore.QICoreBodyStructure.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 59: google.fhir.r4.qicore.QICoreBodyStructure.contained:type_name -> google.protobuf.Any
	263,  // 60: google.fhir.r4.qicore.QICoreBodyStructure.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 61: google.fhir.r4.qicore.QICoreBodyStructure.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 62: google.fhir.r4.qicore.QICoreBodyStructure.identifier:type_name -> google.fhir.r4.core.Identifier
	270,  // 63: google.fhir.r4.qicore.QICoreBodyStructure.active:type_name -> google.fhir.r4.core.Boolean
	265,  // 64: google.fhir.r4.qicore.QICoreBodyStructure.morphology:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 65: google.fhir.r4.qicore.QICoreBodyStructure.location:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 66: google.fhir.r4.qicore.QICoreBodyStructure.location_qualifier:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 67: google.fhir.r4.qicore.QICoreBodyStructure.description:type_name -> google.fhir.r4.core.String
	272,  // 68: google.fhir.r4.qicore.QICoreBodyStructure.image:type_name -> google.fhir.r4.core.Attachment
	266,  // 69: google.fhir.r4.qicore.QICoreBodyStructure.patient:type_name -> google.fhir.r4.core.Reference
	257,  // 70: google.fhir.r4.qicore.QICoreCarePlan.id:type_name -> google.fhir.r4.core.Id
	258,  // 71: google.fhir.r4.qicore.QICoreCarePlan.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 72: google.fhir.r4.qicore.QICoreCarePlan.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 73: google.fhir.r4.qicore.QICoreCarePlan.language:type_name -> google.fhir.r4.core.Code
	261,  // 74: google.fhir.r4.qicore.QICoreCarePlan.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 75: google.fhir.r4.qicore.QICoreCarePlan.contained:type_name -> google.protobuf.Any
	263,  // 76: google.fhir.r4.qicore.QICoreCarePlan.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 77: google.fhir.r4.qicore.QICoreCarePlan.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 78: google.fhir.r4.qicore.QICoreCarePlan.identifier:type_name -> google.fhir.r4.core.Identifier
	273,  // 79: google.fhir.r4.qicore.QICoreCarePlan.instantiates_canonical:type_name -> google.fhir.r4.core.Canonical
	259,  // 80: google.fhir.r4.qicore.QICoreCarePlan.instantiates_uri:type_name -> google.fhir.r4.core.Uri
	266,  // 81: google.fhir.r4.qicore.QICoreCarePlan.based_on:type_name -> google.fhir.r4.core.Reference
	266,  // 82: google.fhir.r4.qicore.QICoreCarePlan.replaces:type_name -> google.fhir.r4.core.Reference
	266,  // 83: google.fhir.r4.qicore.QICoreCarePlan.part_of:type_name -> google.fhir.r4.core.Reference
	54,   // 84: google.fhir.r4.qicore.QICoreCarePlan.status:type_name -> google.fhir.r4.qicore.QICoreCarePlan.StatusCode
	55,   // 85: google.fhir.r4.qicore.QICoreCarePlan.intent:type_name -> google.fhir.r4.qicore.QICoreCarePlan.IntentCode
	265,  // 86: google.fhir.r4.qicore.QICoreCarePlan.category:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 87: google.fhir.r4.qicore.QICoreCarePlan.title:type_name -> google.fhir.r4.core.String
	271,  // 88: google.fhir.r4.qicore.QICoreCarePlan.description:type_name -> google.fhir.r4.core.String
	266,  // 89: google.fhir.r4.qicore.QICoreCarePlan.subject:type_name -> google.fhir.r4.core.Reference
	266,  // 90: google.fhir.r4.qicore.QICoreCarePlan.encounter:type_name -> google.fhir.r4.core.Reference
	274,  // 91: google.fhir.r4.qicore.QICoreCarePlan.period:type_name -> google.fhir.r4.core.Period
	267,  // 92: google.fhir.r4.qicore.QICoreCarePlan.created:type_name -> google.fhir.r4.core.DateTime
	266,  // 93: google.fhir.r4.qicore.QICoreCarePlan.author:type_name -> google.fhir.r4.core.Reference
	266,  // 94: google.fhir.r4.qicore.QICoreCarePlan.contributor:type_name -> google.fhir.r4.core.Reference
	266,  // 95: google.fhir.r4.qicore.QICoreCarePlan.care_team:type_name -> google.fhir.r4.core.Reference
	266,  // 96: google.fhir.r4.qicore.QICoreCarePlan.addresses:type_name -> google.fhir.r4.core.Reference
	266,  // 97: google.fhir.r4.qicore.QICoreCarePlan.supporting_info:type_name -> google.fhir.r4.core.Reference
	266,  // 98: google.fhir.r4.qicore.QICoreCarePlan.goal:type_name -> google.fhir.r4.core.Reference
	56,   // 99: google.fhir.r4.qicore.QICoreCarePlan.activity:type_name -> google.fhir.r4.qicore.QICoreCarePlan.Activity
	268,  // 100: google.fhir.r4.qicore.QICoreCarePlan.note:type_name -> google.fhir.r4.core.Annotation
	257,  // 101: google.fhir.r4.qicore.QICoreCareTeam.id:type_name -> google.fhir.r4.core.Id
	258,  // 102: google.fhir.r4.qicore.QICoreCareTeam.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 103: google.fhir.r4.qicore.QICoreCareTeam.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 104: google.fhir.r4.qicore.QICoreCareTeam.language:type_name -> google.fhir.r4.core.Code
	261,  // 105: google.fhir.r4.qicore.QICoreCareTeam.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 106: google.fhir.r4.qicore.QICoreCareTeam.contained:type_name -> google.protobuf.Any
	263,  // 107: google.fhir.r4.qicore.QICoreCareTeam.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 108: google.fhir.r4.qicore.QICoreCareTeam.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 109: google.fhir.r4.qicore.QICoreCareTeam.identifier:type_name -> google.fhir.r4.core.Identifier
	62,   // 110: google.fhir.r4.qicore.QICoreCareTeam.status:type_name -> google.fhir.r4.qicore.QICoreCareTeam.StatusCode
	265,  // 111: google.fhir.r4.qicore.QICoreCareTeam.category:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 112: google.fhir.r4.qicore.QICoreCareTeam.name:type_name -> google.fhir.r4.core.String
	266,  // 113: google.fhir.r4.qicore.QICoreCareTeam.subject:type_name -> google.fhir.r4.core.Reference
	266,  // 114: google.fhir.r4.qicore.QICoreCareTeam.encounter:type_name -> google.fhir.r4.core.Reference
	274,  // 115: google.fhir.r4.qicore.QICoreCareTeam.period:type_name -> google.fhir.r4.core.Period
	63,   // 116: google.fhir.r4.qicore.QICoreCareTeam.participant:type_name -> google.fhir.r4.qicore.QICoreCareTeam.Participant
	265,  // 117: google.fhir.r4.qicore.QICoreCareTeam.reason_code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 118: google.fhir.r4.qicore.QICoreCareTeam.reason_reference:type_name -> google.fhir.r4.core.Reference
	266,  // 119: google.fhir.r4.qicore.QICoreCareTeam.managing_organization:type_name -> google.fhir.r4.core.Reference
	275,  // 120: google.fhir.r4.qicore.QICoreCareTeam.telecom:type_name -> google.fhir.r4.core.ContactPoint
	268,  // 121: google.fhir.r4.qicore.QICoreCareTeam.note:type_name -> google.fhir.r4.core.Annotation
	257,  // 122: google.fhir.r4.qicore.QICoreClaim.id:type_name -> google.fhir.r4.core.Id
	258,  // 123: google.fhir.r4.qicore.QICoreClaim.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 124: google.fhir.r4.qicore.QICoreClaim.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 125: google.fhir.r4.qicore.QICoreClaim.language:type_name -> google.fhir.r4.core.Code
	261,  // 126: google.fhir.r4.qicore.QICoreClaim.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 127: google.fhir.r4.qicore.QICoreClaim.contained:type_name -> google.protobuf.Any
	263,  // 128: google.fhir.r4.qicore.QICoreClaim.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 129: google.fhir.r4.qicore.QICoreClaim.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 130: google.fhir.r4.qicore.QICoreClaim.identifier:type_name -> google.fhir.r4.core.Identifier
	64,   // 131: google.fhir.r4.qicore.QICoreClaim.status:type_name -> google.fhir.r4.qicore.QICoreClaim.StatusCode
	265,  // 132: google.fhir.r4.qicore.QICoreClaim.type:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 133: google.fhir.r4.qicore.QICoreClaim.sub_type:type_name -> google.fhir.r4.core.CodeableConcept
	65,   // 134: google.fhir.r4.qicore.QICoreClaim.use:type_name -> google.fhir.r4.qicore.QICoreClaim.UseCode
	266,  // 135: google.fhir.r4.qicore.QICoreClaim.patient:type_name -> google.fhir.r4.core.Reference
	274,  // 136: google.fhir.r4.qicore.QICoreClaim.billable_period:type_name -> google.fhir.r4.core.Period
	267,  // 137: google.fhir.r4.qicore.QICoreClaim.created:type_name -> google.fhir.r4.core.DateTime
	266,  // 138: google.fhir.r4.qicore.QICoreClaim.enterer:type_name -> google.fhir.r4.core.Reference
	266,  // 139: google.fhir.r4.qicore.QICoreClaim.insurer:type_name -> google.fhir.r4.core.Reference
	266,  // 140: google.fhir.r4.qicore.QICoreClaim.provider:type_name -> google.fhir.r4.core.Reference
	265,  // 141: google.fhir.r4.qicore.QICoreClaim.priority:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 142: google.fhir.r4.qicore.QICoreClaim.funds_reserve:type_name -> google.fhir.r4.core.CodeableConcept
	66,   // 143: google.fhir.r4.qicore.QICoreClaim.related:type_name -> google.fhir.r4.qicore.QICoreClaim.RelatedClaim
	266,  // 144: google.fhir.r4.qicore.QICoreClaim.prescription:type_name -> google.fhir.r4.core.Reference
	266,  // 145: google.fhir.r4.qicore.QICoreClaim.original_prescription:type_name -> google.fhir.r4.core.Reference
	67,   // 146: google.fhir.r4.qicore.QICoreClaim.payee:type_name -> google.fhir.r4.qicore.QICoreClaim.Payee
	266,  // 147: google.fhir.r4.qicore.QICoreClaim.referral:type_name -> google.fhir.r4.core.Reference
	266,  // 148: google.fhir.r4.qicore.QICoreClaim.facility:type_name -> google.fhir.r4.core.Reference
	68,   // 149: google.fhir.r4.qicore.QICoreClaim.care_team:type_name -> google.fhir.r4.qicore.QICoreClaim.CareTeam
	69,   // 150: google.fhir.r4.qicore.QICoreClaim.supporting_info:type_name -> google.fhir.r4.qicore.QICoreClaim.SupportingInformation
	70,   // 151: google.fhir.r4.qicore.QICoreClaim.diagnosis:type_name -> google.fhir.r4.qicore.QICoreClaim.Diagnosis
	71,   // 152: google.fhir.r4.qicore.QICoreClaim.procedure:type_name -> google.fhir.r4.qicore.QICoreClaim.Procedure
	72,   // 153: google.fhir.r4.qicore.QICoreClaim.insurance:type_name -> google.fhir.r4.qicore.QICoreClaim.Insurance
	73,   // 154: google.fhir.r4.qicore.QICoreClaim.accident:type_name -> google.fhir.r4.qicore.QICoreClaim.Accident
	74,   // 155: google.fhir.r4.qicore.QICoreClaim.item:type_name -> google.fhir.r4.qicore.QICoreClaim.Item
	276,  // 156: google.fhir.r4.qicore.QICoreClaim.total:type_name -> google.fhir.r4.core.Money
	257,  // 157: google.fhir.r4.qicore.QICoreCommunication.id:type_name -> google.fhir.r4.core.Id
	258,  // 158: google.fhir.r4.qicore.QICoreCommunication.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 159: google.fhir.r4.qicore.QICoreCommunication.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 160: google.fhir.r4.qicore.QICoreCommunication.language:type_name -> google.fhir.r4.core.Code
	261,  // 161: google.fhir.r4.qicore.QICoreCommunication.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 162: google.fhir.r4.qicore.QICoreCommunication.contained:type_name -> google.protobuf.Any
	263,  // 163: google.fhir.r4.qicore.QICoreCommunication.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 164: google.fhir.r4.qicore.QICoreCommunication.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 165: google.fhir.r4.qicore.QICoreCommunication.identifier:type_name -> google.fhir.r4.core.Identifier
	273,  // 166: google.fhir.r4.qicore.QICoreCommunication.instantiates_canonical:type_name -> google.fhir.r4.core.Canonical
	259,  // 167: google.fhir.r4.qicore.QICoreCommunication.instantiates_uri:type_name -> google.fhir.r4.core.Uri
	266,  // 168: google.fhir.r4.qicore.QICoreCommunication.based_on:type_name -> google.fhir.r4.core.Reference
	266,  // 169: google.fhir.r4.qicore.QICoreCommunication.part_of:type_name -> google.fhir.r4.core.Reference
	266,  // 170: google.fhir.r4.qicore.QICoreCommunication.in_response_to:type_name -> google.fhir.r4.core.Reference
	84,   // 171: google.fhir.r4.qicore.QICoreCommunication.status:type_name -> google.fhir.r4.qicore.QICoreCommunication.StatusCode
	265,  // 172: google.fhir.r4.qicore.QICoreCommunication.status_reason:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 173: google.fhir.r4.qicore.QICoreCommunication.category:type_name -> google.fhir.r4.core.CodeableConcept
	85,   // 174: google.fhir.r4.qicore.QICoreCommunication.priority:type_name -> google.fhir.r4.qicore.QICoreCommunication.PriorityCode
	265,  // 175: google.fhir.r4.qicore.QICoreCommunication.medium:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 176: google.fhir.r4.qicore.QICoreCommunication.subject:type_name -> google.fhir.r4.core.Reference
	265,  // 177: google.fhir.r4.qicore.QICoreCommunication.topic:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 178: google.fhir.r4.qicore.QICoreCommunication.about:type_name -> google.fhir.r4.core.Reference
	266,  // 179: google.fhir.r4.qicore.QICoreCommunication.encounter:type_name -> google.fhir.r4.core.Reference
	267,  // 180: google.fhir.r4.qicore.QICoreCommunication.sent:type_name -> google.fhir.r4.core.DateTime
	267,  // 181: google.fhir.r4.qicore.QICoreCommunication.received:type_name -> google.fhir.r4.core.DateTime
	266,  // 182: google.fhir.r4.qicore.QICoreCommunication.recipient:type_name -> google.fhir.r4.core.Reference
	266,  // 183: google.fhir.r4.qicore.QICoreCommunication.sender:type_name -> google.fhir.r4.core.Reference
	265,  // 184: google.fhir.r4.qicore.QICoreCommunication.reason_code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 185: google.fhir.r4.qicore.QICoreCommunication.reason_reference:type_name -> google.fhir.r4.core.Reference
	86,   // 186: google.fhir.r4.qicore.QICoreCommunication.payload:type_name -> google.fhir.r4.qicore.QICoreCommunication.Payload
	268,  // 187: google.fhir.r4.qicore.QICoreCommunication.note:type_name -> google.fhir.r4.core.Annotation
	257,  // 188: google.fhir.r4.qicore.QICoreCommunicationRequest.id:type_name -> google.fhir.r4.core.Id
	258,  // 189: google.fhir.r4.qicore.QICoreCommunicationRequest.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 190: google.fhir.r4.qicore.QICoreCommunicationRequest.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 191: google.fhir.r4.qicore.QICoreCommunicationRequest.language:type_name -> google.fhir.r4.core.Code
	261,  // 192: google.fhir.r4.qicore.QICoreCommunicationRequest.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 193: google.fhir.r4.qicore.QICoreCommunicationRequest.contained:type_name -> google.protobuf.Any
	263,  // 194: google.fhir.r4.qicore.QICoreCommunicationRequest.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 195: google.fhir.r4.qicore.QICoreCommunicationRequest.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 196: google.fhir.r4.qicore.QICoreCommunicationRequest.identifier:type_name -> google.fhir.r4.core.Identifier
	266,  // 197: google.fhir.r4.qicore.QICoreCommunicationRequest.based_on:type_name -> google.fhir.r4.core.Reference
	266,  // 198: google.fhir.r4.qicore.QICoreCommunicationRequest.replaces:type_name -> google.fhir.r4.core.Reference
	264,  // 199: google.fhir.r4.qicore.QICoreCommunicationRequest.group_identifier:type_name -> google.fhir.r4.core.Identifier
	88,   // 200: google.fhir.r4.qicore.QICoreCommunicationRequest.status:type_name -> google.fhir.r4.qicore.QICoreCommunicationRequest.StatusCode
	265,  // 201: google.fhir.r4.qicore.QICoreCommunicationRequest.status_reason:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 202: google.fhir.r4.qicore.QICoreCommunicationRequest.category:type_name -> google.fhir.r4.core.CodeableConcept
	89,   // 203: google.fhir.r4.qicore.QICoreCommunicationRequest.priority:type_name -> google.fhir.r4.qicore.QICoreCommunicationRequest.PriorityCode
	270,  // 204: google.fhir.r4.qicore.QICoreCommunicationRequest.do_not_perform:type_name -> google.fhir.r4.core.Boolean
	265,  // 205: google.fhir.r4.qicore.QICoreCommunicationRequest.medium:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 206: google.fhir.r4.qicore.QICoreCommunicationRequest.subject:type_name -> google.fhir.r4.core.Reference
	266,  // 207: google.fhir.r4.qicore.QICoreCommunicationRequest.about:type_name -> google.fhir.r4.core.Reference
	266,  // 208: google.fhir.r4.qicore.QICoreCommunicationRequest.encounter:type_name -> google.fhir.r4.core.Reference
	90,   // 209: google.fhir.r4.qicore.QICoreCommunicationRequest.payload:type_name -> google.fhir.r4.qicore.QICoreCommunicationRequest.Payload
	91,   // 210: google.fhir.r4.qicore.QICoreCommunicationRequest.occurrence:type_name -> google.fhir.r4.qicore.QICoreCommunicationRequest.OccurrenceX
	267,  // 211: google.fhir.r4.qicore.QICoreCommunicationRequest.authored_on:type_name -> google.fhir.r4.core.DateTime
	266,  // 212: google.fhir.r4.qicore.QICoreCommunicationRequest.requester:type_name -> google.fhir.r4.core.Reference
	266,  // 213: google.fhir.r4.qicore.QICoreCommunicationRequest.recipient:type_name -> google.fhir.r4.core.Reference
	266,  // 214: google.fhir.r4.qicore.QICoreCommunicationRequest.sender:type_name -> google.fhir.r4.core.Reference
	265,  // 215: google.fhir.r4.qicore.QICoreCommunicationRequest.reason_code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 216: google.fhir.r4.qicore.QICoreCommunicationRequest.reason_reference:type_name -> google.fhir.r4.core.Reference
	268,  // 217: google.fhir.r4.qicore.QICoreCommunicationRequest.note:type_name -> google.fhir.r4.core.Annotation
	257,  // 218: google.fhir.r4.qicore.QICoreCondition.id:type_name -> google.fhir.r4.core.Id
	258,  // 219: google.fhir.r4.qicore.QICoreCondition.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 220: google.fhir.r4.qicore.QICoreCondition.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 221: google.fhir.r4.qicore.QICoreCondition.language:type_name -> google.fhir.r4.core.Code
	261,  // 222: google.fhir.r4.qicore.QICoreCondition.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 223: google.fhir.r4.qicore.QICoreCondition.contained:type_name -> google.protobuf.Any
	263,  // 224: google.fhir.r4.qicore.QICoreCondition.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 225: google.fhir.r4.qicore.QICoreCondition.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 226: google.fhir.r4.qicore.QICoreCondition.identifier:type_name -> google.fhir.r4.core.Identifier
	265,  // 227: google.fhir.r4.qicore.QICoreCondition.clinical_status:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 228: google.fhir.r4.qicore.QICoreCondition.verification_status:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 229: google.fhir.r4.qicore.QICoreCondition.category:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 230: google.fhir.r4.qicore.QICoreCondition.severity:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 231: google.fhir.r4.qicore.QICoreCondition.code:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 232: google.fhir.r4.qicore.QICoreCondition.body_site:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 233: google.fhir.r4.qicore.QICoreCondition.subject:type_name -> google.fhir.r4.core.Reference
	266,  // 234: google.fhir.r4.qicore.QICoreCondition.encounter:type_name -> google.fhir.r4.core.Reference
	93,   // 235: google.fhir.r4.qicore.QICoreCondition.onset:type_name -> google.fhir.r4.qicore.QICoreCondition.OnsetX
	94,   // 236: google.fhir.r4.qicore.QICoreCondition.abatement:type_name -> google.fhir.r4.qicore.QICoreCondition.AbatementX
	267,  // 237: google.fhir.r4.qicore.QICoreCondition.recorded_date:type_name -> google.fhir.r4.core.DateTime
	266,  // 238: google.fhir.r4.qicore.QICoreCondition.recorder:type_name -> google.fhir.r4.core.Reference
	266,  // 239: google.fhir.r4.qicore.QICoreCondition.asserter:type_name -> google.fhir.r4.core.Reference
	95,   // 240: google.fhir.r4.qicore.QICoreCondition.stage:type_name -> google.fhir.r4.qicore.QICoreCondition.Stage
	96,   // 241: google.fhir.r4.qicore.QICoreCondition.evidence:type_name -> google.fhir.r4.qicore.QICoreCondition.Evidence
	268,  // 242: google.fhir.r4.qicore.QICoreCondition.note:type_name -> google.fhir.r4.core.Annotation
	277,  // 243: google.fhir.r4.qicore.QICoreCondition.due_to:type_name -> google.fhir.r4.core.ConditionDueTo.ValueX
	278,  // 244: google.fhir.r4.qicore.QICoreCondition.occurred_following:type_name -> google.fhir.r4.core.ConditionOccurredFollowing.ValueX
	257,  // 245: google.fhir.r4.qicore.QICoreCoverage.id:type_name -> google.fhir.r4.core.Id
	258,  // 246: google.fhir.r4.qicore.QICoreCoverage.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 247: google.fhir.r4.qicore.QICoreCoverage.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 248: google.fhir.r4.qicore.QICoreCoverage.language:type_name -> google.fhir.r4.core.Code
	261,  // 249: google.fhir.r4.qicore.QICoreCoverage.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 250: google.fhir.r4.qicore.QICoreCoverage.contained:type_name -> google.protobuf.Any
	263,  // 251: google.fhir.r4.qicore.QICoreCoverage.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 252: google.fhir.r4.qicore.QICoreCoverage.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 253: google.fhir.r4.qicore.QICoreCoverage.identifier:type_name -> google.fhir.r4.core.Identifier
	97,   // 254: google.fhir.r4.qicore.QICoreCoverage.status:type_name -> google.fhir.r4.qicore.QICoreCoverage.StatusCode
	265,  // 255: google.fhir.r4.qicore.QICoreCoverage.type:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 256: google.fhir.r4.qicore.QICoreCoverage.policy_holder:type_name -> google.fhir.r4.core.Reference
	266,  // 257: google.fhir.r4.qicore.QICoreCoverage.subscriber:type_name -> google.fhir.r4.core.Reference
	271,  // 258: google.fhir.r4.qicore.QICoreCoverage.subscriber_id:type_name -> google.fhir.r4.core.String
	266,  // 259: google.fhir.r4.qicore.QICoreCoverage.beneficiary:type_name -> google.fhir.r4.core.Reference
	271,  // 260: google.fhir.r4.qicore.QICoreCoverage.dependent:type_name -> google.fhir.r4.core.String
	265,  // 261: google.fhir.r4.qicore.QICoreCoverage.relationship:type_name -> google.fhir.r4.core.CodeableConcept
	274,  // 262: google.fhir.r4.qicore.QICoreCoverage.period:type_name -> google.fhir.r4.core.Period
	266,  // 263: google.fhir.r4.qicore.QICoreCoverage.payor:type_name -> google.fhir.r4.core.Reference
	98,   // 264: google.fhir.r4.qicore.QICoreCoverage.class_value:type_name -> google.fhir.r4.qicore.QICoreCoverage.Class
	279,  // 265: google.fhir.r4.qicore.QICoreCoverage.order:type_name -> google.fhir.r4.core.PositiveInt
	271,  // 266: google.fhir.r4.qicore.QICoreCoverage.network:type_name -> google.fhir.r4.core.String
	99,   // 267: google.fhir.r4.qicore.QICoreCoverage.cost_to_beneficiary:type_name -> google.fhir.r4.qicore.QICoreCoverage.CostToBeneficiary
	270,  // 268: google.fhir.r4.qicore.QICoreCoverage.subrogation:type_name -> google.fhir.r4.core.Boolean
	266,  // 269: google.fhir.r4.qicore.QICoreCoverage.contract:type_name -> google.fhir.r4.core.Reference
	257,  // 270: google.fhir.r4.qicore.QICoreDevice.id:type_name -> google.fhir.r4.core.Id
	258,  // 271: google.fhir.r4.qicore.QICoreDevice.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 272: google.fhir.r4.qicore.QICoreDevice.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 273: google.fhir.r4.qicore.QICoreDevice.language:type_name -> google.fhir.r4.core.Code
	261,  // 274: google.fhir.r4.qicore.QICoreDevice.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 275: google.fhir.r4.qicore.QICoreDevice.contained:type_name -> google.protobuf.Any
	263,  // 276: google.fhir.r4.qicore.QICoreDevice.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 277: google.fhir.r4.qicore.QICoreDevice.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 278: google.fhir.r4.qicore.QICoreDevice.identifier:type_name -> google.fhir.r4.core.Identifier
	266,  // 279: google.fhir.r4.qicore.QICoreDevice.definition:type_name -> google.fhir.r4.core.Reference
	102,  // 280: google.fhir.r4.qicore.QICoreDevice.udi_carrier:type_name -> google.fhir.r4.qicore.QICoreDevice.UdiCarrier
	103,  // 281: google.fhir.r4.qicore.QICoreDevice.status:type_name -> google.fhir.r4.qicore.QICoreDevice.StatusCode
	265,  // 282: google.fhir.r4.qicore.QICoreDevice.status_reason:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 283: google.fhir.r4.qicore.QICoreDevice.distinct_identifier:type_name -> google.fhir.r4.core.String
	271,  // 284: google.fhir.r4.qicore.QICoreDevice.manufacturer:type_name -> google.fhir.r4.core.String
	267,  // 285: google.fhir.r4.qicore.QICoreDevice.manufacture_date:type_name -> google.fhir.r4.core.DateTime
	267,  // 286: google.fhir.r4.qicore.QICoreDevice.expiration_date:type_name -> google.fhir.r4.core.DateTime
	271,  // 287: google.fhir.r4.qicore.QICoreDevice.lot_number:type_name -> google.fhir.r4.core.String
	271,  // 288: google.fhir.r4.qicore.QICoreDevice.serial_number:type_name -> google.fhir.r4.core.String
	104,  // 289: google.fhir.r4.qicore.QICoreDevice.device_name:type_name -> google.fhir.r4.qicore.QICoreDevice.DeviceName
	271,  // 290: google.fhir.r4.qicore.QICoreDevice.model_number:type_name -> google.fhir.r4.core.String
	271,  // 291: google.fhir.r4.qicore.QICoreDevice.part_number:type_name -> google.fhir.r4.core.String
	265,  // 292: google.fhir.r4.qicore.QICoreDevice.type:type_name -> google.fhir.r4.core.CodeableConcept
	105,  // 293: google.fhir.r4.qicore.QICoreDevice.specialization:type_name -> google.fhir.r4.qicore.QICoreDevice.Specialization
	106,  // 294: google.fhir.r4.qicore.QICoreDevice.version:type_name -> google.fhir.r4.qicore.QICoreDevice.Version
	107,  // 295: google.fhir.r4.qicore.QICoreDevice.property:type_name -> google.fhir.r4.qicore.QICoreDevice.Property
	266,  // 296: google.fhir.r4.qicore.QICoreDevice.patient:type_name -> google.fhir.r4.core.Reference
	266,  // 297: google.fhir.r4.qicore.QICoreDevice.owner:type_name -> google.fhir.r4.core.Reference
	275,  // 298: google.fhir.r4.qicore.QICoreDevice.contact:type_name -> google.fhir.r4.core.ContactPoint
	266,  // 299: google.fhir.r4.qicore.QICoreDevice.location:type_name -> google.fhir.r4.core.Reference
	259,  // 300: google.fhir.r4.qicore.QICoreDevice.url:type_name -> google.fhir.r4.core.Uri
	268,  // 301: google.fhir.r4.qicore.QICoreDevice.note:type_name -> google.fhir.r4.core.Annotation
	265,  // 302: google.fhir.r4.qicore.QICoreDevice.safety:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 303: google.fhir.r4.qicore.QICoreDevice.parent:type_name -> google.fhir.r4.core.Reference
	257,  // 304: google.fhir.r4.qicore.QICoreDeviceRequest.id:type_name -> google.fhir.r4.core.Id
	258,  // 305: google.fhir.r4.qicore.QICoreDeviceRequest.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 306: google.fhir.r4.qicore.QICoreDeviceRequest.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 307: google.fhir.r4.qicore.QICoreDeviceRequest.language:type_name -> google.fhir.r4.core.Code
	261,  // 308: google.fhir.r4.qicore.QICoreDeviceRequest.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 309: google.fhir.r4.qicore.QICoreDeviceRequest.contained:type_name -> google.protobuf.Any
	263,  // 310: google.fhir.r4.qicore.QICoreDeviceRequest.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 311: google.fhir.r4.qicore.QICoreDeviceRequest.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 312: google.fhir.r4.qicore.QICoreDeviceRequest.identifier:type_name -> google.fhir.r4.core.Identifier
	273,  // 313: google.fhir.r4.qicore.QICoreDeviceRequest.instantiates_canonical:type_name -> google.fhir.r4.core.Canonical
	259,  // 314: google.fhir.r4.qicore.QICoreDeviceRequest.instantiates_uri:type_name -> google.fhir.r4.core.Uri
	266,  // 315: google.fhir.r4.qicore.QICoreDeviceRequest.based_on:type_name -> google.fhir.r4.core.Reference
	266,  // 316: google.fhir.r4.qicore.QICoreDeviceRequest.prior_request:type_name -> google.fhir.r4.core.Reference
	264,  // 317: google.fhir.r4.qicore.QICoreDeviceRequest.group_identifier:type_name -> google.fhir.r4.core.Identifier
	110,  // 318: google.fhir.r4.qicore.QICoreDeviceRequest.status:type_name -> google.fhir.r4.qicore.QICoreDeviceRequest.StatusCode
	111,  // 319: google.fhir.r4.qicore.QICoreDeviceRequest.intent:type_name -> google.fhir.r4.qicore.QICoreDeviceRequest.IntentCode
	112,  // 320: google.fhir.r4.qicore.QICoreDeviceRequest.priority:type_name -> google.fhir.r4.qicore.QICoreDeviceRequest.PriorityCode
	113,  // 321: google.fhir.r4.qicore.QICoreDeviceRequest.code:type_name -> google.fhir.r4.qicore.QICoreDeviceRequest.CodeX
	114,  // 322: google.fhir.r4.qicore.QICoreDeviceRequest.parameter:type_name -> google.fhir.r4.qicore.QICoreDeviceRequest.Parameter
	266,  // 323: google.fhir.r4.qicore.QICoreDeviceRequest.subject:type_name -> google.fhir.r4.core.Reference
	266,  // 324: google.fhir.r4.qicore.QICoreDeviceRequest.encounter:type_name -> google.fhir.r4.core.Reference
	115,  // 325: google.fhir.r4.qicore.QICoreDeviceRequest.occurrence:type_name -> google.fhir.r4.qicore.QICoreDeviceRequest.OccurrenceX
	267,  // 326: google.fhir.r4.qicore.QICoreDeviceRequest.authored_on:type_name -> google.fhir.r4.core.DateTime
	266,  // 327: google.fhir.r4.qicore.QICoreDeviceRequest.requester:type_name -> google.fhir.r4.core.Reference
	265,  // 328: google.fhir.r4.qicore.QICoreDeviceRequest.performer_type:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 329: google.fhir.r4.qicore.QICoreDeviceRequest.performer:type_name -> google.fhir.r4.core.Reference
	265,  // 330: google.fhir.r4.qicore.QICoreDeviceRequest.reason_code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 331: google.fhir.r4.qicore.QICoreDeviceRequest.reason_reference:type_name -> google.fhir.r4.core.Reference
	266,  // 332: google.fhir.r4.qicore.QICoreDeviceRequest.insurance:type_name -> google.fhir.r4.core.Reference
	266,  // 333: google.fhir.r4.qicore.QICoreDeviceRequest.supporting_info:type_name -> google.fhir.r4.core.Reference
	268,  // 334: google.fhir.r4.qicore.QICoreDeviceRequest.note:type_name -> google.fhir.r4.core.Annotation
	266,  // 335: google.fhir.r4.qicore.QICoreDeviceRequest.relevant_history:type_name -> google.fhir.r4.core.Reference
	270,  // 336: google.fhir.r4.qicore.QICoreDeviceRequest.do_not_perform:type_name -> google.fhir.r4.core.Boolean
	271,  // 337: google.fhir.r4.qicore.DeviceUseStatementQICoreNotDoneExtension.id:type_name -> google.fhir.r4.core.String
	263,  // 338: google.fhir.r4.qicore.DeviceUseStatementQICoreNotDoneExtension.extension:type_name -> google.fhir.r4.core.Extension
	117,  // 339: google.fhir.r4.qicore.DeviceUseStatementQICoreNotDoneExtension.value:type_name -> google.fhir.r4.qicore.DeviceUseStatementQICoreNotDoneExtension.ValueX
	257,  // 340: google.fhir.r4.qicore.QICoreDeviceUseStatement.id:type_name -> google.fhir.r4.core.Id
	258,  // 341: google.fhir.r4.qicore.QICoreDeviceUseStatement.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 342: google.fhir.r4.qicore.QICoreDeviceUseStatement.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 343: google.fhir.r4.qicore.QICoreDeviceUseStatement.language:type_name -> google.fhir.r4.core.Code
	261,  // 344: google.fhir.r4.qicore.QICoreDeviceUseStatement.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 345: google.fhir.r4.qicore.QICoreDeviceUseStatement.contained:type_name -> google.protobuf.Any
	263,  // 346: google.fhir.r4.qicore.QICoreDeviceUseStatement.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 347: google.fhir.r4.qicore.QICoreDeviceUseStatement.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 348: google.fhir.r4.qicore.QICoreDeviceUseStatement.identifier:type_name -> google.fhir.r4.core.Identifier
	266,  // 349: google.fhir.r4.qicore.QICoreDeviceUseStatement.based_on:type_name -> google.fhir.r4.core.Reference
	118,  // 350: google.fhir.r4.qicore.QICoreDeviceUseStatement.status:type_name -> google.fhir.r4.qicore.QICoreDeviceUseStatement.StatusCode
	266,  // 351: google.fhir.r4.qicore.QICoreDeviceUseStatement.subject:type_name -> google.fhir.r4.core.Reference
	266,  // 352: google.fhir.r4.qicore.QICoreDeviceUseStatement.derived_from:type_name -> google.fhir.r4.core.Reference
	119,  // 353: google.fhir.r4.qicore.QICoreDeviceUseStatement.timing:type_name -> google.fhir.r4.qicore.QICoreDeviceUseStatement.TimingX
	267,  // 354: google.fhir.r4.qicore.QICoreDeviceUseStatement.recorded_on:type_name -> google.fhir.r4.core.DateTime
	266,  // 355: google.fhir.r4.qicore.QICoreDeviceUseStatement.source:type_name -> google.fhir.r4.core.Reference
	266,  // 356: google.fhir.r4.qicore.QICoreDeviceUseStatement.device:type_name -> google.fhir.r4.core.Reference
	265,  // 357: google.fhir.r4.qicore.QICoreDeviceUseStatement.reason_code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 358: google.fhir.r4.qicore.QICoreDeviceUseStatement.reason_reference:type_name -> google.fhir.r4.core.Reference
	265,  // 359: google.fhir.r4.qicore.QICoreDeviceUseStatement.body_site:type_name -> google.fhir.r4.core.CodeableConcept
	268,  // 360: google.fhir.r4.qicore.QICoreDeviceUseStatement.note:type_name -> google.fhir.r4.core.Annotation
	270,  // 361: google.fhir.r4.qicore.QICoreDeviceUseStatement.not_done:type_name -> google.fhir.r4.core.Boolean
	257,  // 362: google.fhir.r4.qicore.QICoreDiagnosticReportLab.id:type_name -> google.fhir.r4.core.Id
	258,  // 363: google.fhir.r4.qicore.QICoreDiagnosticReportLab.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 364: google.fhir.r4.qicore.QICoreDiagnosticReportLab.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 365: google.fhir.r4.qicore.QICoreDiagnosticReportLab.language:type_name -> google.fhir.r4.core.Code
	261,  // 366: google.fhir.r4.qicore.QICoreDiagnosticReportLab.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 367: google.fhir.r4.qicore.QICoreDiagnosticReportLab.contained:type_name -> google.protobuf.Any
	263,  // 368: google.fhir.r4.qicore.QICoreDiagnosticReportLab.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 369: google.fhir.r4.qicore.QICoreDiagnosticReportLab.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 370: google.fhir.r4.qicore.QICoreDiagnosticReportLab.identifier:type_name -> google.fhir.r4.core.Identifier
	266,  // 371: google.fhir.r4.qicore.QICoreDiagnosticReportLab.based_on:type_name -> google.fhir.r4.core.Reference
	120,  // 372: google.fhir.r4.qicore.QICoreDiagnosticReportLab.status:type_name -> google.fhir.r4.qicore.QICoreDiagnosticReportLab.StatusCode
	265,  // 373: google.fhir.r4.qicore.QICoreDiagnosticReportLab.category:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 374: google.fhir.r4.qicore.QICoreDiagnosticReportLab.code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 375: google.fhir.r4.qicore.QICoreDiagnosticReportLab.subject:type_name -> google.fhir.r4.core.Reference
	266,  // 376: google.fhir.r4.qicore.QICoreDiagnosticReportLab.encounter:type_name -> google.fhir.r4.core.Reference
	121,  // 377: google.fhir.r4.qicore.QICoreDiagnosticReportLab.effective:type_name -> google.fhir.r4.qicore.QICoreDiagnosticReportLab.EffectiveX
	280,  // 378: google.fhir.r4.qicore.QICoreDiagnosticReportLab.issued:type_name -> google.fhir.r4.core.Instant
	266,  // 379: google.fhir.r4.qicore.QICoreDiagnosticReportLab.performer:type_name -> google.fhir.r4.core.Reference
	266,  // 380: google.fhir.r4.qicore.QICoreDiagnosticReportLab.results_interpreter:type_name -> google.fhir.r4.core.Reference
	266,  // 381: google.fhir.r4.qicore.QICoreDiagnosticReportLab.specimen:type_name -> google.fhir.r4.core.Reference
	266,  // 382: google.fhir.r4.qicore.QICoreDiagnosticReportLab.result:type_name -> google.fhir.r4.core.Reference
	266,  // 383: google.fhir.r4.qicore.QICoreDiagnosticReportLab.imaging_study:type_name -> google.fhir.r4.core.Reference
	122,  // 384: google.fhir.r4.qicore.QICoreDiagnosticReportLab.media:type_name -> google.fhir.r4.qicore.QICoreDiagnosticReportLab.Media
	271,  // 385: google.fhir.r4.qicore.QICoreDiagnosticReportLab.conclusion:type_name -> google.fhir.r4.core.String
	265,  // 386: google.fhir.r4.qicore.QICoreDiagnosticReportLab.conclusion_code:type_name -> google.fhir.r4.core.CodeableConcept
	272,  // 387: google.fhir.r4.qicore.QICoreDiagnosticReportLab.presented_form:type_name -> google.fhir.r4.core.Attachment
	266,  // 388: google.fhir.r4.qicore.QICoreDiagnosticReportLab.location_performed:type_name -> google.fhir.r4.core.Reference
	257,  // 389: google.fhir.r4.qicore.QICoreDiagnosticReportNote.id:type_name -> google.fhir.r4.core.Id
	258,  // 390: google.fhir.r4.qicore.QICoreDiagnosticReportNote.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 391: google.fhir.r4.qicore.QICoreDiagnosticReportNote.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 392: google.fhir.r4.qicore.QICoreDiagnosticReportNote.language:type_name -> google.fhir.r4.core.Code
	261,  // 393: google.fhir.r4.qicore.QICoreDiagnosticReportNote.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 394: google.fhir.r4.qicore.QICoreDiagnosticReportNote.contained:type_name -> google.protobuf.Any
	263,  // 395: google.fhir.r4.qicore.QICoreDiagnosticReportNote.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 396: google.fhir.r4.qicore.QICoreDiagnosticReportNote.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 397: google.fhir.r4.qicore.QICoreDiagnosticReportNote.identifier:type_name -> google.fhir.r4.core.Identifier
	266,  // 398: google.fhir.r4.qicore.QICoreDiagnosticReportNote.based_on:type_name -> google.fhir.r4.core.Reference
	123,  // 399: google.fhir.r4.qicore.QICoreDiagnosticReportNote.status:type_name -> google.fhir.r4.qicore.QICoreDiagnosticReportNote.StatusCode
	265,  // 400: google.fhir.r4.qicore.QICoreDiagnosticReportNote.category:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 401: google.fhir.r4.qicore.QICoreDiagnosticReportNote.code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 402: google.fhir.r4.qicore.QICoreDiagnosticReportNote.subject:type_name -> google.fhir.r4.core.Reference
	266,  // 403: google.fhir.r4.qicore.QICoreDiagnosticReportNote.encounter:type_name -> google.fhir.r4.core.Reference
	124,  // 404: google.fhir.r4.qicore.QICoreDiagnosticReportNote.effective:type_name -> google.fhir.r4.qicore.QICoreDiagnosticReportNote.EffectiveX
	280,  // 405: google.fhir.r4.qicore.QICoreDiagnosticReportNote.issued:type_name -> google.fhir.r4.core.Instant
	266,  // 406: google.fhir.r4.qicore.QICoreDiagnosticReportNote.performer:type_name -> google.fhir.r4.core.Reference
	266,  // 407: google.fhir.r4.qicore.QICoreDiagnosticReportNote.results_interpreter:type_name -> google.fhir.r4.core.Reference
	266,  // 408: google.fhir.r4.qicore.QICoreDiagnosticReportNote.specimen:type_name -> google.fhir.r4.core.Reference
	266,  // 409: google.fhir.r4.qicore.QICoreDiagnosticReportNote.result:type_name -> google.fhir.r4.core.Reference
	266,  // 410: google.fhir.r4.qicore.QICoreDiagnosticReportNote.imaging_study:type_name -> google.fhir.r4.core.Reference
	125,  // 411: google.fhir.r4.qicore.QICoreDiagnosticReportNote.media:type_name -> google.fhir.r4.qicore.QICoreDiagnosticReportNote.Media
	271,  // 412: google.fhir.r4.qicore.QICoreDiagnosticReportNote.conclusion:type_name -> google.fhir.r4.core.String
	265,  // 413: google.fhir.r4.qicore.QICoreDiagnosticReportNote.conclusion_code:type_name -> google.fhir.r4.core.CodeableConcept
	272,  // 414: google.fhir.r4.qicore.QICoreDiagnosticReportNote.presented_form:type_name -> google.fhir.r4.core.Attachment
	266,  // 415: google.fhir.r4.qicore.QICoreDiagnosticReportNote.location_performed:type_name -> google.fhir.r4.core.Reference
	271,  // 416: google.fhir.r4.qicore.EncounterEncounterProcedureExtension.id:type_name -> google.fhir.r4.core.String
	263,  // 417: google.fhir.r4.qicore.EncounterEncounterProcedureExtension.extension:type_name -> google.fhir.r4.core.Extension
	265,  // 418: google.fhir.r4.qicore.EncounterEncounterProcedureExtension.type:type_name -> google.fhir.r4.core.CodeableConcept
	279,  // 419: google.fhir.r4.qicore.EncounterEncounterProcedureExtension.rank:type_name -> google.fhir.r4.core.PositiveInt
	266,  // 420: google.fhir.r4.qicore.EncounterEncounterProcedureExtension.procedure:type_name -> google.fhir.r4.core.Reference
	257,  // 421: google.fhir.r4.qicore.QICoreEncounter.id:type_name -> google.fhir.r4.core.Id
	258,  // 422: google.fhir.r4.qicore.QICoreEncounter.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 423: google.fhir.r4.qicore.QICoreEncounter.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 424: google.fhir.r4.qicore.QICoreEncounter.language:type_name -> google.fhir.r4.core.Code
	261,  // 425: google.fhir.r4.qicore.QICoreEncounter.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 426: google.fhir.r4.qicore.QICoreEncounter.contained:type_name -> google.protobuf.Any
	263,  // 427: google.fhir.r4.qicore.QICoreEncounter.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 428: google.fhir.r4.qicore.QICoreEncounter.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 429: google.fhir.r4.qicore.QICoreEncounter.identifier:type_name -> google.fhir.r4.core.Identifier
	126,  // 430: google.fhir.r4.qicore.QICoreEncounter.status:type_name -> google.fhir.r4.qicore.QICoreEncounter.StatusCode
	127,  // 431: google.fhir.r4.qicore.QICoreEncounter.status_history:type_name -> google.fhir.r4.qicore.QICoreEncounter.StatusHistory
	281,  // 432: google.fhir.r4.qicore.QICoreEncounter.class_value:type_name -> google.fhir.r4.core.Coding
	128,  // 433: google.fhir.r4.qicore.QICoreEncounter.class_history:type_name -> google.fhir.r4.qicore.QICoreEncounter.ClassHistory
	265,  // 434: google.fhir.r4.qicore.QICoreEncounter.type:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 435: google.fhir.r4.qicore.QICoreEncounter.service_type:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 436: google.fhir.r4.qicore.QICoreEncounter.priority:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 437: google.fhir.r4.qicore.QICoreEncounter.subject:type_name -> google.fhir.r4.core.Reference
	266,  // 438: google.fhir.r4.qicore.QICoreEncounter.episode_of_care:type_name -> google.fhir.r4.core.Reference
	266,  // 439: google.fhir.r4.qicore.QICoreEncounter.based_on:type_name -> google.fhir.r4.core.Reference
	129,  // 440: google.fhir.r4.qicore.QICoreEncounter.participant:type_name -> google.fhir.r4.qicore.QICoreEncounter.Participant
	266,  // 441: google.fhir.r4.qicore.QICoreEncounter.appointment:type_name -> google.fhir.r4.core.Reference
	274,  // 442: google.fhir.r4.qicore.QICoreEncounter.period:type_name -> google.fhir.r4.core.Period
	282,  // 443: google.fhir.r4.qicore.QICoreEncounter.length:type_name -> google.fhir.r4.core.Duration
	265,  // 444: google.fhir.r4.qicore.QICoreEncounter.reason_code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 445: google.fhir.r4.qicore.QICoreEncounter.reason_reference:type_name -> google.fhir.r4.core.Reference
	130,  // 446: google.fhir.r4.qicore.QICoreEncounter.diagnosis:type_name -> google.fhir.r4.qicore.QICoreEncounter.Diagnosis
	266,  // 447: google.fhir.r4.qicore.QICoreEncounter.account:type_name -> google.fhir.r4.core.Reference
	131,  // 448: google.fhir.r4.qicore.QICoreEncounter.hospitalization:type_name -> google.fhir.r4.qicore.QICoreEncounter.Hospitalization
	132,  // 449: google.fhir.r4.qicore.QICoreEncounter.location:type_name -> google.fhir.r4.qicore.QICoreEncounter.Location
	266,  // 450: google.fhir.r4.qicore.QICoreEncounter.service_provider:type_name -> google.fhir.r4.core.Reference
	266,  // 451: google.fhir.r4.qicore.QICoreEncounter.part_of:type_name -> google.fhir.r4.core.Reference
	265,  // 452: google.fhir.r4.qicore.QICoreEncounter.reason_cancelled:type_name -> google.fhir.r4.core.CodeableConcept
	16,   // 453: google.fhir.r4.qicore.QICoreEncounter.procedure:type_name -> google.fhir.r4.qicore.EncounterEncounterProcedureExtension
	257,  // 454: google.fhir.r4.qicore.QICoreFamilyMemberHistory.id:type_name -> google.fhir.r4.core.Id
	258,  // 455: google.fhir.r4.qicore.QICoreFamilyMemberHistory.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 456: google.fhir.r4.qicore.QICoreFamilyMemberHistory.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 457: google.fhir.r4.qicore.QICoreFamilyMemberHistory.language:type_name -> google.fhir.r4.core.Code
	261,  // 458: google.fhir.r4.qicore.QICoreFamilyMemberHistory.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 459: google.fhir.r4.qicore.QICoreFamilyMemberHistory.contained:type_name -> google.protobuf.Any
	263,  // 460: google.fhir.r4.qicore.QICoreFamilyMemberHistory.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 461: google.fhir.r4.qicore.QICoreFamilyMemberHistory.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 462: google.fhir.r4.qicore.QICoreFamilyMemberHistory.identifier:type_name -> google.fhir.r4.core.Identifier
	273,  // 463: google.fhir.r4.qicore.QICoreFamilyMemberHistory.instantiates_canonical:type_name -> google.fhir.r4.core.Canonical
	259,  // 464: google.fhir.r4.qicore.QICoreFamilyMemberHistory.instantiates_uri:type_name -> google.fhir.r4.core.Uri
	135,  // 465: google.fhir.r4.qicore.QICoreFamilyMemberHistory.status:type_name -> google.fhir.r4.qicore.QICoreFamilyMemberHistory.StatusCode
	265,  // 466: google.fhir.r4.qicore.QICoreFamilyMemberHistory.data_absent_reason:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 467: google.fhir.r4.qicore.QICoreFamilyMemberHistory.patient:type_name -> google.fhir.r4.core.Reference
	267,  // 468: google.fhir.r4.qicore.QICoreFamilyMemberHistory.date:type_name -> google.fhir.r4.core.DateTime
	271,  // 469: google.fhir.r4.qicore.QICoreFamilyMemberHistory.name:type_name -> google.fhir.r4.core.String
	265,  // 470: google.fhir.r4.qicore.QICoreFamilyMemberHistory.relationship:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 471: google.fhir.r4.qicore.QICoreFamilyMemberHistory.sex:type_name -> google.fhir.r4.core.CodeableConcept
	136,  // 472: google.fhir.r4.qicore.QICoreFamilyMemberHistory.born:type_name -> google.fhir.r4.qicore.QICoreFamilyMemberHistory.BornX
	137,  // 473: google.fhir.r4.qicore.QICoreFamilyMemberHistory.age:type_name -> google.fhir.r4.qicore.QICoreFamilyMemberHistory.AgeX
	270,  // 474: google.fhir.r4.qicore.QICoreFamilyMemberHistory.estimated_age:type_name -> google.fhir.r4.core.Boolean
	138,  // 475: google.fhir.r4.qicore.QICoreFamilyMemberHistory.deceased:type_name -> google.fhir.r4.qicore.QICoreFamilyMemberHistory.DeceasedX
	265,  // 476: google.fhir.r4.qicore.QICoreFamilyMemberHistory.reason_code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 477: google.fhir.r4.qicore.QICoreFamilyMemberHistory.reason_reference:type_name -> google.fhir.r4.core.Reference
	268,  // 478: google.fhir.r4.qicore.QICoreFamilyMemberHistory.note:type_name -> google.fhir.r4.core.Annotation
	139,  // 479: google.fhir.r4.qicore.QICoreFamilyMemberHistory.condition:type_name -> google.fhir.r4.qicore.QICoreFamilyMemberHistory.Condition
	257,  // 480: google.fhir.r4.qicore.QICoreFlag.id:type_name -> google.fhir.r4.core.Id
	258,  // 481: google.fhir.r4.qicore.QICoreFlag.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 482: google.fhir.r4.qicore.QICoreFlag.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 483: google.fhir.r4.qicore.QICoreFlag.language:type_name -> google.fhir.r4.core.Code
	261,  // 484: google.fhir.r4.qicore.QICoreFlag.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 485: google.fhir.r4.qicore.QICoreFlag.contained:type_name -> google.protobuf.Any
	263,  // 486: google.fhir.r4.qicore.QICoreFlag.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 487: google.fhir.r4.qicore.QICoreFlag.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 488: google.fhir.r4.qicore.QICoreFlag.identifier:type_name -> google.fhir.r4.core.Identifier
	141,  // 489: google.fhir.r4.qicore.QICoreFlag.status:type_name -> google.fhir.r4.qicore.QICoreFlag.StatusCode
	265,  // 490: google.fhir.r4.qicore.QICoreFlag.category:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 491: google.fhir.r4.qicore.QICoreFlag.code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 492: google.fhir.r4.qicore.QICoreFlag.subject:type_name -> google.fhir.r4.core.Reference
	274,  // 493: google.fhir.r4.qicore.QICoreFlag.period:type_name -> google.fhir.r4.core.Period
	266,  // 494: google.fhir.r4.qicore.QICoreFlag.encounter:type_name -> google.fhir.r4.core.Reference
	266,  // 495: google.fhir.r4.qicore.QICoreFlag.author:type_name -> google.fhir.r4.core.Reference
	257,  // 496: google.fhir.r4.qicore.QICoreGoal.id:type_name -> google.fhir.r4.core.Id
	258,  // 497: google.fhir.r4.qicore.QICoreGoal.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 498: google.fhir.r4.qicore.QICoreGoal.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 499: google.fhir.r4.qicore.QICoreGoal.language:type_name -> google.fhir.r4.core.Code
	261,  // 500: google.fhir.r4.qicore.QICoreGoal.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 501: google.fhir.r4.qicore.QICoreGoal.contained:type_name -> google.protobuf.Any
	263,  // 502: google.fhir.r4.qicore.QICoreGoal.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 503: google.fhir.r4.qicore.QICoreGoal.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 504: google.fhir.r4.qicore.QICoreGoal.identifier:type_name -> google.fhir.r4.core.Identifier
	142,  // 505: google.fhir.r4.qicore.QICoreGoal.lifecycle_status:type_name -> google.fhir.r4.qicore.QICoreGoal.LifecycleStatusCode
	265,  // 506: google.fhir.r4.qicore.QICoreGoal.achievement_status:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 507: google.fhir.r4.qicore.QICoreGoal.category:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 508: google.fhir.r4.qicore.QICoreGoal.priority:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 509: google.fhir.r4.qicore.QICoreGoal.description:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 510: google.fhir.r4.qicore.QICoreGoal.subject:type_name -> google.fhir.r4.core.Reference
	143,  // 511: google.fhir.r4.qicore.QICoreGoal.start:type_name -> google.fhir.r4.qicore.QICoreGoal.StartX
	144,  // 512: google.fhir.r4.qicore.QICoreGoal.target:type_name -> google.fhir.r4.qicore.QICoreGoal.Target
	283,  // 513: google.fhir.r4.qicore.QICoreGoal.status_date:type_name -> google.fhir.r4.core.Date
	271,  // 514: google.fhir.r4.qicore.QICoreGoal.status_reason:type_name -> google.fhir.r4.core.String
	266,  // 515: google.fhir.r4.qicore.QICoreGoal.expressed_by:type_name -> google.fhir.r4.core.Reference
	266,  // 516: google.fhir.r4.qicore.QICoreGoal.addresses:type_name -> google.fhir.r4.core.Reference
	268,  // 517: google.fhir.r4.qicore.QICoreGoal.note:type_name -> google.fhir.r4.core.Annotation
	265,  // 518: google.fhir.r4.qicore.QICoreGoal.outcome_code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 519: google.fhir.r4.qicore.QICoreGoal.outcome_reference:type_name -> google.fhir.r4.core.Reference
	265,  // 520: google.fhir.r4.qicore.QICoreGoal.reason_rejected:type_name -> google.fhir.r4.core.CodeableConcept
	257,  // 521: google.fhir.r4.qicore.QICoreImagingStudy.id:type_name -> google.fhir.r4.core.Id
	258,  // 522: google.fhir.r4.qicore.QICoreImagingStudy.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 523: google.fhir.r4.qicore.QICoreImagingStudy.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 524: google.fhir.r4.qicore.QICoreImagingStudy.language:type_name -> google.fhir.r4.core.Code
	261,  // 525: google.fhir.r4.qicore.QICoreImagingStudy.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 526: google.fhir.r4.qicore.QICoreImagingStudy.contained:type_name -> google.protobuf.Any
	263,  // 527: google.fhir.r4.qicore.QICoreImagingStudy.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 528: google.fhir.r4.qicore.QICoreImagingStudy.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 529: google.fhir.r4.qicore.QICoreImagingStudy.identifier:type_name -> google.fhir.r4.core.Identifier
	147,  // 530: google.fhir.r4.qicore.QICoreImagingStudy.status:type_name -> google.fhir.r4.qicore.QICoreImagingStudy.StatusCode
	281,  // 531: google.fhir.r4.qicore.QICoreImagingStudy.modality:type_name -> google.fhir.r4.core.Coding
	266,  // 532: google.fhir.r4.qicore.QICoreImagingStudy.subject:type_name -> google.fhir.r4.core.Reference
	266,  // 533: google.fhir.r4.qicore.QICoreImagingStudy.encounter:type_name -> google.fhir.r4.core.Reference
	267,  // 534: google.fhir.r4.qicore.QICoreImagingStudy.started:type_name -> google.fhir.r4.core.DateTime
	266,  // 535: google.fhir.r4.qicore.QICoreImagingStudy.based_on:type_name -> google.fhir.r4.core.Reference
	266,  // 536: google.fhir.r4.qicore.QICoreImagingStudy.referrer:type_name -> google.fhir.r4.core.Reference
	266,  // 537: google.fhir.r4.qicore.QICoreImagingStudy.interpreter:type_name -> google.fhir.r4.core.Reference
	266,  // 538: google.fhir.r4.qicore.QICoreImagingStudy.endpoint:type_name -> google.fhir.r4.core.Reference
	284,  // 539: google.fhir.r4.qicore.QICoreImagingStudy.number_of_series:type_name -> google.fhir.r4.core.UnsignedInt
	284,  // 540: google.fhir.r4.qicore.QICoreImagingStudy.number_of_instances:type_name -> google.fhir.r4.core.UnsignedInt
	266,  // 541: google.fhir.r4.qicore.QICoreImagingStudy.procedure_reference:type_name -> google.fhir.r4.core.Reference
	265,  // 542: google.fhir.r4.qicore.QICoreImagingStudy.procedure_code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 543: google.fhir.r4.qicore.QICoreImagingStudy.location:type_name -> google.fhir.r4.core.Reference
	265,  // 544: google.fhir.r4.qicore.QICoreImagingStudy.reason_code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 545: google.fhir.r4.qicore.QICoreImagingStudy.reason_reference:type_name -> google.fhir.r4.core.Reference
	268,  // 546: google.fhir.r4.qicore.QICoreImagingStudy.note:type_name -> google.fhir.r4.core.Annotation
	271,  // 547: google.fhir.r4.qicore.QICoreImagingStudy.description:type_name -> google.fhir.r4.core.String
	148,  // 548: google.fhir.r4.qicore.QICoreImagingStudy.series:type_name -> google.fhir.r4.qicore.QICoreImagingStudy.Series
	257,  // 549: google.fhir.r4.qicore.QICoreImmunization.id:type_name -> google.fhir.r4.core.Id
	258,  // 550: google.fhir.r4.qicore.QICoreImmunization.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 551: google.fhir.r4.qicore.QICoreImmunization.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 552: google.fhir.r4.qicore.QICoreImmunization.language:type_name -> google.fhir.r4.core.Code
	261,  // 553: google.fhir.r4.qicore.QICoreImmunization.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 554: google.fhir.r4.qicore.QICoreImmunization.contained:type_name -> google.protobuf.Any
	263,  // 555: google.fhir.r4.qicore.QICoreImmunization.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 556: google.fhir.r4.qicore.QICoreImmunization.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 557: google.fhir.r4.qicore.QICoreImmunization.identifier:type_name -> google.fhir.r4.core.Identifier
	151,  // 558: google.fhir.r4.qicore.QICoreImmunization.status:type_name -> google.fhir.r4.qicore.QICoreImmunization.StatusCode
	265,  // 559: google.fhir.r4.qicore.QICoreImmunization.status_reason:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 560: google.fhir.r4.qicore.QICoreImmunization.vaccine_code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 561: google.fhir.r4.qicore.QICoreImmunization.patient:type_name -> google.fhir.r4.core.Reference
	266,  // 562: google.fhir.r4.qicore.QICoreImmunization.encounter:type_name -> google.fhir.r4.core.Reference
	152,  // 563: google.fhir.r4.qicore.QICoreImmunization.occurrence:type_name -> google.fhir.r4.qicore.QICoreImmunization.OccurrenceX
	267,  // 564: google.fhir.r4.qicore.QICoreImmunization.recorded:type_name -> google.fhir.r4.core.DateTime
	270,  // 565: google.fhir.r4.qicore.QICoreImmunization.primary_source:type_name -> google.fhir.r4.core.Boolean
	265,  // 566: google.fhir.r4.qicore.QICoreImmunization.report_origin:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 567: google.fhir.r4.qicore.QICoreImmunization.location:type_name -> google.fhir.r4.core.Reference
	266,  // 568: google.fhir.r4.qicore.QICoreImmunization.manufacturer:type_name -> google.fhir.r4.core.Reference
	271,  // 569: google.fhir.r4.qicore.QICoreImmunization.lot_number:type_name -> google.fhir.r4.core.String
	283,  // 570: google.fhir.r4.qicore.QICoreImmunization.expiration_date:type_name -> google.fhir.r4.core.Date
	265,  // 571: google.fhir.r4.qicore.QICoreImmunization.site:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 572: google.fhir.r4.qicore.QICoreImmunization.route:type_name -> google.fhir.r4.core.CodeableConcept
	285,  // 573: google.fhir.r4.qicore.QICoreImmunization.dose_quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	153,  // 574: google.fhir.r4.qicore.QICoreImmunization.performer:type_name -> google.fhir.r4.qicore.QICoreImmunization.Performer
	268,  // 575: google.fhir.r4.qicore.QICoreImmunization.note:type_name -> google.fhir.r4.core.Annotation
	265,  // 576: google.fhir.r4.qicore.QICoreImmunization.reason_code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 577: google.fhir.r4.qicore.QICoreImmunization.reason_reference:type_name -> google.fhir.r4.core.Reference
	270,  // 578: google.fhir.r4.qicore.QICoreImmunization.is_subpotent:type_name -> google.fhir.r4.core.Boolean
	265,  // 579: google.fhir.r4.qicore.QICoreImmunization.subpotent_reason:type_name -> google.fhir.r4.core.CodeableConcept
	154,  // 580: google.fhir.r4.qicore.QICoreImmunization.education:type_name -> google.fhir.r4.qicore.QICoreImmunization.Education
	265,  // 581: google.fhir.r4.qicore.QICoreImmunization.program_eligibility:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 582: google.fhir.r4.qicore.QICoreImmunization.funding_source:type_name -> google.fhir.r4.core.CodeableConcept
	155,  // 583: google.fhir.r4.qicore.QICoreImmunization.reaction:type_name -> google.fhir.r4.qicore.QICoreImmunization.Reaction
	156,  // 584: google.fhir.r4.qicore.QICoreImmunization.protocol_applied:type_name -> google.fhir.r4.qicore.QICoreImmunization.ProtocolApplied
	257,  // 585: google.fhir.r4.qicore.QICoreImmunizationEvaluation.id:type_name -> google.fhir.r4.core.Id
	258,  // 586: google.fhir.r4.qicore.QICoreImmunizationEvaluation.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 587: google.fhir.r4.qicore.QICoreImmunizationEvaluation.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 588: google.fhir.r4.qicore.QICoreImmunizationEvaluation.language:type_name -> google.fhir.r4.core.Code
	261,  // 589: google.fhir.r4.qicore.QICoreImmunizationEvaluation.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 590: google.fhir.r4.qicore.QICoreImmunizationEvaluation.contained:type_name -> google.protobuf.Any
	263,  // 591: google.fhir.r4.qicore.QICoreImmunizationEvaluation.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 592: google.fhir.r4.qicore.QICoreImmunizationEvaluation.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 593: google.fhir.r4.qicore.QICoreImmunizationEvaluation.identifier:type_name -> google.fhir.r4.core.Identifier
	159,  // 594: google.fhir.r4.qicore.QICoreImmunizationEvaluation.status:type_name -> google.fhir.r4.qicore.QICoreImmunizationEvaluation.StatusCode
	266,  // 595: google.fhir.r4.qicore.QICoreImmunizationEvaluation.patient:type_name -> google.fhir.r4.core.Reference
	267,  // 596: google.fhir.r4.qicore.QICoreImmunizationEvaluation.date:type_name -> google.fhir.r4.core.DateTime
	266,  // 597: google.fhir.r4.qicore.QICoreImmunizationEvaluation.authority:type_name -> google.fhir.r4.core.Reference
	265,  // 598: google.fhir.r4.qicore.QICoreImmunizationEvaluation.target_disease:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 599: google.fhir.r4.qicore.QICoreImmunizationEvaluation.immunization_event:type_name -> google.fhir.r4.core.Reference
	265,  // 600: google.fhir.r4.qicore.QICoreImmunizationEvaluation.dose_status:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 601: google.fhir.r4.qicore.QICoreImmunizationEvaluation.dose_status_reason:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 602: google.fhir.r4.qicore.QICoreImmunizationEvaluation.description:type_name -> google.fhir.r4.core.String
	271,  // 603: google.fhir.r4.qicore.QICoreImmunizationEvaluation.series:type_name -> google.fhir.r4.core.String
	160,  // 604: google.fhir.r4.qicore.QICoreImmunizationEvaluation.dose_number:type_name -> google.fhir.r4.qicore.QICoreImmunizationEvaluation.DoseNumberX
	161,  // 605: google.fhir.r4.qicore.QICoreImmunizationEvaluation.series_doses:type_name -> google.fhir.r4.qicore.QICoreImmunizationEvaluation.SeriesDosesX
	257,  // 606: google.fhir.r4.qicore.QICoreImmunizationRecommendation.id:type_name -> google.fhir.r4.core.Id
	258,  // 607: google.fhir.r4.qicore.QICoreImmunizationRecommendation.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 608: google.fhir.r4.qicore.QICoreImmunizationRecommendation.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 609: google.fhir.r4.qicore.QICoreImmunizationRecommendation.language:type_name -> google.fhir.r4.core.Code
	261,  // 610: google.fhir.r4.qicore.QICoreImmunizationRecommendation.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 611: google.fhir.r4.qicore.QICoreImmunizationRecommendation.contained:type_name -> google.protobuf.Any
	263,  // 612: google.fhir.r4.qicore.QICoreImmunizationRecommendation.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 613: google.fhir.r4.qicore.QICoreImmunizationRecommendation.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 614: google.fhir.r4.qicore.QICoreImmunizationRecommendation.identifier:type_name -> google.fhir.r4.core.Identifier
	266,  // 615: google.fhir.r4.qicore.QICoreImmunizationRecommendation.patient:type_name -> google.fhir.r4.core.Reference
	267,  // 616: google.fhir.r4.qicore.QICoreImmunizationRecommendation.date:type_name -> google.fhir.r4.core.DateTime
	266,  // 617: google.fhir.r4.qicore.QICoreImmunizationRecommendation.authority:type_name -> google.fhir.r4.core.Reference
	162,  // 618: google.fhir.r4.qicore.QICoreImmunizationRecommendation.recommendation:type_name -> google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation
	257,  // 619: google.fhir.r4.qicore.QICoreLocation.id:type_name -> google.fhir.r4.core.Id
	258,  // 620: google.fhir.r4.qicore.QICoreLocation.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 621: google.fhir.r4.qicore.QICoreLocation.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 622: google.fhir.r4.qicore.QICoreLocation.language:type_name -> google.fhir.r4.core.Code
	261,  // 623: google.fhir.r4.qicore.QICoreLocation.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 624: google.fhir.r4.qicore.QICoreLocation.contained:type_name -> google.protobuf.Any
	263,  // 625: google.fhir.r4.qicore.QICoreLocation.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 626: google.fhir.r4.qicore.QICoreLocation.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 627: google.fhir.r4.qicore.QICoreLocation.identifier:type_name -> google.fhir.r4.core.Identifier
	166,  // 628: google.fhir.r4.qicore.QICoreLocation.status:type_name -> google.fhir.r4.qicore.QICoreLocation.StatusCode
	281,  // 629: google.fhir.r4.qicore.QICoreLocation.operational_status:type_name -> google.fhir.r4.core.Coding
	271,  // 630: google.fhir.r4.qicore.QICoreLocation.name:type_name -> google.fhir.r4.core.String
	271,  // 631: google.fhir.r4.qicore.QICoreLocation.alias:type_name -> google.fhir.r4.core.String
	271,  // 632: google.fhir.r4.qicore.QICoreLocation.description:type_name -> google.fhir.r4.core.String
	167,  // 633: google.fhir.r4.qicore.QICoreLocation.mode:type_name -> google.fhir.r4.qicore.QICoreLocation.ModeCode
	265,  // 634: google.fhir.r4.qicore.QICoreLocation.type:type_name -> google.fhir.r4.core.CodeableConcept
	275,  // 635: google.fhir.r4.qicore.QICoreLocation.telecom:type_name -> google.fhir.r4.core.ContactPoint
	286,  // 636: google.fhir.r4.qicore.QICoreLocation.address:type_name -> google.fhir.r4.core.Address
	265,  // 637: google.fhir.r4.qicore.QICoreLocation.physical_type:type_name -> google.fhir.r4.core.CodeableConcept
	168,  // 638: google.fhir.r4.qicore.QICoreLocation.position:type_name -> google.fhir.r4.qicore.QICoreLocation.Position
	266,  // 639: google.fhir.r4.qicore.QICoreLocation.managing_organization:type_name -> google.fhir.r4.core.Reference
	266,  // 640: google.fhir.r4.qicore.QICoreLocation.part_of:type_name -> google.fhir.r4.core.Reference
	169,  // 641: google.fhir.r4.qicore.QICoreLocation.hours_of_operation:type_name -> google.fhir.r4.qicore.QICoreLocation.HoursOfOperation
	271,  // 642: google.fhir.r4.qicore.QICoreLocation.availability_exceptions:type_name -> google.fhir.r4.core.String
	266,  // 643: google.fhir.r4.qicore.QICoreLocation.endpoint:type_name -> google.fhir.r4.core.Reference
	257,  // 644: google.fhir.r4.qicore.QICoreMedication.id:type_name -> google.fhir.r4.core.Id
	258,  // 645: google.fhir.r4.qicore.QICoreMedication.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 646: google.fhir.r4.qicore.QICoreMedication.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 647: google.fhir.r4.qicore.QICoreMedication.language:type_name -> google.fhir.r4.core.Code
	261,  // 648: google.fhir.r4.qicore.QICoreMedication.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 649: google.fhir.r4.qicore.QICoreMedication.contained:type_name -> google.protobuf.Any
	263,  // 650: google.fhir.r4.qicore.QICoreMedication.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 651: google.fhir.r4.qicore.QICoreMedication.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 652: google.fhir.r4.qicore.QICoreMedication.identifier:type_name -> google.fhir.r4.core.Identifier
	265,  // 653: google.fhir.r4.qicore.QICoreMedication.code:type_name -> google.fhir.r4.core.CodeableConcept
	171,  // 654: google.fhir.r4.qicore.QICoreMedication.status:type_name -> google.fhir.r4.qicore.QICoreMedication.StatusCode
	266,  // 655: google.fhir.r4.qicore.QICoreMedication.manufacturer:type_name -> google.fhir.r4.core.Reference
	265,  // 656: google.fhir.r4.qicore.QICoreMedication.form:type_name -> google.fhir.r4.core.CodeableConcept
	287,  // 657: google.fhir.r4.qicore.QICoreMedication.amount:type_name -> google.fhir.r4.core.Ratio
	172,  // 658: google.fhir.r4.qicore.QICoreMedication.ingredient:type_name -> google.fhir.r4.qicore.QICoreMedication.Ingredient
	173,  // 659: google.fhir.r4.qicore.QICoreMedication.batch:type_name -> google.fhir.r4.qicore.QICoreMedication.Batch
	257,  // 660: google.fhir.r4.qicore.QICoreMedicationAdministration.id:type_name -> google.fhir.r4.core.Id
	258,  // 661: google.fhir.r4.qicore.QICoreMedicationAdministration.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 662: google.fhir.r4.qicore.QICoreMedicationAdministration.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 663: google.fhir.r4.qicore.QICoreMedicationAdministration.language:type_name -> google.fhir.r4.core.Code
	261,  // 664: google.fhir.r4.qicore.QICoreMedicationAdministration.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 665: google.fhir.r4.qicore.QICoreMedicationAdministration.contained:type_name -> google.protobuf.Any
	263,  // 666: google.fhir.r4.qicore.QICoreMedicationAdministration.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 667: google.fhir.r4.qicore.QICoreMedicationAdministration.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 668: google.fhir.r4.qicore.QICoreMedicationAdministration.identifier:type_name -> google.fhir.r4.core.Identifier
	259,  // 669: google.fhir.r4.qicore.QICoreMedicationAdministration.instantiates:type_name -> google.fhir.r4.core.Uri
	266,  // 670: google.fhir.r4.qicore.QICoreMedicationAdministration.part_of:type_name -> google.fhir.r4.core.Reference
	175,  // 671: google.fhir.r4.qicore.QICoreMedicationAdministration.status:type_name -> google.fhir.r4.qicore.QICoreMedicationAdministration.StatusCode
	265,  // 672: google.fhir.r4.qicore.QICoreMedicationAdministration.status_reason:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 673: google.fhir.r4.qicore.QICoreMedicationAdministration.category:type_name -> google.fhir.r4.core.CodeableConcept
	176,  // 674: google.fhir.r4.qicore.QICoreMedicationAdministration.medication:type_name -> google.fhir.r4.qicore.QICoreMedicationAdministration.MedicationX
	266,  // 675: google.fhir.r4.qicore.QICoreMedicationAdministration.subject:type_name -> google.fhir.r4.core.Reference
	266,  // 676: google.fhir.r4.qicore.QICoreMedicationAdministration.context:type_name -> google.fhir.r4.core.Reference
	266,  // 677: google.fhir.r4.qicore.QICoreMedicationAdministration.supporting_information:type_name -> google.fhir.r4.core.Reference
	177,  // 678: google.fhir.r4.qicore.QICoreMedicationAdministration.effective:type_name -> google.fhir.r4.qicore.QICoreMedicationAdministration.EffectiveX
	178,  // 679: google.fhir.r4.qicore.QICoreMedicationAdministration.performer:type_name -> google.fhir.r4.qicore.QICoreMedicationAdministration.Performer
	265,  // 680: google.fhir.r4.qicore.QICoreMedicationAdministration.reason_code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 681: google.fhir.r4.qicore.QICoreMedicationAdministration.reason_reference:type_name -> google.fhir.r4.core.Reference
	266,  // 682: google.fhir.r4.qicore.QICoreMedicationAdministration.request:type_name -> google.fhir.r4.core.Reference
	266,  // 683: google.fhir.r4.qicore.QICoreMedicationAdministration.device:type_name -> google.fhir.r4.core.Reference
	268,  // 684: google.fhir.r4.qicore.QICoreMedicationAdministration.note:type_name -> google.fhir.r4.core.Annotation
	179,  // 685: google.fhir.r4.qicore.QICoreMedicationAdministration.dosage:type_name -> google.fhir.r4.qicore.QICoreMedicationAdministration.Dosage
	266,  // 686: google.fhir.r4.qicore.QICoreMedicationAdministration.event_history:type_name -> google.fhir.r4.core.Reference
	257,  // 687: google.fhir.r4.qicore.QICoreMedicationDispense.id:type_name -> google.fhir.r4.core.Id
	258,  // 688: google.fhir.r4.qicore.QICoreMedicationDispense.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 689: google.fhir.r4.qicore.QICoreMedicationDispense.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 690: google.fhir.r4.qicore.QICoreMedicationDispense.language:type_name -> google.fhir.r4.core.Code
	261,  // 691: google.fhir.r4.qicore.QICoreMedicationDispense.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 692: google.fhir.r4.qicore.QICoreMedicationDispense.contained:type_name -> google.protobuf.Any
	263,  // 693: google.fhir.r4.qicore.QICoreMedicationDispense.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 694: google.fhir.r4.qicore.QICoreMedicationDispense.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 695: google.fhir.r4.qicore.QICoreMedicationDispense.identifier:type_name -> google.fhir.r4.core.Identifier
	266,  // 696: google.fhir.r4.qicore.QICoreMedicationDispense.part_of:type_name -> google.fhir.r4.core.Reference
	181,  // 697: google.fhir.r4.qicore.QICoreMedicationDispense.status:type_name -> google.fhir.r4.qicore.QICoreMedicationDispense.StatusCode
	182,  // 698: google.fhir.r4.qicore.QICoreMedicationDispense.status_reason:type_name -> google.fhir.r4.qicore.QICoreMedicationDispense.StatusReasonX
	265,  // 699: google.fhir.r4.qicore.QICoreMedicationDispense.category:type_name -> google.fhir.r4.core.CodeableConcept
	183,  // 700: google.fhir.r4.qicore.QICoreMedicationDispense.medication:type_name -> google.fhir.r4.qicore.QICoreMedicationDispense.MedicationX
	266,  // 701: google.fhir.r4.qicore.QICoreMedicationDispense.subject:type_name -> google.fhir.r4.core.Reference
	266,  // 702: google.fhir.r4.qicore.QICoreMedicationDispense.context:type_name -> google.fhir.r4.core.Reference
	266,  // 703: google.fhir.r4.qicore.QICoreMedicationDispense.supporting_information:type_name -> google.fhir.r4.core.Reference
	184,  // 704: google.fhir.r4.qicore.QICoreMedicationDispense.performer:type_name -> google.fhir.r4.qicore.QICoreMedicationDispense.Performer
	266,  // 705: google.fhir.r4.qicore.QICoreMedicationDispense.location:type_name -> google.fhir.r4.core.Reference
	266,  // 706: google.fhir.r4.qicore.QICoreMedicationDispense.authorizing_prescription:type_name -> google.fhir.r4.core.Reference
	265,  // 707: google.fhir.r4.qicore.QICoreMedicationDispense.type:type_name -> google.fhir.r4.core.CodeableConcept
	285,  // 708: google.fhir.r4.qicore.QICoreMedicationDispense.quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	285,  // 709: google.fhir.r4.qicore.QICoreMedicationDispense.days_supply:type_name -> google.fhir.r4.core.SimpleQuantity
	267,  // 710: google.fhir.r4.qicore.QICoreMedicationDispense.when_prepared:type_name -> google.fhir.r4.core.DateTime
	267,  // 711: google.fhir.r4.qicore.QICoreMedicationDispense.when_handed_over:type_name -> google.fhir.r4.core.DateTime
	266,  // 712: google.fhir.r4.qicore.QICoreMedicationDispense.destination:type_name -> google.fhir.r4.core.Reference
	266,  // 713: google.fhir.r4.qicore.QICoreMedicationDispense.receiver:type_name -> google.fhir.r4.core.Reference
	268,  // 714: google.fhir.r4.qicore.QICoreMedicationDispense.note:type_name -> google.fhir.r4.core.Annotation
	288,  // 715: google.fhir.r4.qicore.QICoreMedicationDispense.dosage_instruction:type_name -> google.fhir.r4.core.Dosage
	185,  // 716: google.fhir.r4.qicore.QICoreMedicationDispense.substitution:type_name -> google.fhir.r4.qicore.QICoreMedicationDispense.Substitution
	266,  // 717: google.fhir.r4.qicore.QICoreMedicationDispense.detected_issue:type_name -> google.fhir.r4.core.Reference
	266,  // 718: google.fhir.r4.qicore.QICoreMedicationDispense.event_history:type_name -> google.fhir.r4.core.Reference
	257,  // 719: google.fhir.r4.qicore.QICoreMedicationRequest.id:type_name -> google.fhir.r4.core.Id
	258,  // 720: google.fhir.r4.qicore.QICoreMedicationRequest.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 721: google.fhir.r4.qicore.QICoreMedicationRequest.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 722: google.fhir.r4.qicore.QICoreMedicationRequest.language:type_name -> google.fhir.r4.core.Code
	261,  // 723: google.fhir.r4.qicore.QICoreMedicationRequest.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 724: google.fhir.r4.qicore.QICoreMedicationRequest.contained:type_name -> google.protobuf.Any
	263,  // 725: google.fhir.r4.qicore.QICoreMedicationRequest.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 726: google.fhir.r4.qicore.QICoreMedicationRequest.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 727: google.fhir.r4.qicore.QICoreMedicationRequest.identifier:type_name -> google.fhir.r4.core.Identifier
	186,  // 728: google.fhir.r4.qicore.QICoreMedicationRequest.status:type_name -> google.fhir.r4.qicore.QICoreMedicationRequest.StatusCode
	265,  // 729: google.fhir.r4.qicore.QICoreMedicationRequest.status_reason:type_name -> google.fhir.r4.core.CodeableConcept
	187,  // 730: google.fhir.r4.qicore.QICoreMedicationRequest.intent:type_name -> google.fhir.r4.qicore.QICoreMedicationRequest.IntentCode
	265,  // 731: google.fhir.r4.qicore.QICoreMedicationRequest.category:type_name -> google.fhir.r4.core.CodeableConcept
	188,  // 732: google.fhir.r4.qicore.QICoreMedicationRequest.priority:type_name -> google.fhir.r4.qicore.QICoreMedicationRequest.PriorityCode
	270,  // 733: google.fhir.r4.qicore.QICoreMedicationRequest.do_not_perform:type_name -> google.fhir.r4.core.Boolean
	189,  // 734: google.fhir.r4.qicore.QICoreMedicationRequest.reported:type_name -> google.fhir.r4.qicore.QICoreMedicationRequest.ReportedX
	190,  // 735: google.fhir.r4.qicore.QICoreMedicationRequest.medication:type_name -> google.fhir.r4.qicore.QICoreMedicationRequest.MedicationX
	266,  // 736: google.fhir.r4.qicore.QICoreMedicationRequest.subject:type_name -> google.fhir.r4.core.Reference
	266,  // 737: google.fhir.r4.qicore.QICoreMedicationRequest.encounter:type_name -> google.fhir.r4.core.Reference
	266,  // 738: google.fhir.r4.qicore.QICoreMedicationRequest.supporting_information:type_name -> google.fhir.r4.core.Reference
	267,  // 739: google.fhir.r4.qicore.QICoreMedicationRequest.authored_on:type_name -> google.fhir.r4.core.DateTime
	266,  // 740: google.fhir.r4.qicore.QICoreMedicationRequest.requester:type_name -> google.fhir.r4.core.Reference
	266,  // 741: google.fhir.r4.qicore.QICoreMedicationRequest.performer:type_name -> google.fhir.r4.core.Reference
	265,  // 742: google.fhir.r4.qicore.QICoreMedicationRequest.performer_type:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 743: google.fhir.r4.qicore.QICoreMedicationRequest.recorder:type_name -> google.fhir.r4.core.Reference
	265,  // 744: google.fhir.r4.qicore.QICoreMedicationRequest.reason_code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 745: google.fhir.r4.qicore.QICoreMedicationRequest.reason_reference:type_name -> google.fhir.r4.core.Reference
	273,  // 746: google.fhir.r4.qicore.QICoreMedicationRequest.instantiates_canonical:type_name -> google.fhir.r4.core.Canonical
	259,  // 747: google.fhir.r4.qicore.QICoreMedicationRequest.instantiates_uri:type_name -> google.fhir.r4.core.Uri
	266,  // 748: google.fhir.r4.qicore.QICoreMedicationRequest.based_on:type_name -> google.fhir.r4.core.Reference
	264,  // 749: google.fhir.r4.qicore.QICoreMedicationRequest.group_identifier:type_name -> google.fhir.r4.core.Identifier
	265,  // 750: google.fhir.r4.qicore.QICoreMedicationRequest.course_of_therapy_type:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 751: google.fhir.r4.qicore.QICoreMedicationRequest.insurance:type_name -> google.fhir.r4.core.Reference
	268,  // 752: google.fhir.r4.qicore.QICoreMedicationRequest.note:type_name -> google.fhir.r4.core.Annotation
	288,  // 753: google.fhir.r4.qicore.QICoreMedicationRequest.dosage_instruction:type_name -> google.fhir.r4.core.Dosage
	191,  // 754: google.fhir.r4.qicore.QICoreMedicationRequest.dispense_request:type_name -> google.fhir.r4.qicore.QICoreMedicationRequest.DispenseRequest
	192,  // 755: google.fhir.r4.qicore.QICoreMedicationRequest.substitution:type_name -> google.fhir.r4.qicore.QICoreMedicationRequest.Substitution
	266,  // 756: google.fhir.r4.qicore.QICoreMedicationRequest.prior_prescription:type_name -> google.fhir.r4.core.Reference
	266,  // 757: google.fhir.r4.qicore.QICoreMedicationRequest.detected_issue:type_name -> google.fhir.r4.core.Reference
	266,  // 758: google.fhir.r4.qicore.QICoreMedicationRequest.event_history:type_name -> google.fhir.r4.core.Reference
	257,  // 759: google.fhir.r4.qicore.QICoreMedicationStatement.id:type_name -> google.fhir.r4.core.Id
	258,  // 760: google.fhir.r4.qicore.QICoreMedicationStatement.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 761: google.fhir.r4.qicore.QICoreMedicationStatement.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 762: google.fhir.r4.qicore.QICoreMedicationStatement.language:type_name -> google.fhir.r4.core.Code
	261,  // 763: google.fhir.r4.qicore.QICoreMedicationStatement.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 764: google.fhir.r4.qicore.QICoreMedicationStatement.contained:type_name -> google.protobuf.Any
	263,  // 765: google.fhir.r4.qicore.QICoreMedicationStatement.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 766: google.fhir.r4.qicore.QICoreMedicationStatement.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 767: google.fhir.r4.qicore.QICoreMedicationStatement.identifier:type_name -> google.fhir.r4.core.Identifier
	266,  // 768: google.fhir.r4.qicore.QICoreMedicationStatement.based_on:type_name -> google.fhir.r4.core.Reference
	266,  // 769: google.fhir.r4.qicore.QICoreMedicationStatement.part_of:type_name -> google.fhir.r4.core.Reference
	195,  // 770: google.fhir.r4.qicore.QICoreMedicationStatement.status:type_name -> google.fhir.r4.qicore.QICoreMedicationStatement.StatusCode
	265,  // 771: google.fhir.r4.qicore.QICoreMedicationStatement.status_reason:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 772: google.fhir.r4.qicore.QICoreMedicationStatement.category:type_name -> google.fhir.r4.core.CodeableConcept
	196,  // 773: google.fhir.r4.qicore.QICoreMedicationStatement.medication:type_name -> google.fhir.r4.qicore.QICoreMedicationStatement.MedicationX
	266,  // 774: google.fhir.r4.qicore.QICoreMedicationStatement.subject:type_name -> google.fhir.r4.core.Reference
	266,  // 775: google.fhir.r4.qicore.QICoreMedicationStatement.context:type_name -> google.fhir.r4.core.Reference
	197,  // 776: google.fhir.r4.qicore.QICoreMedicationStatement.effective:type_name -> google.fhir.r4.qicore.QICoreMedicationStatement.EffectiveX
	267,  // 777: google.fhir.r4.qicore.QICoreMedicationStatement.date_asserted:type_name -> google.fhir.r4.core.DateTime
	266,  // 778: google.fhir.r4.qicore.QICoreMedicationStatement.information_source:type_name -> google.fhir.r4.core.Reference
	266,  // 779: google.fhir.r4.qicore.QICoreMedicationStatement.derived_from:type_name -> google.fhir.r4.core.Reference
	265,  // 780: google.fhir.r4.qicore.QICoreMedicationStatement.reason_code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 781: google.fhir.r4.qicore.QICoreMedicationStatement.reason_reference:type_name -> google.fhir.r4.core.Reference
	268,  // 782: google.fhir.r4.qicore.QICoreMedicationStatement.note:type_name -> google.fhir.r4.core.Annotation
	288,  // 783: google.fhir.r4.qicore.QICoreMedicationStatement.dosage:type_name -> google.fhir.r4.core.Dosage
	271,  // 784: google.fhir.r4.qicore.PatientMilitaryService.id:type_name -> google.fhir.r4.core.String
	265,  // 785: google.fhir.r4.qicore.PatientMilitaryService.value_codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	257,  // 786: google.fhir.r4.qicore.QICoreNutritionOrder.id:type_name -> google.fhir.r4.core.Id
	258,  // 787: google.fhir.r4.qicore.QICoreNutritionOrder.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 788: google.fhir.r4.qicore.QICoreNutritionOrder.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 789: google.fhir.r4.qicore.QICoreNutritionOrder.language:type_name -> google.fhir.r4.core.Code
	261,  // 790: google.fhir.r4.qicore.QICoreNutritionOrder.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 791: google.fhir.r4.qicore.QICoreNutritionOrder.contained:type_name -> google.protobuf.Any
	263,  // 792: google.fhir.r4.qicore.QICoreNutritionOrder.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 793: google.fhir.r4.qicore.QICoreNutritionOrder.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 794: google.fhir.r4.qicore.QICoreNutritionOrder.identifier:type_name -> google.fhir.r4.core.Identifier
	273,  // 795: google.fhir.r4.qicore.QICoreNutritionOrder.instantiates_canonical:type_name -> google.fhir.r4.core.Canonical
	259,  // 796: google.fhir.r4.qicore.QICoreNutritionOrder.instantiates_uri:type_name -> google.fhir.r4.core.Uri
	259,  // 797: google.fhir.r4.qicore.QICoreNutritionOrder.instantiates:type_name -> google.fhir.r4.core.Uri
	198,  // 798: google.fhir.r4.qicore.QICoreNutritionOrder.status:type_name -> google.fhir.r4.qicore.QICoreNutritionOrder.StatusCode
	199,  // 799: google.fhir.r4.qicore.QICoreNutritionOrder.intent:type_name -> google.fhir.r4.qicore.QICoreNutritionOrder.IntentCode
	266,  // 800: google.fhir.r4.qicore.QICoreNutritionOrder.patient:type_name -> google.fhir.r4.core.Reference
	266,  // 801: google.fhir.r4.qicore.QICoreNutritionOrder.encounter:type_name -> google.fhir.r4.core.Reference
	267,  // 802: google.fhir.r4.qicore.QICoreNutritionOrder.date_time:type_name -> google.fhir.r4.core.DateTime
	266,  // 803: google.fhir.r4.qicore.QICoreNutritionOrder.orderer:type_name -> google.fhir.r4.core.Reference
	266,  // 804: google.fhir.r4.qicore.QICoreNutritionOrder.allergy_intolerance:type_name -> google.fhir.r4.core.Reference
	265,  // 805: google.fhir.r4.qicore.QICoreNutritionOrder.food_preference_modifier:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 806: google.fhir.r4.qicore.QICoreNutritionOrder.exclude_food_modifier:type_name -> google.fhir.r4.core.CodeableConcept
	200,  // 807: google.fhir.r4.qicore.QICoreNutritionOrder.oral_diet:type_name -> google.fhir.r4.qicore.QICoreNutritionOrder.OralDiet
	201,  // 808: google.fhir.r4.qicore.QICoreNutritionOrder.supplement:type_name -> google.fhir.r4.qicore.QICoreNutritionOrder.Supplement
	202,  // 809: google.fhir.r4.qicore.QICoreNutritionOrder.enteral_formula:type_name -> google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula
	268,  // 810: google.fhir.r4.qicore.QICoreNutritionOrder.note:type_name -> google.fhir.r4.core.Annotation
	257,  // 811: google.fhir.r4.qicore.QICoreObservation.id:type_name -> google.fhir.r4.core.Id
	258,  // 812: google.fhir.r4.qicore.QICoreObservation.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 813: google.fhir.r4.qicore.QICoreObservation.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 814: google.fhir.r4.qicore.QICoreObservation.language:type_name -> google.fhir.r4.core.Code
	261,  // 815: google.fhir.r4.qicore.QICoreObservation.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 816: google.fhir.r4.qicore.QICoreObservation.contained:type_name -> google.protobuf.Any
	263,  // 817: google.fhir.r4.qicore.QICoreObservation.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 818: google.fhir.r4.qicore.QICoreObservation.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 819: google.fhir.r4.qicore.QICoreObservation.identifier:type_name -> google.fhir.r4.core.Identifier
	266,  // 820: google.fhir.r4.qicore.QICoreObservation.based_on:type_name -> google.fhir.r4.core.Reference
	266,  // 821: google.fhir.r4.qicore.QICoreObservation.part_of:type_name -> google.fhir.r4.core.Reference
	207,  // 822: google.fhir.r4.qicore.QICoreObservation.status:type_name -> google.fhir.r4.qicore.QICoreObservation.StatusCode
	265,  // 823: google.fhir.r4.qicore.QICoreObservation.category:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 824: google.fhir.r4.qicore.QICoreObservation.code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 825: google.fhir.r4.qicore.QICoreObservation.subject:type_name -> google.fhir.r4.core.Reference
	266,  // 826: google.fhir.r4.qicore.QICoreObservation.focus:type_name -> google.fhir.r4.core.Reference
	266,  // 827: google.fhir.r4.qicore.QICoreObservation.encounter:type_name -> google.fhir.r4.core.Reference
	208,  // 828: google.fhir.r4.qicore.QICoreObservation.effective:type_name -> google.fhir.r4.qicore.QICoreObservation.EffectiveX
	280,  // 829: google.fhir.r4.qicore.QICoreObservation.issued:type_name -> google.fhir.r4.core.Instant
	266,  // 830: google.fhir.r4.qicore.QICoreObservation.performer:type_name -> google.fhir.r4.core.Reference
	209,  // 831: google.fhir.r4.qicore.QICoreObservation.value:type_name -> google.fhir.r4.qicore.QICoreObservation.ValueX
	265,  // 832: google.fhir.r4.qicore.QICoreObservation.data_absent_reason:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 833: google.fhir.r4.qicore.QICoreObservation.interpretation:type_name -> google.fhir.r4.core.CodeableConcept
	268,  // 834: google.fhir.r4.qicore.QICoreObservation.note:type_name -> google.fhir.r4.core.Annotation
	265,  // 835: google.fhir.r4.qicore.QICoreObservation.body_site:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 836: google.fhir.r4.qicore.QICoreObservation.method:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 837: google.fhir.r4.qicore.QICoreObservation.specimen:type_name -> google.fhir.r4.core.Reference
	266,  // 838: google.fhir.r4.qicore.QICoreObservation.device:type_name -> google.fhir.r4.core.Reference
	210,  // 839: google.fhir.r4.qicore.QICoreObservation.reference_range:type_name -> google.fhir.r4.qicore.QICoreObservation.ReferenceRange
	266,  // 840: google.fhir.r4.qicore.QICoreObservation.has_member:type_name -> google.fhir.r4.core.Reference
	266,  // 841: google.fhir.r4.qicore.QICoreObservation.derived_from:type_name -> google.fhir.r4.core.Reference
	211,  // 842: google.fhir.r4.qicore.QICoreObservation.component:type_name -> google.fhir.r4.qicore.QICoreObservation.Component
	265,  // 843: google.fhir.r4.qicore.QICoreObservation.body_position:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 844: google.fhir.r4.qicore.QICoreObservation.delta:type_name -> google.fhir.r4.core.CodeableConcept
	257,  // 845: google.fhir.r4.qicore.QICoreOrganization.id:type_name -> google.fhir.r4.core.Id
	258,  // 846: google.fhir.r4.qicore.QICoreOrganization.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 847: google.fhir.r4.qicore.QICoreOrganization.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 848: google.fhir.r4.qicore.QICoreOrganization.language:type_name -> google.fhir.r4.core.Code
	261,  // 849: google.fhir.r4.qicore.QICoreOrganization.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 850: google.fhir.r4.qicore.QICoreOrganization.contained:type_name -> google.protobuf.Any
	263,  // 851: google.fhir.r4.qicore.QICoreOrganization.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 852: google.fhir.r4.qicore.QICoreOrganization.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 853: google.fhir.r4.qicore.QICoreOrganization.identifier:type_name -> google.fhir.r4.core.Identifier
	270,  // 854: google.fhir.r4.qicore.QICoreOrganization.active:type_name -> google.fhir.r4.core.Boolean
	265,  // 855: google.fhir.r4.qicore.QICoreOrganization.type:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 856: google.fhir.r4.qicore.QICoreOrganization.name:type_name -> google.fhir.r4.core.String
	271,  // 857: google.fhir.r4.qicore.QICoreOrganization.alias:type_name -> google.fhir.r4.core.String
	275,  // 858: google.fhir.r4.qicore.QICoreOrganization.telecom:type_name -> google.fhir.r4.core.ContactPoint
	286,  // 859: google.fhir.r4.qicore.QICoreOrganization.address:type_name -> google.fhir.r4.core.Address
	266,  // 860: google.fhir.r4.qicore.QICoreOrganization.part_of:type_name -> google.fhir.r4.core.Reference
	213,  // 861: google.fhir.r4.qicore.QICoreOrganization.contact:type_name -> google.fhir.r4.qicore.QICoreOrganization.Contact
	266,  // 862: google.fhir.r4.qicore.QICoreOrganization.endpoint:type_name -> google.fhir.r4.core.Reference
	257,  // 863: google.fhir.r4.qicore.QICorePatient.id:type_name -> google.fhir.r4.core.Id
	258,  // 864: google.fhir.r4.qicore.QICorePatient.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 865: google.fhir.r4.qicore.QICorePatient.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 866: google.fhir.r4.qicore.QICorePatient.language:type_name -> google.fhir.r4.core.Code
	261,  // 867: google.fhir.r4.qicore.QICorePatient.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 868: google.fhir.r4.qicore.QICorePatient.contained:type_name -> google.protobuf.Any
	263,  // 869: google.fhir.r4.qicore.QICorePatient.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 870: google.fhir.r4.qicore.QICorePatient.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 871: google.fhir.r4.qicore.QICorePatient.identifier:type_name -> google.fhir.r4.core.Identifier
	270,  // 872: google.fhir.r4.qicore.QICorePatient.active:type_name -> google.fhir.r4.core.Boolean
	289,  // 873: google.fhir.r4.qicore.QICorePatient.name:type_name -> google.fhir.r4.core.HumanName
	275,  // 874: google.fhir.r4.qicore.QICorePatient.telecom:type_name -> google.fhir.r4.core.ContactPoint
	214,  // 875: google.fhir.r4.qicore.QICorePatient.gender:type_name -> google.fhir.r4.qicore.QICorePatient.GenderCode
	283,  // 876: google.fhir.r4.qicore.QICorePatient.birth_date:type_name -> google.fhir.r4.core.Date
	215,  // 877: google.fhir.r4.qicore.QICorePatient.deceased:type_name -> google.fhir.r4.qicore.QICorePatient.DeceasedX
	286,  // 878: google.fhir.r4.qicore.QICorePatient.address:type_name -> google.fhir.r4.core.Address
	265,  // 879: google.fhir.r4.qicore.QICorePatient.marital_status:type_name -> google.fhir.r4.core.CodeableConcept
	216,  // 880: google.fhir.r4.qicore.QICorePatient.multiple_birth:type_name -> google.fhir.r4.qicore.QICorePatient.MultipleBirthX
	272,  // 881: google.fhir.r4.qicore.QICorePatient.photo:type_name -> google.fhir.r4.core.Attachment
	217,  // 882: google.fhir.r4.qicore.QICorePatient.contact:type_name -> google.fhir.r4.qicore.QICorePatient.Contact
	218,  // 883: google.fhir.r4.qicore.QICorePatient.communication:type_name -> google.fhir.r4.qicore.QICorePatient.Communication
	266,  // 884: google.fhir.r4.qicore.QICorePatient.general_practitioner:type_name -> google.fhir.r4.core.Reference
	266,  // 885: google.fhir.r4.qicore.QICorePatient.managing_organization:type_name -> google.fhir.r4.core.Reference
	219,  // 886: google.fhir.r4.qicore.QICorePatient.link:type_name -> google.fhir.r4.qicore.QICorePatient.Link
	290,  // 887: google.fhir.r4.qicore.QICorePatient.race:type_name -> google.fhir.r4.uscore.PatientUSCoreRaceExtension
	291,  // 888: google.fhir.r4.qicore.QICorePatient.ethnicity:type_name -> google.fhir.r4.uscore.PatientUSCoreEthnicityExtension
	292,  // 889: google.fhir.r4.qicore.QICorePatient.birthsex:type_name -> google.fhir.r4.uscore.PatientUSCoreBirthSexExtension.ValueCode
	265,  // 890: google.fhir.r4.qicore.QICorePatient.religion:type_name -> google.fhir.r4.core.CodeableConcept
	286,  // 891: google.fhir.r4.qicore.QICorePatient.birth_place:type_name -> google.fhir.r4.core.Address
	265,  // 892: google.fhir.r4.qicore.QICorePatient.disability:type_name -> google.fhir.r4.core.CodeableConcept
	293,  // 893: google.fhir.r4.qicore.QICorePatient.nationality:type_name -> google.fhir.r4.core.PatientNationality
	270,  // 894: google.fhir.r4.qicore.QICorePatient.cadaveric_donor:type_name -> google.fhir.r4.core.Boolean
	265,  // 895: google.fhir.r4.qicore.QICorePatient.military_service:type_name -> google.fhir.r4.core.CodeableConcept
	267,  // 896: google.fhir.r4.qicore.QICorePatient.birth_time:type_name -> google.fhir.r4.core.DateTime
	257,  // 897: google.fhir.r4.qicore.QICorePractitioner.id:type_name -> google.fhir.r4.core.Id
	258,  // 898: google.fhir.r4.qicore.QICorePractitioner.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 899: google.fhir.r4.qicore.QICorePractitioner.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 900: google.fhir.r4.qicore.QICorePractitioner.language:type_name -> google.fhir.r4.core.Code
	261,  // 901: google.fhir.r4.qicore.QICorePractitioner.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 902: google.fhir.r4.qicore.QICorePractitioner.contained:type_name -> google.protobuf.Any
	263,  // 903: google.fhir.r4.qicore.QICorePractitioner.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 904: google.fhir.r4.qicore.QICorePractitioner.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 905: google.fhir.r4.qicore.QICorePractitioner.identifier:type_name -> google.fhir.r4.core.Identifier
	270,  // 906: google.fhir.r4.qicore.QICorePractitioner.active:type_name -> google.fhir.r4.core.Boolean
	289,  // 907: google.fhir.r4.qicore.QICorePractitioner.name:type_name -> google.fhir.r4.core.HumanName
	275,  // 908: google.fhir.r4.qicore.QICorePractitioner.telecom:type_name -> google.fhir.r4.core.ContactPoint
	286,  // 909: google.fhir.r4.qicore.QICorePractitioner.address:type_name -> google.fhir.r4.core.Address
	222,  // 910: google.fhir.r4.qicore.QICorePractitioner.gender:type_name -> google.fhir.r4.qicore.QICorePractitioner.GenderCode
	283,  // 911: google.fhir.r4.qicore.QICorePractitioner.birth_date:type_name -> google.fhir.r4.core.Date
	272,  // 912: google.fhir.r4.qicore.QICorePractitioner.photo:type_name -> google.fhir.r4.core.Attachment
	223,  // 913: google.fhir.r4.qicore.QICorePractitioner.qualification:type_name -> google.fhir.r4.qicore.QICorePractitioner.Qualification
	265,  // 914: google.fhir.r4.qicore.QICorePractitioner.communication:type_name -> google.fhir.r4.core.CodeableConcept
	257,  // 915: google.fhir.r4.qicore.QICorePractitionerRole.id:type_name -> google.fhir.r4.core.Id
	258,  // 916: google.fhir.r4.qicore.QICorePractitionerRole.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 917: google.fhir.r4.qicore.QICorePractitionerRole.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 918: google.fhir.r4.qicore.QICorePractitionerRole.language:type_name -> google.fhir.r4.core.Code
	261,  // 919: google.fhir.r4.qicore.QICorePractitionerRole.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 920: google.fhir.r4.qicore.QICorePractitionerRole.contained:type_name -> google.protobuf.Any
	263,  // 921: google.fhir.r4.qicore.QICorePractitionerRole.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 922: google.fhir.r4.qicore.QICorePractitionerRole.modifier_extension:type_name -> google.fhir.r4.core.Extension
	266,  // 923: google.fhir.r4.qicore.QICorePractitionerRole.healthcare_service:type_name -> google.fhir.r4.core.Reference
	275,  // 924: google.fhir.r4.qicore.QICorePractitionerRole.telecom:type_name -> google.fhir.r4.core.ContactPoint
	224,  // 925: google.fhir.r4.qicore.QICorePractitionerRole.available_time:type_name -> google.fhir.r4.qicore.QICorePractitionerRole.AvailableTime
	225,  // 926: google.fhir.r4.qicore.QICorePractitionerRole.not_available:type_name -> google.fhir.r4.qicore.QICorePractitionerRole.NotAvailable
	271,  // 927: google.fhir.r4.qicore.QICorePractitionerRole.availability_exceptions:type_name -> google.fhir.r4.core.String
	266,  // 928: google.fhir.r4.qicore.QICorePractitionerRole.endpoint:type_name -> google.fhir.r4.core.Reference
	257,  // 929: google.fhir.r4.qicore.QICoreProcedure.id:type_name -> google.fhir.r4.core.Id
	258,  // 930: google.fhir.r4.qicore.QICoreProcedure.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 931: google.fhir.r4.qicore.QICoreProcedure.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 932: google.fhir.r4.qicore.QICoreProcedure.language:type_name -> google.fhir.r4.core.Code
	261,  // 933: google.fhir.r4.qicore.QICoreProcedure.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 934: google.fhir.r4.qicore.QICoreProcedure.contained:type_name -> google.protobuf.Any
	263,  // 935: google.fhir.r4.qicore.QICoreProcedure.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 936: google.fhir.r4.qicore.QICoreProcedure.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 937: google.fhir.r4.qicore.QICoreProcedure.identifier:type_name -> google.fhir.r4.core.Identifier
	273,  // 938: google.fhir.r4.qicore.QICoreProcedure.instantiates_canonical:type_name -> google.fhir.r4.core.Canonical
	259,  // 939: google.fhir.r4.qicore.QICoreProcedure.instantiates_uri:type_name -> google.fhir.r4.core.Uri
	266,  // 940: google.fhir.r4.qicore.QICoreProcedure.based_on:type_name -> google.fhir.r4.core.Reference
	266,  // 941: google.fhir.r4.qicore.QICoreProcedure.part_of:type_name -> google.fhir.r4.core.Reference
	227,  // 942: google.fhir.r4.qicore.QICoreProcedure.status:type_name -> google.fhir.r4.qicore.QICoreProcedure.StatusCode
	265,  // 943: google.fhir.r4.qicore.QICoreProcedure.status_reason:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 944: google.fhir.r4.qicore.QICoreProcedure.category:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 945: google.fhir.r4.qicore.QICoreProcedure.code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 946: google.fhir.r4.qicore.QICoreProcedure.subject:type_name -> google.fhir.r4.core.Reference
	266,  // 947: google.fhir.r4.qicore.QICoreProcedure.encounter:type_name -> google.fhir.r4.core.Reference
	228,  // 948: google.fhir.r4.qicore.QICoreProcedure.performed:type_name -> google.fhir.r4.qicore.QICoreProcedure.PerformedX
	266,  // 949: google.fhir.r4.qicore.QICoreProcedure.recorder:type_name -> google.fhir.r4.core.Reference
	266,  // 950: google.fhir.r4.qicore.QICoreProcedure.asserter:type_name -> google.fhir.r4.core.Reference
	229,  // 951: google.fhir.r4.qicore.QICoreProcedure.performer:type_name -> google.fhir.r4.qicore.QICoreProcedure.Performer
	266,  // 952: google.fhir.r4.qicore.QICoreProcedure.location:type_name -> google.fhir.r4.core.Reference
	265,  // 953: google.fhir.r4.qicore.QICoreProcedure.reason_code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 954: google.fhir.r4.qicore.QICoreProcedure.reason_reference:type_name -> google.fhir.r4.core.Reference
	265,  // 955: google.fhir.r4.qicore.QICoreProcedure.body_site:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 956: google.fhir.r4.qicore.QICoreProcedure.outcome:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 957: google.fhir.r4.qicore.QICoreProcedure.report:type_name -> google.fhir.r4.core.Reference
	265,  // 958: google.fhir.r4.qicore.QICoreProcedure.complication:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 959: google.fhir.r4.qicore.QICoreProcedure.complication_detail:type_name -> google.fhir.r4.core.Reference
	265,  // 960: google.fhir.r4.qicore.QICoreProcedure.follow_up:type_name -> google.fhir.r4.core.CodeableConcept
	268,  // 961: google.fhir.r4.qicore.QICoreProcedure.note:type_name -> google.fhir.r4.core.Annotation
	230,  // 962: google.fhir.r4.qicore.QICoreProcedure.focal_device:type_name -> google.fhir.r4.qicore.QICoreProcedure.FocalDevice
	266,  // 963: google.fhir.r4.qicore.QICoreProcedure.used_reference:type_name -> google.fhir.r4.core.Reference
	265,  // 964: google.fhir.r4.qicore.QICoreProcedure.used_code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 965: google.fhir.r4.qicore.QICoreProcedure.approach_body_structure:type_name -> google.fhir.r4.core.Reference
	267,  // 966: google.fhir.r4.qicore.QICoreProcedure.incision_date_time:type_name -> google.fhir.r4.core.DateTime
	257,  // 967: google.fhir.r4.qicore.QICoreRelatedPerson.id:type_name -> google.fhir.r4.core.Id
	258,  // 968: google.fhir.r4.qicore.QICoreRelatedPerson.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 969: google.fhir.r4.qicore.QICoreRelatedPerson.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 970: google.fhir.r4.qicore.QICoreRelatedPerson.language:type_name -> google.fhir.r4.core.Code
	261,  // 971: google.fhir.r4.qicore.QICoreRelatedPerson.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 972: google.fhir.r4.qicore.QICoreRelatedPerson.contained:type_name -> google.protobuf.Any
	263,  // 973: google.fhir.r4.qicore.QICoreRelatedPerson.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 974: google.fhir.r4.qicore.QICoreRelatedPerson.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 975: google.fhir.r4.qicore.QICoreRelatedPerson.identifier:type_name -> google.fhir.r4.core.Identifier
	270,  // 976: google.fhir.r4.qicore.QICoreRelatedPerson.active:type_name -> google.fhir.r4.core.Boolean
	266,  // 977: google.fhir.r4.qicore.QICoreRelatedPerson.patient:type_name -> google.fhir.r4.core.Reference
	265,  // 978: google.fhir.r4.qicore.QICoreRelatedPerson.relationship:type_name -> google.fhir.r4.core.CodeableConcept
	289,  // 979: google.fhir.r4.qicore.QICoreRelatedPerson.name:type_name -> google.fhir.r4.core.HumanName
	275,  // 980: google.fhir.r4.qicore.QICoreRelatedPerson.telecom:type_name -> google.fhir.r4.core.ContactPoint
	231,  // 981: google.fhir.r4.qicore.QICoreRelatedPerson.gender:type_name -> google.fhir.r4.qicore.QICoreRelatedPerson.GenderCode
	283,  // 982: google.fhir.r4.qicore.QICoreRelatedPerson.birth_date:type_name -> google.fhir.r4.core.Date
	286,  // 983: google.fhir.r4.qicore.QICoreRelatedPerson.address:type_name -> google.fhir.r4.core.Address
	272,  // 984: google.fhir.r4.qicore.QICoreRelatedPerson.photo:type_name -> google.fhir.r4.core.Attachment
	274,  // 985: google.fhir.r4.qicore.QICoreRelatedPerson.period:type_name -> google.fhir.r4.core.Period
	232,  // 986: google.fhir.r4.qicore.QICoreRelatedPerson.communication:type_name -> google.fhir.r4.qicore.QICoreRelatedPerson.Communication
	257,  // 987: google.fhir.r4.qicore.ServiceRequestQICoreServiceRequestAppropriatenessScore.id:type_name -> google.fhir.r4.core.Id
	233,  // 988: google.fhir.r4.qicore.ServiceRequestQICoreServiceRequestAppropriatenessScore.value:type_name -> google.fhir.r4.qicore.ServiceRequestQICoreServiceRequestAppropriatenessScore.ValueX
	257,  // 989: google.fhir.r4.qicore.QICoreServiceRequest.id:type_name -> google.fhir.r4.core.Id
	258,  // 990: google.fhir.r4.qicore.QICoreServiceRequest.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 991: google.fhir.r4.qicore.QICoreServiceRequest.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 992: google.fhir.r4.qicore.QICoreServiceRequest.language:type_name -> google.fhir.r4.core.Code
	261,  // 993: google.fhir.r4.qicore.QICoreServiceRequest.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 994: google.fhir.r4.qicore.QICoreServiceRequest.contained:type_name -> google.protobuf.Any
	263,  // 995: google.fhir.r4.qicore.QICoreServiceRequest.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 996: google.fhir.r4.qicore.QICoreServiceRequest.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 997: google.fhir.r4.qicore.QICoreServiceRequest.identifier:type_name -> google.fhir.r4.core.Identifier
	273,  // 998: google.fhir.r4.qicore.QICoreServiceRequest.instantiates_canonical:type_name -> google.fhir.r4.core.Canonical
	259,  // 999: google.fhir.r4.qicore.QICoreServiceRequest.instantiates_uri:type_name -> google.fhir.r4.core.Uri
	266,  // 1000: google.fhir.r4.qicore.QICoreServiceRequest.based_on:type_name -> google.fhir.r4.core.Reference
	266,  // 1001: google.fhir.r4.qicore.QICoreServiceRequest.replaces:type_name -> google.fhir.r4.core.Reference
	264,  // 1002: google.fhir.r4.qicore.QICoreServiceRequest.requisition:type_name -> google.fhir.r4.core.Identifier
	234,  // 1003: google.fhir.r4.qicore.QICoreServiceRequest.status:type_name -> google.fhir.r4.qicore.QICoreServiceRequest.StatusCode
	235,  // 1004: google.fhir.r4.qicore.QICoreServiceRequest.intent:type_name -> google.fhir.r4.qicore.QICoreServiceRequest.IntentCode
	265,  // 1005: google.fhir.r4.qicore.QICoreServiceRequest.category:type_name -> google.fhir.r4.core.CodeableConcept
	236,  // 1006: google.fhir.r4.qicore.QICoreServiceRequest.priority:type_name -> google.fhir.r4.qicore.QICoreServiceRequest.PriorityCode
	270,  // 1007: google.fhir.r4.qicore.QICoreServiceRequest.do_not_perform:type_name -> google.fhir.r4.core.Boolean
	265,  // 1008: google.fhir.r4.qicore.QICoreServiceRequest.code:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1009: google.fhir.r4.qicore.QICoreServiceRequest.order_detail:type_name -> google.fhir.r4.core.CodeableConcept
	237,  // 1010: google.fhir.r4.qicore.QICoreServiceRequest.quantity:type_name -> google.fhir.r4.qicore.QICoreServiceRequest.QuantityX
	266,  // 1011: google.fhir.r4.qicore.QICoreServiceRequest.subject:type_name -> google.fhir.r4.core.Reference
	266,  // 1012: google.fhir.r4.qicore.QICoreServiceRequest.encounter:type_name -> google.fhir.r4.core.Reference
	238,  // 1013: google.fhir.r4.qicore.QICoreServiceRequest.occurrence:type_name -> google.fhir.r4.qicore.QICoreServiceRequest.OccurrenceX
	239,  // 1014: google.fhir.r4.qicore.QICoreServiceRequest.as_needed:type_name -> google.fhir.r4.qicore.QICoreServiceRequest.AsNeededX
	267,  // 1015: google.fhir.r4.qicore.QICoreServiceRequest.authored_on:type_name -> google.fhir.r4.core.DateTime
	266,  // 1016: google.fhir.r4.qicore.QICoreServiceRequest.requester:type_name -> google.fhir.r4.core.Reference
	265,  // 1017: google.fhir.r4.qicore.QICoreServiceRequest.performer_type:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1018: google.fhir.r4.qicore.QICoreServiceRequest.performer:type_name -> google.fhir.r4.core.Reference
	265,  // 1019: google.fhir.r4.qicore.QICoreServiceRequest.location_code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1020: google.fhir.r4.qicore.QICoreServiceRequest.location_reference:type_name -> google.fhir.r4.core.Reference
	265,  // 1021: google.fhir.r4.qicore.QICoreServiceRequest.reason_code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1022: google.fhir.r4.qicore.QICoreServiceRequest.reason_reference:type_name -> google.fhir.r4.core.Reference
	266,  // 1023: google.fhir.r4.qicore.QICoreServiceRequest.insurance:type_name -> google.fhir.r4.core.Reference
	266,  // 1024: google.fhir.r4.qicore.QICoreServiceRequest.supporting_info:type_name -> google.fhir.r4.core.Reference
	266,  // 1025: google.fhir.r4.qicore.QICoreServiceRequest.specimen:type_name -> google.fhir.r4.core.Reference
	265,  // 1026: google.fhir.r4.qicore.QICoreServiceRequest.body_site:type_name -> google.fhir.r4.core.CodeableConcept
	268,  // 1027: google.fhir.r4.qicore.QICoreServiceRequest.note:type_name -> google.fhir.r4.core.Annotation
	271,  // 1028: google.fhir.r4.qicore.QICoreServiceRequest.patient_instruction:type_name -> google.fhir.r4.core.String
	266,  // 1029: google.fhir.r4.qicore.QICoreServiceRequest.relevant_history:type_name -> google.fhir.r4.core.Reference
	265,  // 1030: google.fhir.r4.qicore.QICoreServiceRequest.status_reason:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1031: google.fhir.r4.qicore.QICoreServiceRequest.approach_body_structure:type_name -> google.fhir.r4.core.Reference
	233,  // 1032: google.fhir.r4.qicore.QICoreServiceRequest.appropriateness_score:type_name -> google.fhir.r4.qicore.ServiceRequestQICoreServiceRequestAppropriatenessScore.ValueX
	257,  // 1033: google.fhir.r4.qicore.QICoreSpecimen.id:type_name -> google.fhir.r4.core.Id
	258,  // 1034: google.fhir.r4.qicore.QICoreSpecimen.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 1035: google.fhir.r4.qicore.QICoreSpecimen.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 1036: google.fhir.r4.qicore.QICoreSpecimen.language:type_name -> google.fhir.r4.core.Code
	261,  // 1037: google.fhir.r4.qicore.QICoreSpecimen.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 1038: google.fhir.r4.qicore.QICoreSpecimen.contained:type_name -> google.protobuf.Any
	263,  // 1039: google.fhir.r4.qicore.QICoreSpecimen.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1040: google.fhir.r4.qicore.QICoreSpecimen.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 1041: google.fhir.r4.qicore.QICoreSpecimen.identifier:type_name -> google.fhir.r4.core.Identifier
	264,  // 1042: google.fhir.r4.qicore.QICoreSpecimen.accession_identifier:type_name -> google.fhir.r4.core.Identifier
	240,  // 1043: google.fhir.r4.qicore.QICoreSpecimen.status:type_name -> google.fhir.r4.qicore.QICoreSpecimen.StatusCode
	265,  // 1044: google.fhir.r4.qicore.QICoreSpecimen.type:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1045: google.fhir.r4.qicore.QICoreSpecimen.subject:type_name -> google.fhir.r4.core.Reference
	267,  // 1046: google.fhir.r4.qicore.QICoreSpecimen.received_time:type_name -> google.fhir.r4.core.DateTime
	266,  // 1047: google.fhir.r4.qicore.QICoreSpecimen.parent:type_name -> google.fhir.r4.core.Reference
	266,  // 1048: google.fhir.r4.qicore.QICoreSpecimen.request:type_name -> google.fhir.r4.core.Reference
	241,  // 1049: google.fhir.r4.qicore.QICoreSpecimen.collection:type_name -> google.fhir.r4.qicore.QICoreSpecimen.Collection
	242,  // 1050: google.fhir.r4.qicore.QICoreSpecimen.processing:type_name -> google.fhir.r4.qicore.QICoreSpecimen.Processing
	243,  // 1051: google.fhir.r4.qicore.QICoreSpecimen.container:type_name -> google.fhir.r4.qicore.QICoreSpecimen.Container
	265,  // 1052: google.fhir.r4.qicore.QICoreSpecimen.condition:type_name -> google.fhir.r4.core.CodeableConcept
	268,  // 1053: google.fhir.r4.qicore.QICoreSpecimen.note:type_name -> google.fhir.r4.core.Annotation
	257,  // 1054: google.fhir.r4.qicore.QICoreSubstance.id:type_name -> google.fhir.r4.core.Id
	258,  // 1055: google.fhir.r4.qicore.QICoreSubstance.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 1056: google.fhir.r4.qicore.QICoreSubstance.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 1057: google.fhir.r4.qicore.QICoreSubstance.language:type_name -> google.fhir.r4.core.Code
	261,  // 1058: google.fhir.r4.qicore.QICoreSubstance.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 1059: google.fhir.r4.qicore.QICoreSubstance.contained:type_name -> google.protobuf.Any
	263,  // 1060: google.fhir.r4.qicore.QICoreSubstance.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1061: google.fhir.r4.qicore.QICoreSubstance.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 1062: google.fhir.r4.qicore.QICoreSubstance.identifier:type_name -> google.fhir.r4.core.Identifier
	248,  // 1063: google.fhir.r4.qicore.QICoreSubstance.status:type_name -> google.fhir.r4.qicore.QICoreSubstance.StatusCode
	265,  // 1064: google.fhir.r4.qicore.QICoreSubstance.category:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1065: google.fhir.r4.qicore.QICoreSubstance.code:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 1066: google.fhir.r4.qicore.QICoreSubstance.description:type_name -> google.fhir.r4.core.String
	249,  // 1067: google.fhir.r4.qicore.QICoreSubstance.instance:type_name -> google.fhir.r4.qicore.QICoreSubstance.Instance
	250,  // 1068: google.fhir.r4.qicore.QICoreSubstance.ingredient:type_name -> google.fhir.r4.qicore.QICoreSubstance.Ingredient
	257,  // 1069: google.fhir.r4.qicore.QICoreTask.id:type_name -> google.fhir.r4.core.Id
	258,  // 1070: google.fhir.r4.qicore.QICoreTask.meta:type_name -> google.fhir.r4.core.Meta
	259,  // 1071: google.fhir.r4.qicore.QICoreTask.implicit_rules:type_name -> google.fhir.r4.core.Uri
	260,  // 1072: google.fhir.r4.qicore.QICoreTask.language:type_name -> google.fhir.r4.core.Code
	261,  // 1073: google.fhir.r4.qicore.QICoreTask.text:type_name -> google.fhir.r4.core.Narrative
	262,  // 1074: google.fhir.r4.qicore.QICoreTask.contained:type_name -> google.protobuf.Any
	263,  // 1075: google.fhir.r4.qicore.QICoreTask.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1076: google.fhir.r4.qicore.QICoreTask.modifier_extension:type_name -> google.fhir.r4.core.Extension
	273,  // 1077: google.fhir.r4.qicore.QICoreTask.instantiates_canonical:type_name -> google.fhir.r4.core.Canonical
	259,  // 1078: google.fhir.r4.qicore.QICoreTask.instantiates_uri:type_name -> google.fhir.r4.core.Uri
	266,  // 1079: google.fhir.r4.qicore.QICoreTask.based_on:type_name -> google.fhir.r4.core.Reference
	264,  // 1080: google.fhir.r4.qicore.QICoreTask.group_identifier:type_name -> google.fhir.r4.core.Identifier
	266,  // 1081: google.fhir.r4.qicore.QICoreTask.part_of:type_name -> google.fhir.r4.core.Reference
	265,  // 1082: google.fhir.r4.qicore.QICoreTask.status_reason:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1083: google.fhir.r4.qicore.QICoreTask.business_status:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 1084: google.fhir.r4.qicore.QICoreTask.description:type_name -> google.fhir.r4.core.String
	266,  // 1085: google.fhir.r4.qicore.QICoreTask.focus:type_name -> google.fhir.r4.core.Reference
	266,  // 1086: google.fhir.r4.qicore.QICoreTask.for_value:type_name -> google.fhir.r4.core.Reference
	266,  // 1087: google.fhir.r4.qicore.QICoreTask.encounter:type_name -> google.fhir.r4.core.Reference
	267,  // 1088: google.fhir.r4.qicore.QICoreTask.authored_on:type_name -> google.fhir.r4.core.DateTime
	267,  // 1089: google.fhir.r4.qicore.QICoreTask.last_modified:type_name -> google.fhir.r4.core.DateTime
	266,  // 1090: google.fhir.r4.qicore.QICoreTask.requester:type_name -> google.fhir.r4.core.Reference
	265,  // 1091: google.fhir.r4.qicore.QICoreTask.performer_type:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1092: google.fhir.r4.qicore.QICoreTask.owner:type_name -> google.fhir.r4.core.Reference
	266,  // 1093: google.fhir.r4.qicore.QICoreTask.location:type_name -> google.fhir.r4.core.Reference
	265,  // 1094: google.fhir.r4.qicore.QICoreTask.reason_code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1095: google.fhir.r4.qicore.QICoreTask.reason_reference:type_name -> google.fhir.r4.core.Reference
	266,  // 1096: google.fhir.r4.qicore.QICoreTask.insurance:type_name -> google.fhir.r4.core.Reference
	268,  // 1097: google.fhir.r4.qicore.QICoreTask.note:type_name -> google.fhir.r4.core.Annotation
	266,  // 1098: google.fhir.r4.qicore.QICoreTask.relevant_history:type_name -> google.fhir.r4.core.Reference
	252,  // 1099: google.fhir.r4.qicore.QICoreTask.restriction:type_name -> google.fhir.r4.qicore.QICoreTask.Restriction
	253,  // 1100: google.fhir.r4.qicore.QICoreTask.input:type_name -> google.fhir.r4.qicore.QICoreTask.Parameter
	254,  // 1101: google.fhir.r4.qicore.QICoreTask.output:type_name -> google.fhir.r4.qicore.QICoreTask.Output
	294,  // 1102: google.fhir.r4.qicore.QICoreAdverseEvent.ActualityCode.value:type_name -> google.fhir.r4.core.AdverseEventActualityCode.Value
	271,  // 1103: google.fhir.r4.qicore.QICoreAdverseEvent.ActualityCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1104: google.fhir.r4.qicore.QICoreAdverseEvent.ActualityCode.extension:type_name -> google.fhir.r4.core.Extension
	271,  // 1105: google.fhir.r4.qicore.QICoreAdverseEvent.SuspectEntity.id:type_name -> google.fhir.r4.core.String
	263,  // 1106: google.fhir.r4.qicore.QICoreAdverseEvent.SuspectEntity.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1107: google.fhir.r4.qicore.QICoreAdverseEvent.SuspectEntity.modifier_extension:type_name -> google.fhir.r4.core.Extension
	266,  // 1108: google.fhir.r4.qicore.QICoreAdverseEvent.SuspectEntity.instance:type_name -> google.fhir.r4.core.Reference
	47,   // 1109: google.fhir.r4.qicore.QICoreAdverseEvent.SuspectEntity.causality:type_name -> google.fhir.r4.qicore.QICoreAdverseEvent.SuspectEntity.Causality
	271,  // 1110: google.fhir.r4.qicore.QICoreAdverseEvent.SuspectEntity.Causality.id:type_name -> google.fhir.r4.core.String
	263,  // 1111: google.fhir.r4.qicore.QICoreAdverseEvent.SuspectEntity.Causality.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1112: google.fhir.r4.qicore.QICoreAdverseEvent.SuspectEntity.Causality.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1113: google.fhir.r4.qicore.QICoreAdverseEvent.SuspectEntity.Causality.assessment:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 1114: google.fhir.r4.qicore.QICoreAdverseEvent.SuspectEntity.Causality.product_relatedness:type_name -> google.fhir.r4.core.String
	266,  // 1115: google.fhir.r4.qicore.QICoreAdverseEvent.SuspectEntity.Causality.author:type_name -> google.fhir.r4.core.Reference
	265,  // 1116: google.fhir.r4.qicore.QICoreAdverseEvent.SuspectEntity.Causality.method:type_name -> google.fhir.r4.core.CodeableConcept
	295,  // 1117: google.fhir.r4.qicore.QICoreAllergyIntolerance.TypeCode.value:type_name -> google.fhir.r4.core.AllergyIntoleranceTypeCode.Value
	271,  // 1118: google.fhir.r4.qicore.QICoreAllergyIntolerance.TypeCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1119: google.fhir.r4.qicore.QICoreAllergyIntolerance.TypeCode.extension:type_name -> google.fhir.r4.core.Extension
	296,  // 1120: google.fhir.r4.qicore.QICoreAllergyIntolerance.CategoryCode.value:type_name -> google.fhir.r4.core.AllergyIntoleranceCategoryCode.Value
	271,  // 1121: google.fhir.r4.qicore.QICoreAllergyIntolerance.CategoryCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1122: google.fhir.r4.qicore.QICoreAllergyIntolerance.CategoryCode.extension:type_name -> google.fhir.r4.core.Extension
	297,  // 1123: google.fhir.r4.qicore.QICoreAllergyIntolerance.CriticalityCode.value:type_name -> google.fhir.r4.core.AllergyIntoleranceCriticalityCode.Value
	271,  // 1124: google.fhir.r4.qicore.QICoreAllergyIntolerance.CriticalityCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1125: google.fhir.r4.qicore.QICoreAllergyIntolerance.CriticalityCode.extension:type_name -> google.fhir.r4.core.Extension
	267,  // 1126: google.fhir.r4.qicore.QICoreAllergyIntolerance.OnsetX.date_time:type_name -> google.fhir.r4.core.DateTime
	269,  // 1127: google.fhir.r4.qicore.QICoreAllergyIntolerance.OnsetX.age:type_name -> google.fhir.r4.core.Age
	274,  // 1128: google.fhir.r4.qicore.QICoreAllergyIntolerance.OnsetX.period:type_name -> google.fhir.r4.core.Period
	298,  // 1129: google.fhir.r4.qicore.QICoreAllergyIntolerance.OnsetX.range:type_name -> google.fhir.r4.core.Range
	271,  // 1130: google.fhir.r4.qicore.QICoreAllergyIntolerance.Reaction.id:type_name -> google.fhir.r4.core.String
	263,  // 1131: google.fhir.r4.qicore.QICoreAllergyIntolerance.Reaction.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1132: google.fhir.r4.qicore.QICoreAllergyIntolerance.Reaction.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1133: google.fhir.r4.qicore.QICoreAllergyIntolerance.Reaction.substance:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1134: google.fhir.r4.qicore.QICoreAllergyIntolerance.Reaction.manifestation:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 1135: google.fhir.r4.qicore.QICoreAllergyIntolerance.Reaction.description:type_name -> google.fhir.r4.core.String
	267,  // 1136: google.fhir.r4.qicore.QICoreAllergyIntolerance.Reaction.onset:type_name -> google.fhir.r4.core.DateTime
	53,   // 1137: google.fhir.r4.qicore.QICoreAllergyIntolerance.Reaction.severity:type_name -> google.fhir.r4.qicore.QICoreAllergyIntolerance.Reaction.SeverityCode
	265,  // 1138: google.fhir.r4.qicore.QICoreAllergyIntolerance.Reaction.exposure_route:type_name -> google.fhir.r4.core.CodeableConcept
	268,  // 1139: google.fhir.r4.qicore.QICoreAllergyIntolerance.Reaction.note:type_name -> google.fhir.r4.core.Annotation
	282,  // 1140: google.fhir.r4.qicore.QICoreAllergyIntolerance.Reaction.reaction_duration:type_name -> google.fhir.r4.core.Duration
	299,  // 1141: google.fhir.r4.qicore.QICoreAllergyIntolerance.Reaction.SeverityCode.value:type_name -> google.fhir.r4.core.AllergyIntoleranceSeverityCode.Value
	271,  // 1142: google.fhir.r4.qicore.QICoreAllergyIntolerance.Reaction.SeverityCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1143: google.fhir.r4.qicore.QICoreAllergyIntolerance.Reaction.SeverityCode.extension:type_name -> google.fhir.r4.core.Extension
	300,  // 1144: google.fhir.r4.qicore.QICoreCarePlan.StatusCode.value:type_name -> google.fhir.r4.core.RequestStatusCode.Value
	271,  // 1145: google.fhir.r4.qicore.QICoreCarePlan.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1146: google.fhir.r4.qicore.QICoreCarePlan.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	301,  // 1147: google.fhir.r4.qicore.QICoreCarePlan.IntentCode.value:type_name -> google.fhir.r4.core.CarePlanIntentValueSet.Value
	271,  // 1148: google.fhir.r4.qicore.QICoreCarePlan.IntentCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1149: google.fhir.r4.qicore.QICoreCarePlan.IntentCode.extension:type_name -> google.fhir.r4.core.Extension
	271,  // 1150: google.fhir.r4.qicore.QICoreCarePlan.Activity.id:type_name -> google.fhir.r4.core.String
	263,  // 1151: google.fhir.r4.qicore.QICoreCarePlan.Activity.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1152: google.fhir.r4.qicore.QICoreCarePlan.Activity.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1153: google.fhir.r4.qicore.QICoreCarePlan.Activity.outcome_codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1154: google.fhir.r4.qicore.QICoreCarePlan.Activity.outcome_reference:type_name -> google.fhir.r4.core.Reference
	268,  // 1155: google.fhir.r4.qicore.QICoreCarePlan.Activity.progress:type_name -> google.fhir.r4.core.Annotation
	266,  // 1156: google.fhir.r4.qicore.QICoreCarePlan.Activity.reference:type_name -> google.fhir.r4.core.Reference
	57,   // 1157: google.fhir.r4.qicore.QICoreCarePlan.Activity.detail:type_name -> google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail
	271,  // 1158: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.id:type_name -> google.fhir.r4.core.String
	263,  // 1159: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1160: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.modifier_extension:type_name -> google.fhir.r4.core.Extension
	58,   // 1161: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.kind:type_name -> google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.KindCode
	273,  // 1162: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.instantiates_canonical:type_name -> google.fhir.r4.core.Canonical
	259,  // 1163: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.instantiates_uri:type_name -> google.fhir.r4.core.Uri
	265,  // 1164: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.code:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1165: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.reason_code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1166: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.reason_reference:type_name -> google.fhir.r4.core.Reference
	266,  // 1167: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.goal:type_name -> google.fhir.r4.core.Reference
	59,   // 1168: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.status:type_name -> google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.StatusCode
	265,  // 1169: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.status_reason:type_name -> google.fhir.r4.core.CodeableConcept
	270,  // 1170: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.do_not_perform:type_name -> google.fhir.r4.core.Boolean
	60,   // 1171: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.scheduled:type_name -> google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.ScheduledX
	266,  // 1172: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.location:type_name -> google.fhir.r4.core.Reference
	266,  // 1173: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.performer:type_name -> google.fhir.r4.core.Reference
	61,   // 1174: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.product:type_name -> google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.ProductX
	285,  // 1175: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.daily_amount:type_name -> google.fhir.r4.core.SimpleQuantity
	285,  // 1176: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	271,  // 1177: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.description:type_name -> google.fhir.r4.core.String
	302,  // 1178: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.KindCode.value:type_name -> google.fhir.r4.core.CarePlanActivityKindValueSet.Value
	271,  // 1179: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.KindCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1180: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.KindCode.extension:type_name -> google.fhir.r4.core.Extension
	303,  // 1181: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.StatusCode.value:type_name -> google.fhir.r4.core.CarePlanActivityStatusCode.Value
	271,  // 1182: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1183: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	304,  // 1184: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.ScheduledX.timing:type_name -> google.fhir.r4.core.Timing
	274,  // 1185: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.ScheduledX.period:type_name -> google.fhir.r4.core.Period
	271,  // 1186: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.ScheduledX.string_value:type_name -> google.fhir.r4.core.String
	265,  // 1187: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.ProductX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1188: google.fhir.r4.qicore.QICoreCarePlan.Activity.Detail.ProductX.reference:type_name -> google.fhir.r4.core.Reference
	305,  // 1189: google.fhir.r4.qicore.QICoreCareTeam.StatusCode.value:type_name -> google.fhir.r4.core.CareTeamStatusCode.Value
	271,  // 1190: google.fhir.r4.qicore.QICoreCareTeam.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1191: google.fhir.r4.qicore.QICoreCareTeam.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	271,  // 1192: google.fhir.r4.qicore.QICoreCareTeam.Participant.id:type_name -> google.fhir.r4.core.String
	263,  // 1193: google.fhir.r4.qicore.QICoreCareTeam.Participant.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1194: google.fhir.r4.qicore.QICoreCareTeam.Participant.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1195: google.fhir.r4.qicore.QICoreCareTeam.Participant.role:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1196: google.fhir.r4.qicore.QICoreCareTeam.Participant.member:type_name -> google.fhir.r4.core.Reference
	266,  // 1197: google.fhir.r4.qicore.QICoreCareTeam.Participant.on_behalf_of:type_name -> google.fhir.r4.core.Reference
	274,  // 1198: google.fhir.r4.qicore.QICoreCareTeam.Participant.period:type_name -> google.fhir.r4.core.Period
	306,  // 1199: google.fhir.r4.qicore.QICoreClaim.StatusCode.value:type_name -> google.fhir.r4.core.FinancialResourceStatusCode.Value
	271,  // 1200: google.fhir.r4.qicore.QICoreClaim.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1201: google.fhir.r4.qicore.QICoreClaim.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	307,  // 1202: google.fhir.r4.qicore.QICoreClaim.UseCode.value:type_name -> google.fhir.r4.core.UseCode.Value
	271,  // 1203: google.fhir.r4.qicore.QICoreClaim.UseCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1204: google.fhir.r4.qicore.QICoreClaim.UseCode.extension:type_name -> google.fhir.r4.core.Extension
	271,  // 1205: google.fhir.r4.qicore.QICoreClaim.RelatedClaim.id:type_name -> google.fhir.r4.core.String
	263,  // 1206: google.fhir.r4.qicore.QICoreClaim.RelatedClaim.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1207: google.fhir.r4.qicore.QICoreClaim.RelatedClaim.modifier_extension:type_name -> google.fhir.r4.core.Extension
	266,  // 1208: google.fhir.r4.qicore.QICoreClaim.RelatedClaim.claim:type_name -> google.fhir.r4.core.Reference
	265,  // 1209: google.fhir.r4.qicore.QICoreClaim.RelatedClaim.relationship:type_name -> google.fhir.r4.core.CodeableConcept
	264,  // 1210: google.fhir.r4.qicore.QICoreClaim.RelatedClaim.reference:type_name -> google.fhir.r4.core.Identifier
	271,  // 1211: google.fhir.r4.qicore.QICoreClaim.Payee.id:type_name -> google.fhir.r4.core.String
	263,  // 1212: google.fhir.r4.qicore.QICoreClaim.Payee.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1213: google.fhir.r4.qicore.QICoreClaim.Payee.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1214: google.fhir.r4.qicore.QICoreClaim.Payee.type:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1215: google.fhir.r4.qicore.QICoreClaim.Payee.party:type_name -> google.fhir.r4.core.Reference
	271,  // 1216: google.fhir.r4.qicore.QICoreClaim.CareTeam.id:type_name -> google.fhir.r4.core.String
	263,  // 1217: google.fhir.r4.qicore.QICoreClaim.CareTeam.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1218: google.fhir.r4.qicore.QICoreClaim.CareTeam.modifier_extension:type_name -> google.fhir.r4.core.Extension
	279,  // 1219: google.fhir.r4.qicore.QICoreClaim.CareTeam.sequence:type_name -> google.fhir.r4.core.PositiveInt
	266,  // 1220: google.fhir.r4.qicore.QICoreClaim.CareTeam.provider:type_name -> google.fhir.r4.core.Reference
	270,  // 1221: google.fhir.r4.qicore.QICoreClaim.CareTeam.responsible:type_name -> google.fhir.r4.core.Boolean
	265,  // 1222: google.fhir.r4.qicore.QICoreClaim.CareTeam.role:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1223: google.fhir.r4.qicore.QICoreClaim.CareTeam.qualification:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 1224: google.fhir.r4.qicore.QICoreClaim.SupportingInformation.id:type_name -> google.fhir.r4.core.String
	263,  // 1225: google.fhir.r4.qicore.QICoreClaim.SupportingInformation.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1226: google.fhir.r4.qicore.QICoreClaim.SupportingInformation.modifier_extension:type_name -> google.fhir.r4.core.Extension
	279,  // 1227: google.fhir.r4.qicore.QICoreClaim.SupportingInformation.sequence:type_name -> google.fhir.r4.core.PositiveInt
	265,  // 1228: google.fhir.r4.qicore.QICoreClaim.SupportingInformation.category:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1229: google.fhir.r4.qicore.QICoreClaim.SupportingInformation.code:type_name -> google.fhir.r4.core.CodeableConcept
	75,   // 1230: google.fhir.r4.qicore.QICoreClaim.SupportingInformation.timing:type_name -> google.fhir.r4.qicore.QICoreClaim.SupportingInformation.TimingX
	76,   // 1231: google.fhir.r4.qicore.QICoreClaim.SupportingInformation.value:type_name -> google.fhir.r4.qicore.QICoreClaim.SupportingInformation.ValueX
	265,  // 1232: google.fhir.r4.qicore.QICoreClaim.SupportingInformation.reason:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 1233: google.fhir.r4.qicore.QICoreClaim.Diagnosis.id:type_name -> google.fhir.r4.core.String
	263,  // 1234: google.fhir.r4.qicore.QICoreClaim.Diagnosis.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1235: google.fhir.r4.qicore.QICoreClaim.Diagnosis.modifier_extension:type_name -> google.fhir.r4.core.Extension
	279,  // 1236: google.fhir.r4.qicore.QICoreClaim.Diagnosis.sequence:type_name -> google.fhir.r4.core.PositiveInt
	77,   // 1237: google.fhir.r4.qicore.QICoreClaim.Diagnosis.diagnosis:type_name -> google.fhir.r4.qicore.QICoreClaim.Diagnosis.DiagnosisX
	265,  // 1238: google.fhir.r4.qicore.QICoreClaim.Diagnosis.type:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1239: google.fhir.r4.qicore.QICoreClaim.Diagnosis.on_admission:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1240: google.fhir.r4.qicore.QICoreClaim.Diagnosis.package_code:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 1241: google.fhir.r4.qicore.QICoreClaim.Procedure.id:type_name -> google.fhir.r4.core.String
	263,  // 1242: google.fhir.r4.qicore.QICoreClaim.Procedure.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1243: google.fhir.r4.qicore.QICoreClaim.Procedure.modifier_extension:type_name -> google.fhir.r4.core.Extension
	279,  // 1244: google.fhir.r4.qicore.QICoreClaim.Procedure.sequence:type_name -> google.fhir.r4.core.PositiveInt
	265,  // 1245: google.fhir.r4.qicore.QICoreClaim.Procedure.type:type_name -> google.fhir.r4.core.CodeableConcept
	267,  // 1246: google.fhir.r4.qicore.QICoreClaim.Procedure.date:type_name -> google.fhir.r4.core.DateTime
	78,   // 1247: google.fhir.r4.qicore.QICoreClaim.Procedure.procedure:type_name -> google.fhir.r4.qicore.QICoreClaim.Procedure.ProcedureX
	266,  // 1248: google.fhir.r4.qicore.QICoreClaim.Procedure.udi:type_name -> google.fhir.r4.core.Reference
	271,  // 1249: google.fhir.r4.qicore.QICoreClaim.Insurance.id:type_name -> google.fhir.r4.core.String
	263,  // 1250: google.fhir.r4.qicore.QICoreClaim.Insurance.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1251: google.fhir.r4.qicore.QICoreClaim.Insurance.modifier_extension:type_name -> google.fhir.r4.core.Extension
	279,  // 1252: google.fhir.r4.qicore.QICoreClaim.Insurance.sequence:type_name -> google.fhir.r4.core.PositiveInt
	270,  // 1253: google.fhir.r4.qicore.QICoreClaim.Insurance.focal:type_name -> google.fhir.r4.core.Boolean
	264,  // 1254: google.fhir.r4.qicore.QICoreClaim.Insurance.identifier:type_name -> google.fhir.r4.core.Identifier
	266,  // 1255: google.fhir.r4.qicore.QICoreClaim.Insurance.coverage:type_name -> google.fhir.r4.core.Reference
	271,  // 1256: google.fhir.r4.qicore.QICoreClaim.Insurance.business_arrangement:type_name -> google.fhir.r4.core.String
	271,  // 1257: google.fhir.r4.qicore.QICoreClaim.Insurance.pre_auth_ref:type_name -> google.fhir.r4.core.String
	266,  // 1258: google.fhir.r4.qicore.QICoreClaim.Insurance.claim_response:type_name -> google.fhir.r4.core.Reference
	271,  // 1259: google.fhir.r4.qicore.QICoreClaim.Accident.id:type_name -> google.fhir.r4.core.String
	263,  // 1260: google.fhir.r4.qicore.QICoreClaim.Accident.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1261: google.fhir.r4.qicore.QICoreClaim.Accident.modifier_extension:type_name -> google.fhir.r4.core.Extension
	283,  // 1262: google.fhir.r4.qicore.QICoreClaim.Accident.date:type_name -> google.fhir.r4.core.Date
	265,  // 1263: google.fhir.r4.qicore.QICoreClaim.Accident.type:type_name -> google.fhir.r4.core.CodeableConcept
	79,   // 1264: google.fhir.r4.qicore.QICoreClaim.Accident.location:type_name -> google.fhir.r4.qicore.QICoreClaim.Accident.LocationX
	271,  // 1265: google.fhir.r4.qicore.QICoreClaim.Item.id:type_name -> google.fhir.r4.core.String
	263,  // 1266: google.fhir.r4.qicore.QICoreClaim.Item.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1267: google.fhir.r4.qicore.QICoreClaim.Item.modifier_extension:type_name -> google.fhir.r4.core.Extension
	279,  // 1268: google.fhir.r4.qicore.QICoreClaim.Item.sequence:type_name -> google.fhir.r4.core.PositiveInt
	279,  // 1269: google.fhir.r4.qicore.QICoreClaim.Item.care_team_sequence:type_name -> google.fhir.r4.core.PositiveInt
	279,  // 1270: google.fhir.r4.qicore.QICoreClaim.Item.diagnosis_sequence:type_name -> google.fhir.r4.core.PositiveInt
	279,  // 1271: google.fhir.r4.qicore.QICoreClaim.Item.procedure_sequence:type_name -> google.fhir.r4.core.PositiveInt
	279,  // 1272: google.fhir.r4.qicore.QICoreClaim.Item.information_sequence:type_name -> google.fhir.r4.core.PositiveInt
	265,  // 1273: google.fhir.r4.qicore.QICoreClaim.Item.revenue:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1274: google.fhir.r4.qicore.QICoreClaim.Item.category:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1275: google.fhir.r4.qicore.QICoreClaim.Item.product_or_service:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1276: google.fhir.r4.qicore.QICoreClaim.Item.modifier:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1277: google.fhir.r4.qicore.QICoreClaim.Item.program_code:type_name -> google.fhir.r4.core.CodeableConcept
	80,   // 1278: google.fhir.r4.qicore.QICoreClaim.Item.serviced:type_name -> google.fhir.r4.qicore.QICoreClaim.Item.ServicedX
	81,   // 1279: google.fhir.r4.qicore.QICoreClaim.Item.location:type_name -> google.fhir.r4.qicore.QICoreClaim.Item.LocationX
	285,  // 1280: google.fhir.r4.qicore.QICoreClaim.Item.quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	276,  // 1281: google.fhir.r4.qicore.QICoreClaim.Item.unit_price:type_name -> google.fhir.r4.core.Money
	308,  // 1282: google.fhir.r4.qicore.QICoreClaim.Item.factor:type_name -> google.fhir.r4.core.Decimal
	276,  // 1283: google.fhir.r4.qicore.QICoreClaim.Item.net:type_name -> google.fhir.r4.core.Money
	266,  // 1284: google.fhir.r4.qicore.QICoreClaim.Item.udi:type_name -> google.fhir.r4.core.Reference
	265,  // 1285: google.fhir.r4.qicore.QICoreClaim.Item.body_site:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1286: google.fhir.r4.qicore.QICoreClaim.Item.sub_site:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1287: google.fhir.r4.qicore.QICoreClaim.Item.encounter:type_name -> google.fhir.r4.core.Reference
	82,   // 1288: google.fhir.r4.qicore.QICoreClaim.Item.detail:type_name -> google.fhir.r4.qicore.QICoreClaim.Item.Detail
	283,  // 1289: google.fhir.r4.qicore.QICoreClaim.SupportingInformation.TimingX.date:type_name -> google.fhir.r4.core.Date
	274,  // 1290: google.fhir.r4.qicore.QICoreClaim.SupportingInformation.TimingX.period:type_name -> google.fhir.r4.core.Period
	270,  // 1291: google.fhir.r4.qicore.QICoreClaim.SupportingInformation.ValueX.boolean:type_name -> google.fhir.r4.core.Boolean
	271,  // 1292: google.fhir.r4.qicore.QICoreClaim.SupportingInformation.ValueX.string_value:type_name -> google.fhir.r4.core.String
	309,  // 1293: google.fhir.r4.qicore.QICoreClaim.SupportingInformation.ValueX.quantity:type_name -> google.fhir.r4.core.Quantity
	272,  // 1294: google.fhir.r4.qicore.QICoreClaim.SupportingInformation.ValueX.attachment:type_name -> google.fhir.r4.core.Attachment
	266,  // 1295: google.fhir.r4.qicore.QICoreClaim.SupportingInformation.ValueX.reference:type_name -> google.fhir.r4.core.Reference
	265,  // 1296: google.fhir.r4.qicore.QICoreClaim.Diagnosis.DiagnosisX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1297: google.fhir.r4.qicore.QICoreClaim.Diagnosis.DiagnosisX.reference:type_name -> google.fhir.r4.core.Reference
	265,  // 1298: google.fhir.r4.qicore.QICoreClaim.Procedure.ProcedureX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1299: google.fhir.r4.qicore.QICoreClaim.Procedure.ProcedureX.reference:type_name -> google.fhir.r4.core.Reference
	286,  // 1300: google.fhir.r4.qicore.QICoreClaim.Accident.LocationX.address:type_name -> google.fhir.r4.core.Address
	266,  // 1301: google.fhir.r4.qicore.QICoreClaim.Accident.LocationX.reference:type_name -> google.fhir.r4.core.Reference
	283,  // 1302: google.fhir.r4.qicore.QICoreClaim.Item.ServicedX.date:type_name -> google.fhir.r4.core.Date
	274,  // 1303: google.fhir.r4.qicore.QICoreClaim.Item.ServicedX.period:type_name -> google.fhir.r4.core.Period
	265,  // 1304: google.fhir.r4.qicore.QICoreClaim.Item.LocationX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	286,  // 1305: google.fhir.r4.qicore.QICoreClaim.Item.LocationX.address:type_name -> google.fhir.r4.core.Address
	266,  // 1306: google.fhir.r4.qicore.QICoreClaim.Item.LocationX.reference:type_name -> google.fhir.r4.core.Reference
	271,  // 1307: google.fhir.r4.qicore.QICoreClaim.Item.Detail.id:type_name -> google.fhir.r4.core.String
	263,  // 1308: google.fhir.r4.qicore.QICoreClaim.Item.Detail.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1309: google.fhir.r4.qicore.QICoreClaim.Item.Detail.modifier_extension:type_name -> google.fhir.r4.core.Extension
	279,  // 1310: google.fhir.r4.qicore.QICoreClaim.Item.Detail.sequence:type_name -> google.fhir.r4.core.PositiveInt
	265,  // 1311: google.fhir.r4.qicore.QICoreClaim.Item.Detail.revenue:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1312: google.fhir.r4.qicore.QICoreClaim.Item.Detail.category:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1313: google.fhir.r4.qicore.QICoreClaim.Item.Detail.product_or_service:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1314: google.fhir.r4.qicore.QICoreClaim.Item.Detail.modifier:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1315: google.fhir.r4.qicore.QICoreClaim.Item.Detail.program_code:type_name -> google.fhir.r4.core.CodeableConcept
	285,  // 1316: google.fhir.r4.qicore.QICoreClaim.Item.Detail.quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	276,  // 1317: google.fhir.r4.qicore.QICoreClaim.Item.Detail.unit_price:type_name -> google.fhir.r4.core.Money
	308,  // 1318: google.fhir.r4.qicore.QICoreClaim.Item.Detail.factor:type_name -> google.fhir.r4.core.Decimal
	276,  // 1319: google.fhir.r4.qicore.QICoreClaim.Item.Detail.net:type_name -> google.fhir.r4.core.Money
	266,  // 1320: google.fhir.r4.qicore.QICoreClaim.Item.Detail.udi:type_name -> google.fhir.r4.core.Reference
	83,   // 1321: google.fhir.r4.qicore.QICoreClaim.Item.Detail.sub_detail:type_name -> google.fhir.r4.qicore.QICoreClaim.Item.Detail.SubDetail
	271,  // 1322: google.fhir.r4.qicore.QICoreClaim.Item.Detail.SubDetail.id:type_name -> google.fhir.r4.core.String
	263,  // 1323: google.fhir.r4.qicore.QICoreClaim.Item.Detail.SubDetail.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1324: google.fhir.r4.qicore.QICoreClaim.Item.Detail.SubDetail.modifier_extension:type_name -> google.fhir.r4.core.Extension
	279,  // 1325: google.fhir.r4.qicore.QICoreClaim.Item.Detail.SubDetail.sequence:type_name -> google.fhir.r4.core.PositiveInt
	265,  // 1326: google.fhir.r4.qicore.QICoreClaim.Item.Detail.SubDetail.revenue:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1327: google.fhir.r4.qicore.QICoreClaim.Item.Detail.SubDetail.category:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1328: google.fhir.r4.qicore.QICoreClaim.Item.Detail.SubDetail.product_or_service:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1329: google.fhir.r4.qicore.QICoreClaim.Item.Detail.SubDetail.modifier:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1330: google.fhir.r4.qicore.QICoreClaim.Item.Detail.SubDetail.program_code:type_name -> google.fhir.r4.core.CodeableConcept
	285,  // 1331: google.fhir.r4.qicore.QICoreClaim.Item.Detail.SubDetail.quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	276,  // 1332: google.fhir.r4.qicore.QICoreClaim.Item.Detail.SubDetail.unit_price:type_name -> google.fhir.r4.core.Money
	308,  // 1333: google.fhir.r4.qicore.QICoreClaim.Item.Detail.SubDetail.factor:type_name -> google.fhir.r4.core.Decimal
	276,  // 1334: google.fhir.r4.qicore.QICoreClaim.Item.Detail.SubDetail.net:type_name -> google.fhir.r4.core.Money
	266,  // 1335: google.fhir.r4.qicore.QICoreClaim.Item.Detail.SubDetail.udi:type_name -> google.fhir.r4.core.Reference
	310,  // 1336: google.fhir.r4.qicore.QICoreCommunication.StatusCode.value:type_name -> google.fhir.r4.core.EventStatusCode.Value
	271,  // 1337: google.fhir.r4.qicore.QICoreCommunication.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1338: google.fhir.r4.qicore.QICoreCommunication.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	311,  // 1339: google.fhir.r4.qicore.QICoreCommunication.PriorityCode.value:type_name -> google.fhir.r4.core.RequestPriorityCode.Value
	271,  // 1340: google.fhir.r4.qicore.QICoreCommunication.PriorityCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1341: google.fhir.r4.qicore.QICoreCommunication.PriorityCode.extension:type_name -> google.fhir.r4.core.Extension
	271,  // 1342: google.fhir.r4.qicore.QICoreCommunication.Payload.id:type_name -> google.fhir.r4.core.String
	263,  // 1343: google.fhir.r4.qicore.QICoreCommunication.Payload.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1344: google.fhir.r4.qicore.QICoreCommunication.Payload.modifier_extension:type_name -> google.fhir.r4.core.Extension
	87,   // 1345: google.fhir.r4.qicore.QICoreCommunication.Payload.content:type_name -> google.fhir.r4.qicore.QICoreCommunication.Payload.ContentX
	271,  // 1346: google.fhir.r4.qicore.QICoreCommunication.Payload.ContentX.string_value:type_name -> google.fhir.r4.core.String
	272,  // 1347: google.fhir.r4.qicore.QICoreCommunication.Payload.ContentX.attachment:type_name -> google.fhir.r4.core.Attachment
	266,  // 1348: google.fhir.r4.qicore.QICoreCommunication.Payload.ContentX.reference:type_name -> google.fhir.r4.core.Reference
	300,  // 1349: google.fhir.r4.qicore.QICoreCommunicationRequest.StatusCode.value:type_name -> google.fhir.r4.core.RequestStatusCode.Value
	271,  // 1350: google.fhir.r4.qicore.QICoreCommunicationRequest.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1351: google.fhir.r4.qicore.QICoreCommunicationRequest.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	311,  // 1352: google.fhir.r4.qicore.QICoreCommunicationRequest.PriorityCode.value:type_name -> google.fhir.r4.core.RequestPriorityCode.Value
	271,  // 1353: google.fhir.r4.qicore.QICoreCommunicationRequest.PriorityCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1354: google.fhir.r4.qicore.QICoreCommunicationRequest.PriorityCode.extension:type_name -> google.fhir.r4.core.Extension
	271,  // 1355: google.fhir.r4.qicore.QICoreCommunicationRequest.Payload.id:type_name -> google.fhir.r4.core.String
	263,  // 1356: google.fhir.r4.qicore.QICoreCommunicationRequest.Payload.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1357: google.fhir.r4.qicore.QICoreCommunicationRequest.Payload.modifier_extension:type_name -> google.fhir.r4.core.Extension
	92,   // 1358: google.fhir.r4.qicore.QICoreCommunicationRequest.Payload.content:type_name -> google.fhir.r4.qicore.QICoreCommunicationRequest.Payload.ContentX
	267,  // 1359: google.fhir.r4.qicore.QICoreCommunicationRequest.OccurrenceX.date_time:type_name -> google.fhir.r4.core.DateTime
	274,  // 1360: google.fhir.r4.qicore.QICoreCommunicationRequest.OccurrenceX.period:type_name -> google.fhir.r4.core.Period
	271,  // 1361: google.fhir.r4.qicore.QICoreCommunicationRequest.Payload.ContentX.string_value:type_name -> google.fhir.r4.core.String
	272,  // 1362: google.fhir.r4.qicore.QICoreCommunicationRequest.Payload.ContentX.attachment:type_name -> google.fhir.r4.core.Attachment
	266,  // 1363: google.fhir.r4.qicore.QICoreCommunicationRequest.Payload.ContentX.reference:type_name -> google.fhir.r4.core.Reference
	267,  // 1364: google.fhir.r4.qicore.QICoreCondition.OnsetX.date_time:type_name -> google.fhir.r4.core.DateTime
	269,  // 1365: google.fhir.r4.qicore.QICoreCondition.OnsetX.age:type_name -> google.fhir.r4.core.Age
	274,  // 1366: google.fhir.r4.qicore.QICoreCondition.OnsetX.period:type_name -> google.fhir.r4.core.Period
	298,  // 1367: google.fhir.r4.qicore.QICoreCondition.OnsetX.range:type_name -> google.fhir.r4.core.Range
	267,  // 1368: google.fhir.r4.qicore.QICoreCondition.AbatementX.date_time:type_name -> google.fhir.r4.core.DateTime
	269,  // 1369: google.fhir.r4.qicore.QICoreCondition.AbatementX.age:type_name -> google.fhir.r4.core.Age
	274,  // 1370: google.fhir.r4.qicore.QICoreCondition.AbatementX.period:type_name -> google.fhir.r4.core.Period
	298,  // 1371: google.fhir.r4.qicore.QICoreCondition.AbatementX.range:type_name -> google.fhir.r4.core.Range
	271,  // 1372: google.fhir.r4.qicore.QICoreCondition.Stage.id:type_name -> google.fhir.r4.core.String
	263,  // 1373: google.fhir.r4.qicore.QICoreCondition.Stage.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1374: google.fhir.r4.qicore.QICoreCondition.Stage.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1375: google.fhir.r4.qicore.QICoreCondition.Stage.summary:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1376: google.fhir.r4.qicore.QICoreCondition.Stage.assessment:type_name -> google.fhir.r4.core.Reference
	265,  // 1377: google.fhir.r4.qicore.QICoreCondition.Stage.type:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 1378: google.fhir.r4.qicore.QICoreCondition.Evidence.id:type_name -> google.fhir.r4.core.String
	263,  // 1379: google.fhir.r4.qicore.QICoreCondition.Evidence.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1380: google.fhir.r4.qicore.QICoreCondition.Evidence.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1381: google.fhir.r4.qicore.QICoreCondition.Evidence.code:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1382: google.fhir.r4.qicore.QICoreCondition.Evidence.detail:type_name -> google.fhir.r4.core.Reference
	306,  // 1383: google.fhir.r4.qicore.QICoreCoverage.StatusCode.value:type_name -> google.fhir.r4.core.FinancialResourceStatusCode.Value
	271,  // 1384: google.fhir.r4.qicore.QICoreCoverage.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1385: google.fhir.r4.qicore.QICoreCoverage.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	271,  // 1386: google.fhir.r4.qicore.QICoreCoverage.Class.id:type_name -> google.fhir.r4.core.String
	263,  // 1387: google.fhir.r4.qicore.QICoreCoverage.Class.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1388: google.fhir.r4.qicore.QICoreCoverage.Class.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1389: google.fhir.r4.qicore.QICoreCoverage.Class.type:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 1390: google.fhir.r4.qicore.QICoreCoverage.Class.value:type_name -> google.fhir.r4.core.String
	271,  // 1391: google.fhir.r4.qicore.QICoreCoverage.Class.name:type_name -> google.fhir.r4.core.String
	271,  // 1392: google.fhir.r4.qicore.QICoreCoverage.CostToBeneficiary.id:type_name -> google.fhir.r4.core.String
	263,  // 1393: google.fhir.r4.qicore.QICoreCoverage.CostToBeneficiary.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1394: google.fhir.r4.qicore.QICoreCoverage.CostToBeneficiary.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1395: google.fhir.r4.qicore.QICoreCoverage.CostToBeneficiary.type:type_name -> google.fhir.r4.core.CodeableConcept
	100,  // 1396: google.fhir.r4.qicore.QICoreCoverage.CostToBeneficiary.value:type_name -> google.fhir.r4.qicore.QICoreCoverage.CostToBeneficiary.ValueX
	101,  // 1397: google.fhir.r4.qicore.QICoreCoverage.CostToBeneficiary.exception:type_name -> google.fhir.r4.qicore.QICoreCoverage.CostToBeneficiary.Exemption
	285,  // 1398: google.fhir.r4.qicore.QICoreCoverage.CostToBeneficiary.ValueX.quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	276,  // 1399: google.fhir.r4.qicore.QICoreCoverage.CostToBeneficiary.ValueX.money:type_name -> google.fhir.r4.core.Money
	271,  // 1400: google.fhir.r4.qicore.QICoreCoverage.CostToBeneficiary.Exemption.id:type_name -> google.fhir.r4.core.String
	263,  // 1401: google.fhir.r4.qicore.QICoreCoverage.CostToBeneficiary.Exemption.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1402: google.fhir.r4.qicore.QICoreCoverage.CostToBeneficiary.Exemption.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1403: google.fhir.r4.qicore.QICoreCoverage.CostToBeneficiary.Exemption.type:type_name -> google.fhir.r4.core.CodeableConcept
	274,  // 1404: google.fhir.r4.qicore.QICoreCoverage.CostToBeneficiary.Exemption.period:type_name -> google.fhir.r4.core.Period
	271,  // 1405: google.fhir.r4.qicore.QICoreDevice.UdiCarrier.id:type_name -> google.fhir.r4.core.String
	263,  // 1406: google.fhir.r4.qicore.QICoreDevice.UdiCarrier.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1407: google.fhir.r4.qicore.QICoreDevice.UdiCarrier.modifier_extension:type_name -> google.fhir.r4.core.Extension
	271,  // 1408: google.fhir.r4.qicore.QICoreDevice.UdiCarrier.device_identifier:type_name -> google.fhir.r4.core.String
	259,  // 1409: google.fhir.r4.qicore.QICoreDevice.UdiCarrier.issuer:type_name -> google.fhir.r4.core.Uri
	259,  // 1410: google.fhir.r4.qicore.QICoreDevice.UdiCarrier.jurisdiction:type_name -> google.fhir.r4.core.Uri
	312,  // 1411: google.fhir.r4.qicore.QICoreDevice.UdiCarrier.carrier_aidc:type_name -> google.fhir.r4.core.Base64Binary
	271,  // 1412: google.fhir.r4.qicore.QICoreDevice.UdiCarrier.carrier_hrf:type_name -> google.fhir.r4.core.String
	108,  // 1413: google.fhir.r4.qicore.QICoreDevice.UdiCarrier.entry_type:type_name -> google.fhir.r4.qicore.QICoreDevice.UdiCarrier.EntryTypeCode
	313,  // 1414: google.fhir.r4.qicore.QICoreDevice.StatusCode.value:type_name -> google.fhir.r4.core.FHIRDeviceStatusCode.Value
	271,  // 1415: google.fhir.r4.qicore.QICoreDevice.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1416: google.fhir.r4.qicore.QICoreDevice.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	271,  // 1417: google.fhir.r4.qicore.QICoreDevice.DeviceName.id:type_name -> google.fhir.r4.core.String
	263,  // 1418: google.fhir.r4.qicore.QICoreDevice.DeviceName.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1419: google.fhir.r4.qicore.QICoreDevice.DeviceName.modifier_extension:type_name -> google.fhir.r4.core.Extension
	271,  // 1420: google.fhir.r4.qicore.QICoreDevice.DeviceName.name:type_name -> google.fhir.r4.core.String
	109,  // 1421: google.fhir.r4.qicore.QICoreDevice.DeviceName.type:type_name -> google.fhir.r4.qicore.QICoreDevice.DeviceName.TypeCode
	271,  // 1422: google.fhir.r4.qicore.QICoreDevice.Specialization.id:type_name -> google.fhir.r4.core.String
	263,  // 1423: google.fhir.r4.qicore.QICoreDevice.Specialization.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1424: google.fhir.r4.qicore.QICoreDevice.Specialization.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1425: google.fhir.r4.qicore.QICoreDevice.Specialization.system_type:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 1426: google.fhir.r4.qicore.QICoreDevice.Specialization.version:type_name -> google.fhir.r4.core.String
	271,  // 1427: google.fhir.r4.qicore.QICoreDevice.Version.id:type_name -> google.fhir.r4.core.String
	263,  // 1428: google.fhir.r4.qicore.QICoreDevice.Version.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1429: google.fhir.r4.qicore.QICoreDevice.Version.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1430: google.fhir.r4.qicore.QICoreDevice.Version.type:type_name -> google.fhir.r4.core.CodeableConcept
	264,  // 1431: google.fhir.r4.qicore.QICoreDevice.Version.component:type_name -> google.fhir.r4.core.Identifier
	271,  // 1432: google.fhir.r4.qicore.QICoreDevice.Version.value:type_name -> google.fhir.r4.core.String
	271,  // 1433: google.fhir.r4.qicore.QICoreDevice.Property.id:type_name -> google.fhir.r4.core.String
	263,  // 1434: google.fhir.r4.qicore.QICoreDevice.Property.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1435: google.fhir.r4.qicore.QICoreDevice.Property.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1436: google.fhir.r4.qicore.QICoreDevice.Property.type:type_name -> google.fhir.r4.core.CodeableConcept
	309,  // 1437: google.fhir.r4.qicore.QICoreDevice.Property.value_quantity:type_name -> google.fhir.r4.core.Quantity
	265,  // 1438: google.fhir.r4.qicore.QICoreDevice.Property.value_code:type_name -> google.fhir.r4.core.CodeableConcept
	314,  // 1439: google.fhir.r4.qicore.QICoreDevice.UdiCarrier.EntryTypeCode.value:type_name -> google.fhir.r4.core.UDIEntryTypeCode.Value
	271,  // 1440: google.fhir.r4.qicore.QICoreDevice.UdiCarrier.EntryTypeCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1441: google.fhir.r4.qicore.QICoreDevice.UdiCarrier.EntryTypeCode.extension:type_name -> google.fhir.r4.core.Extension
	315,  // 1442: google.fhir.r4.qicore.QICoreDevice.DeviceName.TypeCode.value:type_name -> google.fhir.r4.core.DeviceNameTypeCode.Value
	271,  // 1443: google.fhir.r4.qicore.QICoreDevice.DeviceName.TypeCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1444: google.fhir.r4.qicore.QICoreDevice.DeviceName.TypeCode.extension:type_name -> google.fhir.r4.core.Extension
	300,  // 1445: google.fhir.r4.qicore.QICoreDeviceRequest.StatusCode.value:type_name -> google.fhir.r4.core.RequestStatusCode.Value
	271,  // 1446: google.fhir.r4.qicore.QICoreDeviceRequest.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1447: google.fhir.r4.qicore.QICoreDeviceRequest.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	316,  // 1448: google.fhir.r4.qicore.QICoreDeviceRequest.IntentCode.value:type_name -> google.fhir.r4.core.RequestIntentCode.Value
	271,  // 1449: google.fhir.r4.qicore.QICoreDeviceRequest.IntentCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1450: google.fhir.r4.qicore.QICoreDeviceRequest.IntentCode.extension:type_name -> google.fhir.r4.core.Extension
	311,  // 1451: google.fhir.r4.qicore.QICoreDeviceRequest.PriorityCode.value:type_name -> google.fhir.r4.core.RequestPriorityCode.Value
	271,  // 1452: google.fhir.r4.qicore.QICoreDeviceRequest.PriorityCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1453: google.fhir.r4.qicore.QICoreDeviceRequest.PriorityCode.extension:type_name -> google.fhir.r4.core.Extension
	266,  // 1454: google.fhir.r4.qicore.QICoreDeviceRequest.CodeX.reference:type_name -> google.fhir.r4.core.Reference
	265,  // 1455: google.fhir.r4.qicore.QICoreDeviceRequest.CodeX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 1456: google.fhir.r4.qicore.QICoreDeviceRequest.Parameter.id:type_name -> google.fhir.r4.core.String
	263,  // 1457: google.fhir.r4.qicore.QICoreDeviceRequest.Parameter.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1458: google.fhir.r4.qicore.QICoreDeviceRequest.Parameter.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1459: google.fhir.r4.qicore.QICoreDeviceRequest.Parameter.code:type_name -> google.fhir.r4.core.CodeableConcept
	116,  // 1460: google.fhir.r4.qicore.QICoreDeviceRequest.Parameter.value:type_name -> google.fhir.r4.qicore.QICoreDeviceRequest.Parameter.ValueX
	267,  // 1461: google.fhir.r4.qicore.QICoreDeviceRequest.OccurrenceX.date_time:type_name -> google.fhir.r4.core.DateTime
	274,  // 1462: google.fhir.r4.qicore.QICoreDeviceRequest.OccurrenceX.period:type_name -> google.fhir.r4.core.Period
	304,  // 1463: google.fhir.r4.qicore.QICoreDeviceRequest.OccurrenceX.timing:type_name -> google.fhir.r4.core.Timing
	265,  // 1464: google.fhir.r4.qicore.QICoreDeviceRequest.Parameter.ValueX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	309,  // 1465: google.fhir.r4.qicore.QICoreDeviceRequest.Parameter.ValueX.quantity:type_name -> google.fhir.r4.core.Quantity
	298,  // 1466: google.fhir.r4.qicore.QICoreDeviceRequest.Parameter.ValueX.range:type_name -> google.fhir.r4.core.Range
	270,  // 1467: google.fhir.r4.qicore.QICoreDeviceRequest.Parameter.ValueX.boolean:type_name -> google.fhir.r4.core.Boolean
	270,  // 1468: google.fhir.r4.qicore.DeviceUseStatementQICoreNotDoneExtension.ValueX.boolean:type_name -> google.fhir.r4.core.Boolean
	317,  // 1469: google.fhir.r4.qicore.QICoreDeviceUseStatement.StatusCode.value:type_name -> google.fhir.r4.core.DeviceUseStatementStatusCode.Value
	271,  // 1470: google.fhir.r4.qicore.QICoreDeviceUseStatement.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1471: google.fhir.r4.qicore.QICoreDeviceUseStatement.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	304,  // 1472: google.fhir.r4.qicore.QICoreDeviceUseStatement.TimingX.timing:type_name -> google.fhir.r4.core.Timing
	274,  // 1473: google.fhir.r4.qicore.QICoreDeviceUseStatement.TimingX.period:type_name -> google.fhir.r4.core.Period
	267,  // 1474: google.fhir.r4.qicore.QICoreDeviceUseStatement.TimingX.date_time:type_name -> google.fhir.r4.core.DateTime
	318,  // 1475: google.fhir.r4.qicore.QICoreDiagnosticReportLab.StatusCode.value:type_name -> google.fhir.r4.core.DiagnosticReportStatusCode.Value
	271,  // 1476: google.fhir.r4.qicore.QICoreDiagnosticReportLab.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1477: google.fhir.r4.qicore.QICoreDiagnosticReportLab.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	267,  // 1478: google.fhir.r4.qicore.QICoreDiagnosticReportLab.EffectiveX.date_time:type_name -> google.fhir.r4.core.DateTime
	274,  // 1479: google.fhir.r4.qicore.QICoreDiagnosticReportLab.EffectiveX.period:type_name -> google.fhir.r4.core.Period
	271,  // 1480: google.fhir.r4.qicore.QICoreDiagnosticReportLab.Media.id:type_name -> google.fhir.r4.core.String
	263,  // 1481: google.fhir.r4.qicore.QICoreDiagnosticReportLab.Media.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1482: google.fhir.r4.qicore.QICoreDiagnosticReportLab.Media.modifier_extension:type_name -> google.fhir.r4.core.Extension
	271,  // 1483: google.fhir.r4.qicore.QICoreDiagnosticReportLab.Media.comment:type_name -> google.fhir.r4.core.String
	266,  // 1484: google.fhir.r4.qicore.QICoreDiagnosticReportLab.Media.link:type_name -> google.fhir.r4.core.Reference
	318,  // 1485: google.fhir.r4.qicore.QICoreDiagnosticReportNote.StatusCode.value:type_name -> google.fhir.r4.core.DiagnosticReportStatusCode.Value
	271,  // 1486: google.fhir.r4.qicore.QICoreDiagnosticReportNote.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1487: google.fhir.r4.qicore.QICoreDiagnosticReportNote.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	267,  // 1488: google.fhir.r4.qicore.QICoreDiagnosticReportNote.EffectiveX.date_time:type_name -> google.fhir.r4.core.DateTime
	274,  // 1489: google.fhir.r4.qicore.QICoreDiagnosticReportNote.EffectiveX.period:type_name -> google.fhir.r4.core.Period
	271,  // 1490: google.fhir.r4.qicore.QICoreDiagnosticReportNote.Media.id:type_name -> google.fhir.r4.core.String
	263,  // 1491: google.fhir.r4.qicore.QICoreDiagnosticReportNote.Media.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1492: google.fhir.r4.qicore.QICoreDiagnosticReportNote.Media.modifier_extension:type_name -> google.fhir.r4.core.Extension
	271,  // 1493: google.fhir.r4.qicore.QICoreDiagnosticReportNote.Media.comment:type_name -> google.fhir.r4.core.String
	266,  // 1494: google.fhir.r4.qicore.QICoreDiagnosticReportNote.Media.link:type_name -> google.fhir.r4.core.Reference
	319,  // 1495: google.fhir.r4.qicore.QICoreEncounter.StatusCode.value:type_name -> google.fhir.r4.core.EncounterStatusCode.Value
	271,  // 1496: google.fhir.r4.qicore.QICoreEncounter.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1497: google.fhir.r4.qicore.QICoreEncounter.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	271,  // 1498: google.fhir.r4.qicore.QICoreEncounter.StatusHistory.id:type_name -> google.fhir.r4.core.String
	263,  // 1499: google.fhir.r4.qicore.QICoreEncounter.StatusHistory.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1500: google.fhir.r4.qicore.QICoreEncounter.StatusHistory.modifier_extension:type_name -> google.fhir.r4.core.Extension
	133,  // 1501: google.fhir.r4.qicore.QICoreEncounter.StatusHistory.status:type_name -> google.fhir.r4.qicore.QICoreEncounter.StatusHistory.StatusCode
	274,  // 1502: google.fhir.r4.qicore.QICoreEncounter.StatusHistory.period:type_name -> google.fhir.r4.core.Period
	271,  // 1503: google.fhir.r4.qicore.QICoreEncounter.ClassHistory.id:type_name -> google.fhir.r4.core.String
	263,  // 1504: google.fhir.r4.qicore.QICoreEncounter.ClassHistory.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1505: google.fhir.r4.qicore.QICoreEncounter.ClassHistory.modifier_extension:type_name -> google.fhir.r4.core.Extension
	281,  // 1506: google.fhir.r4.qicore.QICoreEncounter.ClassHistory.class_value:type_name -> google.fhir.r4.core.Coding
	274,  // 1507: google.fhir.r4.qicore.QICoreEncounter.ClassHistory.period:type_name -> google.fhir.r4.core.Period
	271,  // 1508: google.fhir.r4.qicore.QICoreEncounter.Participant.id:type_name -> google.fhir.r4.core.String
	263,  // 1509: google.fhir.r4.qicore.QICoreEncounter.Participant.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1510: google.fhir.r4.qicore.QICoreEncounter.Participant.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1511: google.fhir.r4.qicore.QICoreEncounter.Participant.type:type_name -> google.fhir.r4.core.CodeableConcept
	274,  // 1512: google.fhir.r4.qicore.QICoreEncounter.Participant.period:type_name -> google.fhir.r4.core.Period
	266,  // 1513: google.fhir.r4.qicore.QICoreEncounter.Participant.individual:type_name -> google.fhir.r4.core.Reference
	271,  // 1514: google.fhir.r4.qicore.QICoreEncounter.Diagnosis.id:type_name -> google.fhir.r4.core.String
	263,  // 1515: google.fhir.r4.qicore.QICoreEncounter.Diagnosis.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1516: google.fhir.r4.qicore.QICoreEncounter.Diagnosis.modifier_extension:type_name -> google.fhir.r4.core.Extension
	266,  // 1517: google.fhir.r4.qicore.QICoreEncounter.Diagnosis.condition:type_name -> google.fhir.r4.core.Reference
	265,  // 1518: google.fhir.r4.qicore.QICoreEncounter.Diagnosis.use:type_name -> google.fhir.r4.core.CodeableConcept
	279,  // 1519: google.fhir.r4.qicore.QICoreEncounter.Diagnosis.rank:type_name -> google.fhir.r4.core.PositiveInt
	271,  // 1520: google.fhir.r4.qicore.QICoreEncounter.Hospitalization.id:type_name -> google.fhir.r4.core.String
	263,  // 1521: google.fhir.r4.qicore.QICoreEncounter.Hospitalization.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1522: google.fhir.r4.qicore.QICoreEncounter.Hospitalization.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 1523: google.fhir.r4.qicore.QICoreEncounter.Hospitalization.pre_admission_identifier:type_name -> google.fhir.r4.core.Identifier
	266,  // 1524: google.fhir.r4.qicore.QICoreEncounter.Hospitalization.origin:type_name -> google.fhir.r4.core.Reference
	265,  // 1525: google.fhir.r4.qicore.QICoreEncounter.Hospitalization.admit_source:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1526: google.fhir.r4.qicore.QICoreEncounter.Hospitalization.re_admission:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1527: google.fhir.r4.qicore.QICoreEncounter.Hospitalization.diet_preference:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1528: google.fhir.r4.qicore.QICoreEncounter.Hospitalization.special_courtesy:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1529: google.fhir.r4.qicore.QICoreEncounter.Hospitalization.special_arrangement:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1530: google.fhir.r4.qicore.QICoreEncounter.Hospitalization.destination:type_name -> google.fhir.r4.core.Reference
	265,  // 1531: google.fhir.r4.qicore.QICoreEncounter.Hospitalization.discharge_disposition:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 1532: google.fhir.r4.qicore.QICoreEncounter.Location.id:type_name -> google.fhir.r4.core.String
	263,  // 1533: google.fhir.r4.qicore.QICoreEncounter.Location.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1534: google.fhir.r4.qicore.QICoreEncounter.Location.modifier_extension:type_name -> google.fhir.r4.core.Extension
	266,  // 1535: google.fhir.r4.qicore.QICoreEncounter.Location.location:type_name -> google.fhir.r4.core.Reference
	134,  // 1536: google.fhir.r4.qicore.QICoreEncounter.Location.status:type_name -> google.fhir.r4.qicore.QICoreEncounter.Location.StatusCode
	265,  // 1537: google.fhir.r4.qicore.QICoreEncounter.Location.physical_type:type_name -> google.fhir.r4.core.CodeableConcept
	274,  // 1538: google.fhir.r4.qicore.QICoreEncounter.Location.period:type_name -> google.fhir.r4.core.Period
	319,  // 1539: google.fhir.r4.qicore.QICoreEncounter.StatusHistory.StatusCode.value:type_name -> google.fhir.r4.core.EncounterStatusCode.Value
	271,  // 1540: google.fhir.r4.qicore.QICoreEncounter.StatusHistory.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1541: google.fhir.r4.qicore.QICoreEncounter.StatusHistory.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	320,  // 1542: google.fhir.r4.qicore.QICoreEncounter.Location.StatusCode.value:type_name -> google.fhir.r4.core.EncounterLocationStatusCode.Value
	271,  // 1543: google.fhir.r4.qicore.QICoreEncounter.Location.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1544: google.fhir.r4.qicore.QICoreEncounter.Location.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	321,  // 1545: google.fhir.r4.qicore.QICoreFamilyMemberHistory.StatusCode.value:type_name -> google.fhir.r4.core.FamilyHistoryStatusCode.Value
	271,  // 1546: google.fhir.r4.qicore.QICoreFamilyMemberHistory.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1547: google.fhir.r4.qicore.QICoreFamilyMemberHistory.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	274,  // 1548: google.fhir.r4.qicore.QICoreFamilyMemberHistory.BornX.period:type_name -> google.fhir.r4.core.Period
	283,  // 1549: google.fhir.r4.qicore.QICoreFamilyMemberHistory.BornX.date:type_name -> google.fhir.r4.core.Date
	271,  // 1550: google.fhir.r4.qicore.QICoreFamilyMemberHistory.BornX.string_value:type_name -> google.fhir.r4.core.String
	269,  // 1551: google.fhir.r4.qicore.QICoreFamilyMemberHistory.AgeX.age:type_name -> google.fhir.r4.core.Age
	298,  // 1552: google.fhir.r4.qicore.QICoreFamilyMemberHistory.AgeX.range:type_name -> google.fhir.r4.core.Range
	271,  // 1553: google.fhir.r4.qicore.QICoreFamilyMemberHistory.AgeX.string_value:type_name -> google.fhir.r4.core.String
	270,  // 1554: google.fhir.r4.qicore.QICoreFamilyMemberHistory.DeceasedX.boolean:type_name -> google.fhir.r4.core.Boolean
	269,  // 1555: google.fhir.r4.qicore.QICoreFamilyMemberHistory.DeceasedX.age:type_name -> google.fhir.r4.core.Age
	298,  // 1556: google.fhir.r4.qicore.QICoreFamilyMemberHistory.DeceasedX.range:type_name -> google.fhir.r4.core.Range
	283,  // 1557: google.fhir.r4.qicore.QICoreFamilyMemberHistory.DeceasedX.date:type_name -> google.fhir.r4.core.Date
	271,  // 1558: google.fhir.r4.qicore.QICoreFamilyMemberHistory.DeceasedX.string_value:type_name -> google.fhir.r4.core.String
	271,  // 1559: google.fhir.r4.qicore.QICoreFamilyMemberHistory.Condition.id:type_name -> google.fhir.r4.core.String
	263,  // 1560: google.fhir.r4.qicore.QICoreFamilyMemberHistory.Condition.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1561: google.fhir.r4.qicore.QICoreFamilyMemberHistory.Condition.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1562: google.fhir.r4.qicore.QICoreFamilyMemberHistory.Condition.code:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1563: google.fhir.r4.qicore.QICoreFamilyMemberHistory.Condition.outcome:type_name -> google.fhir.r4.core.CodeableConcept
	270,  // 1564: google.fhir.r4.qicore.QICoreFamilyMemberHistory.Condition.contributed_to_death:type_name -> google.fhir.r4.core.Boolean
	140,  // 1565: google.fhir.r4.qicore.QICoreFamilyMemberHistory.Condition.onset:type_name -> google.fhir.r4.qicore.QICoreFamilyMemberHistory.Condition.OnsetX
	268,  // 1566: google.fhir.r4.qicore.QICoreFamilyMemberHistory.Condition.note:type_name -> google.fhir.r4.core.Annotation
	322,  // 1567: google.fhir.r4.qicore.QICoreFamilyMemberHistory.Condition.condition_abatement:type_name -> google.fhir.r4.core.FamilyMemberHistoryAbatement.ValueX
	265,  // 1568: google.fhir.r4.qicore.QICoreFamilyMemberHistory.Condition.condition_severity:type_name -> google.fhir.r4.core.CodeableConcept
	269,  // 1569: google.fhir.r4.qicore.QICoreFamilyMemberHistory.Condition.OnsetX.age:type_name -> google.fhir.r4.core.Age
	298,  // 1570: google.fhir.r4.qicore.QICoreFamilyMemberHistory.Condition.OnsetX.range:type_name -> google.fhir.r4.core.Range
	274,  // 1571: google.fhir.r4.qicore.QICoreFamilyMemberHistory.Condition.OnsetX.period:type_name -> google.fhir.r4.core.Period
	271,  // 1572: google.fhir.r4.qicore.QICoreFamilyMemberHistory.Condition.OnsetX.string_value:type_name -> google.fhir.r4.core.String
	323,  // 1573: google.fhir.r4.qicore.QICoreFlag.StatusCode.value:type_name -> google.fhir.r4.core.FlagStatusCode.Value
	271,  // 1574: google.fhir.r4.qicore.QICoreFlag.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1575: google.fhir.r4.qicore.QICoreFlag.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	324,  // 1576: google.fhir.r4.qicore.QICoreGoal.LifecycleStatusCode.value:type_name -> google.fhir.r4.core.GoalLifecycleStatusCode.Value
	271,  // 1577: google.fhir.r4.qicore.QICoreGoal.LifecycleStatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1578: google.fhir.r4.qicore.QICoreGoal.LifecycleStatusCode.extension:type_name -> google.fhir.r4.core.Extension
	283,  // 1579: google.fhir.r4.qicore.QICoreGoal.StartX.date:type_name -> google.fhir.r4.core.Date
	271,  // 1580: google.fhir.r4.qicore.QICoreGoal.Target.id:type_name -> google.fhir.r4.core.String
	263,  // 1581: google.fhir.r4.qicore.QICoreGoal.Target.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1582: google.fhir.r4.qicore.QICoreGoal.Target.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1583: google.fhir.r4.qicore.QICoreGoal.Target.measure:type_name -> google.fhir.r4.core.CodeableConcept
	145,  // 1584: google.fhir.r4.qicore.QICoreGoal.Target.detail:type_name -> google.fhir.r4.qicore.QICoreGoal.Target.DetailX
	146,  // 1585: google.fhir.r4.qicore.QICoreGoal.Target.due:type_name -> google.fhir.r4.qicore.QICoreGoal.Target.DueX
	309,  // 1586: google.fhir.r4.qicore.QICoreGoal.Target.DetailX.quantity:type_name -> google.fhir.r4.core.Quantity
	298,  // 1587: google.fhir.r4.qicore.QICoreGoal.Target.DetailX.range:type_name -> google.fhir.r4.core.Range
	265,  // 1588: google.fhir.r4.qicore.QICoreGoal.Target.DetailX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 1589: google.fhir.r4.qicore.QICoreGoal.Target.DetailX.string_value:type_name -> google.fhir.r4.core.String
	270,  // 1590: google.fhir.r4.qicore.QICoreGoal.Target.DetailX.boolean:type_name -> google.fhir.r4.core.Boolean
	325,  // 1591: google.fhir.r4.qicore.QICoreGoal.Target.DetailX.integer:type_name -> google.fhir.r4.core.Integer
	287,  // 1592: google.fhir.r4.qicore.QICoreGoal.Target.DetailX.ratio:type_name -> google.fhir.r4.core.Ratio
	283,  // 1593: google.fhir.r4.qicore.QICoreGoal.Target.DueX.date:type_name -> google.fhir.r4.core.Date
	282,  // 1594: google.fhir.r4.qicore.QICoreGoal.Target.DueX.duration:type_name -> google.fhir.r4.core.Duration
	326,  // 1595: google.fhir.r4.qicore.QICoreImagingStudy.StatusCode.value:type_name -> google.fhir.r4.core.ImagingStudyStatusCode.Value
	271,  // 1596: google.fhir.r4.qicore.QICoreImagingStudy.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1597: google.fhir.r4.qicore.QICoreImagingStudy.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	271,  // 1598: google.fhir.r4.qicore.QICoreImagingStudy.Series.id:type_name -> google.fhir.r4.core.String
	263,  // 1599: google.fhir.r4.qicore.QICoreImagingStudy.Series.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1600: google.fhir.r4.qicore.QICoreImagingStudy.Series.modifier_extension:type_name -> google.fhir.r4.core.Extension
	257,  // 1601: google.fhir.r4.qicore.QICoreImagingStudy.Series.uid:type_name -> google.fhir.r4.core.Id
	284,  // 1602: google.fhir.r4.qicore.QICoreImagingStudy.Series.number:type_name -> google.fhir.r4.core.UnsignedInt
	281,  // 1603: google.fhir.r4.qicore.QICoreImagingStudy.Series.modality:type_name -> google.fhir.r4.core.Coding
	271,  // 1604: google.fhir.r4.qicore.QICoreImagingStudy.Series.description:type_name -> google.fhir.r4.core.String
	284,  // 1605: google.fhir.r4.qicore.QICoreImagingStudy.Series.number_of_instances:type_name -> google.fhir.r4.core.UnsignedInt
	266,  // 1606: google.fhir.r4.qicore.QICoreImagingStudy.Series.endpoint:type_name -> google.fhir.r4.core.Reference
	281,  // 1607: google.fhir.r4.qicore.QICoreImagingStudy.Series.body_site:type_name -> google.fhir.r4.core.Coding
	281,  // 1608: google.fhir.r4.qicore.QICoreImagingStudy.Series.laterality:type_name -> google.fhir.r4.core.Coding
	266,  // 1609: google.fhir.r4.qicore.QICoreImagingStudy.Series.specimen:type_name -> google.fhir.r4.core.Reference
	267,  // 1610: google.fhir.r4.qicore.QICoreImagingStudy.Series.started:type_name -> google.fhir.r4.core.DateTime
	149,  // 1611: google.fhir.r4.qicore.QICoreImagingStudy.Series.performer:type_name -> google.fhir.r4.qicore.QICoreImagingStudy.Series.Performer
	150,  // 1612: google.fhir.r4.qicore.QICoreImagingStudy.Series.instance:type_name -> google.fhir.r4.qicore.QICoreImagingStudy.Series.Instance
	271,  // 1613: google.fhir.r4.qicore.QICoreImagingStudy.Series.Performer.id:type_name -> google.fhir.r4.core.String
	263,  // 1614: google.fhir.r4.qicore.QICoreImagingStudy.Series.Performer.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1615: google.fhir.r4.qicore.QICoreImagingStudy.Series.Performer.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1616: google.fhir.r4.qicore.QICoreImagingStudy.Series.Performer.function:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1617: google.fhir.r4.qicore.QICoreImagingStudy.Series.Performer.actor:type_name -> google.fhir.r4.core.Reference
	271,  // 1618: google.fhir.r4.qicore.QICoreImagingStudy.Series.Instance.id:type_name -> google.fhir.r4.core.String
	263,  // 1619: google.fhir.r4.qicore.QICoreImagingStudy.Series.Instance.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1620: google.fhir.r4.qicore.QICoreImagingStudy.Series.Instance.modifier_extension:type_name -> google.fhir.r4.core.Extension
	257,  // 1621: google.fhir.r4.qicore.QICoreImagingStudy.Series.Instance.uid:type_name -> google.fhir.r4.core.Id
	281,  // 1622: google.fhir.r4.qicore.QICoreImagingStudy.Series.Instance.sop_class:type_name -> google.fhir.r4.core.Coding
	284,  // 1623: google.fhir.r4.qicore.QICoreImagingStudy.Series.Instance.number:type_name -> google.fhir.r4.core.UnsignedInt
	271,  // 1624: google.fhir.r4.qicore.QICoreImagingStudy.Series.Instance.title:type_name -> google.fhir.r4.core.String
	327,  // 1625: google.fhir.r4.qicore.QICoreImmunization.StatusCode.value:type_name -> google.fhir.r4.core.ImmunizationStatusCodesValueSet.Value
	271,  // 1626: google.fhir.r4.qicore.QICoreImmunization.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1627: google.fhir.r4.qicore.QICoreImmunization.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	267,  // 1628: google.fhir.r4.qicore.QICoreImmunization.OccurrenceX.date_time:type_name -> google.fhir.r4.core.DateTime
	271,  // 1629: google.fhir.r4.qicore.QICoreImmunization.OccurrenceX.string_value:type_name -> google.fhir.r4.core.String
	271,  // 1630: google.fhir.r4.qicore.QICoreImmunization.Performer.id:type_name -> google.fhir.r4.core.String
	263,  // 1631: google.fhir.r4.qicore.QICoreImmunization.Performer.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1632: google.fhir.r4.qicore.QICoreImmunization.Performer.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1633: google.fhir.r4.qicore.QICoreImmunization.Performer.function:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1634: google.fhir.r4.qicore.QICoreImmunization.Performer.actor:type_name -> google.fhir.r4.core.Reference
	271,  // 1635: google.fhir.r4.qicore.QICoreImmunization.Education.id:type_name -> google.fhir.r4.core.String
	263,  // 1636: google.fhir.r4.qicore.QICoreImmunization.Education.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1637: google.fhir.r4.qicore.QICoreImmunization.Education.modifier_extension:type_name -> google.fhir.r4.core.Extension
	271,  // 1638: google.fhir.r4.qicore.QICoreImmunization.Education.document_type:type_name -> google.fhir.r4.core.String
	259,  // 1639: google.fhir.r4.qicore.QICoreImmunization.Education.reference:type_name -> google.fhir.r4.core.Uri
	267,  // 1640: google.fhir.r4.qicore.QICoreImmunization.Education.publication_date:type_name -> google.fhir.r4.core.DateTime
	267,  // 1641: google.fhir.r4.qicore.QICoreImmunization.Education.presentation_date:type_name -> google.fhir.r4.core.DateTime
	271,  // 1642: google.fhir.r4.qicore.QICoreImmunization.Reaction.id:type_name -> google.fhir.r4.core.String
	263,  // 1643: google.fhir.r4.qicore.QICoreImmunization.Reaction.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1644: google.fhir.r4.qicore.QICoreImmunization.Reaction.modifier_extension:type_name -> google.fhir.r4.core.Extension
	267,  // 1645: google.fhir.r4.qicore.QICoreImmunization.Reaction.date:type_name -> google.fhir.r4.core.DateTime
	266,  // 1646: google.fhir.r4.qicore.QICoreImmunization.Reaction.detail:type_name -> google.fhir.r4.core.Reference
	270,  // 1647: google.fhir.r4.qicore.QICoreImmunization.Reaction.reported:type_name -> google.fhir.r4.core.Boolean
	271,  // 1648: google.fhir.r4.qicore.QICoreImmunization.ProtocolApplied.id:type_name -> google.fhir.r4.core.String
	263,  // 1649: google.fhir.r4.qicore.QICoreImmunization.ProtocolApplied.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1650: google.fhir.r4.qicore.QICoreImmunization.ProtocolApplied.modifier_extension:type_name -> google.fhir.r4.core.Extension
	271,  // 1651: google.fhir.r4.qicore.QICoreImmunization.ProtocolApplied.series:type_name -> google.fhir.r4.core.String
	266,  // 1652: google.fhir.r4.qicore.QICoreImmunization.ProtocolApplied.authority:type_name -> google.fhir.r4.core.Reference
	265,  // 1653: google.fhir.r4.qicore.QICoreImmunization.ProtocolApplied.target_disease:type_name -> google.fhir.r4.core.CodeableConcept
	157,  // 1654: google.fhir.r4.qicore.QICoreImmunization.ProtocolApplied.dose_number:type_name -> google.fhir.r4.qicore.QICoreImmunization.ProtocolApplied.DoseNumberX
	158,  // 1655: google.fhir.r4.qicore.QICoreImmunization.ProtocolApplied.series_doses:type_name -> google.fhir.r4.qicore.QICoreImmunization.ProtocolApplied.SeriesDosesX
	279,  // 1656: google.fhir.r4.qicore.QICoreImmunization.ProtocolApplied.DoseNumberX.positive_int:type_name -> google.fhir.r4.core.PositiveInt
	271,  // 1657: google.fhir.r4.qicore.QICoreImmunization.ProtocolApplied.DoseNumberX.string_value:type_name -> google.fhir.r4.core.String
	279,  // 1658: google.fhir.r4.qicore.QICoreImmunization.ProtocolApplied.SeriesDosesX.positive_int:type_name -> google.fhir.r4.core.PositiveInt
	271,  // 1659: google.fhir.r4.qicore.QICoreImmunization.ProtocolApplied.SeriesDosesX.string_value:type_name -> google.fhir.r4.core.String
	328,  // 1660: google.fhir.r4.qicore.QICoreImmunizationEvaluation.StatusCode.value:type_name -> google.fhir.r4.core.ImmunizationEvaluationStatusCodesValueSet.Value
	271,  // 1661: google.fhir.r4.qicore.QICoreImmunizationEvaluation.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1662: google.fhir.r4.qicore.QICoreImmunizationEvaluation.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	279,  // 1663: google.fhir.r4.qicore.QICoreImmunizationEvaluation.DoseNumberX.positive_int:type_name -> google.fhir.r4.core.PositiveInt
	271,  // 1664: google.fhir.r4.qicore.QICoreImmunizationEvaluation.DoseNumberX.string_value:type_name -> google.fhir.r4.core.String
	279,  // 1665: google.fhir.r4.qicore.QICoreImmunizationEvaluation.SeriesDosesX.positive_int:type_name -> google.fhir.r4.core.PositiveInt
	271,  // 1666: google.fhir.r4.qicore.QICoreImmunizationEvaluation.SeriesDosesX.string_value:type_name -> google.fhir.r4.core.String
	271,  // 1667: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.id:type_name -> google.fhir.r4.core.String
	263,  // 1668: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1669: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1670: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.vaccine_code:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1671: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.target_disease:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1672: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.contraindicated_vaccine_code:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1673: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.forecast_status:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1674: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.forecast_reason:type_name -> google.fhir.r4.core.CodeableConcept
	163,  // 1675: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.date_criterion:type_name -> google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.DateCriterion
	271,  // 1676: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.description:type_name -> google.fhir.r4.core.String
	271,  // 1677: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.series:type_name -> google.fhir.r4.core.String
	164,  // 1678: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.dose_number:type_name -> google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.DoseNumberX
	165,  // 1679: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.series_doses:type_name -> google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.SeriesDosesX
	266,  // 1680: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.supporting_immunization:type_name -> google.fhir.r4.core.Reference
	266,  // 1681: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.supporting_patient_information:type_name -> google.fhir.r4.core.Reference
	271,  // 1682: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.DateCriterion.id:type_name -> google.fhir.r4.core.String
	263,  // 1683: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.DateCriterion.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1684: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.DateCriterion.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1685: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.DateCriterion.code:type_name -> google.fhir.r4.core.CodeableConcept
	267,  // 1686: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.DateCriterion.value:type_name -> google.fhir.r4.core.DateTime
	279,  // 1687: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.DoseNumberX.positive_int:type_name -> google.fhir.r4.core.PositiveInt
	271,  // 1688: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.DoseNumberX.string_value:type_name -> google.fhir.r4.core.String
	279,  // 1689: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.SeriesDosesX.positive_int:type_name -> google.fhir.r4.core.PositiveInt
	271,  // 1690: google.fhir.r4.qicore.QICoreImmunizationRecommendation.Recommendation.SeriesDosesX.string_value:type_name -> google.fhir.r4.core.String
	329,  // 1691: google.fhir.r4.qicore.QICoreLocation.StatusCode.value:type_name -> google.fhir.r4.core.LocationStatusCode.Value
	271,  // 1692: google.fhir.r4.qicore.QICoreLocation.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1693: google.fhir.r4.qicore.QICoreLocation.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	330,  // 1694: google.fhir.r4.qicore.QICoreLocation.ModeCode.value:type_name -> google.fhir.r4.core.LocationModeCode.Value
	271,  // 1695: google.fhir.r4.qicore.QICoreLocation.ModeCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1696: google.fhir.r4.qicore.QICoreLocation.ModeCode.extension:type_name -> google.fhir.r4.core.Extension
	271,  // 1697: google.fhir.r4.qicore.QICoreLocation.Position.id:type_name -> google.fhir.r4.core.String
	263,  // 1698: google.fhir.r4.qicore.QICoreLocation.Position.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1699: google.fhir.r4.qicore.QICoreLocation.Position.modifier_extension:type_name -> google.fhir.r4.core.Extension
	308,  // 1700: google.fhir.r4.qicore.QICoreLocation.Position.longitude:type_name -> google.fhir.r4.core.Decimal
	308,  // 1701: google.fhir.r4.qicore.QICoreLocation.Position.latitude:type_name -> google.fhir.r4.core.Decimal
	308,  // 1702: google.fhir.r4.qicore.QICoreLocation.Position.altitude:type_name -> google.fhir.r4.core.Decimal
	271,  // 1703: google.fhir.r4.qicore.QICoreLocation.HoursOfOperation.id:type_name -> google.fhir.r4.core.String
	263,  // 1704: google.fhir.r4.qicore.QICoreLocation.HoursOfOperation.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1705: google.fhir.r4.qicore.QICoreLocation.HoursOfOperation.modifier_extension:type_name -> google.fhir.r4.core.Extension
	170,  // 1706: google.fhir.r4.qicore.QICoreLocation.HoursOfOperation.days_of_week:type_name -> google.fhir.r4.qicore.QICoreLocation.HoursOfOperation.DaysOfWeekCode
	270,  // 1707: google.fhir.r4.qicore.QICoreLocation.HoursOfOperation.all_day:type_name -> google.fhir.r4.core.Boolean
	331,  // 1708: google.fhir.r4.qicore.QICoreLocation.HoursOfOperation.opening_time:type_name -> google.fhir.r4.core.Time
	331,  // 1709: google.fhir.r4.qicore.QICoreLocation.HoursOfOperation.closing_time:type_name -> google.fhir.r4.core.Time
	332,  // 1710: google.fhir.r4.qicore.QICoreLocation.HoursOfOperation.DaysOfWeekCode.value:type_name -> google.fhir.r4.core.DaysOfWeekCode.Value
	271,  // 1711: google.fhir.r4.qicore.QICoreLocation.HoursOfOperation.DaysOfWeekCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1712: google.fhir.r4.qicore.QICoreLocation.HoursOfOperation.DaysOfWeekCode.extension:type_name -> google.fhir.r4.core.Extension
	333,  // 1713: google.fhir.r4.qicore.QICoreMedication.StatusCode.value:type_name -> google.fhir.r4.core.MedicationStatusCode.Value
	271,  // 1714: google.fhir.r4.qicore.QICoreMedication.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1715: google.fhir.r4.qicore.QICoreMedication.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	271,  // 1716: google.fhir.r4.qicore.QICoreMedication.Ingredient.id:type_name -> google.fhir.r4.core.String
	263,  // 1717: google.fhir.r4.qicore.QICoreMedication.Ingredient.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1718: google.fhir.r4.qicore.QICoreMedication.Ingredient.modifier_extension:type_name -> google.fhir.r4.core.Extension
	174,  // 1719: google.fhir.r4.qicore.QICoreMedication.Ingredient.item:type_name -> google.fhir.r4.qicore.QICoreMedication.Ingredient.ItemX
	270,  // 1720: google.fhir.r4.qicore.QICoreMedication.Ingredient.is_active:type_name -> google.fhir.r4.core.Boolean
	287,  // 1721: google.fhir.r4.qicore.QICoreMedication.Ingredient.strength:type_name -> google.fhir.r4.core.Ratio
	271,  // 1722: google.fhir.r4.qicore.QICoreMedication.Batch.id:type_name -> google.fhir.r4.core.String
	263,  // 1723: google.fhir.r4.qicore.QICoreMedication.Batch.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1724: google.fhir.r4.qicore.QICoreMedication.Batch.modifier_extension:type_name -> google.fhir.r4.core.Extension
	271,  // 1725: google.fhir.r4.qicore.QICoreMedication.Batch.lot_number:type_name -> google.fhir.r4.core.String
	267,  // 1726: google.fhir.r4.qicore.QICoreMedication.Batch.expiration_date:type_name -> google.fhir.r4.core.DateTime
	265,  // 1727: google.fhir.r4.qicore.QICoreMedication.Ingredient.ItemX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1728: google.fhir.r4.qicore.QICoreMedication.Ingredient.ItemX.reference:type_name -> google.fhir.r4.core.Reference
	334,  // 1729: google.fhir.r4.qicore.QICoreMedicationAdministration.StatusCode.value:type_name -> google.fhir.r4.core.MedicationAdministrationStatusCode.Value
	271,  // 1730: google.fhir.r4.qicore.QICoreMedicationAdministration.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1731: google.fhir.r4.qicore.QICoreMedicationAdministration.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1732: google.fhir.r4.qicore.QICoreMedicationAdministration.MedicationX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1733: google.fhir.r4.qicore.QICoreMedicationAdministration.MedicationX.reference:type_name -> google.fhir.r4.core.Reference
	267,  // 1734: google.fhir.r4.qicore.QICoreMedicationAdministration.EffectiveX.date_time:type_name -> google.fhir.r4.core.DateTime
	274,  // 1735: google.fhir.r4.qicore.QICoreMedicationAdministration.EffectiveX.period:type_name -> google.fhir.r4.core.Period
	271,  // 1736: google.fhir.r4.qicore.QICoreMedicationAdministration.Performer.id:type_name -> google.fhir.r4.core.String
	263,  // 1737: google.fhir.r4.qicore.QICoreMedicationAdministration.Performer.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1738: google.fhir.r4.qicore.QICoreMedicationAdministration.Performer.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1739: google.fhir.r4.qicore.QICoreMedicationAdministration.Performer.function:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1740: google.fhir.r4.qicore.QICoreMedicationAdministration.Performer.actor:type_name -> google.fhir.r4.core.Reference
	271,  // 1741: google.fhir.r4.qicore.QICoreMedicationAdministration.Dosage.id:type_name -> google.fhir.r4.core.String
	263,  // 1742: google.fhir.r4.qicore.QICoreMedicationAdministration.Dosage.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1743: google.fhir.r4.qicore.QICoreMedicationAdministration.Dosage.modifier_extension:type_name -> google.fhir.r4.core.Extension
	271,  // 1744: google.fhir.r4.qicore.QICoreMedicationAdministration.Dosage.text:type_name -> google.fhir.r4.core.String
	265,  // 1745: google.fhir.r4.qicore.QICoreMedicationAdministration.Dosage.site:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1746: google.fhir.r4.qicore.QICoreMedicationAdministration.Dosage.route:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1747: google.fhir.r4.qicore.QICoreMedicationAdministration.Dosage.method:type_name -> google.fhir.r4.core.CodeableConcept
	285,  // 1748: google.fhir.r4.qicore.QICoreMedicationAdministration.Dosage.dose:type_name -> google.fhir.r4.core.SimpleQuantity
	180,  // 1749: google.fhir.r4.qicore.QICoreMedicationAdministration.Dosage.rate:type_name -> google.fhir.r4.qicore.QICoreMedicationAdministration.Dosage.RateX
	287,  // 1750: google.fhir.r4.qicore.QICoreMedicationAdministration.Dosage.RateX.ratio:type_name -> google.fhir.r4.core.Ratio
	285,  // 1751: google.fhir.r4.qicore.QICoreMedicationAdministration.Dosage.RateX.quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	335,  // 1752: google.fhir.r4.qicore.QICoreMedicationDispense.StatusCode.value:type_name -> google.fhir.r4.core.MedicationDispenseStatusCode.Value
	271,  // 1753: google.fhir.r4.qicore.QICoreMedicationDispense.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1754: google.fhir.r4.qicore.QICoreMedicationDispense.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1755: google.fhir.r4.qicore.QICoreMedicationDispense.StatusReasonX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1756: google.fhir.r4.qicore.QICoreMedicationDispense.StatusReasonX.reference:type_name -> google.fhir.r4.core.Reference
	265,  // 1757: google.fhir.r4.qicore.QICoreMedicationDispense.MedicationX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1758: google.fhir.r4.qicore.QICoreMedicationDispense.MedicationX.reference:type_name -> google.fhir.r4.core.Reference
	271,  // 1759: google.fhir.r4.qicore.QICoreMedicationDispense.Performer.id:type_name -> google.fhir.r4.core.String
	263,  // 1760: google.fhir.r4.qicore.QICoreMedicationDispense.Performer.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1761: google.fhir.r4.qicore.QICoreMedicationDispense.Performer.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1762: google.fhir.r4.qicore.QICoreMedicationDispense.Performer.function:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1763: google.fhir.r4.qicore.QICoreMedicationDispense.Performer.actor:type_name -> google.fhir.r4.core.Reference
	271,  // 1764: google.fhir.r4.qicore.QICoreMedicationDispense.Substitution.id:type_name -> google.fhir.r4.core.String
	263,  // 1765: google.fhir.r4.qicore.QICoreMedicationDispense.Substitution.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1766: google.fhir.r4.qicore.QICoreMedicationDispense.Substitution.modifier_extension:type_name -> google.fhir.r4.core.Extension
	270,  // 1767: google.fhir.r4.qicore.QICoreMedicationDispense.Substitution.was_substituted:type_name -> google.fhir.r4.core.Boolean
	265,  // 1768: google.fhir.r4.qicore.QICoreMedicationDispense.Substitution.type:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1769: google.fhir.r4.qicore.QICoreMedicationDispense.Substitution.reason:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1770: google.fhir.r4.qicore.QICoreMedicationDispense.Substitution.responsible_party:type_name -> google.fhir.r4.core.Reference
	336,  // 1771: google.fhir.r4.qicore.QICoreMedicationRequest.StatusCode.value:type_name -> google.fhir.r4.core.MedicationrequestStatusCode.Value
	271,  // 1772: google.fhir.r4.qicore.QICoreMedicationRequest.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1773: google.fhir.r4.qicore.QICoreMedicationRequest.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	337,  // 1774: google.fhir.r4.qicore.QICoreMedicationRequest.IntentCode.value:type_name -> google.fhir.r4.core.MedicationRequestIntentCode.Value
	271,  // 1775: google.fhir.r4.qicore.QICoreMedicationRequest.IntentCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1776: google.fhir.r4.qicore.QICoreMedicationRequest.IntentCode.extension:type_name -> google.fhir.r4.core.Extension
	311,  // 1777: google.fhir.r4.qicore.QICoreMedicationRequest.PriorityCode.value:type_name -> google.fhir.r4.core.RequestPriorityCode.Value
	271,  // 1778: google.fhir.r4.qicore.QICoreMedicationRequest.PriorityCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1779: google.fhir.r4.qicore.QICoreMedicationRequest.PriorityCode.extension:type_name -> google.fhir.r4.core.Extension
	270,  // 1780: google.fhir.r4.qicore.QICoreMedicationRequest.ReportedX.boolean:type_name -> google.fhir.r4.core.Boolean
	266,  // 1781: google.fhir.r4.qicore.QICoreMedicationRequest.ReportedX.reference:type_name -> google.fhir.r4.core.Reference
	265,  // 1782: google.fhir.r4.qicore.QICoreMedicationRequest.MedicationX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1783: google.fhir.r4.qicore.QICoreMedicationRequest.MedicationX.reference:type_name -> google.fhir.r4.core.Reference
	271,  // 1784: google.fhir.r4.qicore.QICoreMedicationRequest.DispenseRequest.id:type_name -> google.fhir.r4.core.String
	263,  // 1785: google.fhir.r4.qicore.QICoreMedicationRequest.DispenseRequest.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1786: google.fhir.r4.qicore.QICoreMedicationRequest.DispenseRequest.modifier_extension:type_name -> google.fhir.r4.core.Extension
	193,  // 1787: google.fhir.r4.qicore.QICoreMedicationRequest.DispenseRequest.initial_fill:type_name -> google.fhir.r4.qicore.QICoreMedicationRequest.DispenseRequest.InitialFill
	282,  // 1788: google.fhir.r4.qicore.QICoreMedicationRequest.DispenseRequest.dispense_interval:type_name -> google.fhir.r4.core.Duration
	274,  // 1789: google.fhir.r4.qicore.QICoreMedicationRequest.DispenseRequest.validity_period:type_name -> google.fhir.r4.core.Period
	284,  // 1790: google.fhir.r4.qicore.QICoreMedicationRequest.DispenseRequest.number_of_repeats_allowed:type_name -> google.fhir.r4.core.UnsignedInt
	285,  // 1791: google.fhir.r4.qicore.QICoreMedicationRequest.DispenseRequest.quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	282,  // 1792: google.fhir.r4.qicore.QICoreMedicationRequest.DispenseRequest.expected_supply_duration:type_name -> google.fhir.r4.core.Duration
	266,  // 1793: google.fhir.r4.qicore.QICoreMedicationRequest.DispenseRequest.performer:type_name -> google.fhir.r4.core.Reference
	271,  // 1794: google.fhir.r4.qicore.QICoreMedicationRequest.Substitution.id:type_name -> google.fhir.r4.core.String
	263,  // 1795: google.fhir.r4.qicore.QICoreMedicationRequest.Substitution.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1796: google.fhir.r4.qicore.QICoreMedicationRequest.Substitution.modifier_extension:type_name -> google.fhir.r4.core.Extension
	194,  // 1797: google.fhir.r4.qicore.QICoreMedicationRequest.Substitution.allowed:type_name -> google.fhir.r4.qicore.QICoreMedicationRequest.Substitution.AllowedX
	265,  // 1798: google.fhir.r4.qicore.QICoreMedicationRequest.Substitution.reason:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 1799: google.fhir.r4.qicore.QICoreMedicationRequest.DispenseRequest.InitialFill.id:type_name -> google.fhir.r4.core.String
	263,  // 1800: google.fhir.r4.qicore.QICoreMedicationRequest.DispenseRequest.InitialFill.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1801: google.fhir.r4.qicore.QICoreMedicationRequest.DispenseRequest.InitialFill.modifier_extension:type_name -> google.fhir.r4.core.Extension
	285,  // 1802: google.fhir.r4.qicore.QICoreMedicationRequest.DispenseRequest.InitialFill.quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	282,  // 1803: google.fhir.r4.qicore.QICoreMedicationRequest.DispenseRequest.InitialFill.duration:type_name -> google.fhir.r4.core.Duration
	270,  // 1804: google.fhir.r4.qicore.QICoreMedicationRequest.Substitution.AllowedX.boolean:type_name -> google.fhir.r4.core.Boolean
	265,  // 1805: google.fhir.r4.qicore.QICoreMedicationRequest.Substitution.AllowedX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	338,  // 1806: google.fhir.r4.qicore.QICoreMedicationStatement.StatusCode.value:type_name -> google.fhir.r4.core.MedicationStatementStatusCodes.Value
	271,  // 1807: google.fhir.r4.qicore.QICoreMedicationStatement.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1808: google.fhir.r4.qicore.QICoreMedicationStatement.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1809: google.fhir.r4.qicore.QICoreMedicationStatement.MedicationX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1810: google.fhir.r4.qicore.QICoreMedicationStatement.MedicationX.reference:type_name -> google.fhir.r4.core.Reference
	267,  // 1811: google.fhir.r4.qicore.QICoreMedicationStatement.EffectiveX.date_time:type_name -> google.fhir.r4.core.DateTime
	274,  // 1812: google.fhir.r4.qicore.QICoreMedicationStatement.EffectiveX.period:type_name -> google.fhir.r4.core.Period
	300,  // 1813: google.fhir.r4.qicore.QICoreNutritionOrder.StatusCode.value:type_name -> google.fhir.r4.core.RequestStatusCode.Value
	271,  // 1814: google.fhir.r4.qicore.QICoreNutritionOrder.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1815: google.fhir.r4.qicore.QICoreNutritionOrder.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	316,  // 1816: google.fhir.r4.qicore.QICoreNutritionOrder.IntentCode.value:type_name -> google.fhir.r4.core.RequestIntentCode.Value
	271,  // 1817: google.fhir.r4.qicore.QICoreNutritionOrder.IntentCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1818: google.fhir.r4.qicore.QICoreNutritionOrder.IntentCode.extension:type_name -> google.fhir.r4.core.Extension
	271,  // 1819: google.fhir.r4.qicore.QICoreNutritionOrder.OralDiet.id:type_name -> google.fhir.r4.core.String
	263,  // 1820: google.fhir.r4.qicore.QICoreNutritionOrder.OralDiet.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1821: google.fhir.r4.qicore.QICoreNutritionOrder.OralDiet.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1822: google.fhir.r4.qicore.QICoreNutritionOrder.OralDiet.type:type_name -> google.fhir.r4.core.CodeableConcept
	304,  // 1823: google.fhir.r4.qicore.QICoreNutritionOrder.OralDiet.schedule:type_name -> google.fhir.r4.core.Timing
	203,  // 1824: google.fhir.r4.qicore.QICoreNutritionOrder.OralDiet.nutrient:type_name -> google.fhir.r4.qicore.QICoreNutritionOrder.OralDiet.Nutrient
	204,  // 1825: google.fhir.r4.qicore.QICoreNutritionOrder.OralDiet.texture:type_name -> google.fhir.r4.qicore.QICoreNutritionOrder.OralDiet.Texture
	265,  // 1826: google.fhir.r4.qicore.QICoreNutritionOrder.OralDiet.fluid_consistency_type:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 1827: google.fhir.r4.qicore.QICoreNutritionOrder.OralDiet.instruction:type_name -> google.fhir.r4.core.String
	271,  // 1828: google.fhir.r4.qicore.QICoreNutritionOrder.Supplement.id:type_name -> google.fhir.r4.core.String
	263,  // 1829: google.fhir.r4.qicore.QICoreNutritionOrder.Supplement.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1830: google.fhir.r4.qicore.QICoreNutritionOrder.Supplement.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1831: google.fhir.r4.qicore.QICoreNutritionOrder.Supplement.type:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 1832: google.fhir.r4.qicore.QICoreNutritionOrder.Supplement.product_name:type_name -> google.fhir.r4.core.String
	304,  // 1833: google.fhir.r4.qicore.QICoreNutritionOrder.Supplement.schedule:type_name -> google.fhir.r4.core.Timing
	285,  // 1834: google.fhir.r4.qicore.QICoreNutritionOrder.Supplement.quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	271,  // 1835: google.fhir.r4.qicore.QICoreNutritionOrder.Supplement.instruction:type_name -> google.fhir.r4.core.String
	271,  // 1836: google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula.id:type_name -> google.fhir.r4.core.String
	263,  // 1837: google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1838: google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1839: google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula.base_formula_type:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 1840: google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula.base_formula_product_name:type_name -> google.fhir.r4.core.String
	265,  // 1841: google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula.additive_type:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 1842: google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula.additive_product_name:type_name -> google.fhir.r4.core.String
	285,  // 1843: google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula.caloric_density:type_name -> google.fhir.r4.core.SimpleQuantity
	265,  // 1844: google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula.routeof_administration:type_name -> google.fhir.r4.core.CodeableConcept
	205,  // 1845: google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula.administration:type_name -> google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula.Administration
	285,  // 1846: google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula.max_volume_to_deliver:type_name -> google.fhir.r4.core.SimpleQuantity
	271,  // 1847: google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula.administration_instruction:type_name -> google.fhir.r4.core.String
	271,  // 1848: google.fhir.r4.qicore.QICoreNutritionOrder.OralDiet.Nutrient.id:type_name -> google.fhir.r4.core.String
	263,  // 1849: google.fhir.r4.qicore.QICoreNutritionOrder.OralDiet.Nutrient.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1850: google.fhir.r4.qicore.QICoreNutritionOrder.OralDiet.Nutrient.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1851: google.fhir.r4.qicore.QICoreNutritionOrder.OralDiet.Nutrient.modifier:type_name -> google.fhir.r4.core.CodeableConcept
	285,  // 1852: google.fhir.r4.qicore.QICoreNutritionOrder.OralDiet.Nutrient.amount:type_name -> google.fhir.r4.core.SimpleQuantity
	271,  // 1853: google.fhir.r4.qicore.QICoreNutritionOrder.OralDiet.Texture.id:type_name -> google.fhir.r4.core.String
	263,  // 1854: google.fhir.r4.qicore.QICoreNutritionOrder.OralDiet.Texture.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1855: google.fhir.r4.qicore.QICoreNutritionOrder.OralDiet.Texture.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1856: google.fhir.r4.qicore.QICoreNutritionOrder.OralDiet.Texture.modifier:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1857: google.fhir.r4.qicore.QICoreNutritionOrder.OralDiet.Texture.food_type:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 1858: google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula.Administration.id:type_name -> google.fhir.r4.core.String
	263,  // 1859: google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula.Administration.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1860: google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula.Administration.modifier_extension:type_name -> google.fhir.r4.core.Extension
	304,  // 1861: google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula.Administration.schedule:type_name -> google.fhir.r4.core.Timing
	285,  // 1862: google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula.Administration.quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	206,  // 1863: google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula.Administration.rate:type_name -> google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula.Administration.RateX
	285,  // 1864: google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula.Administration.RateX.quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	287,  // 1865: google.fhir.r4.qicore.QICoreNutritionOrder.EnteralFormula.Administration.RateX.ratio:type_name -> google.fhir.r4.core.Ratio
	339,  // 1866: google.fhir.r4.qicore.QICoreObservation.StatusCode.value:type_name -> google.fhir.r4.core.ObservationStatusCode.Value
	271,  // 1867: google.fhir.r4.qicore.QICoreObservation.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1868: google.fhir.r4.qicore.QICoreObservation.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	267,  // 1869: google.fhir.r4.qicore.QICoreObservation.EffectiveX.date_time:type_name -> google.fhir.r4.core.DateTime
	274,  // 1870: google.fhir.r4.qicore.QICoreObservation.EffectiveX.period:type_name -> google.fhir.r4.core.Period
	304,  // 1871: google.fhir.r4.qicore.QICoreObservation.EffectiveX.timing:type_name -> google.fhir.r4.core.Timing
	280,  // 1872: google.fhir.r4.qicore.QICoreObservation.EffectiveX.instant:type_name -> google.fhir.r4.core.Instant
	309,  // 1873: google.fhir.r4.qicore.QICoreObservation.ValueX.quantity:type_name -> google.fhir.r4.core.Quantity
	265,  // 1874: google.fhir.r4.qicore.QICoreObservation.ValueX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 1875: google.fhir.r4.qicore.QICoreObservation.ValueX.string_value:type_name -> google.fhir.r4.core.String
	270,  // 1876: google.fhir.r4.qicore.QICoreObservation.ValueX.boolean:type_name -> google.fhir.r4.core.Boolean
	325,  // 1877: google.fhir.r4.qicore.QICoreObservation.ValueX.integer:type_name -> google.fhir.r4.core.Integer
	298,  // 1878: google.fhir.r4.qicore.QICoreObservation.ValueX.range:type_name -> google.fhir.r4.core.Range
	287,  // 1879: google.fhir.r4.qicore.QICoreObservation.ValueX.ratio:type_name -> google.fhir.r4.core.Ratio
	340,  // 1880: google.fhir.r4.qicore.QICoreObservation.ValueX.sampled_data:type_name -> google.fhir.r4.core.SampledData
	331,  // 1881: google.fhir.r4.qicore.QICoreObservation.ValueX.time:type_name -> google.fhir.r4.core.Time
	267,  // 1882: google.fhir.r4.qicore.QICoreObservation.ValueX.date_time:type_name -> google.fhir.r4.core.DateTime
	274,  // 1883: google.fhir.r4.qicore.QICoreObservation.ValueX.period:type_name -> google.fhir.r4.core.Period
	271,  // 1884: google.fhir.r4.qicore.QICoreObservation.ReferenceRange.id:type_name -> google.fhir.r4.core.String
	263,  // 1885: google.fhir.r4.qicore.QICoreObservation.ReferenceRange.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1886: google.fhir.r4.qicore.QICoreObservation.ReferenceRange.modifier_extension:type_name -> google.fhir.r4.core.Extension
	285,  // 1887: google.fhir.r4.qicore.QICoreObservation.ReferenceRange.low:type_name -> google.fhir.r4.core.SimpleQuantity
	285,  // 1888: google.fhir.r4.qicore.QICoreObservation.ReferenceRange.high:type_name -> google.fhir.r4.core.SimpleQuantity
	265,  // 1889: google.fhir.r4.qicore.QICoreObservation.ReferenceRange.type:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1890: google.fhir.r4.qicore.QICoreObservation.ReferenceRange.applies_to:type_name -> google.fhir.r4.core.CodeableConcept
	298,  // 1891: google.fhir.r4.qicore.QICoreObservation.ReferenceRange.age:type_name -> google.fhir.r4.core.Range
	271,  // 1892: google.fhir.r4.qicore.QICoreObservation.ReferenceRange.text:type_name -> google.fhir.r4.core.String
	271,  // 1893: google.fhir.r4.qicore.QICoreObservation.Component.id:type_name -> google.fhir.r4.core.String
	263,  // 1894: google.fhir.r4.qicore.QICoreObservation.Component.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1895: google.fhir.r4.qicore.QICoreObservation.Component.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1896: google.fhir.r4.qicore.QICoreObservation.Component.code:type_name -> google.fhir.r4.core.CodeableConcept
	212,  // 1897: google.fhir.r4.qicore.QICoreObservation.Component.value:type_name -> google.fhir.r4.qicore.QICoreObservation.Component.ValueX
	265,  // 1898: google.fhir.r4.qicore.QICoreObservation.Component.data_absent_reason:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 1899: google.fhir.r4.qicore.QICoreObservation.Component.interpretation:type_name -> google.fhir.r4.core.CodeableConcept
	210,  // 1900: google.fhir.r4.qicore.QICoreObservation.Component.reference_range:type_name -> google.fhir.r4.qicore.QICoreObservation.ReferenceRange
	309,  // 1901: google.fhir.r4.qicore.QICoreObservation.Component.ValueX.quantity:type_name -> google.fhir.r4.core.Quantity
	265,  // 1902: google.fhir.r4.qicore.QICoreObservation.Component.ValueX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	271,  // 1903: google.fhir.r4.qicore.QICoreObservation.Component.ValueX.string_value:type_name -> google.fhir.r4.core.String
	270,  // 1904: google.fhir.r4.qicore.QICoreObservation.Component.ValueX.boolean:type_name -> google.fhir.r4.core.Boolean
	325,  // 1905: google.fhir.r4.qicore.QICoreObservation.Component.ValueX.integer:type_name -> google.fhir.r4.core.Integer
	298,  // 1906: google.fhir.r4.qicore.QICoreObservation.Component.ValueX.range:type_name -> google.fhir.r4.core.Range
	287,  // 1907: google.fhir.r4.qicore.QICoreObservation.Component.ValueX.ratio:type_name -> google.fhir.r4.core.Ratio
	340,  // 1908: google.fhir.r4.qicore.QICoreObservation.Component.ValueX.sampled_data:type_name -> google.fhir.r4.core.SampledData
	331,  // 1909: google.fhir.r4.qicore.QICoreObservation.Component.ValueX.time:type_name -> google.fhir.r4.core.Time
	267,  // 1910: google.fhir.r4.qicore.QICoreObservation.Component.ValueX.date_time:type_name -> google.fhir.r4.core.DateTime
	274,  // 1911: google.fhir.r4.qicore.QICoreObservation.Component.ValueX.period:type_name -> google.fhir.r4.core.Period
	271,  // 1912: google.fhir.r4.qicore.QICoreOrganization.Contact.id:type_name -> google.fhir.r4.core.String
	263,  // 1913: google.fhir.r4.qicore.QICoreOrganization.Contact.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1914: google.fhir.r4.qicore.QICoreOrganization.Contact.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1915: google.fhir.r4.qicore.QICoreOrganization.Contact.purpose:type_name -> google.fhir.r4.core.CodeableConcept
	289,  // 1916: google.fhir.r4.qicore.QICoreOrganization.Contact.name:type_name -> google.fhir.r4.core.HumanName
	275,  // 1917: google.fhir.r4.qicore.QICoreOrganization.Contact.telecom:type_name -> google.fhir.r4.core.ContactPoint
	286,  // 1918: google.fhir.r4.qicore.QICoreOrganization.Contact.address:type_name -> google.fhir.r4.core.Address
	341,  // 1919: google.fhir.r4.qicore.QICorePatient.GenderCode.value:type_name -> google.fhir.r4.core.AdministrativeGenderCode.Value
	271,  // 1920: google.fhir.r4.qicore.QICorePatient.GenderCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1921: google.fhir.r4.qicore.QICorePatient.GenderCode.extension:type_name -> google.fhir.r4.core.Extension
	270,  // 1922: google.fhir.r4.qicore.QICorePatient.DeceasedX.boolean:type_name -> google.fhir.r4.core.Boolean
	267,  // 1923: google.fhir.r4.qicore.QICorePatient.DeceasedX.date_time:type_name -> google.fhir.r4.core.DateTime
	270,  // 1924: google.fhir.r4.qicore.QICorePatient.MultipleBirthX.boolean:type_name -> google.fhir.r4.core.Boolean
	325,  // 1925: google.fhir.r4.qicore.QICorePatient.MultipleBirthX.integer:type_name -> google.fhir.r4.core.Integer
	271,  // 1926: google.fhir.r4.qicore.QICorePatient.Contact.id:type_name -> google.fhir.r4.core.String
	263,  // 1927: google.fhir.r4.qicore.QICorePatient.Contact.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1928: google.fhir.r4.qicore.QICorePatient.Contact.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1929: google.fhir.r4.qicore.QICorePatient.Contact.relationship:type_name -> google.fhir.r4.core.CodeableConcept
	289,  // 1930: google.fhir.r4.qicore.QICorePatient.Contact.name:type_name -> google.fhir.r4.core.HumanName
	275,  // 1931: google.fhir.r4.qicore.QICorePatient.Contact.telecom:type_name -> google.fhir.r4.core.ContactPoint
	286,  // 1932: google.fhir.r4.qicore.QICorePatient.Contact.address:type_name -> google.fhir.r4.core.Address
	220,  // 1933: google.fhir.r4.qicore.QICorePatient.Contact.gender:type_name -> google.fhir.r4.qicore.QICorePatient.Contact.GenderCode
	266,  // 1934: google.fhir.r4.qicore.QICorePatient.Contact.organization:type_name -> google.fhir.r4.core.Reference
	274,  // 1935: google.fhir.r4.qicore.QICorePatient.Contact.period:type_name -> google.fhir.r4.core.Period
	271,  // 1936: google.fhir.r4.qicore.QICorePatient.Communication.id:type_name -> google.fhir.r4.core.String
	263,  // 1937: google.fhir.r4.qicore.QICorePatient.Communication.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1938: google.fhir.r4.qicore.QICorePatient.Communication.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1939: google.fhir.r4.qicore.QICorePatient.Communication.language:type_name -> google.fhir.r4.core.CodeableConcept
	270,  // 1940: google.fhir.r4.qicore.QICorePatient.Communication.preferred:type_name -> google.fhir.r4.core.Boolean
	271,  // 1941: google.fhir.r4.qicore.QICorePatient.Link.id:type_name -> google.fhir.r4.core.String
	263,  // 1942: google.fhir.r4.qicore.QICorePatient.Link.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1943: google.fhir.r4.qicore.QICorePatient.Link.modifier_extension:type_name -> google.fhir.r4.core.Extension
	266,  // 1944: google.fhir.r4.qicore.QICorePatient.Link.other:type_name -> google.fhir.r4.core.Reference
	221,  // 1945: google.fhir.r4.qicore.QICorePatient.Link.type:type_name -> google.fhir.r4.qicore.QICorePatient.Link.TypeCode
	341,  // 1946: google.fhir.r4.qicore.QICorePatient.Contact.GenderCode.value:type_name -> google.fhir.r4.core.AdministrativeGenderCode.Value
	271,  // 1947: google.fhir.r4.qicore.QICorePatient.Contact.GenderCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1948: google.fhir.r4.qicore.QICorePatient.Contact.GenderCode.extension:type_name -> google.fhir.r4.core.Extension
	342,  // 1949: google.fhir.r4.qicore.QICorePatient.Link.TypeCode.value:type_name -> google.fhir.r4.core.LinkTypeCode.Value
	271,  // 1950: google.fhir.r4.qicore.QICorePatient.Link.TypeCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1951: google.fhir.r4.qicore.QICorePatient.Link.TypeCode.extension:type_name -> google.fhir.r4.core.Extension
	341,  // 1952: google.fhir.r4.qicore.QICorePractitioner.GenderCode.value:type_name -> google.fhir.r4.core.AdministrativeGenderCode.Value
	271,  // 1953: google.fhir.r4.qicore.QICorePractitioner.GenderCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1954: google.fhir.r4.qicore.QICorePractitioner.GenderCode.extension:type_name -> google.fhir.r4.core.Extension
	271,  // 1955: google.fhir.r4.qicore.QICorePractitioner.Qualification.id:type_name -> google.fhir.r4.core.String
	263,  // 1956: google.fhir.r4.qicore.QICorePractitioner.Qualification.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1957: google.fhir.r4.qicore.QICorePractitioner.Qualification.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 1958: google.fhir.r4.qicore.QICorePractitioner.Qualification.identifier:type_name -> google.fhir.r4.core.Identifier
	265,  // 1959: google.fhir.r4.qicore.QICorePractitioner.Qualification.code:type_name -> google.fhir.r4.core.CodeableConcept
	274,  // 1960: google.fhir.r4.qicore.QICorePractitioner.Qualification.period:type_name -> google.fhir.r4.core.Period
	266,  // 1961: google.fhir.r4.qicore.QICorePractitioner.Qualification.issuer:type_name -> google.fhir.r4.core.Reference
	271,  // 1962: google.fhir.r4.qicore.QICorePractitionerRole.AvailableTime.id:type_name -> google.fhir.r4.core.String
	263,  // 1963: google.fhir.r4.qicore.QICorePractitionerRole.AvailableTime.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1964: google.fhir.r4.qicore.QICorePractitionerRole.AvailableTime.modifier_extension:type_name -> google.fhir.r4.core.Extension
	226,  // 1965: google.fhir.r4.qicore.QICorePractitionerRole.AvailableTime.days_of_week:type_name -> google.fhir.r4.qicore.QICorePractitionerRole.AvailableTime.DaysOfWeekCode
	270,  // 1966: google.fhir.r4.qicore.QICorePractitionerRole.AvailableTime.all_day:type_name -> google.fhir.r4.core.Boolean
	331,  // 1967: google.fhir.r4.qicore.QICorePractitionerRole.AvailableTime.available_start_time:type_name -> google.fhir.r4.core.Time
	331,  // 1968: google.fhir.r4.qicore.QICorePractitionerRole.AvailableTime.available_end_time:type_name -> google.fhir.r4.core.Time
	271,  // 1969: google.fhir.r4.qicore.QICorePractitionerRole.NotAvailable.id:type_name -> google.fhir.r4.core.String
	263,  // 1970: google.fhir.r4.qicore.QICorePractitionerRole.NotAvailable.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1971: google.fhir.r4.qicore.QICorePractitionerRole.NotAvailable.modifier_extension:type_name -> google.fhir.r4.core.Extension
	271,  // 1972: google.fhir.r4.qicore.QICorePractitionerRole.NotAvailable.description:type_name -> google.fhir.r4.core.String
	274,  // 1973: google.fhir.r4.qicore.QICorePractitionerRole.NotAvailable.during:type_name -> google.fhir.r4.core.Period
	332,  // 1974: google.fhir.r4.qicore.QICorePractitionerRole.AvailableTime.DaysOfWeekCode.value:type_name -> google.fhir.r4.core.DaysOfWeekCode.Value
	271,  // 1975: google.fhir.r4.qicore.QICorePractitionerRole.AvailableTime.DaysOfWeekCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1976: google.fhir.r4.qicore.QICorePractitionerRole.AvailableTime.DaysOfWeekCode.extension:type_name -> google.fhir.r4.core.Extension
	310,  // 1977: google.fhir.r4.qicore.QICoreProcedure.StatusCode.value:type_name -> google.fhir.r4.core.EventStatusCode.Value
	271,  // 1978: google.fhir.r4.qicore.QICoreProcedure.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1979: google.fhir.r4.qicore.QICoreProcedure.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	267,  // 1980: google.fhir.r4.qicore.QICoreProcedure.PerformedX.date_time:type_name -> google.fhir.r4.core.DateTime
	274,  // 1981: google.fhir.r4.qicore.QICoreProcedure.PerformedX.period:type_name -> google.fhir.r4.core.Period
	271,  // 1982: google.fhir.r4.qicore.QICoreProcedure.Performer.id:type_name -> google.fhir.r4.core.String
	263,  // 1983: google.fhir.r4.qicore.QICoreProcedure.Performer.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1984: google.fhir.r4.qicore.QICoreProcedure.Performer.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1985: google.fhir.r4.qicore.QICoreProcedure.Performer.function:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1986: google.fhir.r4.qicore.QICoreProcedure.Performer.actor:type_name -> google.fhir.r4.core.Reference
	266,  // 1987: google.fhir.r4.qicore.QICoreProcedure.Performer.on_behalf_of:type_name -> google.fhir.r4.core.Reference
	271,  // 1988: google.fhir.r4.qicore.QICoreProcedure.FocalDevice.id:type_name -> google.fhir.r4.core.String
	263,  // 1989: google.fhir.r4.qicore.QICoreProcedure.FocalDevice.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1990: google.fhir.r4.qicore.QICoreProcedure.FocalDevice.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1991: google.fhir.r4.qicore.QICoreProcedure.FocalDevice.action:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 1992: google.fhir.r4.qicore.QICoreProcedure.FocalDevice.manipulated:type_name -> google.fhir.r4.core.Reference
	341,  // 1993: google.fhir.r4.qicore.QICoreRelatedPerson.GenderCode.value:type_name -> google.fhir.r4.core.AdministrativeGenderCode.Value
	271,  // 1994: google.fhir.r4.qicore.QICoreRelatedPerson.GenderCode.id:type_name -> google.fhir.r4.core.String
	263,  // 1995: google.fhir.r4.qicore.QICoreRelatedPerson.GenderCode.extension:type_name -> google.fhir.r4.core.Extension
	271,  // 1996: google.fhir.r4.qicore.QICoreRelatedPerson.Communication.id:type_name -> google.fhir.r4.core.String
	263,  // 1997: google.fhir.r4.qicore.QICoreRelatedPerson.Communication.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 1998: google.fhir.r4.qicore.QICoreRelatedPerson.Communication.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 1999: google.fhir.r4.qicore.QICoreRelatedPerson.Communication.language:type_name -> google.fhir.r4.core.CodeableConcept
	270,  // 2000: google.fhir.r4.qicore.QICoreRelatedPerson.Communication.preferred:type_name -> google.fhir.r4.core.Boolean
	260,  // 2001: google.fhir.r4.qicore.ServiceRequestQICoreServiceRequestAppropriatenessScore.ValueX.code:type_name -> google.fhir.r4.core.Code
	308,  // 2002: google.fhir.r4.qicore.ServiceRequestQICoreServiceRequestAppropriatenessScore.ValueX.decimal:type_name -> google.fhir.r4.core.Decimal
	300,  // 2003: google.fhir.r4.qicore.QICoreServiceRequest.StatusCode.value:type_name -> google.fhir.r4.core.RequestStatusCode.Value
	271,  // 2004: google.fhir.r4.qicore.QICoreServiceRequest.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 2005: google.fhir.r4.qicore.QICoreServiceRequest.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	316,  // 2006: google.fhir.r4.qicore.QICoreServiceRequest.IntentCode.value:type_name -> google.fhir.r4.core.RequestIntentCode.Value
	271,  // 2007: google.fhir.r4.qicore.QICoreServiceRequest.IntentCode.id:type_name -> google.fhir.r4.core.String
	263,  // 2008: google.fhir.r4.qicore.QICoreServiceRequest.IntentCode.extension:type_name -> google.fhir.r4.core.Extension
	311,  // 2009: google.fhir.r4.qicore.QICoreServiceRequest.PriorityCode.value:type_name -> google.fhir.r4.core.RequestPriorityCode.Value
	271,  // 2010: google.fhir.r4.qicore.QICoreServiceRequest.PriorityCode.id:type_name -> google.fhir.r4.core.String
	263,  // 2011: google.fhir.r4.qicore.QICoreServiceRequest.PriorityCode.extension:type_name -> google.fhir.r4.core.Extension
	309,  // 2012: google.fhir.r4.qicore.QICoreServiceRequest.QuantityX.quantity:type_name -> google.fhir.r4.core.Quantity
	287,  // 2013: google.fhir.r4.qicore.QICoreServiceRequest.QuantityX.ratio:type_name -> google.fhir.r4.core.Ratio
	298,  // 2014: google.fhir.r4.qicore.QICoreServiceRequest.QuantityX.range:type_name -> google.fhir.r4.core.Range
	267,  // 2015: google.fhir.r4.qicore.QICoreServiceRequest.OccurrenceX.date_time:type_name -> google.fhir.r4.core.DateTime
	274,  // 2016: google.fhir.r4.qicore.QICoreServiceRequest.OccurrenceX.period:type_name -> google.fhir.r4.core.Period
	304,  // 2017: google.fhir.r4.qicore.QICoreServiceRequest.OccurrenceX.timing:type_name -> google.fhir.r4.core.Timing
	270,  // 2018: google.fhir.r4.qicore.QICoreServiceRequest.AsNeededX.boolean:type_name -> google.fhir.r4.core.Boolean
	265,  // 2019: google.fhir.r4.qicore.QICoreServiceRequest.AsNeededX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	343,  // 2020: google.fhir.r4.qicore.QICoreSpecimen.StatusCode.value:type_name -> google.fhir.r4.core.SpecimenStatusCode.Value
	271,  // 2021: google.fhir.r4.qicore.QICoreSpecimen.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 2022: google.fhir.r4.qicore.QICoreSpecimen.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	271,  // 2023: google.fhir.r4.qicore.QICoreSpecimen.Collection.id:type_name -> google.fhir.r4.core.String
	263,  // 2024: google.fhir.r4.qicore.QICoreSpecimen.Collection.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 2025: google.fhir.r4.qicore.QICoreSpecimen.Collection.modifier_extension:type_name -> google.fhir.r4.core.Extension
	266,  // 2026: google.fhir.r4.qicore.QICoreSpecimen.Collection.collector:type_name -> google.fhir.r4.core.Reference
	244,  // 2027: google.fhir.r4.qicore.QICoreSpecimen.Collection.collected:type_name -> google.fhir.r4.qicore.QICoreSpecimen.Collection.CollectedX
	282,  // 2028: google.fhir.r4.qicore.QICoreSpecimen.Collection.duration:type_name -> google.fhir.r4.core.Duration
	285,  // 2029: google.fhir.r4.qicore.QICoreSpecimen.Collection.quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	265,  // 2030: google.fhir.r4.qicore.QICoreSpecimen.Collection.method:type_name -> google.fhir.r4.core.CodeableConcept
	265,  // 2031: google.fhir.r4.qicore.QICoreSpecimen.Collection.body_site:type_name -> google.fhir.r4.core.CodeableConcept
	245,  // 2032: google.fhir.r4.qicore.QICoreSpecimen.Collection.fasting_status:type_name -> google.fhir.r4.qicore.QICoreSpecimen.Collection.FastingStatusX
	271,  // 2033: google.fhir.r4.qicore.QICoreSpecimen.Processing.id:type_name -> google.fhir.r4.core.String
	263,  // 2034: google.fhir.r4.qicore.QICoreSpecimen.Processing.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 2035: google.fhir.r4.qicore.QICoreSpecimen.Processing.modifier_extension:type_name -> google.fhir.r4.core.Extension
	271,  // 2036: google.fhir.r4.qicore.QICoreSpecimen.Processing.description:type_name -> google.fhir.r4.core.String
	265,  // 2037: google.fhir.r4.qicore.QICoreSpecimen.Processing.procedure:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 2038: google.fhir.r4.qicore.QICoreSpecimen.Processing.additive:type_name -> google.fhir.r4.core.Reference
	246,  // 2039: google.fhir.r4.qicore.QICoreSpecimen.Processing.time:type_name -> google.fhir.r4.qicore.QICoreSpecimen.Processing.TimeX
	271,  // 2040: google.fhir.r4.qicore.QICoreSpecimen.Container.id:type_name -> google.fhir.r4.core.String
	263,  // 2041: google.fhir.r4.qicore.QICoreSpecimen.Container.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 2042: google.fhir.r4.qicore.QICoreSpecimen.Container.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 2043: google.fhir.r4.qicore.QICoreSpecimen.Container.identifier:type_name -> google.fhir.r4.core.Identifier
	271,  // 2044: google.fhir.r4.qicore.QICoreSpecimen.Container.description:type_name -> google.fhir.r4.core.String
	265,  // 2045: google.fhir.r4.qicore.QICoreSpecimen.Container.type:type_name -> google.fhir.r4.core.CodeableConcept
	285,  // 2046: google.fhir.r4.qicore.QICoreSpecimen.Container.capacity:type_name -> google.fhir.r4.core.SimpleQuantity
	285,  // 2047: google.fhir.r4.qicore.QICoreSpecimen.Container.specimen_quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	247,  // 2048: google.fhir.r4.qicore.QICoreSpecimen.Container.additive:type_name -> google.fhir.r4.qicore.QICoreSpecimen.Container.AdditiveX
	325,  // 2049: google.fhir.r4.qicore.QICoreSpecimen.Container.container_sequence_number:type_name -> google.fhir.r4.core.Integer
	267,  // 2050: google.fhir.r4.qicore.QICoreSpecimen.Collection.CollectedX.date_time:type_name -> google.fhir.r4.core.DateTime
	274,  // 2051: google.fhir.r4.qicore.QICoreSpecimen.Collection.CollectedX.period:type_name -> google.fhir.r4.core.Period
	265,  // 2052: google.fhir.r4.qicore.QICoreSpecimen.Collection.FastingStatusX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	282,  // 2053: google.fhir.r4.qicore.QICoreSpecimen.Collection.FastingStatusX.duration:type_name -> google.fhir.r4.core.Duration
	267,  // 2054: google.fhir.r4.qicore.QICoreSpecimen.Processing.TimeX.date_time:type_name -> google.fhir.r4.core.DateTime
	274,  // 2055: google.fhir.r4.qicore.QICoreSpecimen.Processing.TimeX.period:type_name -> google.fhir.r4.core.Period
	265,  // 2056: google.fhir.r4.qicore.QICoreSpecimen.Container.AdditiveX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	266,  // 2057: google.fhir.r4.qicore.QICoreSpecimen.Container.AdditiveX.reference:type_name -> google.fhir.r4.core.Reference
	344,  // 2058: google.fhir.r4.qicore.QICoreSubstance.StatusCode.value:type_name -> google.fhir.r4.core.FHIRSubstanceStatusCode.Value
	271,  // 2059: google.fhir.r4.qicore.QICoreSubstance.StatusCode.id:type_name -> google.fhir.r4.core.String
	263,  // 2060: google.fhir.r4.qicore.QICoreSubstance.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	271,  // 2061: google.fhir.r4.qicore.QICoreSubstance.Instance.id:type_name -> google.fhir.r4.core.String
	263,  // 2062: google.fhir.r4.qicore.QICoreSubstance.Instance.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 2063: google.fhir.r4.qicore.QICoreSubstance.Instance.modifier_extension:type_name -> google.fhir.r4.core.Extension
	264,  // 2064: google.fhir.r4.qicore.QICoreSubstance.Instance.identifier:type_name -> google.fhir.r4.core.Identifier
	267,  // 2065: google.fhir.r4.qicore.QICoreSubstance.Instance.expiry:type_name -> google.fhir.r4.core.DateTime
	285,  // 2066: google.fhir.r4.qicore.QICoreSubstance.Instance.quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	271,  // 2067: google.fhir.r4.qicore.QICoreSubstance.Ingredient.id:type_name -> google.fhir.r4.core.String
	263,  // 2068: google.fhir.r4.qicore.QICoreSubstance.Ingredient.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 2069: google.fhir.r4.qicore.QICoreSubstance.Ingredient.modifier_extension:type_name -> google.fhir.r4.core.Extension
	287,  // 2070: google.fhir.r4.qicore.QICoreSubstance.Ingredient.quantity:type_name -> google.fhir.r4.core.Ratio
	251,  // 2071: google.fhir.r4.qicore.QICoreSubstance.Ingredient.substance:type_name -> google.fhir.r4.qicore.QICoreSubstance.Ingredient.SubstanceX
	266,  // 2072: google.fhir.r4.qicore.QICoreSubstance.Ingredient.SubstanceX.reference:type_name -> google.fhir.r4.core.Reference
	271,  // 2073: google.fhir.r4.qicore.QICoreTask.Restriction.id:type_name -> google.fhir.r4.core.String
	263,  // 2074: google.fhir.r4.qicore.QICoreTask.Restriction.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 2075: google.fhir.r4.qicore.QICoreTask.Restriction.modifier_extension:type_name -> google.fhir.r4.core.Extension
	279,  // 2076: google.fhir.r4.qicore.QICoreTask.Restriction.repetitions:type_name -> google.fhir.r4.core.PositiveInt
	274,  // 2077: google.fhir.r4.qicore.QICoreTask.Restriction.period:type_name -> google.fhir.r4.core.Period
	266,  // 2078: google.fhir.r4.qicore.QICoreTask.Restriction.recipient:type_name -> google.fhir.r4.core.Reference
	271,  // 2079: google.fhir.r4.qicore.QICoreTask.Parameter.id:type_name -> google.fhir.r4.core.String
	263,  // 2080: google.fhir.r4.qicore.QICoreTask.Parameter.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 2081: google.fhir.r4.qicore.QICoreTask.Parameter.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 2082: google.fhir.r4.qicore.QICoreTask.Parameter.type:type_name -> google.fhir.r4.core.CodeableConcept
	255,  // 2083: google.fhir.r4.qicore.QICoreTask.Parameter.value:type_name -> google.fhir.r4.qicore.QICoreTask.Parameter.ValueX
	271,  // 2084: google.fhir.r4.qicore.QICoreTask.Output.id:type_name -> google.fhir.r4.core.String
	263,  // 2085: google.fhir.r4.qicore.QICoreTask.Output.extension:type_name -> google.fhir.r4.core.Extension
	263,  // 2086: google.fhir.r4.qicore.QICoreTask.Output.modifier_extension:type_name -> google.fhir.r4.core.Extension
	265,  // 2087: google.fhir.r4.qicore.QICoreTask.Output.type:type_name -> google.fhir.r4.core.CodeableConcept
	256,  // 2088: google.fhir.r4.qicore.QICoreTask.Output.value:type_name -> google.fhir.r4.qicore.QICoreTask.Output.ValueX
	312,  // 2089: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.base64_binary:type_name -> google.fhir.r4.core.Base64Binary
	270,  // 2090: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.boolean:type_name -> google.fhir.r4.core.Boolean
	273,  // 2091: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.canonical:type_name -> google.fhir.r4.core.Canonical
	260,  // 2092: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.code:type_name -> google.fhir.r4.core.Code
	283,  // 2093: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.date:type_name -> google.fhir.r4.core.Date
	267,  // 2094: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.date_time:type_name -> google.fhir.r4.core.DateTime
	308,  // 2095: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.decimal:type_name -> google.fhir.r4.core.Decimal
	257,  // 2096: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.id:type_name -> google.fhir.r4.core.Id
	280,  // 2097: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.instant:type_name -> google.fhir.r4.core.Instant
	325,  // 2098: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.integer:type_name -> google.fhir.r4.core.Integer
	345,  // 2099: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.markdown:type_name -> google.fhir.r4.core.Markdown
	346,  // 2100: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.oid:type_name -> google.fhir.r4.core.Oid
	279,  // 2101: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.positive_int:type_name -> google.fhir.r4.core.PositiveInt
	271,  // 2102: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.string_value:type_name -> google.fhir.r4.core.String
	331,  // 2103: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.time:type_name -> google.fhir.r4.core.Time
	284,  // 2104: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.unsigned_int:type_name -> google.fhir.r4.core.UnsignedInt
	259,  // 2105: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.uri:type_name -> google.fhir.r4.core.Uri
	347,  // 2106: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.url:type_name -> google.fhir.r4.core.Url
	348,  // 2107: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.uuid:type_name -> google.fhir.r4.core.Uuid
	286,  // 2108: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.address:type_name -> google.fhir.r4.core.Address
	269,  // 2109: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.age:type_name -> google.fhir.r4.core.Age
	268,  // 2110: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.annotation:type_name -> google.fhir.r4.core.Annotation
	272,  // 2111: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.attachment:type_name -> google.fhir.r4.core.Attachment
	265,  // 2112: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	281,  // 2113: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.coding:type_name -> google.fhir.r4.core.Coding
	275,  // 2114: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.contact_point:type_name -> google.fhir.r4.core.ContactPoint
	349,  // 2115: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.count:type_name -> google.fhir.r4.core.Count
	350,  // 2116: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.distance:type_name -> google.fhir.r4.core.Distance
	282,  // 2117: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.duration:type_name -> google.fhir.r4.core.Duration
	289,  // 2118: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.human_name:type_name -> google.fhir.r4.core.HumanName
	264,  // 2119: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.identifier:type_name -> google.fhir.r4.core.Identifier
	276,  // 2120: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.money:type_name -> google.fhir.r4.core.Money
	274,  // 2121: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.period:type_name -> google.fhir.r4.core.Period
	309,  // 2122: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.quantity:type_name -> google.fhir.r4.core.Quantity
	298,  // 2123: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.range:type_name -> google.fhir.r4.core.Range
	287,  // 2124: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.ratio:type_name -> google.fhir.r4.core.Ratio
	266,  // 2125: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.reference:type_name -> google.fhir.r4.core.Reference
	340,  // 2126: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.sampled_data:type_name -> google.fhir.r4.core.SampledData
	351,  // 2127: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.signature:type_name -> google.fhir.r4.core.Signature
	304,  // 2128: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.timing:type_name -> google.fhir.r4.core.Timing
	352,  // 2129: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.contact_detail:type_name -> google.fhir.r4.core.ContactDetail
	353,  // 2130: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.contributor:type_name -> google.fhir.r4.core.Contributor
	354,  // 2131: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.data_requirement:type_name -> google.fhir.r4.core.DataRequirement
	355,  // 2132: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.expression:type_name -> google.fhir.r4.core.Expression
	356,  // 2133: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.parameter_definition:type_name -> google.fhir.r4.core.ParameterDefinition
	357,  // 2134: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.related_artifact:type_name -> google.fhir.r4.core.RelatedArtifact
	358,  // 2135: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.trigger_definition:type_name -> google.fhir.r4.core.TriggerDefinition
	359,  // 2136: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.usage_context:type_name -> google.fhir.r4.core.UsageContext
	288,  // 2137: google.fhir.r4.qicore.QICoreTask.Parameter.ValueX.dosage:type_name -> google.fhir.r4.core.Dosage
	312,  // 2138: google.fhir.r4.qicore.QICoreTask.Output.ValueX.base64_binary:type_name -> google.fhir.r4.core.Base64Binary
	270,  // 2139: google.fhir.r4.qicore.QICoreTask.Output.ValueX.boolean:type_name -> google.fhir.r4.core.Boolean
	273,  // 2140: google.fhir.r4.qicore.QICoreTask.Output.ValueX.canonical:type_name -> google.fhir.r4.core.Canonical
	260,  // 2141: google.fhir.r4.qicore.QICoreTask.Output.ValueX.code:type_name -> google.fhir.r4.core.Code
	283,  // 2142: google.fhir.r4.qicore.QICoreTask.Output.ValueX.date:type_name -> google.fhir.r4.core.Date
	267,  // 2143: google.fhir.r4.qicore.QICoreTask.Output.ValueX.date_time:type_name -> google.fhir.r4.core.DateTime
	308,  // 2144: google.fhir.r4.qicore.QICoreTask.Output.ValueX.decimal:type_name -> google.fhir.r4.core.Decimal
	257,  // 2145: google.fhir.r4.qicore.QICoreTask.Output.ValueX.id:type_name -> google.fhir.r4.core.Id
	280,  // 2146: google.fhir.r4.qicore.QICoreTask.Output.ValueX.instant:type_name -> google.fhir.r4.core.Instant
	325,  // 2147: google.fhir.r4.qicore.QICoreTask.Output.ValueX.integer:type_name -> google.fhir.r4.core.Integer
	345,  // 2148: google.fhir.r4.qicore.QICoreTask.Output.ValueX.markdown:type_name -> google.fhir.r4.core.Markdown
	346,  // 2149: google.fhir.r4.qicore.QICoreTask.Output.ValueX.oid:type_name -> google.fhir.r4.core.Oid
	279,  // 2150: google.fhir.r4.qicore.QICoreTask.Output.ValueX.positive_int:type_name -> google.fhir.r4.core.PositiveInt
	271,  // 2151: google.fhir.r4.qicore.QICoreTask.Output.ValueX.string_value:type_name -> google.fhir.r4.core.String
	331,  // 2152: google.fhir.r4.qicore.QICoreTask.Output.ValueX.time:type_name -> google.fhir.r4.core.Time
	284,  // 2153: google.fhir.r4.qicore.QICoreTask.Output.ValueX.unsigned_int:type_name -> google.fhir.r4.core.UnsignedInt
	259,  // 2154: google.fhir.r4.qicore.QICoreTask.Output.ValueX.uri:type_name -> google.fhir.r4.core.Uri
	347,  // 2155: google.fhir.r4.qicore.QICoreTask.Output.ValueX.url:type_name -> google.fhir.r4.core.Url
	348,  // 2156: google.fhir.r4.qicore.QICoreTask.Output.ValueX.uuid:type_name -> google.fhir.r4.core.Uuid
	286,  // 2157: google.fhir.r4.qicore.QICoreTask.Output.ValueX.address:type_name -> google.fhir.r4.core.Address
	269,  // 2158: google.fhir.r4.qicore.QICoreTask.Output.ValueX.age:type_name -> google.fhir.r4.core.Age
	268,  // 2159: google.fhir.r4.qicore.QICoreTask.Output.ValueX.annotation:type_name -> google.fhir.r4.core.Annotation
	272,  // 2160: google.fhir.r4.qicore.QICoreTask.Output.ValueX.attachment:type_name -> google.fhir.r4.core.Attachment
	265,  // 2161: google.fhir.r4.qicore.QICoreTask.Output.ValueX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	281,  // 2162: google.fhir.r4.qicore.QICoreTask.Output.ValueX.coding:type_name -> google.fhir.r4.core.Coding
	275,  // 2163: google.fhir.r4.qicore.QICoreTask.Output.ValueX.contact_point:type_name -> google.fhir.r4.core.ContactPoint
	349,  // 2164: google.fhir.r4.qicore.QICoreTask.Output.ValueX.count:type_name -> google.fhir.r4.core.Count
	350,  // 2165: google.fhir.r4.qicore.QICoreTask.Output.ValueX.distance:type_name -> google.fhir.r4.core.Distance
	282,  // 2166: google.fhir.r4.qicore.QICoreTask.Output.ValueX.duration:type_name -> google.fhir.r4.core.Duration
	289,  // 2167: google.fhir.r4.qicore.QICoreTask.Output.ValueX.human_name:type_name -> google.fhir.r4.core.HumanName
	264,  // 2168: google.fhir.r4.qicore.QICoreTask.Output.ValueX.identifier:type_name -> google.fhir.r4.core.Identifier
	276,  // 2169: google.fhir.r4.qicore.QICoreTask.Output.ValueX.money:type_name -> google.fhir.r4.core.Money
	274,  // 2170: google.fhir.r4.qicore.QICoreTask.Output.ValueX.period:type_name -> google.fhir.r4.core.Period
	309,  // 2171: google.fhir.r4.qicore.QICoreTask.Output.ValueX.quantity:type_name -> google.fhir.r4.core.Quantity
	298,  // 2172: google.fhir.r4.qicore.QICoreTask.Output.ValueX.range:type_name -> google.fhir.r4.core.Range
	287,  // 2173: google.fhir.r4.qicore.QICoreTask.Output.ValueX.ratio:type_name -> google.fhir.r4.core.Ratio
	266,  // 2174: google.fhir.r4.qicore.QICoreTask.Output.ValueX.reference:type_name -> google.fhir.r4.core.Reference
	340,  // 2175: google.fhir.r4.qicore.QICoreTask.Output.ValueX.sampled_data:type_name -> google.fhir.r4.core.SampledData
	351,  // 2176: google.fhir.r4.qicore.QICoreTask.Output.ValueX.signature:type_name -> google.fhir.r4.core.Signature
	304,  // 2177: google.fhir.r4.qicore.QICoreTask.Output.ValueX.timing:type_name -> google.fhir.r4.core.Timing
	352,  // 2178: google.fhir.r4.qicore.QICoreTask.Output.ValueX.contact_detail:type_name -> google.fhir.r4.core.ContactDetail
	353,  // 2179: google.fhir.r4.qicore.QICoreTask.Output.ValueX.contributor:type_name -> google.fhir.r4.core.Contributor
	354,  // 2180: google.fhir.r4.qicore.QICoreTask.Output.ValueX.data_requirement:type_name -> google.fhir.r4.core.DataRequirement
	355,  // 2181: google.fhir.r4.qicore.QICoreTask.Output.ValueX.expression:type_name -> google.fhir.r4.core.Expression
	356,  // 2182: google.fhir.r4.qicore.QICoreTask.Output.ValueX.parameter_definition:type_name -> google.fhir.r4.core.ParameterDefinition
	357,  // 2183: google.fhir.r4.qicore.QICoreTask.Output.ValueX.related_artifact:type_name -> google.fhir.r4.core.RelatedArtifact
	358,  // 2184: google.fhir.r4.qicore.QICoreTask.Output.ValueX.trigger_definition:type_name -> google.fhir.r4.core.TriggerDefinition
	359,  // 2185: google.fhir.r4.qicore.QICoreTask.Output.ValueX.usage_context:type_name -> google.fhir.r4.core.UsageContext
	288,  // 2186: google.fhir.r4.qicore.QICoreTask.Output.ValueX.dosage:type_name -> google.fhir.r4.core.Dosage
	2187, // [2187:2187] is the sub-list for method output_type
	2187, // [2187:2187] is the sub-list for method input_type
	2187, // [2187:2187] is the sub-list for extension type_name
	2187, // [2187:2187] is the sub-list for extension extendee
	0,    // [0:2187] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r4_qicore_qicore_proto_init() }
func file_proto_google_fhir_proto_r4_qicore_qicore_proto_init() {
	if File_proto_google_fhir_proto_r4_qicore_qicore_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreAdverseEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreAllergyIntolerance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreBodyStructure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCarePlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCareTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCommunication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCommunicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCoverage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceUseStatementQICoreNotDoneExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDeviceUseStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDiagnosticReportLab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDiagnosticReportNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncounterEncounterProcedureExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreEncounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreFamilyMemberHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreGoal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreImagingStudy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreImmunization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreImmunizationEvaluation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreImmunizationRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationAdministration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationDispense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientMilitaryService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreNutritionOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreObservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreOrganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICorePatient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICorePractitioner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICorePractitionerRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreProcedure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreRelatedPerson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceRequestQICoreServiceRequestAppropriatenessScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreSpecimen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreSubstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreAdverseEvent_ActualityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreAdverseEvent_SuspectEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreAdverseEvent_SuspectEntity_Causality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreAllergyIntolerance_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreAllergyIntolerance_CategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreAllergyIntolerance_CriticalityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreAllergyIntolerance_OnsetX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreAllergyIntolerance_Reaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreAllergyIntolerance_Reaction_SeverityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCarePlan_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCarePlan_IntentCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCarePlan_Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCarePlan_Activity_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCarePlan_Activity_Detail_KindCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCarePlan_Activity_Detail_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCarePlan_Activity_Detail_ScheduledX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCarePlan_Activity_Detail_ProductX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCareTeam_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCareTeam_Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreClaim_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreClaim_UseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreClaim_RelatedClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreClaim_Payee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreClaim_CareTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreClaim_SupportingInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreClaim_Diagnosis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreClaim_Procedure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreClaim_Insurance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreClaim_Accident); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreClaim_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreClaim_SupportingInformation_TimingX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreClaim_SupportingInformation_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreClaim_Diagnosis_DiagnosisX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreClaim_Procedure_ProcedureX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreClaim_Accident_LocationX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreClaim_Item_ServicedX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreClaim_Item_LocationX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreClaim_Item_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreClaim_Item_Detail_SubDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCommunication_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCommunication_PriorityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCommunication_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCommunication_Payload_ContentX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCommunicationRequest_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCommunicationRequest_PriorityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCommunicationRequest_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCommunicationRequest_OccurrenceX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCommunicationRequest_Payload_ContentX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCondition_OnsetX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCondition_AbatementX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCondition_Stage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCondition_Evidence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCoverage_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCoverage_Class); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCoverage_CostToBeneficiary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCoverage_CostToBeneficiary_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreCoverage_CostToBeneficiary_Exemption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDevice_UdiCarrier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDevice_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDevice_DeviceName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDevice_Specialization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDevice_Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDevice_Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDevice_UdiCarrier_EntryTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDevice_DeviceName_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDeviceRequest_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDeviceRequest_IntentCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDeviceRequest_PriorityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDeviceRequest_CodeX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDeviceRequest_Parameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDeviceRequest_OccurrenceX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDeviceRequest_Parameter_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceUseStatementQICoreNotDoneExtension_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDeviceUseStatement_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDeviceUseStatement_TimingX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDiagnosticReportLab_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDiagnosticReportLab_EffectiveX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDiagnosticReportLab_Media); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDiagnosticReportNote_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDiagnosticReportNote_EffectiveX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreDiagnosticReportNote_Media); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreEncounter_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreEncounter_StatusHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreEncounter_ClassHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreEncounter_Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreEncounter_Diagnosis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreEncounter_Hospitalization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreEncounter_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreEncounter_StatusHistory_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreEncounter_Location_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreFamilyMemberHistory_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreFamilyMemberHistory_BornX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreFamilyMemberHistory_AgeX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreFamilyMemberHistory_DeceasedX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreFamilyMemberHistory_Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreFamilyMemberHistory_Condition_OnsetX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreFlag_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreGoal_LifecycleStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreGoal_StartX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreGoal_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreGoal_Target_DetailX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreGoal_Target_DueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreImagingStudy_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreImagingStudy_Series); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreImagingStudy_Series_Performer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreImagingStudy_Series_Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreImmunization_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreImmunization_OccurrenceX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreImmunization_Performer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreImmunization_Education); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreImmunization_Reaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreImmunization_ProtocolApplied); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreImmunization_ProtocolApplied_DoseNumberX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreImmunization_ProtocolApplied_SeriesDosesX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreImmunizationEvaluation_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreImmunizationEvaluation_DoseNumberX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreImmunizationEvaluation_SeriesDosesX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreImmunizationRecommendation_Recommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreImmunizationRecommendation_Recommendation_DateCriterion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreImmunizationRecommendation_Recommendation_DoseNumberX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreImmunizationRecommendation_Recommendation_SeriesDosesX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreLocation_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreLocation_ModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreLocation_Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreLocation_HoursOfOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreLocation_HoursOfOperation_DaysOfWeekCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedication_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedication_Ingredient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedication_Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedication_Ingredient_ItemX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationAdministration_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationAdministration_MedicationX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationAdministration_EffectiveX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationAdministration_Performer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationAdministration_Dosage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationAdministration_Dosage_RateX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationDispense_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationDispense_StatusReasonX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationDispense_MedicationX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationDispense_Performer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationDispense_Substitution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationRequest_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationRequest_IntentCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationRequest_PriorityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationRequest_ReportedX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationRequest_MedicationX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationRequest_DispenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationRequest_Substitution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationRequest_DispenseRequest_InitialFill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationRequest_Substitution_AllowedX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationStatement_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationStatement_MedicationX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreMedicationStatement_EffectiveX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreNutritionOrder_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreNutritionOrder_IntentCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreNutritionOrder_OralDiet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreNutritionOrder_Supplement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreNutritionOrder_EnteralFormula); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreNutritionOrder_OralDiet_Nutrient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreNutritionOrder_OralDiet_Texture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreNutritionOrder_EnteralFormula_Administration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreNutritionOrder_EnteralFormula_Administration_RateX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreObservation_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreObservation_EffectiveX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreObservation_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreObservation_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreObservation_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreObservation_Component_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreOrganization_Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICorePatient_GenderCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICorePatient_DeceasedX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICorePatient_MultipleBirthX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICorePatient_Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICorePatient_Communication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICorePatient_Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICorePatient_Contact_GenderCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICorePatient_Link_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICorePractitioner_GenderCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICorePractitioner_Qualification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICorePractitionerRole_AvailableTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICorePractitionerRole_NotAvailable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICorePractitionerRole_AvailableTime_DaysOfWeekCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreProcedure_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreProcedure_PerformedX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreProcedure_Performer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreProcedure_FocalDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreRelatedPerson_GenderCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreRelatedPerson_Communication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreServiceRequest_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreServiceRequest_IntentCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreServiceRequest_PriorityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreServiceRequest_QuantityX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreServiceRequest_OccurrenceX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreServiceRequest_AsNeededX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreSpecimen_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreSpecimen_Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreSpecimen_Processing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreSpecimen_Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreSpecimen_Collection_CollectedX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreSpecimen_Collection_FastingStatusX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreSpecimen_Processing_TimeX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreSpecimen_Container_AdditiveX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreSubstance_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreSubstance_Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreSubstance_Ingredient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreSubstance_Ingredient_SubstanceX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreTask_Restriction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreTask_Parameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreTask_Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreTask_Parameter_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QICoreTask_Output_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[51].OneofWrappers = []interface{}{
		(*QICoreAllergyIntolerance_OnsetX_DateTime)(nil),
		(*QICoreAllergyIntolerance_OnsetX_Age)(nil),
		(*QICoreAllergyIntolerance_OnsetX_Period)(nil),
		(*QICoreAllergyIntolerance_OnsetX_Range)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[60].OneofWrappers = []interface{}{
		(*QICoreCarePlan_Activity_Detail_ScheduledX_Timing)(nil),
		(*QICoreCarePlan_Activity_Detail_ScheduledX_Period)(nil),
		(*QICoreCarePlan_Activity_Detail_ScheduledX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[61].OneofWrappers = []interface{}{
		(*QICoreCarePlan_Activity_Detail_ProductX_CodeableConcept)(nil),
		(*QICoreCarePlan_Activity_Detail_ProductX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[75].OneofWrappers = []interface{}{
		(*QICoreClaim_SupportingInformation_TimingX_Date)(nil),
		(*QICoreClaim_SupportingInformation_TimingX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[76].OneofWrappers = []interface{}{
		(*QICoreClaim_SupportingInformation_ValueX_Boolean)(nil),
		(*QICoreClaim_SupportingInformation_ValueX_StringValue)(nil),
		(*QICoreClaim_SupportingInformation_ValueX_Quantity)(nil),
		(*QICoreClaim_SupportingInformation_ValueX_Attachment)(nil),
		(*QICoreClaim_SupportingInformation_ValueX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[77].OneofWrappers = []interface{}{
		(*QICoreClaim_Diagnosis_DiagnosisX_CodeableConcept)(nil),
		(*QICoreClaim_Diagnosis_DiagnosisX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[78].OneofWrappers = []interface{}{
		(*QICoreClaim_Procedure_ProcedureX_CodeableConcept)(nil),
		(*QICoreClaim_Procedure_ProcedureX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[79].OneofWrappers = []interface{}{
		(*QICoreClaim_Accident_LocationX_Address)(nil),
		(*QICoreClaim_Accident_LocationX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[80].OneofWrappers = []interface{}{
		(*QICoreClaim_Item_ServicedX_Date)(nil),
		(*QICoreClaim_Item_ServicedX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[81].OneofWrappers = []interface{}{
		(*QICoreClaim_Item_LocationX_CodeableConcept)(nil),
		(*QICoreClaim_Item_LocationX_Address)(nil),
		(*QICoreClaim_Item_LocationX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[87].OneofWrappers = []interface{}{
		(*QICoreCommunication_Payload_ContentX_StringValue)(nil),
		(*QICoreCommunication_Payload_ContentX_Attachment)(nil),
		(*QICoreCommunication_Payload_ContentX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[91].OneofWrappers = []interface{}{
		(*QICoreCommunicationRequest_OccurrenceX_DateTime)(nil),
		(*QICoreCommunicationRequest_OccurrenceX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[92].OneofWrappers = []interface{}{
		(*QICoreCommunicationRequest_Payload_ContentX_StringValue)(nil),
		(*QICoreCommunicationRequest_Payload_ContentX_Attachment)(nil),
		(*QICoreCommunicationRequest_Payload_ContentX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[93].OneofWrappers = []interface{}{
		(*QICoreCondition_OnsetX_DateTime)(nil),
		(*QICoreCondition_OnsetX_Age)(nil),
		(*QICoreCondition_OnsetX_Period)(nil),
		(*QICoreCondition_OnsetX_Range)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[94].OneofWrappers = []interface{}{
		(*QICoreCondition_AbatementX_DateTime)(nil),
		(*QICoreCondition_AbatementX_Age)(nil),
		(*QICoreCondition_AbatementX_Period)(nil),
		(*QICoreCondition_AbatementX_Range)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[100].OneofWrappers = []interface{}{
		(*QICoreCoverage_CostToBeneficiary_ValueX_Quantity)(nil),
		(*QICoreCoverage_CostToBeneficiary_ValueX_Money)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[113].OneofWrappers = []interface{}{
		(*QICoreDeviceRequest_CodeX_Reference)(nil),
		(*QICoreDeviceRequest_CodeX_CodeableConcept)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[115].OneofWrappers = []interface{}{
		(*QICoreDeviceRequest_OccurrenceX_DateTime)(nil),
		(*QICoreDeviceRequest_OccurrenceX_Period)(nil),
		(*QICoreDeviceRequest_OccurrenceX_Timing)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[116].OneofWrappers = []interface{}{
		(*QICoreDeviceRequest_Parameter_ValueX_CodeableConcept)(nil),
		(*QICoreDeviceRequest_Parameter_ValueX_Quantity)(nil),
		(*QICoreDeviceRequest_Parameter_ValueX_Range)(nil),
		(*QICoreDeviceRequest_Parameter_ValueX_Boolean)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[117].OneofWrappers = []interface{}{
		(*DeviceUseStatementQICoreNotDoneExtension_ValueX_Boolean)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[119].OneofWrappers = []interface{}{
		(*QICoreDeviceUseStatement_TimingX_Timing)(nil),
		(*QICoreDeviceUseStatement_TimingX_Period)(nil),
		(*QICoreDeviceUseStatement_TimingX_DateTime)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[121].OneofWrappers = []interface{}{
		(*QICoreDiagnosticReportLab_EffectiveX_DateTime)(nil),
		(*QICoreDiagnosticReportLab_EffectiveX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[124].OneofWrappers = []interface{}{
		(*QICoreDiagnosticReportNote_EffectiveX_DateTime)(nil),
		(*QICoreDiagnosticReportNote_EffectiveX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[136].OneofWrappers = []interface{}{
		(*QICoreFamilyMemberHistory_BornX_Period)(nil),
		(*QICoreFamilyMemberHistory_BornX_Date)(nil),
		(*QICoreFamilyMemberHistory_BornX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[137].OneofWrappers = []interface{}{
		(*QICoreFamilyMemberHistory_AgeX_Age)(nil),
		(*QICoreFamilyMemberHistory_AgeX_Range)(nil),
		(*QICoreFamilyMemberHistory_AgeX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[138].OneofWrappers = []interface{}{
		(*QICoreFamilyMemberHistory_DeceasedX_Boolean)(nil),
		(*QICoreFamilyMemberHistory_DeceasedX_Age)(nil),
		(*QICoreFamilyMemberHistory_DeceasedX_Range)(nil),
		(*QICoreFamilyMemberHistory_DeceasedX_Date)(nil),
		(*QICoreFamilyMemberHistory_DeceasedX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[140].OneofWrappers = []interface{}{
		(*QICoreFamilyMemberHistory_Condition_OnsetX_Age)(nil),
		(*QICoreFamilyMemberHistory_Condition_OnsetX_Range)(nil),
		(*QICoreFamilyMemberHistory_Condition_OnsetX_Period)(nil),
		(*QICoreFamilyMemberHistory_Condition_OnsetX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[143].OneofWrappers = []interface{}{
		(*QICoreGoal_StartX_Date)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[145].OneofWrappers = []interface{}{
		(*QICoreGoal_Target_DetailX_Quantity)(nil),
		(*QICoreGoal_Target_DetailX_Range)(nil),
		(*QICoreGoal_Target_DetailX_CodeableConcept)(nil),
		(*QICoreGoal_Target_DetailX_StringValue)(nil),
		(*QICoreGoal_Target_DetailX_Boolean)(nil),
		(*QICoreGoal_Target_DetailX_Integer)(nil),
		(*QICoreGoal_Target_DetailX_Ratio)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[146].OneofWrappers = []interface{}{
		(*QICoreGoal_Target_DueX_Date)(nil),
		(*QICoreGoal_Target_DueX_Duration)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[152].OneofWrappers = []interface{}{
		(*QICoreImmunization_OccurrenceX_DateTime)(nil),
		(*QICoreImmunization_OccurrenceX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[157].OneofWrappers = []interface{}{
		(*QICoreImmunization_ProtocolApplied_DoseNumberX_PositiveInt)(nil),
		(*QICoreImmunization_ProtocolApplied_DoseNumberX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[158].OneofWrappers = []interface{}{
		(*QICoreImmunization_ProtocolApplied_SeriesDosesX_PositiveInt)(nil),
		(*QICoreImmunization_ProtocolApplied_SeriesDosesX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[160].OneofWrappers = []interface{}{
		(*QICoreImmunizationEvaluation_DoseNumberX_PositiveInt)(nil),
		(*QICoreImmunizationEvaluation_DoseNumberX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[161].OneofWrappers = []interface{}{
		(*QICoreImmunizationEvaluation_SeriesDosesX_PositiveInt)(nil),
		(*QICoreImmunizationEvaluation_SeriesDosesX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[164].OneofWrappers = []interface{}{
		(*QICoreImmunizationRecommendation_Recommendation_DoseNumberX_PositiveInt)(nil),
		(*QICoreImmunizationRecommendation_Recommendation_DoseNumberX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[165].OneofWrappers = []interface{}{
		(*QICoreImmunizationRecommendation_Recommendation_SeriesDosesX_PositiveInt)(nil),
		(*QICoreImmunizationRecommendation_Recommendation_SeriesDosesX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[174].OneofWrappers = []interface{}{
		(*QICoreMedication_Ingredient_ItemX_CodeableConcept)(nil),
		(*QICoreMedication_Ingredient_ItemX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[176].OneofWrappers = []interface{}{
		(*QICoreMedicationAdministration_MedicationX_CodeableConcept)(nil),
		(*QICoreMedicationAdministration_MedicationX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[177].OneofWrappers = []interface{}{
		(*QICoreMedicationAdministration_EffectiveX_DateTime)(nil),
		(*QICoreMedicationAdministration_EffectiveX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[180].OneofWrappers = []interface{}{
		(*QICoreMedicationAdministration_Dosage_RateX_Ratio)(nil),
		(*QICoreMedicationAdministration_Dosage_RateX_Quantity)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[182].OneofWrappers = []interface{}{
		(*QICoreMedicationDispense_StatusReasonX_CodeableConcept)(nil),
		(*QICoreMedicationDispense_StatusReasonX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[183].OneofWrappers = []interface{}{
		(*QICoreMedicationDispense_MedicationX_CodeableConcept)(nil),
		(*QICoreMedicationDispense_MedicationX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[189].OneofWrappers = []interface{}{
		(*QICoreMedicationRequest_ReportedX_Boolean)(nil),
		(*QICoreMedicationRequest_ReportedX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[190].OneofWrappers = []interface{}{
		(*QICoreMedicationRequest_MedicationX_CodeableConcept)(nil),
		(*QICoreMedicationRequest_MedicationX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[194].OneofWrappers = []interface{}{
		(*QICoreMedicationRequest_Substitution_AllowedX_Boolean)(nil),
		(*QICoreMedicationRequest_Substitution_AllowedX_CodeableConcept)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[196].OneofWrappers = []interface{}{
		(*QICoreMedicationStatement_MedicationX_CodeableConcept)(nil),
		(*QICoreMedicationStatement_MedicationX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[197].OneofWrappers = []interface{}{
		(*QICoreMedicationStatement_EffectiveX_DateTime)(nil),
		(*QICoreMedicationStatement_EffectiveX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[206].OneofWrappers = []interface{}{
		(*QICoreNutritionOrder_EnteralFormula_Administration_RateX_Quantity)(nil),
		(*QICoreNutritionOrder_EnteralFormula_Administration_RateX_Ratio)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[208].OneofWrappers = []interface{}{
		(*QICoreObservation_EffectiveX_DateTime)(nil),
		(*QICoreObservation_EffectiveX_Period)(nil),
		(*QICoreObservation_EffectiveX_Timing)(nil),
		(*QICoreObservation_EffectiveX_Instant)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[209].OneofWrappers = []interface{}{
		(*QICoreObservation_ValueX_Quantity)(nil),
		(*QICoreObservation_ValueX_CodeableConcept)(nil),
		(*QICoreObservation_ValueX_StringValue)(nil),
		(*QICoreObservation_ValueX_Boolean)(nil),
		(*QICoreObservation_ValueX_Integer)(nil),
		(*QICoreObservation_ValueX_Range)(nil),
		(*QICoreObservation_ValueX_Ratio)(nil),
		(*QICoreObservation_ValueX_SampledData)(nil),
		(*QICoreObservation_ValueX_Time)(nil),
		(*QICoreObservation_ValueX_DateTime)(nil),
		(*QICoreObservation_ValueX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[212].OneofWrappers = []interface{}{
		(*QICoreObservation_Component_ValueX_Quantity)(nil),
		(*QICoreObservation_Component_ValueX_CodeableConcept)(nil),
		(*QICoreObservation_Component_ValueX_StringValue)(nil),
		(*QICoreObservation_Component_ValueX_Boolean)(nil),
		(*QICoreObservation_Component_ValueX_Integer)(nil),
		(*QICoreObservation_Component_ValueX_Range)(nil),
		(*QICoreObservation_Component_ValueX_Ratio)(nil),
		(*QICoreObservation_Component_ValueX_SampledData)(nil),
		(*QICoreObservation_Component_ValueX_Time)(nil),
		(*QICoreObservation_Component_ValueX_DateTime)(nil),
		(*QICoreObservation_Component_ValueX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[215].OneofWrappers = []interface{}{
		(*QICorePatient_DeceasedX_Boolean)(nil),
		(*QICorePatient_DeceasedX_DateTime)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[216].OneofWrappers = []interface{}{
		(*QICorePatient_MultipleBirthX_Boolean)(nil),
		(*QICorePatient_MultipleBirthX_Integer)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[228].OneofWrappers = []interface{}{
		(*QICoreProcedure_PerformedX_DateTime)(nil),
		(*QICoreProcedure_PerformedX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[233].OneofWrappers = []interface{}{
		(*ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX_Code)(nil),
		(*ServiceRequestQICoreServiceRequestAppropriatenessScore_ValueX_Decimal)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[237].OneofWrappers = []interface{}{
		(*QICoreServiceRequest_QuantityX_Quantity)(nil),
		(*QICoreServiceRequest_QuantityX_Ratio)(nil),
		(*QICoreServiceRequest_QuantityX_Range)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[238].OneofWrappers = []interface{}{
		(*QICoreServiceRequest_OccurrenceX_DateTime)(nil),
		(*QICoreServiceRequest_OccurrenceX_Period)(nil),
		(*QICoreServiceRequest_OccurrenceX_Timing)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[239].OneofWrappers = []interface{}{
		(*QICoreServiceRequest_AsNeededX_Boolean)(nil),
		(*QICoreServiceRequest_AsNeededX_CodeableConcept)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[244].OneofWrappers = []interface{}{
		(*QICoreSpecimen_Collection_CollectedX_DateTime)(nil),
		(*QICoreSpecimen_Collection_CollectedX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[245].OneofWrappers = []interface{}{
		(*QICoreSpecimen_Collection_FastingStatusX_CodeableConcept)(nil),
		(*QICoreSpecimen_Collection_FastingStatusX_Duration)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[246].OneofWrappers = []interface{}{
		(*QICoreSpecimen_Processing_TimeX_DateTime)(nil),
		(*QICoreSpecimen_Processing_TimeX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[247].OneofWrappers = []interface{}{
		(*QICoreSpecimen_Container_AdditiveX_CodeableConcept)(nil),
		(*QICoreSpecimen_Container_AdditiveX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[251].OneofWrappers = []interface{}{
		(*QICoreSubstance_Ingredient_SubstanceX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[255].OneofWrappers = []interface{}{
		(*QICoreTask_Parameter_ValueX_Base64Binary)(nil),
		(*QICoreTask_Parameter_ValueX_Boolean)(nil),
		(*QICoreTask_Parameter_ValueX_Canonical)(nil),
		(*QICoreTask_Parameter_ValueX_Code)(nil),
		(*QICoreTask_Parameter_ValueX_Date)(nil),
		(*QICoreTask_Parameter_ValueX_DateTime)(nil),
		(*QICoreTask_Parameter_ValueX_Decimal)(nil),
		(*QICoreTask_Parameter_ValueX_Id)(nil),
		(*QICoreTask_Parameter_ValueX_Instant)(nil),
		(*QICoreTask_Parameter_ValueX_Integer)(nil),
		(*QICoreTask_Parameter_ValueX_Markdown)(nil),
		(*QICoreTask_Parameter_ValueX_Oid)(nil),
		(*QICoreTask_Parameter_ValueX_PositiveInt)(nil),
		(*QICoreTask_Parameter_ValueX_StringValue)(nil),
		(*QICoreTask_Parameter_ValueX_Time)(nil),
		(*QICoreTask_Parameter_ValueX_UnsignedInt)(nil),
		(*QICoreTask_Parameter_ValueX_Uri)(nil),
		(*QICoreTask_Parameter_ValueX_Url)(nil),
		(*QICoreTask_Parameter_ValueX_Uuid)(nil),
		(*QICoreTask_Parameter_ValueX_Address)(nil),
		(*QICoreTask_Parameter_ValueX_Age)(nil),
		(*QICoreTask_Parameter_ValueX_Annotation)(nil),
		(*QICoreTask_Parameter_ValueX_Attachment)(nil),
		(*QICoreTask_Parameter_ValueX_CodeableConcept)(nil),
		(*QICoreTask_Parameter_ValueX_Coding)(nil),
		(*QICoreTask_Parameter_ValueX_ContactPoint)(nil),
		(*QICoreTask_Parameter_ValueX_Count)(nil),
		(*QICoreTask_Parameter_ValueX_Distance)(nil),
		(*QICoreTask_Parameter_ValueX_Duration)(nil),
		(*QICoreTask_Parameter_ValueX_HumanName)(nil),
		(*QICoreTask_Parameter_ValueX_Identifier)(nil),
		(*QICoreTask_Parameter_ValueX_Money)(nil),
		(*QICoreTask_Parameter_ValueX_Period)(nil),
		(*QICoreTask_Parameter_ValueX_Quantity)(nil),
		(*QICoreTask_Parameter_ValueX_Range)(nil),
		(*QICoreTask_Parameter_ValueX_Ratio)(nil),
		(*QICoreTask_Parameter_ValueX_Reference)(nil),
		(*QICoreTask_Parameter_ValueX_SampledData)(nil),
		(*QICoreTask_Parameter_ValueX_Signature)(nil),
		(*QICoreTask_Parameter_ValueX_Timing)(nil),
		(*QICoreTask_Parameter_ValueX_ContactDetail)(nil),
		(*QICoreTask_Parameter_ValueX_Contributor)(nil),
		(*QICoreTask_Parameter_ValueX_DataRequirement)(nil),
		(*QICoreTask_Parameter_ValueX_Expression)(nil),
		(*QICoreTask_Parameter_ValueX_ParameterDefinition)(nil),
		(*QICoreTask_Parameter_ValueX_RelatedArtifact)(nil),
		(*QICoreTask_Parameter_ValueX_TriggerDefinition)(nil),
		(*QICoreTask_Parameter_ValueX_UsageContext)(nil),
		(*QICoreTask_Parameter_ValueX_Dosage)(nil),
	}
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes[256].OneofWrappers = []interface{}{
		(*QICoreTask_Output_ValueX_Base64Binary)(nil),
		(*QICoreTask_Output_ValueX_Boolean)(nil),
		(*QICoreTask_Output_ValueX_Canonical)(nil),
		(*QICoreTask_Output_ValueX_Code)(nil),
		(*QICoreTask_Output_ValueX_Date)(nil),
		(*QICoreTask_Output_ValueX_DateTime)(nil),
		(*QICoreTask_Output_ValueX_Decimal)(nil),
		(*QICoreTask_Output_ValueX_Id)(nil),
		(*QICoreTask_Output_ValueX_Instant)(nil),
		(*QICoreTask_Output_ValueX_Integer)(nil),
		(*QICoreTask_Output_ValueX_Markdown)(nil),
		(*QICoreTask_Output_ValueX_Oid)(nil),
		(*QICoreTask_Output_ValueX_PositiveInt)(nil),
		(*QICoreTask_Output_ValueX_StringValue)(nil),
		(*QICoreTask_Output_ValueX_Time)(nil),
		(*QICoreTask_Output_ValueX_UnsignedInt)(nil),
		(*QICoreTask_Output_ValueX_Uri)(nil),
		(*QICoreTask_Output_ValueX_Url)(nil),
		(*QICoreTask_Output_ValueX_Uuid)(nil),
		(*QICoreTask_Output_ValueX_Address)(nil),
		(*QICoreTask_Output_ValueX_Age)(nil),
		(*QICoreTask_Output_ValueX_Annotation)(nil),
		(*QICoreTask_Output_ValueX_Attachment)(nil),
		(*QICoreTask_Output_ValueX_CodeableConcept)(nil),
		(*QICoreTask_Output_ValueX_Coding)(nil),
		(*QICoreTask_Output_ValueX_ContactPoint)(nil),
		(*QICoreTask_Output_ValueX_Count)(nil),
		(*QICoreTask_Output_ValueX_Distance)(nil),
		(*QICoreTask_Output_ValueX_Duration)(nil),
		(*QICoreTask_Output_ValueX_HumanName)(nil),
		(*QICoreTask_Output_ValueX_Identifier)(nil),
		(*QICoreTask_Output_ValueX_Money)(nil),
		(*QICoreTask_Output_ValueX_Period)(nil),
		(*QICoreTask_Output_ValueX_Quantity)(nil),
		(*QICoreTask_Output_ValueX_Range)(nil),
		(*QICoreTask_Output_ValueX_Ratio)(nil),
		(*QICoreTask_Output_ValueX_Reference)(nil),
		(*QICoreTask_Output_ValueX_SampledData)(nil),
		(*QICoreTask_Output_ValueX_Signature)(nil),
		(*QICoreTask_Output_ValueX_Timing)(nil),
		(*QICoreTask_Output_ValueX_ContactDetail)(nil),
		(*QICoreTask_Output_ValueX_Contributor)(nil),
		(*QICoreTask_Output_ValueX_DataRequirement)(nil),
		(*QICoreTask_Output_ValueX_Expression)(nil),
		(*QICoreTask_Output_ValueX_ParameterDefinition)(nil),
		(*QICoreTask_Output_ValueX_RelatedArtifact)(nil),
		(*QICoreTask_Output_ValueX_TriggerDefinition)(nil),
		(*QICoreTask_Output_ValueX_UsageContext)(nil),
		(*QICoreTask_Output_ValueX_Dosage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   257,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r4_qicore_qicore_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r4_qicore_qicore_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r4_qicore_qicore_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r4_qicore_qicore_proto = out.File
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_rawDesc = nil
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_goTypes = nil
	file_proto_google_fhir_proto_r4_qicore_qicore_proto_depIdxs = nil
}

//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r4/uscore.proto

package uscore_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/datatypes_go_proto"
	valuesets_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/valuesets_go_proto"
	uscore_codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/uscore_codes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for USCoreProcedureProfile.
// An action that is being or was performed on a patient.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-procedure
type USCoreProcedureProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Identifiers for this procedure
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Instantiates FHIR protocol or definition
	InstantiatesCanonical []*datatypes_go_proto.Canonical `protobuf:"bytes,11,rep,name=instantiates_canonical,json=instantiatesCanonical,proto3" json:"instantiates_canonical,omitempty"`
	// Instantiates external protocol or definition
	InstantiatesUri []*datatypes_go_proto.Uri `protobuf:"bytes,12,rep,name=instantiates_uri,json=instantiatesUri,proto3" json:"instantiates_uri,omitempty"`
	// A request for this procedure
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,13,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// Part of referenced event
	PartOf []*datatypes_go_proto.Reference    `protobuf:"bytes,14,rep,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	Status *USCoreProcedureProfile_StatusCode `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	// Reason for current status
	StatusReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// Classification of the procedure
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,17,opt,name=category,proto3" json:"category,omitempty"`
	// Procedure codes from SNOMED CT, CPT, or HCPCS II
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,opt,name=code,proto3" json:"code,omitempty"`
	// Who the procedure was performed on
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,19,opt,name=subject,proto3" json:"subject,omitempty"`
	// Encounter created as part of
	Encounter *datatypes_go_proto.Reference      `protobuf:"bytes,20,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Performed *USCoreProcedureProfile_PerformedX `protobuf:"bytes,21,opt,name=performed,proto3" json:"performed,omitempty"`
	// Who recorded the procedure
	Recorder *datatypes_go_proto.Reference `protobuf:"bytes,22,opt,name=recorder,proto3" json:"recorder,omitempty"`
	// Person who asserts this procedure
	Asserter  *datatypes_go_proto.Reference       `protobuf:"bytes,23,opt,name=asserter,proto3" json:"asserter,omitempty"`
	Performer []*USCoreProcedureProfile_Performer `protobuf:"bytes,24,rep,name=performer,proto3" json:"performer,omitempty"`
	// Where the procedure happened
	Location *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=location,proto3" json:"location,omitempty"`
	// Coded reason procedure performed
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,26,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// The justification that the procedure was performed
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,27,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// Target body sites
	BodySite []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,28,rep,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// The result of procedure
	Outcome *datatypes_go_proto.CodeableConcept `protobuf:"bytes,29,opt,name=outcome,proto3" json:"outcome,omitempty"`
	// Any report resulting from the procedure
	Report []*datatypes_go_proto.Reference `protobuf:"bytes,30,rep,name=report,proto3" json:"report,omitempty"`
	// Complication following the procedure
	Complication []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,31,rep,name=complication,proto3" json:"complication,omitempty"`
	// A condition that is a result of the procedure
	ComplicationDetail []*datatypes_go_proto.Reference `protobuf:"bytes,32,rep,name=complication_detail,json=complicationDetail,proto3" json:"complication_detail,omitempty"`
	// Instructions for follow up
	FollowUp []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,33,rep,name=follow_up,json=followUp,proto3" json:"follow_up,omitempty"`
	// Additional information about the procedure
	Note        []*datatypes_go_proto.Annotation      `protobuf:"bytes,34,rep,name=note,proto3" json:"note,omitempty"`
	FocalDevice []*USCoreProcedureProfile_FocalDevice `protobuf:"bytes,35,rep,name=focal_device,json=focalDevice,proto3" json:"focal_device,omitempty"`
	// Items used during procedure
	UsedReference []*datatypes_go_proto.Reference `protobuf:"bytes,36,rep,name=used_reference,json=usedReference,proto3" json:"used_reference,omitempty"`
	// Coded items used during the procedure
	UsedCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,37,rep,name=used_code,json=usedCode,proto3" json:"used_code,omitempty"`
}

func (x *USCoreProcedureProfile) Reset() {
	*x = USCoreProcedureProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreProcedureProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreProcedureProfile) ProtoMessage() {}

func (x *USCoreProcedureProfile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreProcedureProfile.ProtoReflect.Descriptor instead.
func (*USCoreProcedureProfile) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{0}
}

func (x *USCoreProcedureProfile) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreProcedureProfile) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *USCoreProcedureProfile) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *USCoreProcedureProfile) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *USCoreProcedureProfile) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *USCoreProcedureProfile) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *USCoreProcedureProfile) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreProcedureProfile) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreProcedureProfile) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *USCoreProcedureProfile) GetInstantiatesCanonical() []*datatypes_go_proto.Canonical {
	if x != nil {
		return x.InstantiatesCanonical
	}
	return nil
}

func (x *USCoreProcedureProfile) GetInstantiatesUri() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.InstantiatesUri
	}
	return nil
}

func (x *USCoreProcedureProfile) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *USCoreProcedureProfile) GetPartOf() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *USCoreProcedureProfile) GetStatus() *USCoreProcedureProfile_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *USCoreProcedureProfile) GetStatusReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

func (x *USCoreProcedureProfile) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *USCoreProcedureProfile) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *USCoreProcedureProfile) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *USCoreProcedureProfile) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *USCoreProcedureProfile) GetPerformed() *USCoreProcedureProfile_PerformedX {
	if x != nil {
		return x.Performed
	}
	return nil
}

func (x *USCoreProcedureProfile) GetRecorder() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Recorder
	}
	return nil
}

func (x *USCoreProcedureProfile) GetAsserter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Asserter
	}
	return nil
}

func (x *USCoreProcedureProfile) GetPerformer() []*USCoreProcedureProfile_Performer {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *USCoreProcedureProfile) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *USCoreProcedureProfile) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *USCoreProcedureProfile) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *USCoreProcedureProfile) GetBodySite() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *USCoreProcedureProfile) GetOutcome() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *USCoreProcedureProfile) GetReport() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *USCoreProcedureProfile) GetComplication() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Complication
	}
	return nil
}

func (x *USCoreProcedureProfile) GetComplicationDetail() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ComplicationDetail
	}
	return nil
}

func (x *USCoreProcedureProfile) GetFollowUp() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.FollowUp
	}
	return nil
}

func (x *USCoreProcedureProfile) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *USCoreProcedureProfile) GetFocalDevice() []*USCoreProcedureProfile_FocalDevice {
	if x != nil {
		return x.FocalDevice
	}
	return nil
}

func (x *USCoreProcedureProfile) GetUsedReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.UsedReference
	}
	return nil
}

func (x *USCoreProcedureProfile) GetUsedCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.UsedCode
	}
	return nil
}

// Auto-generated from StructureDefinition for USCorePractitionerProfile.
// A person with a  formal responsibility in the provisioning of healthcare or
// related services. See
// http://hl7.org/fhir/us/core/StructureDefinition/us-core-practitioner
type USCorePractitionerProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// An identifier for the person as this agent
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Whether this practitioner's record is in active use
	Active *datatypes_go_proto.Boolean `protobuf:"bytes,11,opt,name=active,proto3" json:"active,omitempty"`
	// The name(s) associated with the practitioner
	Name []*datatypes_go_proto.HumanName `protobuf:"bytes,12,rep,name=name,proto3" json:"name,omitempty"`
	// A contact detail for the practitioner (that apply to all roles)
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,13,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// Address(es) of the practitioner that are not role specific (typically home
	// address)
	Address []*datatypes_go_proto.Address         `protobuf:"bytes,14,rep,name=address,proto3" json:"address,omitempty"`
	Gender  *USCorePractitionerProfile_GenderCode `protobuf:"bytes,15,opt,name=gender,proto3" json:"gender,omitempty"`
	// The date  on which the practitioner was born
	BirthDate *datatypes_go_proto.Date `protobuf:"bytes,16,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
	// Image of the person
	Photo         []*datatypes_go_proto.Attachment           `protobuf:"bytes,17,rep,name=photo,proto3" json:"photo,omitempty"`
	Qualification []*USCorePractitionerProfile_Qualification `protobuf:"bytes,18,rep,name=qualification,proto3" json:"qualification,omitempty"`
	// A language the practitioner can use in patient communication
	Communication []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,19,rep,name=communication,proto3" json:"communication,omitempty"`
}

func (x *USCorePractitionerProfile) Reset() {
	*x = USCorePractitionerProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePractitionerProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePractitionerProfile) ProtoMessage() {}

func (x *USCorePractitionerProfile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePractitionerProfile.ProtoReflect.Descriptor instead.
func (*USCorePractitionerProfile) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{1}
}

func (x *USCorePractitionerProfile) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePractitionerProfile) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *USCorePractitionerProfile) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *USCorePractitionerProfile) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *USCorePractitionerProfile) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *USCorePractitionerProfile) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *USCorePractitionerProfile) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCorePractitionerProfile) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCorePractitionerProfile) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *USCorePractitionerProfile) GetActive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *USCorePractitionerProfile) GetName() []*datatypes_go_proto.HumanName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *USCorePractitionerProfile) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *USCorePractitionerProfile) GetAddress() []*datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *USCorePractitionerProfile) GetGender() *USCorePractitionerProfile_GenderCode {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *USCorePractitionerProfile) GetBirthDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.BirthDate
	}
	return nil
}

func (x *USCorePractitionerProfile) GetPhoto() []*datatypes_go_proto.Attachment {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *USCorePractitionerProfile) GetQualification() []*USCorePractitionerProfile_Qualification {
	if x != nil {
		return x.Qualification
	}
	return nil
}

func (x *USCorePractitionerProfile) GetCommunication() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Communication
	}
	return nil
}

// Auto-generated from StructureDefinition for
// USCoreDiagnosticReportProfileLaboratoryReporting. A Diagnostic report - a
// combination of request information, atomic results, images, interpretation,
// as well as formatted reports. See
// http://hl7.org/fhir/us/core/StructureDefinition/us-core-diagnosticreport-lab
type USCoreDiagnosticReportProfileLaboratoryReporting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier for report
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// What was requested
	BasedOn []*datatypes_go_proto.Reference                              `protobuf:"bytes,11,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	Status  *USCoreDiagnosticReportProfileLaboratoryReporting_StatusCode `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// Service category
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,rep,name=category,proto3" json:"category,omitempty"`
	// US Core Laboratory Report Order Code
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=code,proto3" json:"code,omitempty"`
	// The subject of the report - usually, but not always, the patient
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=subject,proto3" json:"subject,omitempty"`
	// Health care event when test ordered
	Encounter *datatypes_go_proto.Reference                                `protobuf:"bytes,16,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Effective *USCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX `protobuf:"bytes,17,opt,name=effective,proto3" json:"effective,omitempty"`
	// DateTime this version was made
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,18,opt,name=issued,proto3" json:"issued,omitempty"`
	// Responsible Diagnostic Service
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,19,rep,name=performer,proto3" json:"performer,omitempty"`
	// Primary result interpreter
	ResultsInterpreter []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=results_interpreter,json=resultsInterpreter,proto3" json:"results_interpreter,omitempty"`
	// Specimens this report is based on
	Specimen []*datatypes_go_proto.Reference `protobuf:"bytes,21,rep,name=specimen,proto3" json:"specimen,omitempty"`
	// Observations
	Result []*datatypes_go_proto.Reference `protobuf:"bytes,22,rep,name=result,proto3" json:"result,omitempty"`
	// Reference to full details of imaging associated with the diagnostic report
	ImagingStudy []*datatypes_go_proto.Reference                           `protobuf:"bytes,23,rep,name=imaging_study,json=imagingStudy,proto3" json:"imaging_study,omitempty"`
	Media        []*USCoreDiagnosticReportProfileLaboratoryReporting_Media `protobuf:"bytes,24,rep,name=media,proto3" json:"media,omitempty"`
	// Clinical conclusion (interpretation) of test results
	Conclusion *datatypes_go_proto.String `protobuf:"bytes,25,opt,name=conclusion,proto3" json:"conclusion,omitempty"`
	// Codes for the clinical conclusion of test results
	ConclusionCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,26,rep,name=conclusion_code,json=conclusionCode,proto3" json:"conclusion_code,omitempty"`
	// Entire report as issued
	PresentedForm []*datatypes_go_proto.Attachment `protobuf:"bytes,27,rep,name=presented_form,json=presentedForm,proto3" json:"presented_form,omitempty"`
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) Reset() {
	*x = USCoreDiagnosticReportProfileLaboratoryReporting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreDiagnosticReportProfileLaboratoryReporting) ProtoMessage() {}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreDiagnosticReportProfileLaboratoryReporting.ProtoReflect.Descriptor instead.
func (*USCoreDiagnosticReportProfileLaboratoryReporting) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{2}
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetStatus() *USCoreDiagnosticReportProfileLaboratoryReporting_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetEffective() *USCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetResultsInterpreter() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ResultsInterpreter
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetSpecimen() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetResult() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetImagingStudy() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ImagingStudy
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetMedia() []*USCoreDiagnosticReportProfileLaboratoryReporting_Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetConclusion() *datatypes_go_proto.String {
	if x != nil {
		return x.Conclusion
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetConclusionCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ConclusionCode
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting) GetPresentedForm() []*datatypes_go_proto.Attachment {
	if x != nil {
		return x.PresentedForm
	}
	return nil
}

// Auto-generated from StructureDefinition for
// USCorePediatricWeightForHeightObservationProfile. FHIR Vital Signs Profile.
// See
// http://hl7.org/fhir/us/core/StructureDefinition/pediatric-weight-for-height
type USCorePediatricWeightForHeightObservationProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,11,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// Part of referenced event
	PartOf []*datatypes_go_proto.Reference                              `protobuf:"bytes,12,rep,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	Status *USCorePediatricWeightForHeightObservationProfile_StatusCode `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,rep,name=category,proto3" json:"category,omitempty"`
	// Weight-for-length per age and gender
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what the observation is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=subject,proto3" json:"subject,omitempty"`
	// What the observation is about, when it is not about the subject of record
	Focus []*datatypes_go_proto.Reference `protobuf:"bytes,17,rep,name=focus,proto3" json:"focus,omitempty"`
	// Healthcare event during which this observation is made
	Encounter *datatypes_go_proto.Reference                                `protobuf:"bytes,18,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Effective *USCorePediatricWeightForHeightObservationProfile_EffectiveX `protobuf:"bytes,19,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this version was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,20,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference                          `protobuf:"bytes,21,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *USCorePediatricWeightForHeightObservationProfile_ValueX `protobuf:"bytes,22,opt,name=value,proto3" json:"value,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,rep,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about the observation
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,25,rep,name=note,proto3" json:"note,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,26,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,27,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,28,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference                                      `protobuf:"bytes,29,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange []*USCorePediatricWeightForHeightObservationProfile_ReferenceRange `protobuf:"bytes,30,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	// Used when reporting vital signs panel components
	HasMember []*datatypes_go_proto.Reference `protobuf:"bytes,31,rep,name=has_member,json=hasMember,proto3" json:"has_member,omitempty"`
	// Related measurements the observation is made from
	DerivedFrom []*datatypes_go_proto.Reference                               `protobuf:"bytes,32,rep,name=derived_from,json=derivedFrom,proto3" json:"derived_from,omitempty"`
	Component   []*USCorePediatricWeightForHeightObservationProfile_Component `protobuf:"bytes,33,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *USCorePediatricWeightForHeightObservationProfile) Reset() {
	*x = USCorePediatricWeightForHeightObservationProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePediatricWeightForHeightObservationProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePediatricWeightForHeightObservationProfile) ProtoMessage() {}

func (x *USCorePediatricWeightForHeightObservationProfile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePediatricWeightForHeightObservationProfile.ProtoReflect.Descriptor instead.
func (*USCorePediatricWeightForHeightObservationProfile) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{3}
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetPartOf() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetStatus() *USCorePediatricWeightForHeightObservationProfile_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetFocus() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Focus
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetEffective() *USCorePediatricWeightForHeightObservationProfile_EffectiveX {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetValue() *USCorePediatricWeightForHeightObservationProfile_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetInterpretation() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetReferenceRange() []*USCorePediatricWeightForHeightObservationProfile_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetHasMember() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.HasMember
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetDerivedFrom() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.DerivedFrom
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile) GetComponent() []*USCorePediatricWeightForHeightObservationProfile_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// Auto-generated from StructureDefinition for USCoreEncounterProfile.
// An interaction during which services are provided to the patient.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-encounter
type USCoreEncounterProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifier(s) by which this encounter is known
	Identifier    []*datatypes_go_proto.Identifier        `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Status        *USCoreEncounterProfile_StatusCode      `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	StatusHistory []*USCoreEncounterProfile_StatusHistory `protobuf:"bytes,12,rep,name=status_history,json=statusHistory,proto3" json:"status_history,omitempty"`
	// Classification of patient encounter
	ClassValue   *datatypes_go_proto.Coding             `protobuf:"bytes,13,opt,name=class_value,json=class,proto3" json:"class_value,omitempty"`
	ClassHistory []*USCoreEncounterProfile_ClassHistory `protobuf:"bytes,14,rep,name=class_history,json=classHistory,proto3" json:"class_history,omitempty"`
	// Specific type of encounter
	Type []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,rep,name=type,proto3" json:"type,omitempty"`
	// Specific type of service
	ServiceType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	// Indicates the urgency of the encounter
	Priority *datatypes_go_proto.CodeableConcept `protobuf:"bytes,17,opt,name=priority,proto3" json:"priority,omitempty"`
	// The patient or group present at the encounter
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=subject,proto3" json:"subject,omitempty"`
	// Episode(s) of care that this encounter should be recorded against
	EpisodeOfCare []*datatypes_go_proto.Reference `protobuf:"bytes,19,rep,name=episode_of_care,json=episodeOfCare,proto3" json:"episode_of_care,omitempty"`
	// The ServiceRequest that initiated this encounter
	BasedOn     []*datatypes_go_proto.Reference       `protobuf:"bytes,20,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	Participant []*USCoreEncounterProfile_Participant `protobuf:"bytes,21,rep,name=participant,proto3" json:"participant,omitempty"`
	// The appointment that scheduled this encounter
	Appointment []*datatypes_go_proto.Reference `protobuf:"bytes,22,rep,name=appointment,proto3" json:"appointment,omitempty"`
	// The start and end time of the encounter
	Period *datatypes_go_proto.Period `protobuf:"bytes,23,opt,name=period,proto3" json:"period,omitempty"`
	// Quantity of time the encounter lasted (less time absent)
	Length *datatypes_go_proto.Duration `protobuf:"bytes,24,opt,name=length,proto3" json:"length,omitempty"`
	// Coded reason the encounter takes place
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,25,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Reason the encounter takes place (reference)
	ReasonReference []*datatypes_go_proto.Reference     `protobuf:"bytes,26,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	Diagnosis       []*USCoreEncounterProfile_Diagnosis `protobuf:"bytes,27,rep,name=diagnosis,proto3" json:"diagnosis,omitempty"`
	// The set of accounts that may be used for billing for this Encounter
	Account         []*datatypes_go_proto.Reference         `protobuf:"bytes,28,rep,name=account,proto3" json:"account,omitempty"`
	Hospitalization *USCoreEncounterProfile_Hospitalization `protobuf:"bytes,29,opt,name=hospitalization,proto3" json:"hospitalization,omitempty"`
	Location        []*USCoreEncounterProfile_Location      `protobuf:"bytes,30,rep,name=location,proto3" json:"location,omitempty"`
	// The organization (facility) responsible for this encounter
	ServiceProvider *datatypes_go_proto.Reference `protobuf:"bytes,31,opt,name=service_provider,json=serviceProvider,proto3" json:"service_provider,omitempty"`
	// Another Encounter this encounter is part of
	PartOf *datatypes_go_proto.Reference `protobuf:"bytes,32,opt,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
}

func (x *USCoreEncounterProfile) Reset() {
	*x = USCoreEncounterProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreEncounterProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreEncounterProfile) ProtoMessage() {}

func (x *USCoreEncounterProfile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreEncounterProfile.ProtoReflect.Descriptor instead.
func (*USCoreEncounterProfile) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{4}
}

func (x *USCoreEncounterProfile) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreEncounterProfile) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *USCoreEncounterProfile) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *USCoreEncounterProfile) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *USCoreEncounterProfile) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *USCoreEncounterProfile) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *USCoreEncounterProfile) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreEncounterProfile) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreEncounterProfile) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *USCoreEncounterProfile) GetStatus() *USCoreEncounterProfile_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *USCoreEncounterProfile) GetStatusHistory() []*USCoreEncounterProfile_StatusHistory {
	if x != nil {
		return x.StatusHistory
	}
	return nil
}

func (x *USCoreEncounterProfile) GetClassValue() *datatypes_go_proto.Coding {
	if x != nil {
		return x.ClassValue
	}
	return nil
}

func (x *USCoreEncounterProfile) GetClassHistory() []*USCoreEncounterProfile_ClassHistory {
	if x != nil {
		return x.ClassHistory
	}
	return nil
}

func (x *USCoreEncounterProfile) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *USCoreEncounterProfile) GetServiceType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ServiceType
	}
	return nil
}

func (x *USCoreEncounterProfile) GetPriority() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *USCoreEncounterProfile) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *USCoreEncounterProfile) GetEpisodeOfCare() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.EpisodeOfCare
	}
	return nil
}

func (x *USCoreEncounterProfile) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *USCoreEncounterProfile) GetParticipant() []*USCoreEncounterProfile_Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *USCoreEncounterProfile) GetAppointment() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Appointment
	}
	return nil
}

func (x *USCoreEncounterProfile) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *USCoreEncounterProfile) GetLength() *datatypes_go_proto.Duration {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *USCoreEncounterProfile) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *USCoreEncounterProfile) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *USCoreEncounterProfile) GetDiagnosis() []*USCoreEncounterProfile_Diagnosis {
	if x != nil {
		return x.Diagnosis
	}
	return nil
}

func (x *USCoreEncounterProfile) GetAccount() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *USCoreEncounterProfile) GetHospitalization() *USCoreEncounterProfile_Hospitalization {
	if x != nil {
		return x.Hospitalization
	}
	return nil
}

func (x *USCoreEncounterProfile) GetLocation() []*USCoreEncounterProfile_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *USCoreEncounterProfile) GetServiceProvider() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ServiceProvider
	}
	return nil
}

func (x *USCoreEncounterProfile) GetPartOf() *datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

// Auto-generated from StructureDefinition for USCoreDocumentReferenceProfile.
// A reference to a document.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-documentreference
type USCoreDocumentReferenceProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Master Version Specific Identifier
	MasterIdentifier *datatypes_go_proto.Identifier `protobuf:"bytes,10,opt,name=master_identifier,json=masterIdentifier,proto3" json:"master_identifier,omitempty"`
	// Other identifiers for the document
	Identifier []*datatypes_go_proto.Identifier              `protobuf:"bytes,11,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Status     *USCoreDocumentReferenceProfile_StatusCode    `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	DocStatus  *USCoreDocumentReferenceProfile_DocStatusCode `protobuf:"bytes,13,opt,name=doc_status,json=docStatus,proto3" json:"doc_status,omitempty"`
	// Kind of document (LOINC if possible)
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=type,proto3" json:"type,omitempty"`
	// Categorization of document
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,rep,name=category,proto3" json:"category,omitempty"`
	// Who/what is the subject of the document
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=subject,proto3" json:"subject,omitempty"`
	// When this document reference was created
	Date *datatypes_go_proto.Instant `protobuf:"bytes,17,opt,name=date,proto3" json:"date,omitempty"`
	// Who and/or what authored the document
	Author []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=author,proto3" json:"author,omitempty"`
	// Who/what authenticated the document
	Authenticator *datatypes_go_proto.Reference `protobuf:"bytes,19,opt,name=authenticator,proto3" json:"authenticator,omitempty"`
	// Organization which maintains the document
	Custodian *datatypes_go_proto.Reference               `protobuf:"bytes,20,opt,name=custodian,proto3" json:"custodian,omitempty"`
	RelatesTo []*USCoreDocumentReferenceProfile_RelatesTo `protobuf:"bytes,21,rep,name=relates_to,json=relatesTo,proto3" json:"relates_to,omitempty"`
	// Human-readable description
	Description *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=description,proto3" json:"description,omitempty"`
	// Document security-tags
	SecurityLabel []*datatypes_go_proto.CodeableConcept   `protobuf:"bytes,23,rep,name=security_label,json=securityLabel,proto3" json:"security_label,omitempty"`
	Content       *USCoreDocumentReferenceProfile_Content `protobuf:"bytes,24,opt,name=content,proto3" json:"content,omitempty"`
	Context       *USCoreDocumentReferenceProfile_Context `protobuf:"bytes,25,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *USCoreDocumentReferenceProfile) Reset() {
	*x = USCoreDocumentReferenceProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreDocumentReferenceProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreDocumentReferenceProfile) ProtoMessage() {}

func (x *USCoreDocumentReferenceProfile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreDocumentReferenceProfile.ProtoReflect.Descriptor instead.
func (*USCoreDocumentReferenceProfile) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{5}
}

func (x *USCoreDocumentReferenceProfile) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile) GetMasterIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.MasterIdentifier
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile) GetStatus() *USCoreDocumentReferenceProfile_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile) GetDocStatus() *USCoreDocumentReferenceProfile_DocStatusCode {
	if x != nil {
		return x.DocStatus
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile) GetDate() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile) GetAuthor() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile) GetAuthenticator() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Authenticator
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile) GetCustodian() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Custodian
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile) GetRelatesTo() []*USCoreDocumentReferenceProfile_RelatesTo {
	if x != nil {
		return x.RelatesTo
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile) GetSecurityLabel() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SecurityLabel
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile) GetContent() *USCoreDocumentReferenceProfile_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile) GetContext() *USCoreDocumentReferenceProfile_Context {
	if x != nil {
		return x.Context
	}
	return nil
}

// Auto-generated from StructureDefinition for USCoreCareTeam.
// Planned participants in the coordination and delivery of care for a patient
// or group. See
// http://hl7.org/fhir/us/core/StructureDefinition/us-core-careteam
type USCoreCareTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Ids for this team
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Status     *USCoreCareTeam_StatusCode       `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Type of team
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	// Name of the team, such as crisis assessment team
	Name *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// Who care team is for
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Encounter created as part of
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Time period team covers
	Period      *datatypes_go_proto.Period    `protobuf:"bytes,16,opt,name=period,proto3" json:"period,omitempty"`
	Participant []*USCoreCareTeam_Participant `protobuf:"bytes,17,rep,name=participant,proto3" json:"participant,omitempty"`
	// Why the care team exists
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Why the care team exists
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,19,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// Organization responsible for the care team
	ManagingOrganization []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=managing_organization,json=managingOrganization,proto3" json:"managing_organization,omitempty"`
	// A contact detail for the care team (that applies to all members)
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,21,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// Comments made about the CareTeam
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,22,rep,name=note,proto3" json:"note,omitempty"`
}

func (x *USCoreCareTeam) Reset() {
	*x = USCoreCareTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreCareTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreCareTeam) ProtoMessage() {}

func (x *USCoreCareTeam) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreCareTeam.ProtoReflect.Descriptor instead.
func (*USCoreCareTeam) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{6}
}

func (x *USCoreCareTeam) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreCareTeam) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *USCoreCareTeam) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *USCoreCareTeam) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *USCoreCareTeam) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *USCoreCareTeam) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *USCoreCareTeam) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreCareTeam) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreCareTeam) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *USCoreCareTeam) GetStatus() *USCoreCareTeam_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *USCoreCareTeam) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *USCoreCareTeam) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *USCoreCareTeam) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *USCoreCareTeam) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *USCoreCareTeam) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *USCoreCareTeam) GetParticipant() []*USCoreCareTeam_Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *USCoreCareTeam) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *USCoreCareTeam) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *USCoreCareTeam) GetManagingOrganization() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ManagingOrganization
	}
	return nil
}

func (x *USCoreCareTeam) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *USCoreCareTeam) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

// Auto-generated from StructureDefinition for USCoreProvenance.
// US Core Provenance.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-provenance
type USCoreProvenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The Resource this Provenance record supports
	Target   []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=target,proto3" json:"target,omitempty"`
	Occurred *USCoreProvenance_OccurredX     `protobuf:"bytes,11,opt,name=occurred,proto3" json:"occurred,omitempty"`
	// Timestamp when the activity was recorded / updated
	Recorded *datatypes_go_proto.Instant `protobuf:"bytes,12,opt,name=recorded,proto3" json:"recorded,omitempty"`
	// Policy or plan the activity was defined by
	Policy []*datatypes_go_proto.Uri `protobuf:"bytes,13,rep,name=policy,proto3" json:"policy,omitempty"`
	// Where the activity occurred, if relevant
	Location *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=location,proto3" json:"location,omitempty"`
	// Reason the activity is occurring
	Reason []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,rep,name=reason,proto3" json:"reason,omitempty"`
	// Activity that occurred
	Activity *datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,opt,name=activity,proto3" json:"activity,omitempty"`
	Agent    []*USCoreProvenance_Agent           `protobuf:"bytes,17,rep,name=agent,proto3" json:"agent,omitempty"`
	Entity   []*USCoreProvenance_Entity          `protobuf:"bytes,18,rep,name=entity,proto3" json:"entity,omitempty"`
	// Signature on target
	Signature []*datatypes_go_proto.Signature `protobuf:"bytes,19,rep,name=signature,proto3" json:"signature,omitempty"`
}

func (x *USCoreProvenance) Reset() {
	*x = USCoreProvenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreProvenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreProvenance) ProtoMessage() {}

func (x *USCoreProvenance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreProvenance.ProtoReflect.Descriptor instead.
func (*USCoreProvenance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{7}
}

func (x *USCoreProvenance) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreProvenance) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *USCoreProvenance) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *USCoreProvenance) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *USCoreProvenance) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *USCoreProvenance) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *USCoreProvenance) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreProvenance) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreProvenance) GetTarget() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *USCoreProvenance) GetOccurred() *USCoreProvenance_OccurredX {
	if x != nil {
		return x.Occurred
	}
	return nil
}

func (x *USCoreProvenance) GetRecorded() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Recorded
	}
	return nil
}

func (x *USCoreProvenance) GetPolicy() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *USCoreProvenance) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *USCoreProvenance) GetReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *USCoreProvenance) GetActivity() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *USCoreProvenance) GetAgent() []*USCoreProvenance_Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *USCoreProvenance) GetEntity() []*USCoreProvenance_Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *USCoreProvenance) GetSignature() []*datatypes_go_proto.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Auto-generated from StructureDefinition for USCoreImmunizationProfile.
// Immunization event information.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-immunization
type USCoreImmunizationProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier
	Identifier []*datatypes_go_proto.Identifier      `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Status     *USCoreImmunizationProfile_StatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Reason not done
	StatusReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// Vaccine Product Type (bind to CVX)
	VaccineCode *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=vaccine_code,json=vaccineCode,proto3" json:"vaccine_code,omitempty"`
	// Who was immunized
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=patient,proto3" json:"patient,omitempty"`
	// Encounter immunization was part of
	Encounter  *datatypes_go_proto.Reference          `protobuf:"bytes,15,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Occurrence *USCoreImmunizationProfile_OccurrenceX `protobuf:"bytes,16,opt,name=occurrence,proto3" json:"occurrence,omitempty"`
	// When the immunization was first captured in the subject's record
	Recorded *datatypes_go_proto.DateTime `protobuf:"bytes,17,opt,name=recorded,proto3" json:"recorded,omitempty"`
	// Indicates context the data was recorded in
	PrimarySource *datatypes_go_proto.Boolean `protobuf:"bytes,18,opt,name=primary_source,json=primarySource,proto3" json:"primary_source,omitempty"`
	// Indicates the source of a secondarily reported record
	ReportOrigin *datatypes_go_proto.CodeableConcept `protobuf:"bytes,19,opt,name=report_origin,json=reportOrigin,proto3" json:"report_origin,omitempty"`
	// Where immunization occurred
	Location *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=location,proto3" json:"location,omitempty"`
	// Vaccine manufacturer
	Manufacturer *datatypes_go_proto.Reference `protobuf:"bytes,21,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// Vaccine lot number
	LotNumber *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=lot_number,json=lotNumber,proto3" json:"lot_number,omitempty"`
	// Vaccine expiration date
	ExpirationDate *datatypes_go_proto.Date `protobuf:"bytes,23,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	// Body site vaccine  was administered
	Site *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=site,proto3" json:"site,omitempty"`
	// How vaccine entered body
	Route *datatypes_go_proto.CodeableConcept `protobuf:"bytes,25,opt,name=route,proto3" json:"route,omitempty"`
	// Amount of vaccine administered
	DoseQuantity *datatypes_go_proto.SimpleQuantity     `protobuf:"bytes,26,opt,name=dose_quantity,json=doseQuantity,proto3" json:"dose_quantity,omitempty"`
	Performer    []*USCoreImmunizationProfile_Performer `protobuf:"bytes,27,rep,name=performer,proto3" json:"performer,omitempty"`
	// Additional immunization notes
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,28,rep,name=note,proto3" json:"note,omitempty"`
	// Why immunization occurred
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,29,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Why immunization occurred
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,30,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// Dose potency
	IsSubpotent *datatypes_go_proto.Boolean `protobuf:"bytes,31,opt,name=is_subpotent,json=isSubpotent,proto3" json:"is_subpotent,omitempty"`
	// Reason for being subpotent
	SubpotentReason []*datatypes_go_proto.CodeableConcept  `protobuf:"bytes,32,rep,name=subpotent_reason,json=subpotentReason,proto3" json:"subpotent_reason,omitempty"`
	Education       []*USCoreImmunizationProfile_Education `protobuf:"bytes,33,rep,name=education,proto3" json:"education,omitempty"`
	// Patient eligibility for a vaccination program
	ProgramEligibility []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,34,rep,name=program_eligibility,json=programEligibility,proto3" json:"program_eligibility,omitempty"`
	// Funding source for the vaccine
	FundingSource   *datatypes_go_proto.CodeableConcept          `protobuf:"bytes,35,opt,name=funding_source,json=fundingSource,proto3" json:"funding_source,omitempty"`
	Reaction        []*USCoreImmunizationProfile_Reaction        `protobuf:"bytes,36,rep,name=reaction,proto3" json:"reaction,omitempty"`
	ProtocolApplied []*USCoreImmunizationProfile_ProtocolApplied `protobuf:"bytes,37,rep,name=protocol_applied,json=protocolApplied,proto3" json:"protocol_applied,omitempty"`
}

func (x *USCoreImmunizationProfile) Reset() {
	*x = USCoreImmunizationProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreImmunizationProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreImmunizationProfile) ProtoMessage() {}

func (x *USCoreImmunizationProfile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreImmunizationProfile.ProtoReflect.Descriptor instead.
func (*USCoreImmunizationProfile) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{8}
}

func (x *USCoreImmunizationProfile) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetStatus() *USCoreImmunizationProfile_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetStatusReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetVaccineCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.VaccineCode
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetOccurrence() *USCoreImmunizationProfile_OccurrenceX {
	if x != nil {
		return x.Occurrence
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetRecorded() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Recorded
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetPrimarySource() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.PrimarySource
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetReportOrigin() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReportOrigin
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetManufacturer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetLotNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.LotNumber
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetExpirationDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetSite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetRoute() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetDoseQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.DoseQuantity
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetPerformer() []*USCoreImmunizationProfile_Performer {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetIsSubpotent() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.IsSubpotent
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetSubpotentReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SubpotentReason
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetEducation() []*USCoreImmunizationProfile_Education {
	if x != nil {
		return x.Education
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetProgramEligibility() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ProgramEligibility
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetFundingSource() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.FundingSource
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetReaction() []*USCoreImmunizationProfile_Reaction {
	if x != nil {
		return x.Reaction
	}
	return nil
}

func (x *USCoreImmunizationProfile) GetProtocolApplied() []*USCoreImmunizationProfile_ProtocolApplied {
	if x != nil {
		return x.ProtocolApplied
	}
	return nil
}

// Auto-generated from StructureDefinition for USCoreBirthSexExtension.
// Extension.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-birthsex
type PatientUSCoreBirthSexExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension           `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	ValueCode *PatientUSCoreBirthSexExtension_ValueCode `protobuf:"bytes,3,opt,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *PatientUSCoreBirthSexExtension) Reset() {
	*x = PatientUSCoreBirthSexExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientUSCoreBirthSexExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientUSCoreBirthSexExtension) ProtoMessage() {}

func (x *PatientUSCoreBirthSexExtension) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientUSCoreBirthSexExtension.ProtoReflect.Descriptor instead.
func (*PatientUSCoreBirthSexExtension) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{9}
}

func (x *PatientUSCoreBirthSexExtension) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientUSCoreBirthSexExtension) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PatientUSCoreBirthSexExtension) GetValueCode() *PatientUSCoreBirthSexExtension_ValueCode {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// Auto-generated from StructureDefinition for
// USCoreDiagnosticReportProfileNoteExchange. US Core Diagnostic Report Profile
// for Report and Note exchange. See
// http://hl7.org/fhir/us/core/StructureDefinition/us-core-diagnosticreport-note
type USCoreDiagnosticReportProfileNoteExchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier for report
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// What was requested
	BasedOn []*datatypes_go_proto.Reference                       `protobuf:"bytes,11,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	Status  *USCoreDiagnosticReportProfileNoteExchange_StatusCode `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// Service category
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,rep,name=category,proto3" json:"category,omitempty"`
	// US Core Report Code
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=code,proto3" json:"code,omitempty"`
	// The subject of the report - usually, but not always, the patient
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=subject,proto3" json:"subject,omitempty"`
	// Health care event when test ordered
	Encounter *datatypes_go_proto.Reference                         `protobuf:"bytes,16,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Effective *USCoreDiagnosticReportProfileNoteExchange_EffectiveX `protobuf:"bytes,17,opt,name=effective,proto3" json:"effective,omitempty"`
	// DateTime this version was made
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,18,opt,name=issued,proto3" json:"issued,omitempty"`
	// Responsible Diagnostic Service
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,19,rep,name=performer,proto3" json:"performer,omitempty"`
	// Primary result interpreter
	ResultsInterpreter []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=results_interpreter,json=resultsInterpreter,proto3" json:"results_interpreter,omitempty"`
	// Specimens this report is based on
	Specimen []*datatypes_go_proto.Reference `protobuf:"bytes,21,rep,name=specimen,proto3" json:"specimen,omitempty"`
	// Observations
	Result []*datatypes_go_proto.Reference `protobuf:"bytes,22,rep,name=result,proto3" json:"result,omitempty"`
	// Reference to full details of imaging associated with the diagnostic report
	ImagingStudy []*datatypes_go_proto.Reference                    `protobuf:"bytes,23,rep,name=imaging_study,json=imagingStudy,proto3" json:"imaging_study,omitempty"`
	Media        []*USCoreDiagnosticReportProfileNoteExchange_Media `protobuf:"bytes,24,rep,name=media,proto3" json:"media,omitempty"`
	// Clinical conclusion (interpretation) of test results
	Conclusion *datatypes_go_proto.String `protobuf:"bytes,25,opt,name=conclusion,proto3" json:"conclusion,omitempty"`
	// Codes for the clinical conclusion of test results
	ConclusionCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,26,rep,name=conclusion_code,json=conclusionCode,proto3" json:"conclusion_code,omitempty"`
	// Entire report as issued
	PresentedForm []*datatypes_go_proto.Attachment `protobuf:"bytes,27,rep,name=presented_form,json=presentedForm,proto3" json:"presented_form,omitempty"`
}

func (x *USCoreDiagnosticReportProfileNoteExchange) Reset() {
	*x = USCoreDiagnosticReportProfileNoteExchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreDiagnosticReportProfileNoteExchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreDiagnosticReportProfileNoteExchange) ProtoMessage() {}

func (x *USCoreDiagnosticReportProfileNoteExchange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreDiagnosticReportProfileNoteExchange.ProtoReflect.Descriptor instead.
func (*USCoreDiagnosticReportProfileNoteExchange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{10}
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetStatus() *USCoreDiagnosticReportProfileNoteExchange_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetEffective() *USCoreDiagnosticReportProfileNoteExchange_EffectiveX {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetResultsInterpreter() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ResultsInterpreter
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetSpecimen() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetResult() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetImagingStudy() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ImagingStudy
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetMedia() []*USCoreDiagnosticReportProfileNoteExchange_Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetConclusion() *datatypes_go_proto.String {
	if x != nil {
		return x.Conclusion
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetConclusionCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ConclusionCode
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange) GetPresentedForm() []*datatypes_go_proto.Attachment {
	if x != nil {
		return x.PresentedForm
	}
	return nil
}

// Auto-generated from StructureDefinition for
// USCoreLaboratoryResultObservationProfile. Measurements and simple assertions.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-observation-lab
type USCoreLaboratoryResultObservationProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,11,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// Part of referenced event
	PartOf []*datatypes_go_proto.Reference                      `protobuf:"bytes,12,rep,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	Status *USCoreLaboratoryResultObservationProfile_StatusCode `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,rep,name=category,proto3" json:"category,omitempty"`
	// Laboratory Test Name
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what the observation is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=subject,proto3" json:"subject,omitempty"`
	// What the observation is about, when it is not about the subject of record
	Focus []*datatypes_go_proto.Reference `protobuf:"bytes,17,rep,name=focus,proto3" json:"focus,omitempty"`
	// Healthcare event during which this observation is made
	Encounter *datatypes_go_proto.Reference                        `protobuf:"bytes,18,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Effective *USCoreLaboratoryResultObservationProfile_EffectiveX `protobuf:"bytes,19,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this version was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,20,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference                  `protobuf:"bytes,21,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *USCoreLaboratoryResultObservationProfile_ValueX `protobuf:"bytes,22,opt,name=value,proto3" json:"value,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,rep,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about the observation
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,25,rep,name=note,proto3" json:"note,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,26,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,27,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,28,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference                              `protobuf:"bytes,29,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange []*USCoreLaboratoryResultObservationProfile_ReferenceRange `protobuf:"bytes,30,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	// Related resource that belongs to the Observation group
	HasMember []*datatypes_go_proto.Reference `protobuf:"bytes,31,rep,name=has_member,json=hasMember,proto3" json:"has_member,omitempty"`
	// Related measurements the observation is made from
	DerivedFrom []*datatypes_go_proto.Reference                       `protobuf:"bytes,32,rep,name=derived_from,json=derivedFrom,proto3" json:"derived_from,omitempty"`
	Component   []*USCoreLaboratoryResultObservationProfile_Component `protobuf:"bytes,33,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *USCoreLaboratoryResultObservationProfile) Reset() {
	*x = USCoreLaboratoryResultObservationProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreLaboratoryResultObservationProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreLaboratoryResultObservationProfile) ProtoMessage() {}

func (x *USCoreLaboratoryResultObservationProfile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreLaboratoryResultObservationProfile.ProtoReflect.Descriptor instead.
func (*USCoreLaboratoryResultObservationProfile) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{11}
}

func (x *USCoreLaboratoryResultObservationProfile) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetPartOf() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetStatus() *USCoreLaboratoryResultObservationProfile_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetFocus() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Focus
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetEffective() *USCoreLaboratoryResultObservationProfile_EffectiveX {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetValue() *USCoreLaboratoryResultObservationProfile_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetInterpretation() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetReferenceRange() []*USCoreLaboratoryResultObservationProfile_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetHasMember() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.HasMember
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetDerivedFrom() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.DerivedFrom
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile) GetComponent() []*USCoreLaboratoryResultObservationProfile_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// Auto-generated from StructureDefinition for USCoreLocation.
// Details and position information for a physical place.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-location
type USCoreLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Unique code or number identifying the location to its users
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Status     *USCoreLocation_StatusCode       `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// The operational status of the location (typically only for a bed/room)
	OperationalStatus *datatypes_go_proto.Coding `protobuf:"bytes,12,opt,name=operational_status,json=operationalStatus,proto3" json:"operational_status,omitempty"`
	// Name of the location as used by humans
	Name *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// A list of alternate names that the location is known as, or was known as,
	// in the past
	Alias []*datatypes_go_proto.String `protobuf:"bytes,14,rep,name=alias,proto3" json:"alias,omitempty"`
	// Additional details about the location that could be displayed as further
	// information to identify the location beyond its name
	Description *datatypes_go_proto.String `protobuf:"bytes,15,opt,name=description,proto3" json:"description,omitempty"`
	Mode        *USCoreLocation_ModeCode   `protobuf:"bytes,16,opt,name=mode,proto3" json:"mode,omitempty"`
	// Type of function performed
	Type []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,17,rep,name=type,proto3" json:"type,omitempty"`
	// Contact details of the location
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,18,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// Physical location
	Address *datatypes_go_proto.Address `protobuf:"bytes,19,opt,name=address,proto3" json:"address,omitempty"`
	// Physical form of the location
	PhysicalType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=physical_type,json=physicalType,proto3" json:"physical_type,omitempty"`
	Position     *USCoreLocation_Position            `protobuf:"bytes,21,opt,name=position,proto3" json:"position,omitempty"`
	// Organization responsible for provisioning and upkeep
	ManagingOrganization *datatypes_go_proto.Reference `protobuf:"bytes,22,opt,name=managing_organization,json=managingOrganization,proto3" json:"managing_organization,omitempty"`
	// Another Location this one is physically a part of
	PartOf           *datatypes_go_proto.Reference      `protobuf:"bytes,23,opt,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	HoursOfOperation []*USCoreLocation_HoursOfOperation `protobuf:"bytes,24,rep,name=hours_of_operation,json=hoursOfOperation,proto3" json:"hours_of_operation,omitempty"`
	// Description of availability exceptions
	AvailabilityExceptions *datatypes_go_proto.String `protobuf:"bytes,25,opt,name=availability_exceptions,json=availabilityExceptions,proto3" json:"availability_exceptions,omitempty"`
	// Technical endpoints providing access to services operated for the location
	Endpoint []*datatypes_go_proto.Reference `protobuf:"bytes,26,rep,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *USCoreLocation) Reset() {
	*x = USCoreLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreLocation) ProtoMessage() {}

func (x *USCoreLocation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreLocation.ProtoReflect.Descriptor instead.
func (*USCoreLocation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{12}
}

func (x *USCoreLocation) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreLocation) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *USCoreLocation) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *USCoreLocation) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *USCoreLocation) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *USCoreLocation) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *USCoreLocation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreLocation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreLocation) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *USCoreLocation) GetStatus() *USCoreLocation_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *USCoreLocation) GetOperationalStatus() *datatypes_go_proto.Coding {
	if x != nil {
		return x.OperationalStatus
	}
	return nil
}

func (x *USCoreLocation) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *USCoreLocation) GetAlias() []*datatypes_go_proto.String {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *USCoreLocation) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *USCoreLocation) GetMode() *USCoreLocation_ModeCode {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *USCoreLocation) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *USCoreLocation) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *USCoreLocation) GetAddress() *datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *USCoreLocation) GetPhysicalType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PhysicalType
	}
	return nil
}

func (x *USCoreLocation) GetPosition() *USCoreLocation_Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *USCoreLocation) GetManagingOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ManagingOrganization
	}
	return nil
}

func (x *USCoreLocation) GetPartOf() *datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *USCoreLocation) GetHoursOfOperation() []*USCoreLocation_HoursOfOperation {
	if x != nil {
		return x.HoursOfOperation
	}
	return nil
}

func (x *USCoreLocation) GetAvailabilityExceptions() *datatypes_go_proto.String {
	if x != nil {
		return x.AvailabilityExceptions
	}
	return nil
}

func (x *USCoreLocation) GetEndpoint() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

// Auto-generated from StructureDefinition for USCoreCondition.
// Detailed information about conditions, problems or diagnoses.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-condition
type UsCoreCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Ids for this condition
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// active | recurrence | relapse | inactive | remission | resolved
	ClinicalStatus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=clinical_status,json=clinicalStatus,proto3" json:"clinical_status,omitempty"`
	// unconfirmed | provisional | differential | confirmed | refuted |
	// entered-in-error
	VerificationStatus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=verification_status,json=verificationStatus,proto3" json:"verification_status,omitempty"`
	// problem-list-item | encounter-diagnosis | health-concern
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,rep,name=category,proto3" json:"category,omitempty"`
	// Subjective severity of condition
	Severity *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=severity,proto3" json:"severity,omitempty"`
	// Identification of the condition, problem or diagnosis
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=code,proto3" json:"code,omitempty"`
	// Anatomical location, if relevant
	BodySite []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,rep,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// Who has the condition?
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=subject,proto3" json:"subject,omitempty"`
	// Encounter created as part of
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Onset     *UsCoreCondition_OnsetX       `protobuf:"bytes,19,opt,name=onset,proto3" json:"onset,omitempty"`
	Abatement *UsCoreCondition_AbatementX   `protobuf:"bytes,20,opt,name=abatement,proto3" json:"abatement,omitempty"`
	// Date record was first recorded
	RecordedDate *datatypes_go_proto.DateTime `protobuf:"bytes,21,opt,name=recorded_date,json=recordedDate,proto3" json:"recorded_date,omitempty"`
	// Who recorded the condition
	Recorder *datatypes_go_proto.Reference `protobuf:"bytes,22,opt,name=recorder,proto3" json:"recorder,omitempty"`
	// Person who asserts this condition
	Asserter *datatypes_go_proto.Reference `protobuf:"bytes,23,opt,name=asserter,proto3" json:"asserter,omitempty"`
	Stage    []*UsCoreCondition_Stage      `protobuf:"bytes,24,rep,name=stage,proto3" json:"stage,omitempty"`
	Evidence []*UsCoreCondition_Evidence   `protobuf:"bytes,25,rep,name=evidence,proto3" json:"evidence,omitempty"`
	// Additional information about the Condition
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,26,rep,name=note,proto3" json:"note,omitempty"`
}

func (x *UsCoreCondition) Reset() {
	*x = UsCoreCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreCondition) ProtoMessage() {}

func (x *UsCoreCondition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreCondition.ProtoReflect.Descriptor instead.
func (*UsCoreCondition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{13}
}

func (x *UsCoreCondition) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreCondition) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UsCoreCondition) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *UsCoreCondition) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UsCoreCondition) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *UsCoreCondition) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *UsCoreCondition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreCondition) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreCondition) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *UsCoreCondition) GetClinicalStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ClinicalStatus
	}
	return nil
}

func (x *UsCoreCondition) GetVerificationStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.VerificationStatus
	}
	return nil
}

func (x *UsCoreCondition) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *UsCoreCondition) GetSeverity() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *UsCoreCondition) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *UsCoreCondition) GetBodySite() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *UsCoreCondition) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *UsCoreCondition) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *UsCoreCondition) GetOnset() *UsCoreCondition_OnsetX {
	if x != nil {
		return x.Onset
	}
	return nil
}

func (x *UsCoreCondition) GetAbatement() *UsCoreCondition_AbatementX {
	if x != nil {
		return x.Abatement
	}
	return nil
}

func (x *UsCoreCondition) GetRecordedDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.RecordedDate
	}
	return nil
}

func (x *UsCoreCondition) GetRecorder() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Recorder
	}
	return nil
}

func (x *UsCoreCondition) GetAsserter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Asserter
	}
	return nil
}

func (x *UsCoreCondition) GetStage() []*UsCoreCondition_Stage {
	if x != nil {
		return x.Stage
	}
	return nil
}

func (x *UsCoreCondition) GetEvidence() []*UsCoreCondition_Evidence {
	if x != nil {
		return x.Evidence
	}
	return nil
}

func (x *UsCoreCondition) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

// Auto-generated from StructureDefinition for USCorePulseOximetryProfile.
// FHIR Oxygen Saturation Profile.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-pulse-oximetry
type USCorePulseOximetryProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,11,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// Part of referenced event
	PartOf []*datatypes_go_proto.Reference        `protobuf:"bytes,12,rep,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	Status *USCorePulseOximetryProfile_StatusCode `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept              `protobuf:"bytes,14,rep,name=category,proto3" json:"category,omitempty"`
	Code     *USCorePulseOximetryProfile_CodeableConceptForCode `protobuf:"bytes,15,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what the observation is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=subject,proto3" json:"subject,omitempty"`
	// What the observation is about, when it is not about the subject of record
	Focus []*datatypes_go_proto.Reference `protobuf:"bytes,17,rep,name=focus,proto3" json:"focus,omitempty"`
	// Healthcare event during which this observation is made
	Encounter *datatypes_go_proto.Reference          `protobuf:"bytes,18,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Effective *USCorePulseOximetryProfile_EffectiveX `protobuf:"bytes,19,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this version was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,20,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference    `protobuf:"bytes,21,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *USCorePulseOximetryProfile_ValueX `protobuf:"bytes,22,opt,name=value,proto3" json:"value,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,rep,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about the observation
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,25,rep,name=note,proto3" json:"note,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,26,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,27,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,28,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference                `protobuf:"bytes,29,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange []*USCorePulseOximetryProfile_ReferenceRange `protobuf:"bytes,30,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	// Used when reporting vital signs panel components
	HasMember []*datatypes_go_proto.Reference `protobuf:"bytes,31,rep,name=has_member,json=hasMember,proto3" json:"has_member,omitempty"`
	// Related measurements the observation is made from
	DerivedFrom []*datatypes_go_proto.Reference         `protobuf:"bytes,32,rep,name=derived_from,json=derivedFrom,proto3" json:"derived_from,omitempty"`
	Component   []*USCorePulseOximetryProfile_Component `protobuf:"bytes,33,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *USCorePulseOximetryProfile) Reset() {
	*x = USCorePulseOximetryProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePulseOximetryProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePulseOximetryProfile) ProtoMessage() {}

func (x *USCorePulseOximetryProfile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePulseOximetryProfile.ProtoReflect.Descriptor instead.
func (*USCorePulseOximetryProfile) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{14}
}

func (x *USCorePulseOximetryProfile) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetPartOf() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetStatus() *USCorePulseOximetryProfile_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetCode() *USCorePulseOximetryProfile_CodeableConceptForCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetFocus() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Focus
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetEffective() *USCorePulseOximetryProfile_EffectiveX {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetValue() *USCorePulseOximetryProfile_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetInterpretation() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetReferenceRange() []*USCorePulseOximetryProfile_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetHasMember() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.HasMember
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetDerivedFrom() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.DerivedFrom
	}
	return nil
}

func (x *USCorePulseOximetryProfile) GetComponent() []*USCorePulseOximetryProfile_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// Auto-generated from StructureDefinition for USCoreImplantableDeviceProfile.
// Item used in healthcare.
// See
// http://hl7.org/fhir/us/core/StructureDefinition/us-core-implantable-device
type USCoreImplantableDeviceProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Instance identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// The reference to the definition for the device
	Definition *datatypes_go_proto.Reference              `protobuf:"bytes,11,opt,name=definition,proto3" json:"definition,omitempty"`
	UdiCarrier *USCoreImplantableDeviceProfile_UdiCarrier `protobuf:"bytes,12,opt,name=udi_carrier,json=udiCarrier,proto3" json:"udi_carrier,omitempty"`
	Status     *USCoreImplantableDeviceProfile_StatusCode `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// online | paused | standby | offline | not-ready | transduc-discon |
	// hw-discon | off
	StatusReason []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,rep,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// The distinct identification string
	DistinctIdentifier *datatypes_go_proto.String `protobuf:"bytes,15,opt,name=distinct_identifier,json=distinctIdentifier,proto3" json:"distinct_identifier,omitempty"`
	// Name of device manufacturer
	Manufacturer *datatypes_go_proto.String `protobuf:"bytes,16,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// Date when the device was made
	ManufactureDate *datatypes_go_proto.DateTime `protobuf:"bytes,17,opt,name=manufacture_date,json=manufactureDate,proto3" json:"manufacture_date,omitempty"`
	// Date and time of expiry of this device (if applicable)
	ExpirationDate *datatypes_go_proto.DateTime `protobuf:"bytes,18,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	// Lot number of manufacture
	LotNumber *datatypes_go_proto.String `protobuf:"bytes,19,opt,name=lot_number,json=lotNumber,proto3" json:"lot_number,omitempty"`
	// Serial number assigned by the manufacturer
	SerialNumber *datatypes_go_proto.String                   `protobuf:"bytes,20,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	DeviceName   []*USCoreImplantableDeviceProfile_DeviceName `protobuf:"bytes,21,rep,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// The model number for the device
	ModelNumber *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=model_number,json=modelNumber,proto3" json:"model_number,omitempty"`
	// The part number of the device
	PartNumber *datatypes_go_proto.String `protobuf:"bytes,23,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	// The kind or type of device
	Type           *datatypes_go_proto.CodeableConcept              `protobuf:"bytes,24,opt,name=type,proto3" json:"type,omitempty"`
	Specialization []*USCoreImplantableDeviceProfile_Specialization `protobuf:"bytes,25,rep,name=specialization,proto3" json:"specialization,omitempty"`
	Version        []*USCoreImplantableDeviceProfile_Version        `protobuf:"bytes,26,rep,name=version,proto3" json:"version,omitempty"`
	Property       []*USCoreImplantableDeviceProfile_Property       `protobuf:"bytes,27,rep,name=property,proto3" json:"property,omitempty"`
	// Patient to whom Device is affixed
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,28,opt,name=patient,proto3" json:"patient,omitempty"`
	// Organization responsible for device
	Owner *datatypes_go_proto.Reference `protobuf:"bytes,29,opt,name=owner,proto3" json:"owner,omitempty"`
	// Details for human/organization for support
	Contact []*datatypes_go_proto.ContactPoint `protobuf:"bytes,30,rep,name=contact,proto3" json:"contact,omitempty"`
	// Where the device is found
	Location *datatypes_go_proto.Reference `protobuf:"bytes,31,opt,name=location,proto3" json:"location,omitempty"`
	// Network address to contact device
	Url *datatypes_go_proto.Uri `protobuf:"bytes,32,opt,name=url,proto3" json:"url,omitempty"`
	// Device notes and comments
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,33,rep,name=note,proto3" json:"note,omitempty"`
	// Safety Characteristics of Device
	Safety []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,34,rep,name=safety,proto3" json:"safety,omitempty"`
	// The parent device
	Parent *datatypes_go_proto.Reference `protobuf:"bytes,35,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *USCoreImplantableDeviceProfile) Reset() {
	*x = USCoreImplantableDeviceProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreImplantableDeviceProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreImplantableDeviceProfile) ProtoMessage() {}

func (x *USCoreImplantableDeviceProfile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreImplantableDeviceProfile.ProtoReflect.Descriptor instead.
func (*USCoreImplantableDeviceProfile) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{15}
}

func (x *USCoreImplantableDeviceProfile) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetDefinition() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetUdiCarrier() *USCoreImplantableDeviceProfile_UdiCarrier {
	if x != nil {
		return x.UdiCarrier
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetStatus() *USCoreImplantableDeviceProfile_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetStatusReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetDistinctIdentifier() *datatypes_go_proto.String {
	if x != nil {
		return x.DistinctIdentifier
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetManufacturer() *datatypes_go_proto.String {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetManufactureDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.ManufactureDate
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetExpirationDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetLotNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.LotNumber
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetSerialNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.SerialNumber
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetDeviceName() []*USCoreImplantableDeviceProfile_DeviceName {
	if x != nil {
		return x.DeviceName
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetModelNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.ModelNumber
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetPartNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.PartNumber
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetSpecialization() []*USCoreImplantableDeviceProfile_Specialization {
	if x != nil {
		return x.Specialization
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetVersion() []*USCoreImplantableDeviceProfile_Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetProperty() []*USCoreImplantableDeviceProfile_Property {
	if x != nil {
		return x.Property
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetOwner() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetContact() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetSafety() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Safety
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile) GetParent() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Parent
	}
	return nil
}

// Auto-generated from StructureDefinition for USCoreMedicationRequestProfile.
// Ordering of medication for patient or group.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-medicationrequest
type USCoreMedicationRequestProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External ids for this request
	Identifier []*datatypes_go_proto.Identifier           `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Status     *USCoreMedicationRequestProfile_StatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Reason for current status
	StatusReason *datatypes_go_proto.CodeableConcept        `protobuf:"bytes,12,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	Intent       *USCoreMedicationRequestProfile_IntentCode `protobuf:"bytes,13,opt,name=intent,proto3" json:"intent,omitempty"`
	// Type of medication usage
	Category []*datatypes_go_proto.CodeableConcept        `protobuf:"bytes,14,rep,name=category,proto3" json:"category,omitempty"`
	Priority *USCoreMedicationRequestProfile_PriorityCode `protobuf:"bytes,15,opt,name=priority,proto3" json:"priority,omitempty"`
	// True if request is prohibiting action
	DoNotPerform *datatypes_go_proto.Boolean                 `protobuf:"bytes,16,opt,name=do_not_perform,json=doNotPerform,proto3" json:"do_not_perform,omitempty"`
	Reported     *USCoreMedicationRequestProfile_ReportedX   `protobuf:"bytes,17,opt,name=reported,proto3" json:"reported,omitempty"`
	Medication   *USCoreMedicationRequestProfile_MedicationX `protobuf:"bytes,18,opt,name=medication,proto3" json:"medication,omitempty"`
	// Who or group medication request is for
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,19,opt,name=subject,proto3" json:"subject,omitempty"`
	// Encounter created as part of encounter/admission/stay
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Information to support ordering of the medication
	SupportingInformation []*datatypes_go_proto.Reference `protobuf:"bytes,21,rep,name=supporting_information,json=supportingInformation,proto3" json:"supporting_information,omitempty"`
	// When request was initially authored
	AuthoredOn *datatypes_go_proto.DateTime `protobuf:"bytes,22,opt,name=authored_on,json=authoredOn,proto3" json:"authored_on,omitempty"`
	// Who/What requested the Request
	Requester *datatypes_go_proto.Reference `protobuf:"bytes,23,opt,name=requester,proto3" json:"requester,omitempty"`
	// Intended performer of administration
	Performer *datatypes_go_proto.Reference `protobuf:"bytes,24,opt,name=performer,proto3" json:"performer,omitempty"`
	// Desired kind of performer of the medication administration
	PerformerType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,25,opt,name=performer_type,json=performerType,proto3" json:"performer_type,omitempty"`
	// Person who entered the request
	Recorder *datatypes_go_proto.Reference `protobuf:"bytes,26,opt,name=recorder,proto3" json:"recorder,omitempty"`
	// Reason or indication for ordering or not ordering the medication
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,27,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Condition or observation that supports why the prescription is being
	// written
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,28,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// Instantiates FHIR protocol or definition
	InstantiatesCanonical []*datatypes_go_proto.Canonical `protobuf:"bytes,29,rep,name=instantiates_canonical,json=instantiatesCanonical,proto3" json:"instantiates_canonical,omitempty"`
	// Instantiates external protocol or definition
	InstantiatesUri []*datatypes_go_proto.Uri `protobuf:"bytes,30,rep,name=instantiates_uri,json=instantiatesUri,proto3" json:"instantiates_uri,omitempty"`
	// What request fulfills
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,31,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// Composite request this is part of
	GroupIdentifier *datatypes_go_proto.Identifier `protobuf:"bytes,32,opt,name=group_identifier,json=groupIdentifier,proto3" json:"group_identifier,omitempty"`
	// Overall pattern of medication administration
	CourseOfTherapyType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,33,opt,name=course_of_therapy_type,json=courseOfTherapyType,proto3" json:"course_of_therapy_type,omitempty"`
	// Associated insurance coverage
	Insurance []*datatypes_go_proto.Reference `protobuf:"bytes,34,rep,name=insurance,proto3" json:"insurance,omitempty"`
	// Information about the prescription
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,35,rep,name=note,proto3" json:"note,omitempty"`
	// How the medication should be taken
	DosageInstruction []*datatypes_go_proto.Dosage                    `protobuf:"bytes,36,rep,name=dosage_instruction,json=dosageInstruction,proto3" json:"dosage_instruction,omitempty"`
	DispenseRequest   *USCoreMedicationRequestProfile_DispenseRequest `protobuf:"bytes,37,opt,name=dispense_request,json=dispenseRequest,proto3" json:"dispense_request,omitempty"`
	Substitution      *USCoreMedicationRequestProfile_Substitution    `protobuf:"bytes,38,opt,name=substitution,proto3" json:"substitution,omitempty"`
	// An order/prescription that is being replaced
	PriorPrescription *datatypes_go_proto.Reference `protobuf:"bytes,39,opt,name=prior_prescription,json=priorPrescription,proto3" json:"prior_prescription,omitempty"`
	// Clinical Issue with action
	DetectedIssue []*datatypes_go_proto.Reference `protobuf:"bytes,40,rep,name=detected_issue,json=detectedIssue,proto3" json:"detected_issue,omitempty"`
	// A list of events of interest in the lifecycle
	EventHistory []*datatypes_go_proto.Reference `protobuf:"bytes,41,rep,name=event_history,json=eventHistory,proto3" json:"event_history,omitempty"`
}

func (x *USCoreMedicationRequestProfile) Reset() {
	*x = USCoreMedicationRequestProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreMedicationRequestProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreMedicationRequestProfile) ProtoMessage() {}

func (x *USCoreMedicationRequestProfile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreMedicationRequestProfile.ProtoReflect.Descriptor instead.
func (*USCoreMedicationRequestProfile) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{16}
}

func (x *USCoreMedicationRequestProfile) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetStatus() *USCoreMedicationRequestProfile_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetStatusReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetIntent() *USCoreMedicationRequestProfile_IntentCode {
	if x != nil {
		return x.Intent
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetPriority() *USCoreMedicationRequestProfile_PriorityCode {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetDoNotPerform() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.DoNotPerform
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetReported() *USCoreMedicationRequestProfile_ReportedX {
	if x != nil {
		return x.Reported
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetMedication() *USCoreMedicationRequestProfile_MedicationX {
	if x != nil {
		return x.Medication
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetSupportingInformation() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SupportingInformation
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetAuthoredOn() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.AuthoredOn
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetRequester() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Requester
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetPerformer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetPerformerType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PerformerType
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetRecorder() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Recorder
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetInstantiatesCanonical() []*datatypes_go_proto.Canonical {
	if x != nil {
		return x.InstantiatesCanonical
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetInstantiatesUri() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.InstantiatesUri
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetGroupIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.GroupIdentifier
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetCourseOfTherapyType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.CourseOfTherapyType
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetInsurance() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Insurance
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetDosageInstruction() []*datatypes_go_proto.Dosage {
	if x != nil {
		return x.DosageInstruction
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetDispenseRequest() *USCoreMedicationRequestProfile_DispenseRequest {
	if x != nil {
		return x.DispenseRequest
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetSubstitution() *USCoreMedicationRequestProfile_Substitution {
	if x != nil {
		return x.Substitution
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetPriorPrescription() *datatypes_go_proto.Reference {
	if x != nil {
		return x.PriorPrescription
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetDetectedIssue() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.DetectedIssue
	}
	return nil
}

func (x *USCoreMedicationRequestProfile) GetEventHistory() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.EventHistory
	}
	return nil
}

// Auto-generated from StructureDefinition for USCoreMedicationProfile.
// Definition of a Medication.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-medication
type USCoreMedicationProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier for this medication
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Codes that identify this medication
	Code   *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=code,proto3" json:"code,omitempty"`
	Status *USCoreMedicationProfile_StatusCode `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// Manufacturer of the item
	Manufacturer *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// powder | tablets | capsule +
	Form *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=form,proto3" json:"form,omitempty"`
	// Amount of drug in package
	Amount     *datatypes_go_proto.Ratio             `protobuf:"bytes,15,opt,name=amount,proto3" json:"amount,omitempty"`
	Ingredient []*USCoreMedicationProfile_Ingredient `protobuf:"bytes,16,rep,name=ingredient,proto3" json:"ingredient,omitempty"`
	Batch      *USCoreMedicationProfile_Batch        `protobuf:"bytes,17,opt,name=batch,proto3" json:"batch,omitempty"`
}

func (x *USCoreMedicationProfile) Reset() {
	*x = USCoreMedicationProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreMedicationProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreMedicationProfile) ProtoMessage() {}

func (x *USCoreMedicationProfile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreMedicationProfile.ProtoReflect.Descriptor instead.
func (*USCoreMedicationProfile) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{17}
}

func (x *USCoreMedicationProfile) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreMedicationProfile) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *USCoreMedicationProfile) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *USCoreMedicationProfile) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *USCoreMedicationProfile) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *USCoreMedicationProfile) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *USCoreMedicationProfile) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreMedicationProfile) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreMedicationProfile) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *USCoreMedicationProfile) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *USCoreMedicationProfile) GetStatus() *USCoreMedicationProfile_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *USCoreMedicationProfile) GetManufacturer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *USCoreMedicationProfile) GetForm() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Form
	}
	return nil
}

func (x *USCoreMedicationProfile) GetAmount() *datatypes_go_proto.Ratio {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *USCoreMedicationProfile) GetIngredient() []*USCoreMedicationProfile_Ingredient {
	if x != nil {
		return x.Ingredient
	}
	return nil
}

func (x *USCoreMedicationProfile) GetBatch() *USCoreMedicationProfile_Batch {
	if x != nil {
		return x.Batch
	}
	return nil
}

// Auto-generated from StructureDefinition for USCoreGoalProfile.
// Describes the intended objective(s) for a patient, group or organization.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-goal
type USCoreGoalProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Ids for this goal
	Identifier      []*datatypes_go_proto.Identifier       `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	LifecycleStatus *USCoreGoalProfile_LifecycleStatusCode `protobuf:"bytes,11,opt,name=lifecycle_status,json=lifecycleStatus,proto3" json:"lifecycle_status,omitempty"`
	// in-progress | improving | worsening | no-change | achieved | sustaining |
	// not-achieved | no-progress | not-attainable
	AchievementStatus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=achievement_status,json=achievementStatus,proto3" json:"achievement_status,omitempty"`
	// E.g. Treatment, dietary, behavioral, etc.
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,rep,name=category,proto3" json:"category,omitempty"`
	// high-priority | medium-priority | low-priority
	Priority *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=priority,proto3" json:"priority,omitempty"`
	// Code or text describing goal
	Description *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=description,proto3" json:"description,omitempty"`
	// Who this goal is intended for
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=subject,proto3" json:"subject,omitempty"`
	Start   *USCoreGoalProfile_StartX     `protobuf:"bytes,17,opt,name=start,proto3" json:"start,omitempty"`
	Target  []*USCoreGoalProfile_Target   `protobuf:"bytes,18,rep,name=target,proto3" json:"target,omitempty"`
	// When goal status took effect
	StatusDate *datatypes_go_proto.Date `protobuf:"bytes,19,opt,name=status_date,json=statusDate,proto3" json:"status_date,omitempty"`
	// Reason for current status
	StatusReason *datatypes_go_proto.String `protobuf:"bytes,20,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// Who's responsible for creating Goal?
	ExpressedBy *datatypes_go_proto.Reference `protobuf:"bytes,21,opt,name=expressed_by,json=expressedBy,proto3" json:"expressed_by,omitempty"`
	// Issues addressed by this goal
	Addresses []*datatypes_go_proto.Reference `protobuf:"bytes,22,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// Comments about the goal
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,23,rep,name=note,proto3" json:"note,omitempty"`
	// What result was achieved regarding the goal?
	OutcomeCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,rep,name=outcome_code,json=outcomeCode,proto3" json:"outcome_code,omitempty"`
	// Observation that resulted from goal
	OutcomeReference []*datatypes_go_proto.Reference `protobuf:"bytes,25,rep,name=outcome_reference,json=outcomeReference,proto3" json:"outcome_reference,omitempty"`
}

func (x *USCoreGoalProfile) Reset() {
	*x = USCoreGoalProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreGoalProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreGoalProfile) ProtoMessage() {}

func (x *USCoreGoalProfile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreGoalProfile.ProtoReflect.Descriptor instead.
func (*USCoreGoalProfile) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{18}
}

func (x *USCoreGoalProfile) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreGoalProfile) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *USCoreGoalProfile) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *USCoreGoalProfile) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *USCoreGoalProfile) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *USCoreGoalProfile) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *USCoreGoalProfile) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreGoalProfile) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreGoalProfile) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *USCoreGoalProfile) GetLifecycleStatus() *USCoreGoalProfile_LifecycleStatusCode {
	if x != nil {
		return x.LifecycleStatus
	}
	return nil
}

func (x *USCoreGoalProfile) GetAchievementStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AchievementStatus
	}
	return nil
}

func (x *USCoreGoalProfile) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *USCoreGoalProfile) GetPriority() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *USCoreGoalProfile) GetDescription() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *USCoreGoalProfile) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *USCoreGoalProfile) GetStart() *USCoreGoalProfile_StartX {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *USCoreGoalProfile) GetTarget() []*USCoreGoalProfile_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *USCoreGoalProfile) GetStatusDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.StatusDate
	}
	return nil
}

func (x *USCoreGoalProfile) GetStatusReason() *datatypes_go_proto.String {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

func (x *USCoreGoalProfile) GetExpressedBy() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ExpressedBy
	}
	return nil
}

func (x *USCoreGoalProfile) GetAddresses() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *USCoreGoalProfile) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *USCoreGoalProfile) GetOutcomeCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.OutcomeCode
	}
	return nil
}

func (x *USCoreGoalProfile) GetOutcomeReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.OutcomeReference
	}
	return nil
}

// Auto-generated from StructureDefinition for USCoreRaceExtension.
// US Core Race Extension.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-race
type PatientUSCoreRaceExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension   []*datatypes_go_proto.Extension                 `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	OmbCategory []*PatientUSCoreRaceExtension_OmbCategoryCoding `protobuf:"bytes,4,rep,name=omb_category,json=ombCategory,proto3" json:"omb_category,omitempty"`
	Detailed    []*PatientUSCoreRaceExtension_DetailedCoding    `protobuf:"bytes,5,rep,name=detailed,proto3" json:"detailed,omitempty"`
	// Race Text
	Text *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *PatientUSCoreRaceExtension) Reset() {
	*x = PatientUSCoreRaceExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientUSCoreRaceExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientUSCoreRaceExtension) ProtoMessage() {}

func (x *PatientUSCoreRaceExtension) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientUSCoreRaceExtension.ProtoReflect.Descriptor instead.
func (*PatientUSCoreRaceExtension) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{19}
}

func (x *PatientUSCoreRaceExtension) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientUSCoreRaceExtension) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PatientUSCoreRaceExtension) GetOmbCategory() []*PatientUSCoreRaceExtension_OmbCategoryCoding {
	if x != nil {
		return x.OmbCategory
	}
	return nil
}

func (x *PatientUSCoreRaceExtension) GetDetailed() []*PatientUSCoreRaceExtension_DetailedCoding {
	if x != nil {
		return x.Detailed
	}
	return nil
}

func (x *PatientUSCoreRaceExtension) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Auto-generated from StructureDefinition for USCorePractitionerRoleProfile.
// Roles/organizations the practitioner is associated with.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-practitionerrole
type USCorePractitionerRoleProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifiers that are specific to a role/location
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Whether this practitioner role record is in active use
	Active *datatypes_go_proto.Boolean `protobuf:"bytes,11,opt,name=active,proto3" json:"active,omitempty"`
	// The period during which the practitioner is authorized to perform in these
	// role(s)
	Period *datatypes_go_proto.Period `protobuf:"bytes,12,opt,name=period,proto3" json:"period,omitempty"`
	// Practitioner that is able to provide the defined services for the
	// organization
	Practitioner *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=practitioner,proto3" json:"practitioner,omitempty"`
	// Organization where the roles are available
	Organization *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=organization,proto3" json:"organization,omitempty"`
	// Roles which this practitioner may perform
	Code []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,rep,name=code,proto3" json:"code,omitempty"`
	// Specific specialty of the practitioner
	Specialty []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,rep,name=specialty,proto3" json:"specialty,omitempty"`
	// The location(s) at which this practitioner provides care
	Location []*datatypes_go_proto.Reference `protobuf:"bytes,17,rep,name=location,proto3" json:"location,omitempty"`
	// The list of healthcare services that this worker provides for this role's
	// Organization/Location(s)
	HealthcareService []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=healthcare_service,json=healthcareService,proto3" json:"healthcare_service,omitempty"`
	// Contact details that are specific to the role/location/service
	Telecom       []*datatypes_go_proto.ContactPoint             `protobuf:"bytes,19,rep,name=telecom,proto3" json:"telecom,omitempty"`
	AvailableTime []*USCorePractitionerRoleProfile_AvailableTime `protobuf:"bytes,20,rep,name=available_time,json=availableTime,proto3" json:"available_time,omitempty"`
	NotAvailable  []*USCorePractitionerRoleProfile_NotAvailable  `protobuf:"bytes,21,rep,name=not_available,json=notAvailable,proto3" json:"not_available,omitempty"`
	// Description of availability exceptions
	AvailabilityExceptions *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=availability_exceptions,json=availabilityExceptions,proto3" json:"availability_exceptions,omitempty"`
	// Technical endpoints providing access to services operated for the
	// practitioner with this role
	Endpoint []*datatypes_go_proto.Reference `protobuf:"bytes,23,rep,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *USCorePractitionerRoleProfile) Reset() {
	*x = USCorePractitionerRoleProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePractitionerRoleProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePractitionerRoleProfile) ProtoMessage() {}

func (x *USCorePractitionerRoleProfile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePractitionerRoleProfile.ProtoReflect.Descriptor instead.
func (*USCorePractitionerRoleProfile) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{20}
}

func (x *USCorePractitionerRoleProfile) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePractitionerRoleProfile) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *USCorePractitionerRoleProfile) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *USCorePractitionerRoleProfile) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *USCorePractitionerRoleProfile) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *USCorePractitionerRoleProfile) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *USCorePractitionerRoleProfile) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCorePractitionerRoleProfile) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCorePractitionerRoleProfile) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *USCorePractitionerRoleProfile) GetActive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *USCorePractitionerRoleProfile) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *USCorePractitionerRoleProfile) GetPractitioner() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Practitioner
	}
	return nil
}

func (x *USCorePractitionerRoleProfile) GetOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *USCorePractitionerRoleProfile) GetCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *USCorePractitionerRoleProfile) GetSpecialty() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Specialty
	}
	return nil
}

func (x *USCorePractitionerRoleProfile) GetLocation() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *USCorePractitionerRoleProfile) GetHealthcareService() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.HealthcareService
	}
	return nil
}

func (x *USCorePractitionerRoleProfile) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *USCorePractitionerRoleProfile) GetAvailableTime() []*USCorePractitionerRoleProfile_AvailableTime {
	if x != nil {
		return x.AvailableTime
	}
	return nil
}

func (x *USCorePractitionerRoleProfile) GetNotAvailable() []*USCorePractitionerRoleProfile_NotAvailable {
	if x != nil {
		return x.NotAvailable
	}
	return nil
}

func (x *USCorePractitionerRoleProfile) GetAvailabilityExceptions() *datatypes_go_proto.String {
	if x != nil {
		return x.AvailabilityExceptions
	}
	return nil
}

func (x *USCorePractitionerRoleProfile) GetEndpoint() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

// Auto-generated from StructureDefinition for USCoreAllergyIntolerance.
// Allergy or Intolerance (generally: Risk of adverse reaction to a substance).
// See
// http://hl7.org/fhir/us/core/StructureDefinition/us-core-allergyintolerance
type USCoreAllergyIntolerance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External ids for this item
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// active | inactive | resolved
	ClinicalStatus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=clinical_status,json=clinicalStatus,proto3" json:"clinical_status,omitempty"`
	// unconfirmed | confirmed | refuted | entered-in-error
	VerificationStatus *datatypes_go_proto.CodeableConcept       `protobuf:"bytes,12,opt,name=verification_status,json=verificationStatus,proto3" json:"verification_status,omitempty"`
	Type               *USCoreAllergyIntolerance_TypeCode        `protobuf:"bytes,13,opt,name=type,proto3" json:"type,omitempty"`
	Category           []*USCoreAllergyIntolerance_CategoryCode  `protobuf:"bytes,14,rep,name=category,proto3" json:"category,omitempty"`
	Criticality        *USCoreAllergyIntolerance_CriticalityCode `protobuf:"bytes,15,opt,name=criticality,proto3" json:"criticality,omitempty"`
	// Code that identifies the allergy or intolerance
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,opt,name=code,proto3" json:"code,omitempty"`
	// Who the sensitivity is for
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=patient,proto3" json:"patient,omitempty"`
	// Encounter when the allergy or intolerance was asserted
	Encounter *datatypes_go_proto.Reference    `protobuf:"bytes,18,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Onset     *USCoreAllergyIntolerance_OnsetX `protobuf:"bytes,19,opt,name=onset,proto3" json:"onset,omitempty"`
	// Date first version of the resource instance was recorded
	RecordedDate *datatypes_go_proto.DateTime `protobuf:"bytes,20,opt,name=recorded_date,json=recordedDate,proto3" json:"recorded_date,omitempty"`
	// Who recorded the sensitivity
	Recorder *datatypes_go_proto.Reference `protobuf:"bytes,21,opt,name=recorder,proto3" json:"recorder,omitempty"`
	// Source of the information about the allergy
	Asserter *datatypes_go_proto.Reference `protobuf:"bytes,22,opt,name=asserter,proto3" json:"asserter,omitempty"`
	// Date(/time) of last known occurrence of a reaction
	LastOccurrence *datatypes_go_proto.DateTime `protobuf:"bytes,23,opt,name=last_occurrence,json=lastOccurrence,proto3" json:"last_occurrence,omitempty"`
	// Additional text not captured in other fields
	Note     []*datatypes_go_proto.Annotation     `protobuf:"bytes,24,rep,name=note,proto3" json:"note,omitempty"`
	Reaction []*USCoreAllergyIntolerance_Reaction `protobuf:"bytes,25,rep,name=reaction,proto3" json:"reaction,omitempty"`
}

func (x *USCoreAllergyIntolerance) Reset() {
	*x = USCoreAllergyIntolerance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreAllergyIntolerance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreAllergyIntolerance) ProtoMessage() {}

func (x *USCoreAllergyIntolerance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreAllergyIntolerance.ProtoReflect.Descriptor instead.
func (*USCoreAllergyIntolerance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{21}
}

func (x *USCoreAllergyIntolerance) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreAllergyIntolerance) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *USCoreAllergyIntolerance) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *USCoreAllergyIntolerance) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *USCoreAllergyIntolerance) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *USCoreAllergyIntolerance) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *USCoreAllergyIntolerance) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreAllergyIntolerance) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreAllergyIntolerance) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *USCoreAllergyIntolerance) GetClinicalStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ClinicalStatus
	}
	return nil
}

func (x *USCoreAllergyIntolerance) GetVerificationStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.VerificationStatus
	}
	return nil
}

func (x *USCoreAllergyIntolerance) GetType() *USCoreAllergyIntolerance_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *USCoreAllergyIntolerance) GetCategory() []*USCoreAllergyIntolerance_CategoryCode {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *USCoreAllergyIntolerance) GetCriticality() *USCoreAllergyIntolerance_CriticalityCode {
	if x != nil {
		return x.Criticality
	}
	return nil
}

func (x *USCoreAllergyIntolerance) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *USCoreAllergyIntolerance) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *USCoreAllergyIntolerance) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *USCoreAllergyIntolerance) GetOnset() *USCoreAllergyIntolerance_OnsetX {
	if x != nil {
		return x.Onset
	}
	return nil
}

func (x *USCoreAllergyIntolerance) GetRecordedDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.RecordedDate
	}
	return nil
}

func (x *USCoreAllergyIntolerance) GetRecorder() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Recorder
	}
	return nil
}

func (x *USCoreAllergyIntolerance) GetAsserter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Asserter
	}
	return nil
}

func (x *USCoreAllergyIntolerance) GetLastOccurrence() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.LastOccurrence
	}
	return nil
}

func (x *USCoreAllergyIntolerance) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *USCoreAllergyIntolerance) GetReaction() []*USCoreAllergyIntolerance_Reaction {
	if x != nil {
		return x.Reaction
	}
	return nil
}

// Auto-generated from StructureDefinition for USCoreCarePlanProfile.
// Healthcare plan for patient or group.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-careplan
type USCoreCarePlanProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Ids for this plan
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Instantiates FHIR protocol or definition
	InstantiatesCanonical []*datatypes_go_proto.Canonical `protobuf:"bytes,11,rep,name=instantiates_canonical,json=instantiatesCanonical,proto3" json:"instantiates_canonical,omitempty"`
	// Instantiates external protocol or definition
	InstantiatesUri []*datatypes_go_proto.Uri `protobuf:"bytes,12,rep,name=instantiates_uri,json=instantiatesUri,proto3" json:"instantiates_uri,omitempty"`
	// Fulfills CarePlan
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,13,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// CarePlan replaced by this CarePlan
	Replaces []*datatypes_go_proto.Reference `protobuf:"bytes,14,rep,name=replaces,proto3" json:"replaces,omitempty"`
	// Part of referenced CarePlan
	PartOf []*datatypes_go_proto.Reference   `protobuf:"bytes,15,rep,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	Status *USCoreCarePlanProfile_StatusCode `protobuf:"bytes,16,opt,name=status,proto3" json:"status,omitempty"`
	Intent *USCoreCarePlanProfile_IntentCode `protobuf:"bytes,17,opt,name=intent,proto3" json:"intent,omitempty"`
	// Type of plan
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,rep,name=category,proto3" json:"category,omitempty"`
	// Human-friendly name for the care plan
	Title *datatypes_go_proto.String `protobuf:"bytes,19,opt,name=title,proto3" json:"title,omitempty"`
	// Summary of nature of plan
	Description *datatypes_go_proto.String `protobuf:"bytes,20,opt,name=description,proto3" json:"description,omitempty"`
	// Who the care plan is for
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,21,opt,name=subject,proto3" json:"subject,omitempty"`
	// Encounter created as part of
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,22,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Time period plan covers
	Period *datatypes_go_proto.Period `protobuf:"bytes,23,opt,name=period,proto3" json:"period,omitempty"`
	// Date record was first recorded
	Created *datatypes_go_proto.DateTime `protobuf:"bytes,24,opt,name=created,proto3" json:"created,omitempty"`
	// Who is the designated responsible party
	Author *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=author,proto3" json:"author,omitempty"`
	// Who provided the content of the care plan
	Contributor []*datatypes_go_proto.Reference `protobuf:"bytes,26,rep,name=contributor,proto3" json:"contributor,omitempty"`
	// Who's involved in plan?
	CareTeam []*datatypes_go_proto.Reference `protobuf:"bytes,27,rep,name=care_team,json=careTeam,proto3" json:"care_team,omitempty"`
	// Health issues this plan addresses
	Addresses []*datatypes_go_proto.Reference `protobuf:"bytes,28,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// Information considered as part of plan
	SupportingInfo []*datatypes_go_proto.Reference `protobuf:"bytes,29,rep,name=supporting_info,json=supportingInfo,proto3" json:"supporting_info,omitempty"`
	// Desired outcome of plan
	Goal     []*datatypes_go_proto.Reference   `protobuf:"bytes,30,rep,name=goal,proto3" json:"goal,omitempty"`
	Activity []*USCoreCarePlanProfile_Activity `protobuf:"bytes,31,rep,name=activity,proto3" json:"activity,omitempty"`
	// Comments about the plan
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,32,rep,name=note,proto3" json:"note,omitempty"`
}

func (x *USCoreCarePlanProfile) Reset() {
	*x = USCoreCarePlanProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreCarePlanProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreCarePlanProfile) ProtoMessage() {}

func (x *USCoreCarePlanProfile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreCarePlanProfile.ProtoReflect.Descriptor instead.
func (*USCoreCarePlanProfile) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{22}
}

func (x *USCoreCarePlanProfile) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetInstantiatesCanonical() []*datatypes_go_proto.Canonical {
	if x != nil {
		return x.InstantiatesCanonical
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetInstantiatesUri() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.InstantiatesUri
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetReplaces() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Replaces
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetPartOf() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetStatus() *USCoreCarePlanProfile_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetIntent() *USCoreCarePlanProfile_IntentCode {
	if x != nil {
		return x.Intent
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetCreated() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetAuthor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetContributor() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Contributor
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetCareTeam() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.CareTeam
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetAddresses() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetSupportingInfo() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SupportingInfo
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetGoal() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Goal
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetActivity() []*USCoreCarePlanProfile_Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *USCoreCarePlanProfile) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

// Auto-generated from StructureDefinition for USCorePatientProfile.
// Information about an individual or animal receiving health care services.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient
type USCorePatientProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// An identifier for this patient
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Whether this patient's record is in active use
	Active *datatypes_go_proto.Boolean `protobuf:"bytes,11,opt,name=active,proto3" json:"active,omitempty"`
	// A name associated with the patient
	Name []*datatypes_go_proto.HumanName `protobuf:"bytes,12,rep,name=name,proto3" json:"name,omitempty"`
	// A contact detail for the individual
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,13,rep,name=telecom,proto3" json:"telecom,omitempty"`
	Gender  *USCorePatientProfile_GenderCode   `protobuf:"bytes,14,opt,name=gender,proto3" json:"gender,omitempty"`
	// The date of birth for the individual
	BirthDate *datatypes_go_proto.Date        `protobuf:"bytes,15,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
	Deceased  *USCorePatientProfile_DeceasedX `protobuf:"bytes,16,opt,name=deceased,proto3" json:"deceased,omitempty"`
	// An address for the individual
	Address []*datatypes_go_proto.Address `protobuf:"bytes,17,rep,name=address,proto3" json:"address,omitempty"`
	// Marital (civil) status of a patient
	MaritalStatus *datatypes_go_proto.CodeableConcept  `protobuf:"bytes,18,opt,name=marital_status,json=maritalStatus,proto3" json:"marital_status,omitempty"`
	MultipleBirth *USCorePatientProfile_MultipleBirthX `protobuf:"bytes,19,opt,name=multiple_birth,json=multipleBirth,proto3" json:"multiple_birth,omitempty"`
	// Image of the patient
	Photo         []*datatypes_go_proto.Attachment      `protobuf:"bytes,20,rep,name=photo,proto3" json:"photo,omitempty"`
	Contact       []*USCorePatientProfile_Contact       `protobuf:"bytes,21,rep,name=contact,proto3" json:"contact,omitempty"`
	Communication []*USCorePatientProfile_Communication `protobuf:"bytes,22,rep,name=communication,proto3" json:"communication,omitempty"`
	// Patient's nominated primary care provider
	GeneralPractitioner []*datatypes_go_proto.Reference `protobuf:"bytes,23,rep,name=general_practitioner,json=generalPractitioner,proto3" json:"general_practitioner,omitempty"`
	// Organization that is the custodian of the patient record
	ManagingOrganization *datatypes_go_proto.Reference `protobuf:"bytes,24,opt,name=managing_organization,json=managingOrganization,proto3" json:"managing_organization,omitempty"`
	Link                 []*USCorePatientProfile_Link  `protobuf:"bytes,25,rep,name=link,proto3" json:"link,omitempty"`
	// US Core Race Extension
	Race *PatientUSCoreRaceExtension `protobuf:"bytes,26,opt,name=race,proto3" json:"race,omitempty"`
	// US Core ethnicity Extension
	Ethnicity *PatientUSCoreEthnicityExtension `protobuf:"bytes,27,opt,name=ethnicity,proto3" json:"ethnicity,omitempty"`
	// Extension
	Birthsex *PatientUSCoreBirthSexExtension_ValueCode `protobuf:"bytes,28,opt,name=birthsex,proto3" json:"birthsex,omitempty"`
}

func (x *USCorePatientProfile) Reset() {
	*x = USCorePatientProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePatientProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePatientProfile) ProtoMessage() {}

func (x *USCorePatientProfile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePatientProfile.ProtoReflect.Descriptor instead.
func (*USCorePatientProfile) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{23}
}

func (x *USCorePatientProfile) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePatientProfile) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *USCorePatientProfile) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *USCorePatientProfile) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *USCorePatientProfile) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *USCorePatientProfile) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *USCorePatientProfile) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCorePatientProfile) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCorePatientProfile) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *USCorePatientProfile) GetActive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *USCorePatientProfile) GetName() []*datatypes_go_proto.HumanName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *USCorePatientProfile) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *USCorePatientProfile) GetGender() *USCorePatientProfile_GenderCode {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *USCorePatientProfile) GetBirthDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.BirthDate
	}
	return nil
}

func (x *USCorePatientProfile) GetDeceased() *USCorePatientProfile_DeceasedX {
	if x != nil {
		return x.Deceased
	}
	return nil
}

func (x *USCorePatientProfile) GetAddress() []*datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *USCorePatientProfile) GetMaritalStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.MaritalStatus
	}
	return nil
}

func (x *USCorePatientProfile) GetMultipleBirth() *USCorePatientProfile_MultipleBirthX {
	if x != nil {
		return x.MultipleBirth
	}
	return nil
}

func (x *USCorePatientProfile) GetPhoto() []*datatypes_go_proto.Attachment {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *USCorePatientProfile) GetContact() []*USCorePatientProfile_Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *USCorePatientProfile) GetCommunication() []*USCorePatientProfile_Communication {
	if x != nil {
		return x.Communication
	}
	return nil
}

func (x *USCorePatientProfile) GetGeneralPractitioner() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.GeneralPractitioner
	}
	return nil
}

func (x *USCorePatientProfile) GetManagingOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ManagingOrganization
	}
	return nil
}

func (x *USCorePatientProfile) GetLink() []*USCorePatientProfile_Link {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *USCorePatientProfile) GetRace() *PatientUSCoreRaceExtension {
	if x != nil {
		return x.Race
	}
	return nil
}

func (x *USCorePatientProfile) GetEthnicity() *PatientUSCoreEthnicityExtension {
	if x != nil {
		return x.Ethnicity
	}
	return nil
}

func (x *USCorePatientProfile) GetBirthsex() *PatientUSCoreBirthSexExtension_ValueCode {
	if x != nil {
		return x.Birthsex
	}
	return nil
}

// Auto-generated from StructureDefinition for USCoreEthnicityExtension.
// US Core ethnicity Extension.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity
type PatientUSCoreEthnicityExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension   []*datatypes_go_proto.Extension                    `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	OmbCategory *PatientUSCoreEthnicityExtension_OmbCategoryCoding `protobuf:"bytes,4,opt,name=omb_category,json=ombCategory,proto3" json:"omb_category,omitempty"`
	Detailed    []*PatientUSCoreEthnicityExtension_DetailedCoding  `protobuf:"bytes,5,rep,name=detailed,proto3" json:"detailed,omitempty"`
	// ethnicity Text
	Text *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *PatientUSCoreEthnicityExtension) Reset() {
	*x = PatientUSCoreEthnicityExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientUSCoreEthnicityExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientUSCoreEthnicityExtension) ProtoMessage() {}

func (x *PatientUSCoreEthnicityExtension) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientUSCoreEthnicityExtension.ProtoReflect.Descriptor instead.
func (*PatientUSCoreEthnicityExtension) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{24}
}

func (x *PatientUSCoreEthnicityExtension) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientUSCoreEthnicityExtension) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PatientUSCoreEthnicityExtension) GetOmbCategory() *PatientUSCoreEthnicityExtension_OmbCategoryCoding {
	if x != nil {
		return x.OmbCategory
	}
	return nil
}

func (x *PatientUSCoreEthnicityExtension) GetDetailed() []*PatientUSCoreEthnicityExtension_DetailedCoding {
	if x != nil {
		return x.Detailed
	}
	return nil
}

func (x *PatientUSCoreEthnicityExtension) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Auto-generated from StructureDefinition for USCoreDirectEmailExtension.
// Email is a "direct" email.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-direct
type UsCoreDirectEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Value of extension
	ValueBoolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=value_boolean,json=valueBoolean,proto3" json:"value_boolean,omitempty"`
}

func (x *UsCoreDirectEmail) Reset() {
	*x = UsCoreDirectEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreDirectEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreDirectEmail) ProtoMessage() {}

func (x *UsCoreDirectEmail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreDirectEmail.ProtoReflect.Descriptor instead.
func (*UsCoreDirectEmail) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{25}
}

func (x *UsCoreDirectEmail) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreDirectEmail) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreDirectEmail) GetValueBoolean() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ValueBoolean
	}
	return nil
}

// Auto-generated from StructureDefinition for USCoreSmokingStatusProfile.
// Measurements and simple assertions.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-smokingstatus
type USCoreSmokingStatusProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,11,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// Part of referenced event
	PartOf []*datatypes_go_proto.Reference        `protobuf:"bytes,12,rep,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	Status *USCoreSmokingStatusProfile_StatusCode `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,rep,name=category,proto3" json:"category,omitempty"`
	// Smoking Status
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what the observation is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=subject,proto3" json:"subject,omitempty"`
	// What the observation is about, when it is not about the subject of record
	Focus []*datatypes_go_proto.Reference `protobuf:"bytes,17,rep,name=focus,proto3" json:"focus,omitempty"`
	// Healthcare event during which this observation is made
	Encounter *datatypes_go_proto.Reference          `protobuf:"bytes,18,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Effective *USCoreSmokingStatusProfile_EffectiveX `protobuf:"bytes,19,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this version was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,20,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference    `protobuf:"bytes,21,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *USCoreSmokingStatusProfile_ValueX `protobuf:"bytes,22,opt,name=value,proto3" json:"value,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,rep,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about the observation
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,25,rep,name=note,proto3" json:"note,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,26,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,27,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,28,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference                `protobuf:"bytes,29,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange []*USCoreSmokingStatusProfile_ReferenceRange `protobuf:"bytes,30,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	// Related resource that belongs to the Observation group
	HasMember []*datatypes_go_proto.Reference `protobuf:"bytes,31,rep,name=has_member,json=hasMember,proto3" json:"has_member,omitempty"`
	// Related measurements the observation is made from
	DerivedFrom []*datatypes_go_proto.Reference         `protobuf:"bytes,32,rep,name=derived_from,json=derivedFrom,proto3" json:"derived_from,omitempty"`
	Component   []*USCoreSmokingStatusProfile_Component `protobuf:"bytes,33,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *USCoreSmokingStatusProfile) Reset() {
	*x = USCoreSmokingStatusProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreSmokingStatusProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreSmokingStatusProfile) ProtoMessage() {}

func (x *USCoreSmokingStatusProfile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreSmokingStatusProfile.ProtoReflect.Descriptor instead.
func (*USCoreSmokingStatusProfile) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{26}
}

func (x *USCoreSmokingStatusProfile) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetPartOf() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetStatus() *USCoreSmokingStatusProfile_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetFocus() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Focus
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetEffective() *USCoreSmokingStatusProfile_EffectiveX {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetValue() *USCoreSmokingStatusProfile_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetInterpretation() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetReferenceRange() []*USCoreSmokingStatusProfile_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetHasMember() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.HasMember
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetDerivedFrom() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.DerivedFrom
	}
	return nil
}

func (x *USCoreSmokingStatusProfile) GetComponent() []*USCoreSmokingStatusProfile_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// Auto-generated from StructureDefinition for USCoreOrganizationProfile.
// A grouping of people or organizations with a common purpose.
// See http://hl7.org/fhir/us/core/StructureDefinition/us-core-organization
type USCoreOrganizationProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifies this organization  across multiple systems
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Whether the organization's record is still in active use
	Active *datatypes_go_proto.Boolean `protobuf:"bytes,11,opt,name=active,proto3" json:"active,omitempty"`
	// Kind of organization
	Type []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=type,proto3" json:"type,omitempty"`
	// Name used for the organization
	Name *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// A list of alternate names that the organization is known as, or was known
	// as in the past
	Alias []*datatypes_go_proto.String `protobuf:"bytes,14,rep,name=alias,proto3" json:"alias,omitempty"`
	// A contact detail for the organization
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,15,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// An address for the organization
	Address []*datatypes_go_proto.Address `protobuf:"bytes,16,rep,name=address,proto3" json:"address,omitempty"`
	// The organization of which this organization forms a part
	PartOf  *datatypes_go_proto.Reference        `protobuf:"bytes,17,opt,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	Contact []*USCoreOrganizationProfile_Contact `protobuf:"bytes,18,rep,name=contact,proto3" json:"contact,omitempty"`
	// Technical endpoints providing access to services operated for the
	// organization
	Endpoint []*datatypes_go_proto.Reference `protobuf:"bytes,19,rep,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *USCoreOrganizationProfile) Reset() {
	*x = USCoreOrganizationProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreOrganizationProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreOrganizationProfile) ProtoMessage() {}

func (x *USCoreOrganizationProfile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreOrganizationProfile.ProtoReflect.Descriptor instead.
func (*USCoreOrganizationProfile) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{27}
}

func (x *USCoreOrganizationProfile) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreOrganizationProfile) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *USCoreOrganizationProfile) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *USCoreOrganizationProfile) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *USCoreOrganizationProfile) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *USCoreOrganizationProfile) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *USCoreOrganizationProfile) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreOrganizationProfile) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreOrganizationProfile) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *USCoreOrganizationProfile) GetActive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *USCoreOrganizationProfile) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *USCoreOrganizationProfile) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *USCoreOrganizationProfile) GetAlias() []*datatypes_go_proto.String {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *USCoreOrganizationProfile) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *USCoreOrganizationProfile) GetAddress() []*datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *USCoreOrganizationProfile) GetPartOf() *datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *USCoreOrganizationProfile) GetContact() []*USCoreOrganizationProfile_Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *USCoreOrganizationProfile) GetEndpoint() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

// Auto-generated from StructureDefinition for
// USCorePediatricBMIforAgeObservationProfile. FHIR Vital Signs Profile. See
// http://hl7.org/fhir/us/core/StructureDefinition/pediatric-bmi-for-age
type USCorePediatricBMIforAgeObservationProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,11,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// Part of referenced event
	PartOf []*datatypes_go_proto.Reference                        `protobuf:"bytes,12,rep,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	Status *USCorePediatricBMIforAgeObservationProfile_StatusCode `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,rep,name=category,proto3" json:"category,omitempty"`
	// BMI percentile per age and sex for youth 2-20
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what the observation is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=subject,proto3" json:"subject,omitempty"`
	// What the observation is about, when it is not about the subject of record
	Focus []*datatypes_go_proto.Reference `protobuf:"bytes,17,rep,name=focus,proto3" json:"focus,omitempty"`
	// Healthcare event during which this observation is made
	Encounter *datatypes_go_proto.Reference                          `protobuf:"bytes,18,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Effective *USCorePediatricBMIforAgeObservationProfile_EffectiveX `protobuf:"bytes,19,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this version was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,20,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference                    `protobuf:"bytes,21,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *USCorePediatricBMIforAgeObservationProfile_ValueX `protobuf:"bytes,22,opt,name=value,proto3" json:"value,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,rep,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about the observation
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,25,rep,name=note,proto3" json:"note,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,26,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,27,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,28,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference                                `protobuf:"bytes,29,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange []*USCorePediatricBMIforAgeObservationProfile_ReferenceRange `protobuf:"bytes,30,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	// Used when reporting vital signs panel components
	HasMember []*datatypes_go_proto.Reference `protobuf:"bytes,31,rep,name=has_member,json=hasMember,proto3" json:"has_member,omitempty"`
	// Related measurements the observation is made from
	DerivedFrom []*datatypes_go_proto.Reference                         `protobuf:"bytes,32,rep,name=derived_from,json=derivedFrom,proto3" json:"derived_from,omitempty"`
	Component   []*USCorePediatricBMIforAgeObservationProfile_Component `protobuf:"bytes,33,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *USCorePediatricBMIforAgeObservationProfile) Reset() {
	*x = USCorePediatricBMIforAgeObservationProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePediatricBMIforAgeObservationProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePediatricBMIforAgeObservationProfile) ProtoMessage() {}

func (x *USCorePediatricBMIforAgeObservationProfile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePediatricBMIforAgeObservationProfile.ProtoReflect.Descriptor instead.
func (*USCorePediatricBMIforAgeObservationProfile) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{28}
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetPartOf() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetStatus() *USCorePediatricBMIforAgeObservationProfile_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetFocus() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Focus
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetEffective() *USCorePediatricBMIforAgeObservationProfile_EffectiveX {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetValue() *USCorePediatricBMIforAgeObservationProfile_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetInterpretation() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetReferenceRange() []*USCorePediatricBMIforAgeObservationProfile_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetHasMember() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.HasMember
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetDerivedFrom() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.DerivedFrom
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile) GetComponent() []*USCorePediatricBMIforAgeObservationProfile_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// preparation | in-progress | not-done | on-hold | stopped | completed |
// entered-in-error | unknown
type USCoreProcedureProfile_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.EventStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.EventStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension      `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreProcedureProfile_StatusCode) Reset() {
	*x = USCoreProcedureProfile_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreProcedureProfile_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreProcedureProfile_StatusCode) ProtoMessage() {}

func (x *USCoreProcedureProfile_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreProcedureProfile_StatusCode.ProtoReflect.Descriptor instead.
func (*USCoreProcedureProfile_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{0, 0}
}

func (x *USCoreProcedureProfile_StatusCode) GetValue() codes_go_proto.EventStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.EventStatusCode_INVALID_UNINITIALIZED
}

func (x *USCoreProcedureProfile_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreProcedureProfile_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// When the procedure was performed
type USCoreProcedureProfile_PerformedX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCoreProcedureProfile_PerformedX_DateTime
	//	*USCoreProcedureProfile_PerformedX_Period
	Choice isUSCoreProcedureProfile_PerformedX_Choice `protobuf_oneof:"choice"`
}

func (x *USCoreProcedureProfile_PerformedX) Reset() {
	*x = USCoreProcedureProfile_PerformedX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreProcedureProfile_PerformedX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreProcedureProfile_PerformedX) ProtoMessage() {}

func (x *USCoreProcedureProfile_PerformedX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreProcedureProfile_PerformedX.ProtoReflect.Descriptor instead.
func (*USCoreProcedureProfile_PerformedX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{0, 1}
}

func (m *USCoreProcedureProfile_PerformedX) GetChoice() isUSCoreProcedureProfile_PerformedX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCoreProcedureProfile_PerformedX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*USCoreProcedureProfile_PerformedX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *USCoreProcedureProfile_PerformedX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*USCoreProcedureProfile_PerformedX_Period); ok {
		return x.Period
	}
	return nil
}

type isUSCoreProcedureProfile_PerformedX_Choice interface {
	isUSCoreProcedureProfile_PerformedX_Choice()
}

type USCoreProcedureProfile_PerformedX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type USCoreProcedureProfile_PerformedX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*USCoreProcedureProfile_PerformedX_DateTime) isUSCoreProcedureProfile_PerformedX_Choice() {}

func (*USCoreProcedureProfile_PerformedX_Period) isUSCoreProcedureProfile_PerformedX_Choice() {}

// The people who performed the procedure
type USCoreProcedureProfile_Performer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of performance
	Function *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=function,proto3" json:"function,omitempty"`
	// The reference to the practitioner
	Actor *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=actor,proto3" json:"actor,omitempty"`
	// Organization the device or practitioner was acting for
	OnBehalfOf *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=on_behalf_of,json=onBehalfOf,proto3" json:"on_behalf_of,omitempty"`
}

func (x *USCoreProcedureProfile_Performer) Reset() {
	*x = USCoreProcedureProfile_Performer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreProcedureProfile_Performer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreProcedureProfile_Performer) ProtoMessage() {}

func (x *USCoreProcedureProfile_Performer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreProcedureProfile_Performer.ProtoReflect.Descriptor instead.
func (*USCoreProcedureProfile_Performer) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{0, 2}
}

func (x *USCoreProcedureProfile_Performer) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreProcedureProfile_Performer) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreProcedureProfile_Performer) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreProcedureProfile_Performer) GetFunction() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *USCoreProcedureProfile_Performer) GetActor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *USCoreProcedureProfile_Performer) GetOnBehalfOf() *datatypes_go_proto.Reference {
	if x != nil {
		return x.OnBehalfOf
	}
	return nil
}

// Manipulated, implanted, or removed device
type USCoreProcedureProfile_FocalDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Kind of change to device
	Action *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	// Device that was changed
	Manipulated *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=manipulated,proto3" json:"manipulated,omitempty"`
}

func (x *USCoreProcedureProfile_FocalDevice) Reset() {
	*x = USCoreProcedureProfile_FocalDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreProcedureProfile_FocalDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreProcedureProfile_FocalDevice) ProtoMessage() {}

func (x *USCoreProcedureProfile_FocalDevice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreProcedureProfile_FocalDevice.ProtoReflect.Descriptor instead.
func (*USCoreProcedureProfile_FocalDevice) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{0, 3}
}

func (x *USCoreProcedureProfile_FocalDevice) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreProcedureProfile_FocalDevice) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreProcedureProfile_FocalDevice) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreProcedureProfile_FocalDevice) GetAction() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *USCoreProcedureProfile_FocalDevice) GetManipulated() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Manipulated
	}
	return nil
}

// male | female | other | unknown
type USCorePractitionerProfile_GenderCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AdministrativeGenderCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.AdministrativeGenderCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension               `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCorePractitionerProfile_GenderCode) Reset() {
	*x = USCorePractitionerProfile_GenderCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePractitionerProfile_GenderCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePractitionerProfile_GenderCode) ProtoMessage() {}

func (x *USCorePractitionerProfile_GenderCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePractitionerProfile_GenderCode.ProtoReflect.Descriptor instead.
func (*USCorePractitionerProfile_GenderCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{1, 0}
}

func (x *USCorePractitionerProfile_GenderCode) GetValue() codes_go_proto.AdministrativeGenderCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AdministrativeGenderCode_INVALID_UNINITIALIZED
}

func (x *USCorePractitionerProfile_GenderCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePractitionerProfile_GenderCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Certification, licenses, or training pertaining to the provision of care
type USCorePractitionerProfile_Qualification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// An identifier for this qualification for the practitioner
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,4,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Coded representation of the qualification
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	// Period during which the qualification is valid
	Period *datatypes_go_proto.Period `protobuf:"bytes,6,opt,name=period,proto3" json:"period,omitempty"`
	// Organization that regulates and issues the qualification
	Issuer *datatypes_go_proto.Reference `protobuf:"bytes,7,opt,name=issuer,proto3" json:"issuer,omitempty"`
}

func (x *USCorePractitionerProfile_Qualification) Reset() {
	*x = USCorePractitionerProfile_Qualification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePractitionerProfile_Qualification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePractitionerProfile_Qualification) ProtoMessage() {}

func (x *USCorePractitionerProfile_Qualification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePractitionerProfile_Qualification.ProtoReflect.Descriptor instead.
func (*USCorePractitionerProfile_Qualification) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{1, 1}
}

func (x *USCorePractitionerProfile_Qualification) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePractitionerProfile_Qualification) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCorePractitionerProfile_Qualification) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCorePractitionerProfile_Qualification) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *USCorePractitionerProfile_Qualification) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *USCorePractitionerProfile_Qualification) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *USCorePractitionerProfile_Qualification) GetIssuer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Issuer
	}
	return nil
}

// registered | partial | preliminary | final +
type USCoreDiagnosticReportProfileLaboratoryReporting_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.DiagnosticReportStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.DiagnosticReportStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting_StatusCode) Reset() {
	*x = USCoreDiagnosticReportProfileLaboratoryReporting_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreDiagnosticReportProfileLaboratoryReporting_StatusCode) ProtoMessage() {}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreDiagnosticReportProfileLaboratoryReporting_StatusCode.ProtoReflect.Descriptor instead.
func (*USCoreDiagnosticReportProfileLaboratoryReporting_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{2, 0}
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting_StatusCode) GetValue() codes_go_proto.DiagnosticReportStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.DiagnosticReportStatusCode_INVALID_UNINITIALIZED
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Specimen Collection Datetime or Period
type USCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX_DateTime
	//	*USCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX_Period
	Choice isUSCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX_Choice `protobuf_oneof:"choice"`
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX) Reset() {
	*x = USCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX) ProtoMessage() {}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX.ProtoReflect.Descriptor instead.
func (*USCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{2, 1}
}

func (m *USCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX) GetChoice() isUSCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*USCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*USCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX_Period); ok {
		return x.Period
	}
	return nil
}

type isUSCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX_Choice interface {
	isUSCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX_Choice()
}

type USCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type USCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*USCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX_DateTime) isUSCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX_Choice() {
}

func (*USCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX_Period) isUSCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX_Choice() {
}

// Key images associated with this report
type USCoreDiagnosticReportProfileLaboratoryReporting_Media struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Comment about the image (e.g. explanation)
	Comment *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	// Reference to the image source
	Link *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting_Media) Reset() {
	*x = USCoreDiagnosticReportProfileLaboratoryReporting_Media{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting_Media) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreDiagnosticReportProfileLaboratoryReporting_Media) ProtoMessage() {}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting_Media) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreDiagnosticReportProfileLaboratoryReporting_Media.ProtoReflect.Descriptor instead.
func (*USCoreDiagnosticReportProfileLaboratoryReporting_Media) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{2, 2}
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting_Media) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting_Media) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting_Media) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting_Media) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileLaboratoryReporting_Media) GetLink() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Link
	}
	return nil
}

// registered | preliminary | final | amended +
type USCorePediatricWeightForHeightObservationProfile_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ObservationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.ObservationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension            `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCorePediatricWeightForHeightObservationProfile_StatusCode) Reset() {
	*x = USCorePediatricWeightForHeightObservationProfile_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePediatricWeightForHeightObservationProfile_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePediatricWeightForHeightObservationProfile_StatusCode) ProtoMessage() {}

func (x *USCorePediatricWeightForHeightObservationProfile_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePediatricWeightForHeightObservationProfile_StatusCode.ProtoReflect.Descriptor instead.
func (*USCorePediatricWeightForHeightObservationProfile_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{3, 0}
}

func (x *USCorePediatricWeightForHeightObservationProfile_StatusCode) GetValue() codes_go_proto.ObservationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ObservationStatusCode_INVALID_UNINITIALIZED
}

func (x *USCorePediatricWeightForHeightObservationProfile_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Often just a dateTime for Vital Signs
type USCorePediatricWeightForHeightObservationProfile_EffectiveX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCorePediatricWeightForHeightObservationProfile_EffectiveX_DateTime
	//	*USCorePediatricWeightForHeightObservationProfile_EffectiveX_Period
	Choice isUSCorePediatricWeightForHeightObservationProfile_EffectiveX_Choice `protobuf_oneof:"choice"`
}

func (x *USCorePediatricWeightForHeightObservationProfile_EffectiveX) Reset() {
	*x = USCorePediatricWeightForHeightObservationProfile_EffectiveX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePediatricWeightForHeightObservationProfile_EffectiveX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePediatricWeightForHeightObservationProfile_EffectiveX) ProtoMessage() {}

func (x *USCorePediatricWeightForHeightObservationProfile_EffectiveX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePediatricWeightForHeightObservationProfile_EffectiveX.ProtoReflect.Descriptor instead.
func (*USCorePediatricWeightForHeightObservationProfile_EffectiveX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{3, 1}
}

func (m *USCorePediatricWeightForHeightObservationProfile_EffectiveX) GetChoice() isUSCorePediatricWeightForHeightObservationProfile_EffectiveX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_EffectiveX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*USCorePediatricWeightForHeightObservationProfile_EffectiveX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_EffectiveX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*USCorePediatricWeightForHeightObservationProfile_EffectiveX_Period); ok {
		return x.Period
	}
	return nil
}

type isUSCorePediatricWeightForHeightObservationProfile_EffectiveX_Choice interface {
	isUSCorePediatricWeightForHeightObservationProfile_EffectiveX_Choice()
}

type USCorePediatricWeightForHeightObservationProfile_EffectiveX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type USCorePediatricWeightForHeightObservationProfile_EffectiveX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*USCorePediatricWeightForHeightObservationProfile_EffectiveX_DateTime) isUSCorePediatricWeightForHeightObservationProfile_EffectiveX_Choice() {
}

func (*USCorePediatricWeightForHeightObservationProfile_EffectiveX_Period) isUSCorePediatricWeightForHeightObservationProfile_EffectiveX_Choice() {
}

// Vital Signs value are recorded using the Quantity data type. For supporting
// observations such as Cuff size could use other datatypes such as
// CodeableConcept.
type USCorePediatricWeightForHeightObservationProfile_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCorePediatricWeightForHeightObservationProfile_ValueX_Quantity
	Choice isUSCorePediatricWeightForHeightObservationProfile_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *USCorePediatricWeightForHeightObservationProfile_ValueX) Reset() {
	*x = USCorePediatricWeightForHeightObservationProfile_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePediatricWeightForHeightObservationProfile_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePediatricWeightForHeightObservationProfile_ValueX) ProtoMessage() {}

func (x *USCorePediatricWeightForHeightObservationProfile_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePediatricWeightForHeightObservationProfile_ValueX.ProtoReflect.Descriptor instead.
func (*USCorePediatricWeightForHeightObservationProfile_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{3, 2}
}

func (m *USCorePediatricWeightForHeightObservationProfile_ValueX) GetChoice() isUSCorePediatricWeightForHeightObservationProfile_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*USCorePediatricWeightForHeightObservationProfile_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isUSCorePediatricWeightForHeightObservationProfile_ValueX_Choice interface {
	isUSCorePediatricWeightForHeightObservationProfile_ValueX_Choice()
}

type USCorePediatricWeightForHeightObservationProfile_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*USCorePediatricWeightForHeightObservationProfile_ValueX_Quantity) isUSCorePediatricWeightForHeightObservationProfile_ValueX_Choice() {
}

// Provides guide for interpretation
type USCorePediatricWeightForHeightObservationProfile_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Low Range, if relevant
	Low *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// High Range, if relevant
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Reference range qualifier
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Reference range population
	AppliesTo []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
	// Applicable age range, if relevant
	Age *datatypes_go_proto.Range `protobuf:"bytes,8,opt,name=age,proto3" json:"age,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *USCorePediatricWeightForHeightObservationProfile_ReferenceRange) Reset() {
	*x = USCorePediatricWeightForHeightObservationProfile_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePediatricWeightForHeightObservationProfile_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePediatricWeightForHeightObservationProfile_ReferenceRange) ProtoMessage() {}

func (x *USCorePediatricWeightForHeightObservationProfile_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePediatricWeightForHeightObservationProfile_ReferenceRange.ProtoReflect.Descriptor instead.
func (*USCorePediatricWeightForHeightObservationProfile_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{3, 3}
}

func (x *USCorePediatricWeightForHeightObservationProfile_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_ReferenceRange) GetLow() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_ReferenceRange) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_ReferenceRange) GetAppliesTo() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AppliesTo
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_ReferenceRange) GetAge() *datatypes_go_proto.Range {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Used when reporting systolic and diastolic blood pressure.
type USCorePediatricWeightForHeightObservationProfile_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept                                `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *USCorePediatricWeightForHeightObservationProfile_Component_ValueX `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*USCorePediatricWeightForHeightObservationProfile_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *USCorePediatricWeightForHeightObservationProfile_Component) Reset() {
	*x = USCorePediatricWeightForHeightObservationProfile_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePediatricWeightForHeightObservationProfile_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePediatricWeightForHeightObservationProfile_Component) ProtoMessage() {}

func (x *USCorePediatricWeightForHeightObservationProfile_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePediatricWeightForHeightObservationProfile_Component.ProtoReflect.Descriptor instead.
func (*USCorePediatricWeightForHeightObservationProfile_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{3, 4}
}

func (x *USCorePediatricWeightForHeightObservationProfile_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_Component) GetValue() *USCorePediatricWeightForHeightObservationProfile_Component_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_Component) GetInterpretation() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_Component) GetReferenceRange() []*USCorePediatricWeightForHeightObservationProfile_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Vital Sign Value recorded with UCUM
type USCorePediatricWeightForHeightObservationProfile_Component_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Quantity
	//	*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_CodeableConcept
	//	*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_StringValue
	//	*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Boolean
	//	*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Integer
	//	*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Range
	//	*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Ratio
	//	*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_SampledData
	//	*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Time
	//	*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_DateTime
	//	*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Period
	Choice isUSCorePediatricWeightForHeightObservationProfile_Component_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *USCorePediatricWeightForHeightObservationProfile_Component_ValueX) Reset() {
	*x = USCorePediatricWeightForHeightObservationProfile_Component_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePediatricWeightForHeightObservationProfile_Component_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePediatricWeightForHeightObservationProfile_Component_ValueX) ProtoMessage() {}

func (x *USCorePediatricWeightForHeightObservationProfile_Component_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePediatricWeightForHeightObservationProfile_Component_ValueX.ProtoReflect.Descriptor instead.
func (*USCorePediatricWeightForHeightObservationProfile_Component_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{3, 4, 0}
}

func (m *USCorePediatricWeightForHeightObservationProfile_Component_ValueX) GetChoice() isUSCorePediatricWeightForHeightObservationProfile_Component_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_Component_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_Component_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_Component_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_Component_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_Component_ValueX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_Component_ValueX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_Component_ValueX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_Component_ValueX) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetChoice().(*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_Component_ValueX) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetChoice().(*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Time); ok {
		return x.Time
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_Component_ValueX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *USCorePediatricWeightForHeightObservationProfile_Component_ValueX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Period); ok {
		return x.Period
	}
	return nil
}

type isUSCorePediatricWeightForHeightObservationProfile_Component_ValueX_Choice interface {
	isUSCorePediatricWeightForHeightObservationProfile_Component_ValueX_Choice()
}

type USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type USCorePediatricWeightForHeightObservationProfile_Component_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type USCorePediatricWeightForHeightObservationProfile_Component_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=boolean,proto3,oneof"`
}

type USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,5,opt,name=integer,proto3,oneof"`
}

type USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,6,opt,name=range,proto3,oneof"`
}

type USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,7,opt,name=ratio,proto3,oneof"`
}

type USCorePediatricWeightForHeightObservationProfile_Component_ValueX_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,8,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,9,opt,name=time,proto3,oneof"`
}

type USCorePediatricWeightForHeightObservationProfile_Component_ValueX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,10,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,11,opt,name=period,proto3,oneof"`
}

func (*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Quantity) isUSCorePediatricWeightForHeightObservationProfile_Component_ValueX_Choice() {
}

func (*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_CodeableConcept) isUSCorePediatricWeightForHeightObservationProfile_Component_ValueX_Choice() {
}

func (*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_StringValue) isUSCorePediatricWeightForHeightObservationProfile_Component_ValueX_Choice() {
}

func (*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Boolean) isUSCorePediatricWeightForHeightObservationProfile_Component_ValueX_Choice() {
}

func (*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Integer) isUSCorePediatricWeightForHeightObservationProfile_Component_ValueX_Choice() {
}

func (*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Range) isUSCorePediatricWeightForHeightObservationProfile_Component_ValueX_Choice() {
}

func (*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Ratio) isUSCorePediatricWeightForHeightObservationProfile_Component_ValueX_Choice() {
}

func (*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_SampledData) isUSCorePediatricWeightForHeightObservationProfile_Component_ValueX_Choice() {
}

func (*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Time) isUSCorePediatricWeightForHeightObservationProfile_Component_ValueX_Choice() {
}

func (*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_DateTime) isUSCorePediatricWeightForHeightObservationProfile_Component_ValueX_Choice() {
}

func (*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Period) isUSCorePediatricWeightForHeightObservationProfile_Component_ValueX_Choice() {
}

// planned | arrived | triaged | in-progress | onleave | finished | cancelled
// +
type USCoreEncounterProfile_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.EncounterStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.EncounterStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension          `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreEncounterProfile_StatusCode) Reset() {
	*x = USCoreEncounterProfile_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreEncounterProfile_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreEncounterProfile_StatusCode) ProtoMessage() {}

func (x *USCoreEncounterProfile_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreEncounterProfile_StatusCode.ProtoReflect.Descriptor instead.
func (*USCoreEncounterProfile_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{4, 0}
}

func (x *USCoreEncounterProfile_StatusCode) GetValue() codes_go_proto.EncounterStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.EncounterStatusCode_INVALID_UNINITIALIZED
}

func (x *USCoreEncounterProfile_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreEncounterProfile_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// List of past encounter statuses
type USCoreEncounterProfile_StatusHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                  `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Status            *USCoreEncounterProfile_StatusHistory_StatusCode `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// The time that the episode was in the specified status
	Period *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *USCoreEncounterProfile_StatusHistory) Reset() {
	*x = USCoreEncounterProfile_StatusHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreEncounterProfile_StatusHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreEncounterProfile_StatusHistory) ProtoMessage() {}

func (x *USCoreEncounterProfile_StatusHistory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreEncounterProfile_StatusHistory.ProtoReflect.Descriptor instead.
func (*USCoreEncounterProfile_StatusHistory) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{4, 1}
}

func (x *USCoreEncounterProfile_StatusHistory) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreEncounterProfile_StatusHistory) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreEncounterProfile_StatusHistory) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreEncounterProfile_StatusHistory) GetStatus() *USCoreEncounterProfile_StatusHistory_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *USCoreEncounterProfile_StatusHistory) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// List of past encounter classes
type USCoreEncounterProfile_ClassHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// inpatient | outpatient | ambulatory | emergency +
	ClassValue *datatypes_go_proto.Coding `protobuf:"bytes,4,opt,name=class_value,json=class,proto3" json:"class_value,omitempty"`
	// The time that the episode was in the specified class
	Period *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *USCoreEncounterProfile_ClassHistory) Reset() {
	*x = USCoreEncounterProfile_ClassHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreEncounterProfile_ClassHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreEncounterProfile_ClassHistory) ProtoMessage() {}

func (x *USCoreEncounterProfile_ClassHistory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreEncounterProfile_ClassHistory.ProtoReflect.Descriptor instead.
func (*USCoreEncounterProfile_ClassHistory) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{4, 2}
}

func (x *USCoreEncounterProfile_ClassHistory) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreEncounterProfile_ClassHistory) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreEncounterProfile_ClassHistory) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreEncounterProfile_ClassHistory) GetClassValue() *datatypes_go_proto.Coding {
	if x != nil {
		return x.ClassValue
	}
	return nil
}

func (x *USCoreEncounterProfile_ClassHistory) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// List of participants involved in the encounter
type USCoreEncounterProfile_Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Role of participant in encounter
	Type []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,rep,name=type,proto3" json:"type,omitempty"`
	// Period of time during the encounter that the participant participated
	Period *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
	// Persons involved in the encounter other than the patient
	Individual *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=individual,proto3" json:"individual,omitempty"`
}

func (x *USCoreEncounterProfile_Participant) Reset() {
	*x = USCoreEncounterProfile_Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreEncounterProfile_Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreEncounterProfile_Participant) ProtoMessage() {}

func (x *USCoreEncounterProfile_Participant) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreEncounterProfile_Participant.ProtoReflect.Descriptor instead.
func (*USCoreEncounterProfile_Participant) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{4, 3}
}

func (x *USCoreEncounterProfile_Participant) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreEncounterProfile_Participant) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreEncounterProfile_Participant) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreEncounterProfile_Participant) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *USCoreEncounterProfile_Participant) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *USCoreEncounterProfile_Participant) GetIndividual() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Individual
	}
	return nil
}

// The list of diagnosis relevant to this encounter
type USCoreEncounterProfile_Diagnosis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The diagnosis or procedure relevant to the encounter
	Condition *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`
	// Role that this diagnosis has within the encounter (e.g. admission,
	// billing, discharge …)
	Use *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=use,proto3" json:"use,omitempty"`
	// Ranking of the diagnosis (for each role type)
	Rank *datatypes_go_proto.PositiveInt `protobuf:"bytes,6,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (x *USCoreEncounterProfile_Diagnosis) Reset() {
	*x = USCoreEncounterProfile_Diagnosis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreEncounterProfile_Diagnosis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreEncounterProfile_Diagnosis) ProtoMessage() {}

func (x *USCoreEncounterProfile_Diagnosis) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreEncounterProfile_Diagnosis.ProtoReflect.Descriptor instead.
func (*USCoreEncounterProfile_Diagnosis) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{4, 4}
}

func (x *USCoreEncounterProfile_Diagnosis) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreEncounterProfile_Diagnosis) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreEncounterProfile_Diagnosis) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreEncounterProfile_Diagnosis) GetCondition() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *USCoreEncounterProfile_Diagnosis) GetUse() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Use
	}
	return nil
}

func (x *USCoreEncounterProfile_Diagnosis) GetRank() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Rank
	}
	return nil
}

// Details about the admission to a healthcare service
type USCoreEncounterProfile_Hospitalization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Pre-admission identifier
	PreAdmissionIdentifier *datatypes_go_proto.Identifier `protobuf:"bytes,4,opt,name=pre_admission_identifier,json=preAdmissionIdentifier,proto3" json:"pre_admission_identifier,omitempty"`
	// The location/organization from which the patient came before admission
	Origin *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=origin,proto3" json:"origin,omitempty"`
	// From where patient was admitted (physician referral, transfer)
	AdmitSource *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=admit_source,json=admitSource,proto3" json:"admit_source,omitempty"`
	// The type of hospital re-admission that has occurred (if any). If the
	// value is absent, then this is not identified as a readmission
	ReAdmission *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=re_admission,json=reAdmission,proto3" json:"re_admission,omitempty"`
	// Diet preferences reported by the patient
	DietPreference []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,rep,name=diet_preference,json=dietPreference,proto3" json:"diet_preference,omitempty"`
	// Special courtesies (VIP, board member)
	SpecialCourtesy []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,rep,name=special_courtesy,json=specialCourtesy,proto3" json:"special_courtesy,omitempty"`
	// Wheelchair, translator, stretcher, etc.
	SpecialArrangement []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,rep,name=special_arrangement,json=specialArrangement,proto3" json:"special_arrangement,omitempty"`
	// Location/organization to which the patient is discharged
	Destination *datatypes_go_proto.Reference `protobuf:"bytes,11,opt,name=destination,proto3" json:"destination,omitempty"`
	// Category or kind of location after discharge
	DischargeDisposition *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=discharge_disposition,json=dischargeDisposition,proto3" json:"discharge_disposition,omitempty"`
}

func (x *USCoreEncounterProfile_Hospitalization) Reset() {
	*x = USCoreEncounterProfile_Hospitalization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreEncounterProfile_Hospitalization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreEncounterProfile_Hospitalization) ProtoMessage() {}

func (x *USCoreEncounterProfile_Hospitalization) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreEncounterProfile_Hospitalization.ProtoReflect.Descriptor instead.
func (*USCoreEncounterProfile_Hospitalization) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{4, 5}
}

func (x *USCoreEncounterProfile_Hospitalization) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreEncounterProfile_Hospitalization) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreEncounterProfile_Hospitalization) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreEncounterProfile_Hospitalization) GetPreAdmissionIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.PreAdmissionIdentifier
	}
	return nil
}

func (x *USCoreEncounterProfile_Hospitalization) GetOrigin() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *USCoreEncounterProfile_Hospitalization) GetAdmitSource() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AdmitSource
	}
	return nil
}

func (x *USCoreEncounterProfile_Hospitalization) GetReAdmission() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReAdmission
	}
	return nil
}

func (x *USCoreEncounterProfile_Hospitalization) GetDietPreference() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DietPreference
	}
	return nil
}

func (x *USCoreEncounterProfile_Hospitalization) GetSpecialCourtesy() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SpecialCourtesy
	}
	return nil
}

func (x *USCoreEncounterProfile_Hospitalization) GetSpecialArrangement() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SpecialArrangement
	}
	return nil
}

func (x *USCoreEncounterProfile_Hospitalization) GetDestination() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *USCoreEncounterProfile_Hospitalization) GetDischargeDisposition() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DischargeDisposition
	}
	return nil
}

// List of locations where the patient has been
type USCoreEncounterProfile_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Location the encounter takes place
	Location *datatypes_go_proto.Reference               `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Status   *USCoreEncounterProfile_Location_StatusCode `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// The physical type of the location (usually the level in the location
	// hierachy - bed room ward etc.)
	PhysicalType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=physical_type,json=physicalType,proto3" json:"physical_type,omitempty"`
	// Time period during which the patient was present at the location
	Period *datatypes_go_proto.Period `protobuf:"bytes,7,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *USCoreEncounterProfile_Location) Reset() {
	*x = USCoreEncounterProfile_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreEncounterProfile_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreEncounterProfile_Location) ProtoMessage() {}

func (x *USCoreEncounterProfile_Location) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreEncounterProfile_Location.ProtoReflect.Descriptor instead.
func (*USCoreEncounterProfile_Location) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{4, 6}
}

func (x *USCoreEncounterProfile_Location) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreEncounterProfile_Location) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreEncounterProfile_Location) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreEncounterProfile_Location) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *USCoreEncounterProfile_Location) GetStatus() *USCoreEncounterProfile_Location_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *USCoreEncounterProfile_Location) GetPhysicalType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PhysicalType
	}
	return nil
}

func (x *USCoreEncounterProfile_Location) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// planned | arrived | triaged | in-progress | onleave | finished |
// cancelled +
type USCoreEncounterProfile_StatusHistory_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.EncounterStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.EncounterStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension          `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreEncounterProfile_StatusHistory_StatusCode) Reset() {
	*x = USCoreEncounterProfile_StatusHistory_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreEncounterProfile_StatusHistory_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreEncounterProfile_StatusHistory_StatusCode) ProtoMessage() {}

func (x *USCoreEncounterProfile_StatusHistory_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreEncounterProfile_StatusHistory_StatusCode.ProtoReflect.Descriptor instead.
func (*USCoreEncounterProfile_StatusHistory_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{4, 1, 0}
}

func (x *USCoreEncounterProfile_StatusHistory_StatusCode) GetValue() codes_go_proto.EncounterStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.EncounterStatusCode_INVALID_UNINITIALIZED
}

func (x *USCoreEncounterProfile_StatusHistory_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreEncounterProfile_StatusHistory_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// planned | active | reserved | completed
type USCoreEncounterProfile_Location_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.EncounterLocationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.EncounterLocationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreEncounterProfile_Location_StatusCode) Reset() {
	*x = USCoreEncounterProfile_Location_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreEncounterProfile_Location_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreEncounterProfile_Location_StatusCode) ProtoMessage() {}

func (x *USCoreEncounterProfile_Location_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreEncounterProfile_Location_StatusCode.ProtoReflect.Descriptor instead.
func (*USCoreEncounterProfile_Location_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{4, 6, 0}
}

func (x *USCoreEncounterProfile_Location_StatusCode) GetValue() codes_go_proto.EncounterLocationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.EncounterLocationStatusCode_INVALID_UNINITIALIZED
}

func (x *USCoreEncounterProfile_Location_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreEncounterProfile_Location_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// current | superseded | entered-in-error
type USCoreDocumentReferenceProfile_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.DocumentReferenceStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.DocumentReferenceStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreDocumentReferenceProfile_StatusCode) Reset() {
	*x = USCoreDocumentReferenceProfile_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreDocumentReferenceProfile_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreDocumentReferenceProfile_StatusCode) ProtoMessage() {}

func (x *USCoreDocumentReferenceProfile_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreDocumentReferenceProfile_StatusCode.ProtoReflect.Descriptor instead.
func (*USCoreDocumentReferenceProfile_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{5, 0}
}

func (x *USCoreDocumentReferenceProfile_StatusCode) GetValue() codes_go_proto.DocumentReferenceStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.DocumentReferenceStatusCode_INVALID_UNINITIALIZED
}

func (x *USCoreDocumentReferenceProfile_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// preliminary | final | amended | entered-in-error
type USCoreDocumentReferenceProfile_DocStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.CompositionStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.CompositionStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension            `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreDocumentReferenceProfile_DocStatusCode) Reset() {
	*x = USCoreDocumentReferenceProfile_DocStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreDocumentReferenceProfile_DocStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreDocumentReferenceProfile_DocStatusCode) ProtoMessage() {}

func (x *USCoreDocumentReferenceProfile_DocStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreDocumentReferenceProfile_DocStatusCode.ProtoReflect.Descriptor instead.
func (*USCoreDocumentReferenceProfile_DocStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{5, 1}
}

func (x *USCoreDocumentReferenceProfile_DocStatusCode) GetValue() codes_go_proto.CompositionStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.CompositionStatusCode_INVALID_UNINITIALIZED
}

func (x *USCoreDocumentReferenceProfile_DocStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile_DocStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Relationships to other documents
type USCoreDocumentReferenceProfile_RelatesTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                    `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Code              *USCoreDocumentReferenceProfile_RelatesTo_CodeType `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Target of the relationship
	Target *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *USCoreDocumentReferenceProfile_RelatesTo) Reset() {
	*x = USCoreDocumentReferenceProfile_RelatesTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreDocumentReferenceProfile_RelatesTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreDocumentReferenceProfile_RelatesTo) ProtoMessage() {}

func (x *USCoreDocumentReferenceProfile_RelatesTo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreDocumentReferenceProfile_RelatesTo.ProtoReflect.Descriptor instead.
func (*USCoreDocumentReferenceProfile_RelatesTo) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{5, 2}
}

func (x *USCoreDocumentReferenceProfile_RelatesTo) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile_RelatesTo) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile_RelatesTo) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile_RelatesTo) GetCode() *USCoreDocumentReferenceProfile_RelatesTo_CodeType {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile_RelatesTo) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

// Document referenced
type USCoreDocumentReferenceProfile_Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Where to access the document
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,4,opt,name=attachment,proto3" json:"attachment,omitempty"`
	// Format/content rules for the document
	Format *datatypes_go_proto.Coding `protobuf:"bytes,5,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *USCoreDocumentReferenceProfile_Content) Reset() {
	*x = USCoreDocumentReferenceProfile_Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreDocumentReferenceProfile_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreDocumentReferenceProfile_Content) ProtoMessage() {}

func (x *USCoreDocumentReferenceProfile_Content) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreDocumentReferenceProfile_Content.ProtoReflect.Descriptor instead.
func (*USCoreDocumentReferenceProfile_Content) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{5, 3}
}

func (x *USCoreDocumentReferenceProfile_Content) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile_Content) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile_Content) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile_Content) GetAttachment() *datatypes_go_proto.Attachment {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile_Content) GetFormat() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Format
	}
	return nil
}

// Clinical context of document
type USCoreDocumentReferenceProfile_Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Context of the document  content
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Main clinical acts documented
	Event []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,rep,name=event,proto3" json:"event,omitempty"`
	// Time of service that is being documented
	Period *datatypes_go_proto.Period `protobuf:"bytes,6,opt,name=period,proto3" json:"period,omitempty"`
	// Kind of facility where patient was seen
	FacilityType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=facility_type,json=facilityType,proto3" json:"facility_type,omitempty"`
	// Additional details about where the content was created (e.g. clinical
	// specialty)
	PracticeSetting *datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,opt,name=practice_setting,json=practiceSetting,proto3" json:"practice_setting,omitempty"`
	// Patient demographics from source
	SourcePatientInfo *datatypes_go_proto.Reference `protobuf:"bytes,9,opt,name=source_patient_info,json=sourcePatientInfo,proto3" json:"source_patient_info,omitempty"`
	// Related identifiers or resources
	Related []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=related,proto3" json:"related,omitempty"`
}

func (x *USCoreDocumentReferenceProfile_Context) Reset() {
	*x = USCoreDocumentReferenceProfile_Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreDocumentReferenceProfile_Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreDocumentReferenceProfile_Context) ProtoMessage() {}

func (x *USCoreDocumentReferenceProfile_Context) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreDocumentReferenceProfile_Context.ProtoReflect.Descriptor instead.
func (*USCoreDocumentReferenceProfile_Context) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{5, 4}
}

func (x *USCoreDocumentReferenceProfile_Context) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile_Context) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile_Context) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile_Context) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile_Context) GetEvent() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile_Context) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile_Context) GetFacilityType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.FacilityType
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile_Context) GetPracticeSetting() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PracticeSetting
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile_Context) GetSourcePatientInfo() *datatypes_go_proto.Reference {
	if x != nil {
		return x.SourcePatientInfo
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile_Context) GetRelated() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Related
	}
	return nil
}

// replaces | transforms | signs | appends
type USCoreDocumentReferenceProfile_RelatesTo_CodeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.DocumentRelationshipTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.DocumentRelationshipTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreDocumentReferenceProfile_RelatesTo_CodeType) Reset() {
	*x = USCoreDocumentReferenceProfile_RelatesTo_CodeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreDocumentReferenceProfile_RelatesTo_CodeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreDocumentReferenceProfile_RelatesTo_CodeType) ProtoMessage() {}

func (x *USCoreDocumentReferenceProfile_RelatesTo_CodeType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreDocumentReferenceProfile_RelatesTo_CodeType.ProtoReflect.Descriptor instead.
func (*USCoreDocumentReferenceProfile_RelatesTo_CodeType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{5, 2, 0}
}

func (x *USCoreDocumentReferenceProfile_RelatesTo_CodeType) GetValue() codes_go_proto.DocumentRelationshipTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.DocumentRelationshipTypeCode_INVALID_UNINITIALIZED
}

func (x *USCoreDocumentReferenceProfile_RelatesTo_CodeType) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreDocumentReferenceProfile_RelatesTo_CodeType) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// proposed | active | suspended | inactive | entered-in-error
type USCoreCareTeam_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.CareTeamStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.CareTeamStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension         `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreCareTeam_StatusCode) Reset() {
	*x = USCoreCareTeam_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreCareTeam_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreCareTeam_StatusCode) ProtoMessage() {}

func (x *USCoreCareTeam_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreCareTeam_StatusCode.ProtoReflect.Descriptor instead.
func (*USCoreCareTeam_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{6, 0}
}

func (x *USCoreCareTeam_StatusCode) GetValue() codes_go_proto.CareTeamStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.CareTeamStatusCode_INVALID_UNINITIALIZED
}

func (x *USCoreCareTeam_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreCareTeam_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Members of the team
type USCoreCareTeam_Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of involvement
	Role *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	// Who is involved
	Member *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=member,proto3" json:"member,omitempty"`
	// Organization of the practitioner
	OnBehalfOf *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=on_behalf_of,json=onBehalfOf,proto3" json:"on_behalf_of,omitempty"`
	// Time period of participant
	Period *datatypes_go_proto.Period `protobuf:"bytes,7,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *USCoreCareTeam_Participant) Reset() {
	*x = USCoreCareTeam_Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreCareTeam_Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreCareTeam_Participant) ProtoMessage() {}

func (x *USCoreCareTeam_Participant) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreCareTeam_Participant.ProtoReflect.Descriptor instead.
func (*USCoreCareTeam_Participant) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{6, 1}
}

func (x *USCoreCareTeam_Participant) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreCareTeam_Participant) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreCareTeam_Participant) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreCareTeam_Participant) GetRole() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *USCoreCareTeam_Participant) GetMember() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *USCoreCareTeam_Participant) GetOnBehalfOf() *datatypes_go_proto.Reference {
	if x != nil {
		return x.OnBehalfOf
	}
	return nil
}

func (x *USCoreCareTeam_Participant) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// When the activity occurred
type USCoreProvenance_OccurredX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCoreProvenance_OccurredX_Period
	//	*USCoreProvenance_OccurredX_DateTime
	Choice isUSCoreProvenance_OccurredX_Choice `protobuf_oneof:"choice"`
}

func (x *USCoreProvenance_OccurredX) Reset() {
	*x = USCoreProvenance_OccurredX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreProvenance_OccurredX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreProvenance_OccurredX) ProtoMessage() {}

func (x *USCoreProvenance_OccurredX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreProvenance_OccurredX.ProtoReflect.Descriptor instead.
func (*USCoreProvenance_OccurredX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{7, 0}
}

func (m *USCoreProvenance_OccurredX) GetChoice() isUSCoreProvenance_OccurredX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCoreProvenance_OccurredX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*USCoreProvenance_OccurredX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *USCoreProvenance_OccurredX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*USCoreProvenance_OccurredX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

type isUSCoreProvenance_OccurredX_Choice interface {
	isUSCoreProvenance_OccurredX_Choice()
}

type USCoreProvenance_OccurredX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,1,opt,name=period,proto3,oneof"`
}

type USCoreProvenance_OccurredX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3,oneof"`
}

func (*USCoreProvenance_OccurredX_Period) isUSCoreProvenance_OccurredX_Choice() {}

func (*USCoreProvenance_OccurredX_DateTime) isUSCoreProvenance_OccurredX_Choice() {}

// Actor involved
type USCoreProvenance_Agent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// How the agent participated
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// What the agents role was
	Role []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,rep,name=role,proto3" json:"role,omitempty"`
	// Who participated
	Who *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=who,proto3" json:"who,omitempty"`
	// Who the agent is representing
	OnBehalfOf *datatypes_go_proto.Reference `protobuf:"bytes,7,opt,name=on_behalf_of,json=onBehalfOf,proto3" json:"on_behalf_of,omitempty"`
}

func (x *USCoreProvenance_Agent) Reset() {
	*x = USCoreProvenance_Agent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreProvenance_Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreProvenance_Agent) ProtoMessage() {}

func (x *USCoreProvenance_Agent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreProvenance_Agent.ProtoReflect.Descriptor instead.
func (*USCoreProvenance_Agent) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{7, 1}
}

func (x *USCoreProvenance_Agent) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreProvenance_Agent) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreProvenance_Agent) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreProvenance_Agent) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *USCoreProvenance_Agent) GetRole() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *USCoreProvenance_Agent) GetWho() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Who
	}
	return nil
}

func (x *USCoreProvenance_Agent) GetOnBehalfOf() *datatypes_go_proto.Reference {
	if x != nil {
		return x.OnBehalfOf
	}
	return nil
}

// An entity used in this activity
type USCoreProvenance_Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Role              *USCoreProvenance_Entity_RoleCode `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	// Identity of entity
	What *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=what,proto3" json:"what,omitempty"`
	// Entity is attributed to this agent
	Agent []*USCoreProvenance_Agent `protobuf:"bytes,6,rep,name=agent,proto3" json:"agent,omitempty"`
}

func (x *USCoreProvenance_Entity) Reset() {
	*x = USCoreProvenance_Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreProvenance_Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreProvenance_Entity) ProtoMessage() {}

func (x *USCoreProvenance_Entity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreProvenance_Entity.ProtoReflect.Descriptor instead.
func (*USCoreProvenance_Entity) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{7, 2}
}

func (x *USCoreProvenance_Entity) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreProvenance_Entity) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreProvenance_Entity) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreProvenance_Entity) GetRole() *USCoreProvenance_Entity_RoleCode {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *USCoreProvenance_Entity) GetWhat() *datatypes_go_proto.Reference {
	if x != nil {
		return x.What
	}
	return nil
}

func (x *USCoreProvenance_Entity) GetAgent() []*USCoreProvenance_Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

// derivation | revision | quotation | source | removal
type USCoreProvenance_Entity_RoleCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ProvenanceEntityRoleCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.ProvenanceEntityRoleCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension               `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreProvenance_Entity_RoleCode) Reset() {
	*x = USCoreProvenance_Entity_RoleCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreProvenance_Entity_RoleCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreProvenance_Entity_RoleCode) ProtoMessage() {}

func (x *USCoreProvenance_Entity_RoleCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreProvenance_Entity_RoleCode.ProtoReflect.Descriptor instead.
func (*USCoreProvenance_Entity_RoleCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{7, 2, 0}
}

func (x *USCoreProvenance_Entity_RoleCode) GetValue() codes_go_proto.ProvenanceEntityRoleCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ProvenanceEntityRoleCode_INVALID_UNINITIALIZED
}

func (x *USCoreProvenance_Entity_RoleCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreProvenance_Entity_RoleCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// completed | entered-in-error | not-done
type USCoreImmunizationProfile_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     valuesets_go_proto.ImmunizationStatusCodesValueSet_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.ImmunizationStatusCodesValueSet_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                          `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreImmunizationProfile_StatusCode) Reset() {
	*x = USCoreImmunizationProfile_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreImmunizationProfile_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreImmunizationProfile_StatusCode) ProtoMessage() {}

func (x *USCoreImmunizationProfile_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreImmunizationProfile_StatusCode.ProtoReflect.Descriptor instead.
func (*USCoreImmunizationProfile_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{8, 0}
}

func (x *USCoreImmunizationProfile_StatusCode) GetValue() valuesets_go_proto.ImmunizationStatusCodesValueSet_Value {
	if x != nil {
		return x.Value
	}
	return valuesets_go_proto.ImmunizationStatusCodesValueSet_INVALID_UNINITIALIZED
}

func (x *USCoreImmunizationProfile_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreImmunizationProfile_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Vaccine administration date
type USCoreImmunizationProfile_OccurrenceX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCoreImmunizationProfile_OccurrenceX_DateTime
	//	*USCoreImmunizationProfile_OccurrenceX_StringValue
	Choice isUSCoreImmunizationProfile_OccurrenceX_Choice `protobuf_oneof:"choice"`
}

func (x *USCoreImmunizationProfile_OccurrenceX) Reset() {
	*x = USCoreImmunizationProfile_OccurrenceX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreImmunizationProfile_OccurrenceX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreImmunizationProfile_OccurrenceX) ProtoMessage() {}

func (x *USCoreImmunizationProfile_OccurrenceX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreImmunizationProfile_OccurrenceX.ProtoReflect.Descriptor instead.
func (*USCoreImmunizationProfile_OccurrenceX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{8, 1}
}

func (m *USCoreImmunizationProfile_OccurrenceX) GetChoice() isUSCoreImmunizationProfile_OccurrenceX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCoreImmunizationProfile_OccurrenceX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*USCoreImmunizationProfile_OccurrenceX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *USCoreImmunizationProfile_OccurrenceX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*USCoreImmunizationProfile_OccurrenceX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isUSCoreImmunizationProfile_OccurrenceX_Choice interface {
	isUSCoreImmunizationProfile_OccurrenceX_Choice()
}

type USCoreImmunizationProfile_OccurrenceX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type USCoreImmunizationProfile_OccurrenceX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

func (*USCoreImmunizationProfile_OccurrenceX_DateTime) isUSCoreImmunizationProfile_OccurrenceX_Choice() {
}

func (*USCoreImmunizationProfile_OccurrenceX_StringValue) isUSCoreImmunizationProfile_OccurrenceX_Choice() {
}

// Who performed event
type USCoreImmunizationProfile_Performer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// What type of performance was done
	Function *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=function,proto3" json:"function,omitempty"`
	// Individual or organization who was performing
	Actor *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=actor,proto3" json:"actor,omitempty"`
}

func (x *USCoreImmunizationProfile_Performer) Reset() {
	*x = USCoreImmunizationProfile_Performer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreImmunizationProfile_Performer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreImmunizationProfile_Performer) ProtoMessage() {}

func (x *USCoreImmunizationProfile_Performer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreImmunizationProfile_Performer.ProtoReflect.Descriptor instead.
func (*USCoreImmunizationProfile_Performer) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{8, 2}
}

func (x *USCoreImmunizationProfile_Performer) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreImmunizationProfile_Performer) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreImmunizationProfile_Performer) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreImmunizationProfile_Performer) GetFunction() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *USCoreImmunizationProfile_Performer) GetActor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Actor
	}
	return nil
}

// Educational material presented to patient
type USCoreImmunizationProfile_Education struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Educational material document identifier
	DocumentType *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=document_type,json=documentType,proto3" json:"document_type,omitempty"`
	// Educational material reference pointer
	Reference *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=reference,proto3" json:"reference,omitempty"`
	// Educational material publication date
	PublicationDate *datatypes_go_proto.DateTime `protobuf:"bytes,6,opt,name=publication_date,json=publicationDate,proto3" json:"publication_date,omitempty"`
	// Educational material presentation date
	PresentationDate *datatypes_go_proto.DateTime `protobuf:"bytes,7,opt,name=presentation_date,json=presentationDate,proto3" json:"presentation_date,omitempty"`
}

func (x *USCoreImmunizationProfile_Education) Reset() {
	*x = USCoreImmunizationProfile_Education{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreImmunizationProfile_Education) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreImmunizationProfile_Education) ProtoMessage() {}

func (x *USCoreImmunizationProfile_Education) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreImmunizationProfile_Education.ProtoReflect.Descriptor instead.
func (*USCoreImmunizationProfile_Education) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{8, 3}
}

func (x *USCoreImmunizationProfile_Education) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreImmunizationProfile_Education) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreImmunizationProfile_Education) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreImmunizationProfile_Education) GetDocumentType() *datatypes_go_proto.String {
	if x != nil {
		return x.DocumentType
	}
	return nil
}

func (x *USCoreImmunizationProfile_Education) GetReference() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *USCoreImmunizationProfile_Education) GetPublicationDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.PublicationDate
	}
	return nil
}

func (x *USCoreImmunizationProfile_Education) GetPresentationDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.PresentationDate
	}
	return nil
}

// Details of a reaction that follows immunization
type USCoreImmunizationProfile_Reaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// When reaction started
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	// Additional information on reaction
	Detail *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=detail,proto3" json:"detail,omitempty"`
	// Indicates self-reported reaction
	Reported *datatypes_go_proto.Boolean `protobuf:"bytes,6,opt,name=reported,proto3" json:"reported,omitempty"`
}

func (x *USCoreImmunizationProfile_Reaction) Reset() {
	*x = USCoreImmunizationProfile_Reaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreImmunizationProfile_Reaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreImmunizationProfile_Reaction) ProtoMessage() {}

func (x *USCoreImmunizationProfile_Reaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreImmunizationProfile_Reaction.ProtoReflect.Descriptor instead.
func (*USCoreImmunizationProfile_Reaction) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{8, 4}
}

func (x *USCoreImmunizationProfile_Reaction) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreImmunizationProfile_Reaction) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreImmunizationProfile_Reaction) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreImmunizationProfile_Reaction) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *USCoreImmunizationProfile_Reaction) GetDetail() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *USCoreImmunizationProfile_Reaction) GetReported() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Reported
	}
	return nil
}

// Protocol followed by the provider
type USCoreImmunizationProfile_ProtocolApplied struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Name of vaccine series
	Series *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=series,proto3" json:"series,omitempty"`
	// Who is responsible for publishing the recommendations
	Authority *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=authority,proto3" json:"authority,omitempty"`
	// Vaccine preventatable disease being targetted
	TargetDisease []*datatypes_go_proto.CodeableConcept                   `protobuf:"bytes,6,rep,name=target_disease,json=targetDisease,proto3" json:"target_disease,omitempty"`
	DoseNumber    *USCoreImmunizationProfile_ProtocolApplied_DoseNumberX  `protobuf:"bytes,7,opt,name=dose_number,json=doseNumber,proto3" json:"dose_number,omitempty"`
	SeriesDoses   *USCoreImmunizationProfile_ProtocolApplied_SeriesDosesX `protobuf:"bytes,8,opt,name=series_doses,json=seriesDoses,proto3" json:"series_doses,omitempty"`
}

func (x *USCoreImmunizationProfile_ProtocolApplied) Reset() {
	*x = USCoreImmunizationProfile_ProtocolApplied{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreImmunizationProfile_ProtocolApplied) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreImmunizationProfile_ProtocolApplied) ProtoMessage() {}

func (x *USCoreImmunizationProfile_ProtocolApplied) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreImmunizationProfile_ProtocolApplied.ProtoReflect.Descriptor instead.
func (*USCoreImmunizationProfile_ProtocolApplied) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{8, 5}
}

func (x *USCoreImmunizationProfile_ProtocolApplied) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreImmunizationProfile_ProtocolApplied) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreImmunizationProfile_ProtocolApplied) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreImmunizationProfile_ProtocolApplied) GetSeries() *datatypes_go_proto.String {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *USCoreImmunizationProfile_ProtocolApplied) GetAuthority() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *USCoreImmunizationProfile_ProtocolApplied) GetTargetDisease() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.TargetDisease
	}
	return nil
}

func (x *USCoreImmunizationProfile_ProtocolApplied) GetDoseNumber() *USCoreImmunizationProfile_ProtocolApplied_DoseNumberX {
	if x != nil {
		return x.DoseNumber
	}
	return nil
}

func (x *USCoreImmunizationProfile_ProtocolApplied) GetSeriesDoses() *USCoreImmunizationProfile_ProtocolApplied_SeriesDosesX {
	if x != nil {
		return x.SeriesDoses
	}
	return nil
}

// Dose number within series
type USCoreImmunizationProfile_ProtocolApplied_DoseNumberX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCoreImmunizationProfile_ProtocolApplied_DoseNumberX_PositiveInt
	//	*USCoreImmunizationProfile_ProtocolApplied_DoseNumberX_StringValue
	Choice isUSCoreImmunizationProfile_ProtocolApplied_DoseNumberX_Choice `protobuf_oneof:"choice"`
}

func (x *USCoreImmunizationProfile_ProtocolApplied_DoseNumberX) Reset() {
	*x = USCoreImmunizationProfile_ProtocolApplied_DoseNumberX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreImmunizationProfile_ProtocolApplied_DoseNumberX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreImmunizationProfile_ProtocolApplied_DoseNumberX) ProtoMessage() {}

func (x *USCoreImmunizationProfile_ProtocolApplied_DoseNumberX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreImmunizationProfile_ProtocolApplied_DoseNumberX.ProtoReflect.Descriptor instead.
func (*USCoreImmunizationProfile_ProtocolApplied_DoseNumberX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{8, 5, 0}
}

func (m *USCoreImmunizationProfile_ProtocolApplied_DoseNumberX) GetChoice() isUSCoreImmunizationProfile_ProtocolApplied_DoseNumberX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCoreImmunizationProfile_ProtocolApplied_DoseNumberX) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetChoice().(*USCoreImmunizationProfile_ProtocolApplied_DoseNumberX_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *USCoreImmunizationProfile_ProtocolApplied_DoseNumberX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*USCoreImmunizationProfile_ProtocolApplied_DoseNumberX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isUSCoreImmunizationProfile_ProtocolApplied_DoseNumberX_Choice interface {
	isUSCoreImmunizationProfile_ProtocolApplied_DoseNumberX_Choice()
}

type USCoreImmunizationProfile_ProtocolApplied_DoseNumberX_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,1,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type USCoreImmunizationProfile_ProtocolApplied_DoseNumberX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

func (*USCoreImmunizationProfile_ProtocolApplied_DoseNumberX_PositiveInt) isUSCoreImmunizationProfile_ProtocolApplied_DoseNumberX_Choice() {
}

func (*USCoreImmunizationProfile_ProtocolApplied_DoseNumberX_StringValue) isUSCoreImmunizationProfile_ProtocolApplied_DoseNumberX_Choice() {
}

// Recommended number of doses for immunity
type USCoreImmunizationProfile_ProtocolApplied_SeriesDosesX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCoreImmunizationProfile_ProtocolApplied_SeriesDosesX_PositiveInt
	//	*USCoreImmunizationProfile_ProtocolApplied_SeriesDosesX_StringValue
	Choice isUSCoreImmunizationProfile_ProtocolApplied_SeriesDosesX_Choice `protobuf_oneof:"choice"`
}

func (x *USCoreImmunizationProfile_ProtocolApplied_SeriesDosesX) Reset() {
	*x = USCoreImmunizationProfile_ProtocolApplied_SeriesDosesX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreImmunizationProfile_ProtocolApplied_SeriesDosesX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreImmunizationProfile_ProtocolApplied_SeriesDosesX) ProtoMessage() {}

func (x *USCoreImmunizationProfile_ProtocolApplied_SeriesDosesX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreImmunizationProfile_ProtocolApplied_SeriesDosesX.ProtoReflect.Descriptor instead.
func (*USCoreImmunizationProfile_ProtocolApplied_SeriesDosesX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{8, 5, 1}
}

func (m *USCoreImmunizationProfile_ProtocolApplied_SeriesDosesX) GetChoice() isUSCoreImmunizationProfile_ProtocolApplied_SeriesDosesX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCoreImmunizationProfile_ProtocolApplied_SeriesDosesX) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetChoice().(*USCoreImmunizationProfile_ProtocolApplied_SeriesDosesX_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *USCoreImmunizationProfile_ProtocolApplied_SeriesDosesX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*USCoreImmunizationProfile_ProtocolApplied_SeriesDosesX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isUSCoreImmunizationProfile_ProtocolApplied_SeriesDosesX_Choice interface {
	isUSCoreImmunizationProfile_ProtocolApplied_SeriesDosesX_Choice()
}

type USCoreImmunizationProfile_ProtocolApplied_SeriesDosesX_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,1,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type USCoreImmunizationProfile_ProtocolApplied_SeriesDosesX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

func (*USCoreImmunizationProfile_ProtocolApplied_SeriesDosesX_PositiveInt) isUSCoreImmunizationProfile_ProtocolApplied_SeriesDosesX_Choice() {
}

func (*USCoreImmunizationProfile_ProtocolApplied_SeriesDosesX_StringValue) isUSCoreImmunizationProfile_ProtocolApplied_SeriesDosesX_Choice() {
}

// Value of extension
type PatientUSCoreBirthSexExtension_ValueCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     uscore_codes_go_proto.BirthSexValueSet_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.uscore.BirthSexValueSet_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension              `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *PatientUSCoreBirthSexExtension_ValueCode) Reset() {
	*x = PatientUSCoreBirthSexExtension_ValueCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientUSCoreBirthSexExtension_ValueCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientUSCoreBirthSexExtension_ValueCode) ProtoMessage() {}

func (x *PatientUSCoreBirthSexExtension_ValueCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientUSCoreBirthSexExtension_ValueCode.ProtoReflect.Descriptor instead.
func (*PatientUSCoreBirthSexExtension_ValueCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{9, 0}
}

func (x *PatientUSCoreBirthSexExtension_ValueCode) GetValue() uscore_codes_go_proto.BirthSexValueSet_Value {
	if x != nil {
		return x.Value
	}
	return uscore_codes_go_proto.BirthSexValueSet_INVALID_UNINITIALIZED
}

func (x *PatientUSCoreBirthSexExtension_ValueCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientUSCoreBirthSexExtension_ValueCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// registered | partial | preliminary | final +
type USCoreDiagnosticReportProfileNoteExchange_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.DiagnosticReportStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.DiagnosticReportStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreDiagnosticReportProfileNoteExchange_StatusCode) Reset() {
	*x = USCoreDiagnosticReportProfileNoteExchange_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreDiagnosticReportProfileNoteExchange_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreDiagnosticReportProfileNoteExchange_StatusCode) ProtoMessage() {}

func (x *USCoreDiagnosticReportProfileNoteExchange_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreDiagnosticReportProfileNoteExchange_StatusCode.ProtoReflect.Descriptor instead.
func (*USCoreDiagnosticReportProfileNoteExchange_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{10, 0}
}

func (x *USCoreDiagnosticReportProfileNoteExchange_StatusCode) GetValue() codes_go_proto.DiagnosticReportStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.DiagnosticReportStatusCode_INVALID_UNINITIALIZED
}

func (x *USCoreDiagnosticReportProfileNoteExchange_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Time of the report or note
type USCoreDiagnosticReportProfileNoteExchange_EffectiveX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCoreDiagnosticReportProfileNoteExchange_EffectiveX_DateTime
	//	*USCoreDiagnosticReportProfileNoteExchange_EffectiveX_Period
	Choice isUSCoreDiagnosticReportProfileNoteExchange_EffectiveX_Choice `protobuf_oneof:"choice"`
}

func (x *USCoreDiagnosticReportProfileNoteExchange_EffectiveX) Reset() {
	*x = USCoreDiagnosticReportProfileNoteExchange_EffectiveX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreDiagnosticReportProfileNoteExchange_EffectiveX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreDiagnosticReportProfileNoteExchange_EffectiveX) ProtoMessage() {}

func (x *USCoreDiagnosticReportProfileNoteExchange_EffectiveX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreDiagnosticReportProfileNoteExchange_EffectiveX.ProtoReflect.Descriptor instead.
func (*USCoreDiagnosticReportProfileNoteExchange_EffectiveX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{10, 1}
}

func (m *USCoreDiagnosticReportProfileNoteExchange_EffectiveX) GetChoice() isUSCoreDiagnosticReportProfileNoteExchange_EffectiveX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange_EffectiveX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*USCoreDiagnosticReportProfileNoteExchange_EffectiveX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange_EffectiveX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*USCoreDiagnosticReportProfileNoteExchange_EffectiveX_Period); ok {
		return x.Period
	}
	return nil
}

type isUSCoreDiagnosticReportProfileNoteExchange_EffectiveX_Choice interface {
	isUSCoreDiagnosticReportProfileNoteExchange_EffectiveX_Choice()
}

type USCoreDiagnosticReportProfileNoteExchange_EffectiveX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type USCoreDiagnosticReportProfileNoteExchange_EffectiveX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*USCoreDiagnosticReportProfileNoteExchange_EffectiveX_DateTime) isUSCoreDiagnosticReportProfileNoteExchange_EffectiveX_Choice() {
}

func (*USCoreDiagnosticReportProfileNoteExchange_EffectiveX_Period) isUSCoreDiagnosticReportProfileNoteExchange_EffectiveX_Choice() {
}

// Key images associated with this report
type USCoreDiagnosticReportProfileNoteExchange_Media struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Comment about the image (e.g. explanation)
	Comment *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	// Reference to the image source
	Link *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *USCoreDiagnosticReportProfileNoteExchange_Media) Reset() {
	*x = USCoreDiagnosticReportProfileNoteExchange_Media{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreDiagnosticReportProfileNoteExchange_Media) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreDiagnosticReportProfileNoteExchange_Media) ProtoMessage() {}

func (x *USCoreDiagnosticReportProfileNoteExchange_Media) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreDiagnosticReportProfileNoteExchange_Media.ProtoReflect.Descriptor instead.
func (*USCoreDiagnosticReportProfileNoteExchange_Media) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{10, 2}
}

func (x *USCoreDiagnosticReportProfileNoteExchange_Media) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange_Media) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange_Media) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange_Media) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *USCoreDiagnosticReportProfileNoteExchange_Media) GetLink() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Link
	}
	return nil
}

// registered | preliminary | final | amended +
type USCoreLaboratoryResultObservationProfile_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ObservationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.ObservationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension            `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreLaboratoryResultObservationProfile_StatusCode) Reset() {
	*x = USCoreLaboratoryResultObservationProfile_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreLaboratoryResultObservationProfile_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreLaboratoryResultObservationProfile_StatusCode) ProtoMessage() {}

func (x *USCoreLaboratoryResultObservationProfile_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreLaboratoryResultObservationProfile_StatusCode.ProtoReflect.Descriptor instead.
func (*USCoreLaboratoryResultObservationProfile_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{11, 0}
}

func (x *USCoreLaboratoryResultObservationProfile_StatusCode) GetValue() codes_go_proto.ObservationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ObservationStatusCode_INVALID_UNINITIALIZED
}

func (x *USCoreLaboratoryResultObservationProfile_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Clinically relevant time/time-period for observation
type USCoreLaboratoryResultObservationProfile_EffectiveX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCoreLaboratoryResultObservationProfile_EffectiveX_DateTime
	//	*USCoreLaboratoryResultObservationProfile_EffectiveX_Period
	Choice isUSCoreLaboratoryResultObservationProfile_EffectiveX_Choice `protobuf_oneof:"choice"`
}

func (x *USCoreLaboratoryResultObservationProfile_EffectiveX) Reset() {
	*x = USCoreLaboratoryResultObservationProfile_EffectiveX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreLaboratoryResultObservationProfile_EffectiveX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreLaboratoryResultObservationProfile_EffectiveX) ProtoMessage() {}

func (x *USCoreLaboratoryResultObservationProfile_EffectiveX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreLaboratoryResultObservationProfile_EffectiveX.ProtoReflect.Descriptor instead.
func (*USCoreLaboratoryResultObservationProfile_EffectiveX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{11, 1}
}

func (m *USCoreLaboratoryResultObservationProfile_EffectiveX) GetChoice() isUSCoreLaboratoryResultObservationProfile_EffectiveX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_EffectiveX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*USCoreLaboratoryResultObservationProfile_EffectiveX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_EffectiveX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*USCoreLaboratoryResultObservationProfile_EffectiveX_Period); ok {
		return x.Period
	}
	return nil
}

type isUSCoreLaboratoryResultObservationProfile_EffectiveX_Choice interface {
	isUSCoreLaboratoryResultObservationProfile_EffectiveX_Choice()
}

type USCoreLaboratoryResultObservationProfile_EffectiveX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type USCoreLaboratoryResultObservationProfile_EffectiveX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*USCoreLaboratoryResultObservationProfile_EffectiveX_DateTime) isUSCoreLaboratoryResultObservationProfile_EffectiveX_Choice() {
}

func (*USCoreLaboratoryResultObservationProfile_EffectiveX_Period) isUSCoreLaboratoryResultObservationProfile_EffectiveX_Choice() {
}

// Result Value
type USCoreLaboratoryResultObservationProfile_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCoreLaboratoryResultObservationProfile_ValueX_Quantity
	//	*USCoreLaboratoryResultObservationProfile_ValueX_CodeableConcept
	//	*USCoreLaboratoryResultObservationProfile_ValueX_StringValue
	//	*USCoreLaboratoryResultObservationProfile_ValueX_Boolean
	//	*USCoreLaboratoryResultObservationProfile_ValueX_Integer
	//	*USCoreLaboratoryResultObservationProfile_ValueX_Range
	//	*USCoreLaboratoryResultObservationProfile_ValueX_Ratio
	//	*USCoreLaboratoryResultObservationProfile_ValueX_SampledData
	//	*USCoreLaboratoryResultObservationProfile_ValueX_Time
	//	*USCoreLaboratoryResultObservationProfile_ValueX_DateTime
	//	*USCoreLaboratoryResultObservationProfile_ValueX_Period
	Choice isUSCoreLaboratoryResultObservationProfile_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *USCoreLaboratoryResultObservationProfile_ValueX) Reset() {
	*x = USCoreLaboratoryResultObservationProfile_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreLaboratoryResultObservationProfile_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreLaboratoryResultObservationProfile_ValueX) ProtoMessage() {}

func (x *USCoreLaboratoryResultObservationProfile_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreLaboratoryResultObservationProfile_ValueX.ProtoReflect.Descriptor instead.
func (*USCoreLaboratoryResultObservationProfile_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{11, 2}
}

func (m *USCoreLaboratoryResultObservationProfile_ValueX) GetChoice() isUSCoreLaboratoryResultObservationProfile_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*USCoreLaboratoryResultObservationProfile_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*USCoreLaboratoryResultObservationProfile_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*USCoreLaboratoryResultObservationProfile_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*USCoreLaboratoryResultObservationProfile_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_ValueX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*USCoreLaboratoryResultObservationProfile_ValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_ValueX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*USCoreLaboratoryResultObservationProfile_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_ValueX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*USCoreLaboratoryResultObservationProfile_ValueX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_ValueX) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetChoice().(*USCoreLaboratoryResultObservationProfile_ValueX_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_ValueX) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetChoice().(*USCoreLaboratoryResultObservationProfile_ValueX_Time); ok {
		return x.Time
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_ValueX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*USCoreLaboratoryResultObservationProfile_ValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_ValueX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*USCoreLaboratoryResultObservationProfile_ValueX_Period); ok {
		return x.Period
	}
	return nil
}

type isUSCoreLaboratoryResultObservationProfile_ValueX_Choice interface {
	isUSCoreLaboratoryResultObservationProfile_ValueX_Choice()
}

type USCoreLaboratoryResultObservationProfile_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type USCoreLaboratoryResultObservationProfile_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type USCoreLaboratoryResultObservationProfile_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type USCoreLaboratoryResultObservationProfile_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=boolean,proto3,oneof"`
}

type USCoreLaboratoryResultObservationProfile_ValueX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,5,opt,name=integer,proto3,oneof"`
}

type USCoreLaboratoryResultObservationProfile_ValueX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,6,opt,name=range,proto3,oneof"`
}

type USCoreLaboratoryResultObservationProfile_ValueX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,7,opt,name=ratio,proto3,oneof"`
}

type USCoreLaboratoryResultObservationProfile_ValueX_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,8,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type USCoreLaboratoryResultObservationProfile_ValueX_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,9,opt,name=time,proto3,oneof"`
}

type USCoreLaboratoryResultObservationProfile_ValueX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,10,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type USCoreLaboratoryResultObservationProfile_ValueX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,11,opt,name=period,proto3,oneof"`
}

func (*USCoreLaboratoryResultObservationProfile_ValueX_Quantity) isUSCoreLaboratoryResultObservationProfile_ValueX_Choice() {
}

func (*USCoreLaboratoryResultObservationProfile_ValueX_CodeableConcept) isUSCoreLaboratoryResultObservationProfile_ValueX_Choice() {
}

func (*USCoreLaboratoryResultObservationProfile_ValueX_StringValue) isUSCoreLaboratoryResultObservationProfile_ValueX_Choice() {
}

func (*USCoreLaboratoryResultObservationProfile_ValueX_Boolean) isUSCoreLaboratoryResultObservationProfile_ValueX_Choice() {
}

func (*USCoreLaboratoryResultObservationProfile_ValueX_Integer) isUSCoreLaboratoryResultObservationProfile_ValueX_Choice() {
}

func (*USCoreLaboratoryResultObservationProfile_ValueX_Range) isUSCoreLaboratoryResultObservationProfile_ValueX_Choice() {
}

func (*USCoreLaboratoryResultObservationProfile_ValueX_Ratio) isUSCoreLaboratoryResultObservationProfile_ValueX_Choice() {
}

func (*USCoreLaboratoryResultObservationProfile_ValueX_SampledData) isUSCoreLaboratoryResultObservationProfile_ValueX_Choice() {
}

func (*USCoreLaboratoryResultObservationProfile_ValueX_Time) isUSCoreLaboratoryResultObservationProfile_ValueX_Choice() {
}

func (*USCoreLaboratoryResultObservationProfile_ValueX_DateTime) isUSCoreLaboratoryResultObservationProfile_ValueX_Choice() {
}

func (*USCoreLaboratoryResultObservationProfile_ValueX_Period) isUSCoreLaboratoryResultObservationProfile_ValueX_Choice() {
}

// Provides guide for interpretation
type USCoreLaboratoryResultObservationProfile_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Low Range, if relevant
	Low *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// High Range, if relevant
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Reference range qualifier
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Reference range population
	AppliesTo []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
	// Applicable age range, if relevant
	Age *datatypes_go_proto.Range `protobuf:"bytes,8,opt,name=age,proto3" json:"age,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *USCoreLaboratoryResultObservationProfile_ReferenceRange) Reset() {
	*x = USCoreLaboratoryResultObservationProfile_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreLaboratoryResultObservationProfile_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreLaboratoryResultObservationProfile_ReferenceRange) ProtoMessage() {}

func (x *USCoreLaboratoryResultObservationProfile_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreLaboratoryResultObservationProfile_ReferenceRange.ProtoReflect.Descriptor instead.
func (*USCoreLaboratoryResultObservationProfile_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{11, 3}
}

func (x *USCoreLaboratoryResultObservationProfile_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_ReferenceRange) GetLow() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_ReferenceRange) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_ReferenceRange) GetAppliesTo() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AppliesTo
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_ReferenceRange) GetAge() *datatypes_go_proto.Range {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Component results
type USCoreLaboratoryResultObservationProfile_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept                        `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *USCoreLaboratoryResultObservationProfile_Component_ValueX `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*USCoreLaboratoryResultObservationProfile_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *USCoreLaboratoryResultObservationProfile_Component) Reset() {
	*x = USCoreLaboratoryResultObservationProfile_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreLaboratoryResultObservationProfile_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreLaboratoryResultObservationProfile_Component) ProtoMessage() {}

func (x *USCoreLaboratoryResultObservationProfile_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreLaboratoryResultObservationProfile_Component.ProtoReflect.Descriptor instead.
func (*USCoreLaboratoryResultObservationProfile_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{11, 4}
}

func (x *USCoreLaboratoryResultObservationProfile_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_Component) GetValue() *USCoreLaboratoryResultObservationProfile_Component_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_Component) GetInterpretation() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_Component) GetReferenceRange() []*USCoreLaboratoryResultObservationProfile_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Actual component result
type USCoreLaboratoryResultObservationProfile_Component_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCoreLaboratoryResultObservationProfile_Component_ValueX_Quantity
	//	*USCoreLaboratoryResultObservationProfile_Component_ValueX_CodeableConcept
	//	*USCoreLaboratoryResultObservationProfile_Component_ValueX_StringValue
	//	*USCoreLaboratoryResultObservationProfile_Component_ValueX_Boolean
	//	*USCoreLaboratoryResultObservationProfile_Component_ValueX_Integer
	//	*USCoreLaboratoryResultObservationProfile_Component_ValueX_Range
	//	*USCoreLaboratoryResultObservationProfile_Component_ValueX_Ratio
	//	*USCoreLaboratoryResultObservationProfile_Component_ValueX_SampledData
	//	*USCoreLaboratoryResultObservationProfile_Component_ValueX_Time
	//	*USCoreLaboratoryResultObservationProfile_Component_ValueX_DateTime
	//	*USCoreLaboratoryResultObservationProfile_Component_ValueX_Period
	Choice isUSCoreLaboratoryResultObservationProfile_Component_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *USCoreLaboratoryResultObservationProfile_Component_ValueX) Reset() {
	*x = USCoreLaboratoryResultObservationProfile_Component_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreLaboratoryResultObservationProfile_Component_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreLaboratoryResultObservationProfile_Component_ValueX) ProtoMessage() {}

func (x *USCoreLaboratoryResultObservationProfile_Component_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreLaboratoryResultObservationProfile_Component_ValueX.ProtoReflect.Descriptor instead.
func (*USCoreLaboratoryResultObservationProfile_Component_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{11, 4, 0}
}

func (m *USCoreLaboratoryResultObservationProfile_Component_ValueX) GetChoice() isUSCoreLaboratoryResultObservationProfile_Component_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_Component_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*USCoreLaboratoryResultObservationProfile_Component_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_Component_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*USCoreLaboratoryResultObservationProfile_Component_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_Component_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*USCoreLaboratoryResultObservationProfile_Component_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_Component_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*USCoreLaboratoryResultObservationProfile_Component_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_Component_ValueX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*USCoreLaboratoryResultObservationProfile_Component_ValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_Component_ValueX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*USCoreLaboratoryResultObservationProfile_Component_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_Component_ValueX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*USCoreLaboratoryResultObservationProfile_Component_ValueX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_Component_ValueX) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetChoice().(*USCoreLaboratoryResultObservationProfile_Component_ValueX_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_Component_ValueX) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetChoice().(*USCoreLaboratoryResultObservationProfile_Component_ValueX_Time); ok {
		return x.Time
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_Component_ValueX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*USCoreLaboratoryResultObservationProfile_Component_ValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *USCoreLaboratoryResultObservationProfile_Component_ValueX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*USCoreLaboratoryResultObservationProfile_Component_ValueX_Period); ok {
		return x.Period
	}
	return nil
}

type isUSCoreLaboratoryResultObservationProfile_Component_ValueX_Choice interface {
	isUSCoreLaboratoryResultObservationProfile_Component_ValueX_Choice()
}

type USCoreLaboratoryResultObservationProfile_Component_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type USCoreLaboratoryResultObservationProfile_Component_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type USCoreLaboratoryResultObservationProfile_Component_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type USCoreLaboratoryResultObservationProfile_Component_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=boolean,proto3,oneof"`
}

type USCoreLaboratoryResultObservationProfile_Component_ValueX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,5,opt,name=integer,proto3,oneof"`
}

type USCoreLaboratoryResultObservationProfile_Component_ValueX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,6,opt,name=range,proto3,oneof"`
}

type USCoreLaboratoryResultObservationProfile_Component_ValueX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,7,opt,name=ratio,proto3,oneof"`
}

type USCoreLaboratoryResultObservationProfile_Component_ValueX_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,8,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type USCoreLaboratoryResultObservationProfile_Component_ValueX_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,9,opt,name=time,proto3,oneof"`
}

type USCoreLaboratoryResultObservationProfile_Component_ValueX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,10,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type USCoreLaboratoryResultObservationProfile_Component_ValueX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,11,opt,name=period,proto3,oneof"`
}

func (*USCoreLaboratoryResultObservationProfile_Component_ValueX_Quantity) isUSCoreLaboratoryResultObservationProfile_Component_ValueX_Choice() {
}

func (*USCoreLaboratoryResultObservationProfile_Component_ValueX_CodeableConcept) isUSCoreLaboratoryResultObservationProfile_Component_ValueX_Choice() {
}

func (*USCoreLaboratoryResultObservationProfile_Component_ValueX_StringValue) isUSCoreLaboratoryResultObservationProfile_Component_ValueX_Choice() {
}

func (*USCoreLaboratoryResultObservationProfile_Component_ValueX_Boolean) isUSCoreLaboratoryResultObservationProfile_Component_ValueX_Choice() {
}

func (*USCoreLaboratoryResultObservationProfile_Component_ValueX_Integer) isUSCoreLaboratoryResultObservationProfile_Component_ValueX_Choice() {
}

func (*USCoreLaboratoryResultObservationProfile_Component_ValueX_Range) isUSCoreLaboratoryResultObservationProfile_Component_ValueX_Choice() {
}

func (*USCoreLaboratoryResultObservationProfile_Component_ValueX_Ratio) isUSCoreLaboratoryResultObservationProfile_Component_ValueX_Choice() {
}

func (*USCoreLaboratoryResultObservationProfile_Component_ValueX_SampledData) isUSCoreLaboratoryResultObservationProfile_Component_ValueX_Choice() {
}

func (*USCoreLaboratoryResultObservationProfile_Component_ValueX_Time) isUSCoreLaboratoryResultObservationProfile_Component_ValueX_Choice() {
}

func (*USCoreLaboratoryResultObservationProfile_Component_ValueX_DateTime) isUSCoreLaboratoryResultObservationProfile_Component_ValueX_Choice() {
}

func (*USCoreLaboratoryResultObservationProfile_Component_ValueX_Period) isUSCoreLaboratoryResultObservationProfile_Component_ValueX_Choice() {
}

// active | suspended | inactive
type USCoreLocation_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.LocationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.LocationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension         `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreLocation_StatusCode) Reset() {
	*x = USCoreLocation_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreLocation_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreLocation_StatusCode) ProtoMessage() {}

func (x *USCoreLocation_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreLocation_StatusCode.ProtoReflect.Descriptor instead.
func (*USCoreLocation_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{12, 0}
}

func (x *USCoreLocation_StatusCode) GetValue() codes_go_proto.LocationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.LocationStatusCode_INVALID_UNINITIALIZED
}

func (x *USCoreLocation_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreLocation_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// instance | kind
type USCoreLocation_ModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.LocationModeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.LocationModeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreLocation_ModeCode) Reset() {
	*x = USCoreLocation_ModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreLocation_ModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreLocation_ModeCode) ProtoMessage() {}

func (x *USCoreLocation_ModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreLocation_ModeCode.ProtoReflect.Descriptor instead.
func (*USCoreLocation_ModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{12, 1}
}

func (x *USCoreLocation_ModeCode) GetValue() codes_go_proto.LocationModeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.LocationModeCode_INVALID_UNINITIALIZED
}

func (x *USCoreLocation_ModeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreLocation_ModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The absolute geographic location
type USCoreLocation_Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Longitude with WGS84 datum
	Longitude *datatypes_go_proto.Decimal `protobuf:"bytes,4,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// Latitude with WGS84 datum
	Latitude *datatypes_go_proto.Decimal `protobuf:"bytes,5,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// Altitude with WGS84 datum
	Altitude *datatypes_go_proto.Decimal `protobuf:"bytes,6,opt,name=altitude,proto3" json:"altitude,omitempty"`
}

func (x *USCoreLocation_Position) Reset() {
	*x = USCoreLocation_Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreLocation_Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreLocation_Position) ProtoMessage() {}

func (x *USCoreLocation_Position) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreLocation_Position.ProtoReflect.Descriptor instead.
func (*USCoreLocation_Position) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{12, 2}
}

func (x *USCoreLocation_Position) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreLocation_Position) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreLocation_Position) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreLocation_Position) GetLongitude() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Longitude
	}
	return nil
}

func (x *USCoreLocation_Position) GetLatitude() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Latitude
	}
	return nil
}

func (x *USCoreLocation_Position) GetAltitude() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Altitude
	}
	return nil
}

// What days/times during a week is this location usually open
type USCoreLocation_HoursOfOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                   `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	DaysOfWeek        []*USCoreLocation_HoursOfOperation_DaysOfWeekCode `protobuf:"bytes,4,rep,name=days_of_week,json=daysOfWeek,proto3" json:"days_of_week,omitempty"`
	// The Location is open all day
	AllDay *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=all_day,json=allDay,proto3" json:"all_day,omitempty"`
	// Time that the Location opens
	OpeningTime *datatypes_go_proto.Time `protobuf:"bytes,6,opt,name=opening_time,json=openingTime,proto3" json:"opening_time,omitempty"`
	// Time that the Location closes
	ClosingTime *datatypes_go_proto.Time `protobuf:"bytes,7,opt,name=closing_time,json=closingTime,proto3" json:"closing_time,omitempty"`
}

func (x *USCoreLocation_HoursOfOperation) Reset() {
	*x = USCoreLocation_HoursOfOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreLocation_HoursOfOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreLocation_HoursOfOperation) ProtoMessage() {}

func (x *USCoreLocation_HoursOfOperation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreLocation_HoursOfOperation.ProtoReflect.Descriptor instead.
func (*USCoreLocation_HoursOfOperation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{12, 3}
}

func (x *USCoreLocation_HoursOfOperation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreLocation_HoursOfOperation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreLocation_HoursOfOperation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreLocation_HoursOfOperation) GetDaysOfWeek() []*USCoreLocation_HoursOfOperation_DaysOfWeekCode {
	if x != nil {
		return x.DaysOfWeek
	}
	return nil
}

func (x *USCoreLocation_HoursOfOperation) GetAllDay() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.AllDay
	}
	return nil
}

func (x *USCoreLocation_HoursOfOperation) GetOpeningTime() *datatypes_go_proto.Time {
	if x != nil {
		return x.OpeningTime
	}
	return nil
}

func (x *USCoreLocation_HoursOfOperation) GetClosingTime() *datatypes_go_proto.Time {
	if x != nil {
		return x.ClosingTime
	}
	return nil
}

// mon | tue | wed | thu | fri | sat | sun
type USCoreLocation_HoursOfOperation_DaysOfWeekCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.DaysOfWeekCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.DaysOfWeekCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension     `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreLocation_HoursOfOperation_DaysOfWeekCode) Reset() {
	*x = USCoreLocation_HoursOfOperation_DaysOfWeekCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreLocation_HoursOfOperation_DaysOfWeekCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreLocation_HoursOfOperation_DaysOfWeekCode) ProtoMessage() {}

func (x *USCoreLocation_HoursOfOperation_DaysOfWeekCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreLocation_HoursOfOperation_DaysOfWeekCode.ProtoReflect.Descriptor instead.
func (*USCoreLocation_HoursOfOperation_DaysOfWeekCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{12, 3, 0}
}

func (x *USCoreLocation_HoursOfOperation_DaysOfWeekCode) GetValue() codes_go_proto.DaysOfWeekCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.DaysOfWeekCode_INVALID_UNINITIALIZED
}

func (x *USCoreLocation_HoursOfOperation_DaysOfWeekCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreLocation_HoursOfOperation_DaysOfWeekCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Estimated or actual date,  date-time, or age
type UsCoreCondition_OnsetX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*UsCoreCondition_OnsetX_DateTime
	//	*UsCoreCondition_OnsetX_Age
	//	*UsCoreCondition_OnsetX_Period
	//	*UsCoreCondition_OnsetX_Range
	//	*UsCoreCondition_OnsetX_StringValue
	Choice isUsCoreCondition_OnsetX_Choice `protobuf_oneof:"choice"`
}

func (x *UsCoreCondition_OnsetX) Reset() {
	*x = UsCoreCondition_OnsetX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreCondition_OnsetX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreCondition_OnsetX) ProtoMessage() {}

func (x *UsCoreCondition_OnsetX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreCondition_OnsetX.ProtoReflect.Descriptor instead.
func (*UsCoreCondition_OnsetX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{13, 0}
}

func (m *UsCoreCondition_OnsetX) GetChoice() isUsCoreCondition_OnsetX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *UsCoreCondition_OnsetX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*UsCoreCondition_OnsetX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *UsCoreCondition_OnsetX) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetChoice().(*UsCoreCondition_OnsetX_Age); ok {
		return x.Age
	}
	return nil
}

func (x *UsCoreCondition_OnsetX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*UsCoreCondition_OnsetX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *UsCoreCondition_OnsetX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*UsCoreCondition_OnsetX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *UsCoreCondition_OnsetX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*UsCoreCondition_OnsetX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isUsCoreCondition_OnsetX_Choice interface {
	isUsCoreCondition_OnsetX_Choice()
}

type UsCoreCondition_OnsetX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type UsCoreCondition_OnsetX_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,2,opt,name=age,proto3,oneof"`
}

type UsCoreCondition_OnsetX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,3,opt,name=period,proto3,oneof"`
}

type UsCoreCondition_OnsetX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,4,opt,name=range,proto3,oneof"`
}

type UsCoreCondition_OnsetX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=string_value,json=string,proto3,oneof"`
}

func (*UsCoreCondition_OnsetX_DateTime) isUsCoreCondition_OnsetX_Choice() {}

func (*UsCoreCondition_OnsetX_Age) isUsCoreCondition_OnsetX_Choice() {}

func (*UsCoreCondition_OnsetX_Period) isUsCoreCondition_OnsetX_Choice() {}

func (*UsCoreCondition_OnsetX_Range) isUsCoreCondition_OnsetX_Choice() {}

func (*UsCoreCondition_OnsetX_StringValue) isUsCoreCondition_OnsetX_Choice() {}

// When in resolution/remission
type UsCoreCondition_AbatementX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*UsCoreCondition_AbatementX_DateTime
	//	*UsCoreCondition_AbatementX_Age
	//	*UsCoreCondition_AbatementX_Period
	//	*UsCoreCondition_AbatementX_Range
	//	*UsCoreCondition_AbatementX_StringValue
	Choice isUsCoreCondition_AbatementX_Choice `protobuf_oneof:"choice"`
}

func (x *UsCoreCondition_AbatementX) Reset() {
	*x = UsCoreCondition_AbatementX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreCondition_AbatementX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreCondition_AbatementX) ProtoMessage() {}

func (x *UsCoreCondition_AbatementX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreCondition_AbatementX.ProtoReflect.Descriptor instead.
func (*UsCoreCondition_AbatementX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{13, 1}
}

func (m *UsCoreCondition_AbatementX) GetChoice() isUsCoreCondition_AbatementX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *UsCoreCondition_AbatementX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*UsCoreCondition_AbatementX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *UsCoreCondition_AbatementX) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetChoice().(*UsCoreCondition_AbatementX_Age); ok {
		return x.Age
	}
	return nil
}

func (x *UsCoreCondition_AbatementX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*UsCoreCondition_AbatementX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *UsCoreCondition_AbatementX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*UsCoreCondition_AbatementX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *UsCoreCondition_AbatementX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*UsCoreCondition_AbatementX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isUsCoreCondition_AbatementX_Choice interface {
	isUsCoreCondition_AbatementX_Choice()
}

type UsCoreCondition_AbatementX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type UsCoreCondition_AbatementX_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,2,opt,name=age,proto3,oneof"`
}

type UsCoreCondition_AbatementX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,3,opt,name=period,proto3,oneof"`
}

type UsCoreCondition_AbatementX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,4,opt,name=range,proto3,oneof"`
}

type UsCoreCondition_AbatementX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=string_value,json=string,proto3,oneof"`
}

func (*UsCoreCondition_AbatementX_DateTime) isUsCoreCondition_AbatementX_Choice() {}

func (*UsCoreCondition_AbatementX_Age) isUsCoreCondition_AbatementX_Choice() {}

func (*UsCoreCondition_AbatementX_Period) isUsCoreCondition_AbatementX_Choice() {}

func (*UsCoreCondition_AbatementX_Range) isUsCoreCondition_AbatementX_Choice() {}

func (*UsCoreCondition_AbatementX_StringValue) isUsCoreCondition_AbatementX_Choice() {}

// Stage/grade, usually assessed formally
type UsCoreCondition_Stage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Simple summary (disease specific)
	Summary *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
	// Formal record of assessment
	Assessment []*datatypes_go_proto.Reference `protobuf:"bytes,5,rep,name=assessment,proto3" json:"assessment,omitempty"`
	// Kind of staging
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *UsCoreCondition_Stage) Reset() {
	*x = UsCoreCondition_Stage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreCondition_Stage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreCondition_Stage) ProtoMessage() {}

func (x *UsCoreCondition_Stage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreCondition_Stage.ProtoReflect.Descriptor instead.
func (*UsCoreCondition_Stage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{13, 2}
}

func (x *UsCoreCondition_Stage) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreCondition_Stage) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreCondition_Stage) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreCondition_Stage) GetSummary() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *UsCoreCondition_Stage) GetAssessment() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Assessment
	}
	return nil
}

func (x *UsCoreCondition_Stage) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

// Supporting evidence
type UsCoreCondition_Evidence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Manifestation/symptom
	Code []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,rep,name=code,proto3" json:"code,omitempty"`
	// Supporting information found elsewhere
	Detail []*datatypes_go_proto.Reference `protobuf:"bytes,5,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *UsCoreCondition_Evidence) Reset() {
	*x = UsCoreCondition_Evidence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsCoreCondition_Evidence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsCoreCondition_Evidence) ProtoMessage() {}

func (x *UsCoreCondition_Evidence) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsCoreCondition_Evidence.ProtoReflect.Descriptor instead.
func (*UsCoreCondition_Evidence) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{13, 3}
}

func (x *UsCoreCondition_Evidence) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsCoreCondition_Evidence) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsCoreCondition_Evidence) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *UsCoreCondition_Evidence) GetCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *UsCoreCondition_Evidence) GetDetail() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Detail
	}
	return nil
}

// registered | preliminary | final | amended +
type USCorePulseOximetryProfile_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ObservationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.ObservationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension            `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCorePulseOximetryProfile_StatusCode) Reset() {
	*x = USCorePulseOximetryProfile_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePulseOximetryProfile_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePulseOximetryProfile_StatusCode) ProtoMessage() {}

func (x *USCorePulseOximetryProfile_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePulseOximetryProfile_StatusCode.ProtoReflect.Descriptor instead.
func (*USCorePulseOximetryProfile_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{14, 0}
}

func (x *USCorePulseOximetryProfile_StatusCode) GetValue() codes_go_proto.ObservationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ObservationStatusCode_INVALID_UNINITIALIZED
}

func (x *USCorePulseOximetryProfile_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePulseOximetryProfile_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Oxygen Saturation by Pulse Oximetry
type USCorePulseOximetryProfile_CodeableConceptForCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Code defined by a terminology system
	Coding []*datatypes_go_proto.Coding `protobuf:"bytes,3,rep,name=coding,proto3" json:"coding,omitempty"`
	// Plain text representation of the concept
	Text          *datatypes_go_proto.String              `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	OxygenSatCode *datatypes_go_proto.CodingWithFixedCode `protobuf:"bytes,5,opt,name=oxygen_sat_code,json=OxygenSatCode,proto3" json:"oxygen_sat_code,omitempty"`
	PulseOx       *datatypes_go_proto.CodingWithFixedCode `protobuf:"bytes,6,opt,name=pulse_ox,json=PulseOx,proto3" json:"pulse_ox,omitempty"`
}

func (x *USCorePulseOximetryProfile_CodeableConceptForCode) Reset() {
	*x = USCorePulseOximetryProfile_CodeableConceptForCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePulseOximetryProfile_CodeableConceptForCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePulseOximetryProfile_CodeableConceptForCode) ProtoMessage() {}

func (x *USCorePulseOximetryProfile_CodeableConceptForCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePulseOximetryProfile_CodeableConceptForCode.ProtoReflect.Descriptor instead.
func (*USCorePulseOximetryProfile_CodeableConceptForCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{14, 1}
}

func (x *USCorePulseOximetryProfile_CodeableConceptForCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePulseOximetryProfile_CodeableConceptForCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCorePulseOximetryProfile_CodeableConceptForCode) GetCoding() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Coding
	}
	return nil
}

func (x *USCorePulseOximetryProfile_CodeableConceptForCode) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *USCorePulseOximetryProfile_CodeableConceptForCode) GetOxygenSatCode() *datatypes_go_proto.CodingWithFixedCode {
	if x != nil {
		return x.OxygenSatCode
	}
	return nil
}

func (x *USCorePulseOximetryProfile_CodeableConceptForCode) GetPulseOx() *datatypes_go_proto.CodingWithFixedCode {
	if x != nil {
		return x.PulseOx
	}
	return nil
}

// Often just a dateTime for Vital Signs
type USCorePulseOximetryProfile_EffectiveX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCorePulseOximetryProfile_EffectiveX_DateTime
	//	*USCorePulseOximetryProfile_EffectiveX_Period
	Choice isUSCorePulseOximetryProfile_EffectiveX_Choice `protobuf_oneof:"choice"`
}

func (x *USCorePulseOximetryProfile_EffectiveX) Reset() {
	*x = USCorePulseOximetryProfile_EffectiveX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePulseOximetryProfile_EffectiveX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePulseOximetryProfile_EffectiveX) ProtoMessage() {}

func (x *USCorePulseOximetryProfile_EffectiveX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePulseOximetryProfile_EffectiveX.ProtoReflect.Descriptor instead.
func (*USCorePulseOximetryProfile_EffectiveX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{14, 2}
}

func (m *USCorePulseOximetryProfile_EffectiveX) GetChoice() isUSCorePulseOximetryProfile_EffectiveX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCorePulseOximetryProfile_EffectiveX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*USCorePulseOximetryProfile_EffectiveX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *USCorePulseOximetryProfile_EffectiveX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*USCorePulseOximetryProfile_EffectiveX_Period); ok {
		return x.Period
	}
	return nil
}

type isUSCorePulseOximetryProfile_EffectiveX_Choice interface {
	isUSCorePulseOximetryProfile_EffectiveX_Choice()
}

type USCorePulseOximetryProfile_EffectiveX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type USCorePulseOximetryProfile_EffectiveX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*USCorePulseOximetryProfile_EffectiveX_DateTime) isUSCorePulseOximetryProfile_EffectiveX_Choice() {
}

func (*USCorePulseOximetryProfile_EffectiveX_Period) isUSCorePulseOximetryProfile_EffectiveX_Choice() {
}

// Vital Signs value are recorded using the Quantity data type. For supporting
// observations such as Cuff size could use other datatypes such as
// CodeableConcept.
type USCorePulseOximetryProfile_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCorePulseOximetryProfile_ValueX_Quantity
	Choice isUSCorePulseOximetryProfile_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *USCorePulseOximetryProfile_ValueX) Reset() {
	*x = USCorePulseOximetryProfile_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePulseOximetryProfile_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePulseOximetryProfile_ValueX) ProtoMessage() {}

func (x *USCorePulseOximetryProfile_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePulseOximetryProfile_ValueX.ProtoReflect.Descriptor instead.
func (*USCorePulseOximetryProfile_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{14, 3}
}

func (m *USCorePulseOximetryProfile_ValueX) GetChoice() isUSCorePulseOximetryProfile_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCorePulseOximetryProfile_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*USCorePulseOximetryProfile_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isUSCorePulseOximetryProfile_ValueX_Choice interface {
	isUSCorePulseOximetryProfile_ValueX_Choice()
}

type USCorePulseOximetryProfile_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*USCorePulseOximetryProfile_ValueX_Quantity) isUSCorePulseOximetryProfile_ValueX_Choice() {}

// Provides guide for interpretation
type USCorePulseOximetryProfile_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Low Range, if relevant
	Low *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// High Range, if relevant
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Reference range qualifier
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Reference range population
	AppliesTo []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
	// Applicable age range, if relevant
	Age *datatypes_go_proto.Range `protobuf:"bytes,8,opt,name=age,proto3" json:"age,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *USCorePulseOximetryProfile_ReferenceRange) Reset() {
	*x = USCorePulseOximetryProfile_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePulseOximetryProfile_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePulseOximetryProfile_ReferenceRange) ProtoMessage() {}

func (x *USCorePulseOximetryProfile_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePulseOximetryProfile_ReferenceRange.ProtoReflect.Descriptor instead.
func (*USCorePulseOximetryProfile_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{14, 4}
}

func (x *USCorePulseOximetryProfile_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePulseOximetryProfile_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCorePulseOximetryProfile_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCorePulseOximetryProfile_ReferenceRange) GetLow() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *USCorePulseOximetryProfile_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *USCorePulseOximetryProfile_ReferenceRange) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *USCorePulseOximetryProfile_ReferenceRange) GetAppliesTo() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AppliesTo
	}
	return nil
}

func (x *USCorePulseOximetryProfile_ReferenceRange) GetAge() *datatypes_go_proto.Range {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *USCorePulseOximetryProfile_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Used when reporting systolic and diastolic blood pressure.
type USCorePulseOximetryProfile_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept          `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *USCorePulseOximetryProfile_Component_ValueX `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*USCorePulseOximetryProfile_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *USCorePulseOximetryProfile_Component) Reset() {
	*x = USCorePulseOximetryProfile_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePulseOximetryProfile_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePulseOximetryProfile_Component) ProtoMessage() {}

func (x *USCorePulseOximetryProfile_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePulseOximetryProfile_Component.ProtoReflect.Descriptor instead.
func (*USCorePulseOximetryProfile_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{14, 5}
}

func (x *USCorePulseOximetryProfile_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePulseOximetryProfile_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCorePulseOximetryProfile_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCorePulseOximetryProfile_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *USCorePulseOximetryProfile_Component) GetValue() *USCorePulseOximetryProfile_Component_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *USCorePulseOximetryProfile_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *USCorePulseOximetryProfile_Component) GetInterpretation() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *USCorePulseOximetryProfile_Component) GetReferenceRange() []*USCorePulseOximetryProfile_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Vital Sign Value recorded with UCUM
type USCorePulseOximetryProfile_Component_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCorePulseOximetryProfile_Component_ValueX_Quantity
	//	*USCorePulseOximetryProfile_Component_ValueX_CodeableConcept
	//	*USCorePulseOximetryProfile_Component_ValueX_StringValue
	//	*USCorePulseOximetryProfile_Component_ValueX_Boolean
	//	*USCorePulseOximetryProfile_Component_ValueX_Integer
	//	*USCorePulseOximetryProfile_Component_ValueX_Range
	//	*USCorePulseOximetryProfile_Component_ValueX_Ratio
	//	*USCorePulseOximetryProfile_Component_ValueX_SampledData
	//	*USCorePulseOximetryProfile_Component_ValueX_Time
	//	*USCorePulseOximetryProfile_Component_ValueX_DateTime
	//	*USCorePulseOximetryProfile_Component_ValueX_Period
	Choice isUSCorePulseOximetryProfile_Component_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *USCorePulseOximetryProfile_Component_ValueX) Reset() {
	*x = USCorePulseOximetryProfile_Component_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePulseOximetryProfile_Component_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePulseOximetryProfile_Component_ValueX) ProtoMessage() {}

func (x *USCorePulseOximetryProfile_Component_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePulseOximetryProfile_Component_ValueX.ProtoReflect.Descriptor instead.
func (*USCorePulseOximetryProfile_Component_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{14, 5, 0}
}

func (m *USCorePulseOximetryProfile_Component_ValueX) GetChoice() isUSCorePulseOximetryProfile_Component_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCorePulseOximetryProfile_Component_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*USCorePulseOximetryProfile_Component_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *USCorePulseOximetryProfile_Component_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*USCorePulseOximetryProfile_Component_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *USCorePulseOximetryProfile_Component_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*USCorePulseOximetryProfile_Component_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *USCorePulseOximetryProfile_Component_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*USCorePulseOximetryProfile_Component_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *USCorePulseOximetryProfile_Component_ValueX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*USCorePulseOximetryProfile_Component_ValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *USCorePulseOximetryProfile_Component_ValueX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*USCorePulseOximetryProfile_Component_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *USCorePulseOximetryProfile_Component_ValueX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*USCorePulseOximetryProfile_Component_ValueX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *USCorePulseOximetryProfile_Component_ValueX) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetChoice().(*USCorePulseOximetryProfile_Component_ValueX_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *USCorePulseOximetryProfile_Component_ValueX) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetChoice().(*USCorePulseOximetryProfile_Component_ValueX_Time); ok {
		return x.Time
	}
	return nil
}

func (x *USCorePulseOximetryProfile_Component_ValueX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*USCorePulseOximetryProfile_Component_ValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *USCorePulseOximetryProfile_Component_ValueX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*USCorePulseOximetryProfile_Component_ValueX_Period); ok {
		return x.Period
	}
	return nil
}

type isUSCorePulseOximetryProfile_Component_ValueX_Choice interface {
	isUSCorePulseOximetryProfile_Component_ValueX_Choice()
}

type USCorePulseOximetryProfile_Component_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type USCorePulseOximetryProfile_Component_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type USCorePulseOximetryProfile_Component_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type USCorePulseOximetryProfile_Component_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=boolean,proto3,oneof"`
}

type USCorePulseOximetryProfile_Component_ValueX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,5,opt,name=integer,proto3,oneof"`
}

type USCorePulseOximetryProfile_Component_ValueX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,6,opt,name=range,proto3,oneof"`
}

type USCorePulseOximetryProfile_Component_ValueX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,7,opt,name=ratio,proto3,oneof"`
}

type USCorePulseOximetryProfile_Component_ValueX_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,8,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type USCorePulseOximetryProfile_Component_ValueX_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,9,opt,name=time,proto3,oneof"`
}

type USCorePulseOximetryProfile_Component_ValueX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,10,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type USCorePulseOximetryProfile_Component_ValueX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,11,opt,name=period,proto3,oneof"`
}

func (*USCorePulseOximetryProfile_Component_ValueX_Quantity) isUSCorePulseOximetryProfile_Component_ValueX_Choice() {
}

func (*USCorePulseOximetryProfile_Component_ValueX_CodeableConcept) isUSCorePulseOximetryProfile_Component_ValueX_Choice() {
}

func (*USCorePulseOximetryProfile_Component_ValueX_StringValue) isUSCorePulseOximetryProfile_Component_ValueX_Choice() {
}

func (*USCorePulseOximetryProfile_Component_ValueX_Boolean) isUSCorePulseOximetryProfile_Component_ValueX_Choice() {
}

func (*USCorePulseOximetryProfile_Component_ValueX_Integer) isUSCorePulseOximetryProfile_Component_ValueX_Choice() {
}

func (*USCorePulseOximetryProfile_Component_ValueX_Range) isUSCorePulseOximetryProfile_Component_ValueX_Choice() {
}

func (*USCorePulseOximetryProfile_Component_ValueX_Ratio) isUSCorePulseOximetryProfile_Component_ValueX_Choice() {
}

func (*USCorePulseOximetryProfile_Component_ValueX_SampledData) isUSCorePulseOximetryProfile_Component_ValueX_Choice() {
}

func (*USCorePulseOximetryProfile_Component_ValueX_Time) isUSCorePulseOximetryProfile_Component_ValueX_Choice() {
}

func (*USCorePulseOximetryProfile_Component_ValueX_DateTime) isUSCorePulseOximetryProfile_Component_ValueX_Choice() {
}

func (*USCorePulseOximetryProfile_Component_ValueX_Period) isUSCorePulseOximetryProfile_Component_ValueX_Choice() {
}

// Unique Device Identifier (UDI) Barcode string
type USCoreImplantableDeviceProfile_UdiCarrier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Mandatory fixed portion of UDI
	DeviceIdentifier *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=device_identifier,json=deviceIdentifier,proto3" json:"device_identifier,omitempty"`
	// UDI Issuing Organization
	Issuer *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// Regional UDI authority
	Jurisdiction *datatypes_go_proto.Uri `protobuf:"bytes,6,opt,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	// UDI Machine Readable Barcode String
	CarrierAidc *datatypes_go_proto.Base64Binary `protobuf:"bytes,7,opt,name=carrier_aidc,json=carrierAIDC,proto3" json:"carrier_aidc,omitempty"`
	// UDI Human Readable Barcode String
	CarrierHrf *datatypes_go_proto.String                               `protobuf:"bytes,8,opt,name=carrier_hrf,json=carrierHRF,proto3" json:"carrier_hrf,omitempty"`
	EntryType  *USCoreImplantableDeviceProfile_UdiCarrier_EntryTypeCode `protobuf:"bytes,9,opt,name=entry_type,json=entryType,proto3" json:"entry_type,omitempty"`
}

func (x *USCoreImplantableDeviceProfile_UdiCarrier) Reset() {
	*x = USCoreImplantableDeviceProfile_UdiCarrier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreImplantableDeviceProfile_UdiCarrier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreImplantableDeviceProfile_UdiCarrier) ProtoMessage() {}

func (x *USCoreImplantableDeviceProfile_UdiCarrier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreImplantableDeviceProfile_UdiCarrier.ProtoReflect.Descriptor instead.
func (*USCoreImplantableDeviceProfile_UdiCarrier) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{15, 0}
}

func (x *USCoreImplantableDeviceProfile_UdiCarrier) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_UdiCarrier) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_UdiCarrier) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_UdiCarrier) GetDeviceIdentifier() *datatypes_go_proto.String {
	if x != nil {
		return x.DeviceIdentifier
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_UdiCarrier) GetIssuer() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_UdiCarrier) GetJurisdiction() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Jurisdiction
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_UdiCarrier) GetCarrierAidc() *datatypes_go_proto.Base64Binary {
	if x != nil {
		return x.CarrierAidc
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_UdiCarrier) GetCarrierHrf() *datatypes_go_proto.String {
	if x != nil {
		return x.CarrierHrf
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_UdiCarrier) GetEntryType() *USCoreImplantableDeviceProfile_UdiCarrier_EntryTypeCode {
	if x != nil {
		return x.EntryType
	}
	return nil
}

// active | inactive | entered-in-error | unknown
type USCoreImplantableDeviceProfile_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.FHIRDeviceStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.FHIRDeviceStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension           `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreImplantableDeviceProfile_StatusCode) Reset() {
	*x = USCoreImplantableDeviceProfile_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreImplantableDeviceProfile_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreImplantableDeviceProfile_StatusCode) ProtoMessage() {}

func (x *USCoreImplantableDeviceProfile_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreImplantableDeviceProfile_StatusCode.ProtoReflect.Descriptor instead.
func (*USCoreImplantableDeviceProfile_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{15, 1}
}

func (x *USCoreImplantableDeviceProfile_StatusCode) GetValue() codes_go_proto.FHIRDeviceStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.FHIRDeviceStatusCode_INVALID_UNINITIALIZED
}

func (x *USCoreImplantableDeviceProfile_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The name of the device as given by the manufacturer
type USCoreImplantableDeviceProfile_DeviceName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The name of the device
	Name *datatypes_go_proto.String                          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Type *USCoreImplantableDeviceProfile_DeviceName_TypeCode `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *USCoreImplantableDeviceProfile_DeviceName) Reset() {
	*x = USCoreImplantableDeviceProfile_DeviceName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreImplantableDeviceProfile_DeviceName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreImplantableDeviceProfile_DeviceName) ProtoMessage() {}

func (x *USCoreImplantableDeviceProfile_DeviceName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreImplantableDeviceProfile_DeviceName.ProtoReflect.Descriptor instead.
func (*USCoreImplantableDeviceProfile_DeviceName) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{15, 2}
}

func (x *USCoreImplantableDeviceProfile_DeviceName) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_DeviceName) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_DeviceName) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_DeviceName) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_DeviceName) GetType() *USCoreImplantableDeviceProfile_DeviceName_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

// The capabilities supported on a  device, the standards to which the device
// conforms for a particular purpose, and used for the communication
type USCoreImplantableDeviceProfile_Specialization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The standard that is used to operate and communicate
	SystemType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=system_type,json=systemType,proto3" json:"system_type,omitempty"`
	// The version of the standard that is used to operate and communicate
	Version *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *USCoreImplantableDeviceProfile_Specialization) Reset() {
	*x = USCoreImplantableDeviceProfile_Specialization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreImplantableDeviceProfile_Specialization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreImplantableDeviceProfile_Specialization) ProtoMessage() {}

func (x *USCoreImplantableDeviceProfile_Specialization) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreImplantableDeviceProfile_Specialization.ProtoReflect.Descriptor instead.
func (*USCoreImplantableDeviceProfile_Specialization) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{15, 3}
}

func (x *USCoreImplantableDeviceProfile_Specialization) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_Specialization) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_Specialization) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_Specialization) GetSystemType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SystemType
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_Specialization) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

// The actual design of the device or software version running on the device
type USCoreImplantableDeviceProfile_Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The type of the device version
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// A single component of the device version
	Component *datatypes_go_proto.Identifier `protobuf:"bytes,5,opt,name=component,proto3" json:"component,omitempty"`
	// The version text
	Value *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *USCoreImplantableDeviceProfile_Version) Reset() {
	*x = USCoreImplantableDeviceProfile_Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreImplantableDeviceProfile_Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreImplantableDeviceProfile_Version) ProtoMessage() {}

func (x *USCoreImplantableDeviceProfile_Version) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreImplantableDeviceProfile_Version.ProtoReflect.Descriptor instead.
func (*USCoreImplantableDeviceProfile_Version) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{15, 4}
}

func (x *USCoreImplantableDeviceProfile_Version) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_Version) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_Version) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_Version) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_Version) GetComponent() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_Version) GetValue() *datatypes_go_proto.String {
	if x != nil {
		return x.Value
	}
	return nil
}

// The actual configuration settings of a device as it actually operates,
// e.g., regulation status, time properties
type USCoreImplantableDeviceProfile_Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Code that specifies the property DeviceDefinitionPropetyCode (Extensible)
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Property value as a quantity
	ValueQuantity []*datatypes_go_proto.Quantity `protobuf:"bytes,5,rep,name=value_quantity,json=valueQuantity,proto3" json:"value_quantity,omitempty"`
	// Property value as a code, e.g., NTP4 (synced to NTP)
	ValueCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,rep,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *USCoreImplantableDeviceProfile_Property) Reset() {
	*x = USCoreImplantableDeviceProfile_Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreImplantableDeviceProfile_Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreImplantableDeviceProfile_Property) ProtoMessage() {}

func (x *USCoreImplantableDeviceProfile_Property) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreImplantableDeviceProfile_Property.ProtoReflect.Descriptor instead.
func (*USCoreImplantableDeviceProfile_Property) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{15, 5}
}

func (x *USCoreImplantableDeviceProfile_Property) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_Property) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_Property) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_Property) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_Property) GetValueQuantity() []*datatypes_go_proto.Quantity {
	if x != nil {
		return x.ValueQuantity
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_Property) GetValueCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// barcode | rfid | manual +
type USCoreImplantableDeviceProfile_UdiCarrier_EntryTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.UDIEntryTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.UDIEntryTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreImplantableDeviceProfile_UdiCarrier_EntryTypeCode) Reset() {
	*x = USCoreImplantableDeviceProfile_UdiCarrier_EntryTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreImplantableDeviceProfile_UdiCarrier_EntryTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreImplantableDeviceProfile_UdiCarrier_EntryTypeCode) ProtoMessage() {}

func (x *USCoreImplantableDeviceProfile_UdiCarrier_EntryTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreImplantableDeviceProfile_UdiCarrier_EntryTypeCode.ProtoReflect.Descriptor instead.
func (*USCoreImplantableDeviceProfile_UdiCarrier_EntryTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{15, 0, 0}
}

func (x *USCoreImplantableDeviceProfile_UdiCarrier_EntryTypeCode) GetValue() codes_go_proto.UDIEntryTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.UDIEntryTypeCode_INVALID_UNINITIALIZED
}

func (x *USCoreImplantableDeviceProfile_UdiCarrier_EntryTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_UdiCarrier_EntryTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// udi-label-name | user-friendly-name | patient-reported-name |
// manufacturer-name | model-name | other
type USCoreImplantableDeviceProfile_DeviceName_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.DeviceNameTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.DeviceNameTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension         `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreImplantableDeviceProfile_DeviceName_TypeCode) Reset() {
	*x = USCoreImplantableDeviceProfile_DeviceName_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreImplantableDeviceProfile_DeviceName_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreImplantableDeviceProfile_DeviceName_TypeCode) ProtoMessage() {}

func (x *USCoreImplantableDeviceProfile_DeviceName_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreImplantableDeviceProfile_DeviceName_TypeCode.ProtoReflect.Descriptor instead.
func (*USCoreImplantableDeviceProfile_DeviceName_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{15, 2, 0}
}

func (x *USCoreImplantableDeviceProfile_DeviceName_TypeCode) GetValue() codes_go_proto.DeviceNameTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.DeviceNameTypeCode_INVALID_UNINITIALIZED
}

func (x *USCoreImplantableDeviceProfile_DeviceName_TypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreImplantableDeviceProfile_DeviceName_TypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// active | on-hold | cancelled | completed | entered-in-error | stopped |
// draft | unknown
type USCoreMedicationRequestProfile_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.MedicationrequestStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.MedicationrequestStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreMedicationRequestProfile_StatusCode) Reset() {
	*x = USCoreMedicationRequestProfile_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreMedicationRequestProfile_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreMedicationRequestProfile_StatusCode) ProtoMessage() {}

func (x *USCoreMedicationRequestProfile_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreMedicationRequestProfile_StatusCode.ProtoReflect.Descriptor instead.
func (*USCoreMedicationRequestProfile_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{16, 0}
}

func (x *USCoreMedicationRequestProfile_StatusCode) GetValue() codes_go_proto.MedicationrequestStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.MedicationrequestStatusCode_INVALID_UNINITIALIZED
}

func (x *USCoreMedicationRequestProfile_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// proposal | plan | order | original-order | reflex-order | filler-order |
// instance-order | option
type USCoreMedicationRequestProfile_IntentCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.MedicationRequestIntentCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.MedicationRequestIntentCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreMedicationRequestProfile_IntentCode) Reset() {
	*x = USCoreMedicationRequestProfile_IntentCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreMedicationRequestProfile_IntentCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreMedicationRequestProfile_IntentCode) ProtoMessage() {}

func (x *USCoreMedicationRequestProfile_IntentCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreMedicationRequestProfile_IntentCode.ProtoReflect.Descriptor instead.
func (*USCoreMedicationRequestProfile_IntentCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{16, 1}
}

func (x *USCoreMedicationRequestProfile_IntentCode) GetValue() codes_go_proto.MedicationRequestIntentCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.MedicationRequestIntentCode_INVALID_UNINITIALIZED
}

func (x *USCoreMedicationRequestProfile_IntentCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_IntentCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// routine | urgent | asap | stat
type USCoreMedicationRequestProfile_PriorityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.RequestPriorityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.RequestPriorityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension          `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreMedicationRequestProfile_PriorityCode) Reset() {
	*x = USCoreMedicationRequestProfile_PriorityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreMedicationRequestProfile_PriorityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreMedicationRequestProfile_PriorityCode) ProtoMessage() {}

func (x *USCoreMedicationRequestProfile_PriorityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreMedicationRequestProfile_PriorityCode.ProtoReflect.Descriptor instead.
func (*USCoreMedicationRequestProfile_PriorityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{16, 2}
}

func (x *USCoreMedicationRequestProfile_PriorityCode) GetValue() codes_go_proto.RequestPriorityCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.RequestPriorityCode_INVALID_UNINITIALIZED
}

func (x *USCoreMedicationRequestProfile_PriorityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_PriorityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Reported rather than primary record
type USCoreMedicationRequestProfile_ReportedX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCoreMedicationRequestProfile_ReportedX_Boolean
	//	*USCoreMedicationRequestProfile_ReportedX_Reference
	Choice isUSCoreMedicationRequestProfile_ReportedX_Choice `protobuf_oneof:"choice"`
}

func (x *USCoreMedicationRequestProfile_ReportedX) Reset() {
	*x = USCoreMedicationRequestProfile_ReportedX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreMedicationRequestProfile_ReportedX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreMedicationRequestProfile_ReportedX) ProtoMessage() {}

func (x *USCoreMedicationRequestProfile_ReportedX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreMedicationRequestProfile_ReportedX.ProtoReflect.Descriptor instead.
func (*USCoreMedicationRequestProfile_ReportedX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{16, 3}
}

func (m *USCoreMedicationRequestProfile_ReportedX) GetChoice() isUSCoreMedicationRequestProfile_ReportedX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_ReportedX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*USCoreMedicationRequestProfile_ReportedX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_ReportedX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*USCoreMedicationRequestProfile_ReportedX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isUSCoreMedicationRequestProfile_ReportedX_Choice interface {
	isUSCoreMedicationRequestProfile_ReportedX_Choice()
}

type USCoreMedicationRequestProfile_ReportedX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type USCoreMedicationRequestProfile_ReportedX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*USCoreMedicationRequestProfile_ReportedX_Boolean) isUSCoreMedicationRequestProfile_ReportedX_Choice() {
}

func (*USCoreMedicationRequestProfile_ReportedX_Reference) isUSCoreMedicationRequestProfile_ReportedX_Choice() {
}

// Medication to be taken
type USCoreMedicationRequestProfile_MedicationX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCoreMedicationRequestProfile_MedicationX_CodeableConcept
	//	*USCoreMedicationRequestProfile_MedicationX_Reference
	Choice isUSCoreMedicationRequestProfile_MedicationX_Choice `protobuf_oneof:"choice"`
}

func (x *USCoreMedicationRequestProfile_MedicationX) Reset() {
	*x = USCoreMedicationRequestProfile_MedicationX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreMedicationRequestProfile_MedicationX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreMedicationRequestProfile_MedicationX) ProtoMessage() {}

func (x *USCoreMedicationRequestProfile_MedicationX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreMedicationRequestProfile_MedicationX.ProtoReflect.Descriptor instead.
func (*USCoreMedicationRequestProfile_MedicationX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{16, 4}
}

func (m *USCoreMedicationRequestProfile_MedicationX) GetChoice() isUSCoreMedicationRequestProfile_MedicationX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_MedicationX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*USCoreMedicationRequestProfile_MedicationX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_MedicationX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*USCoreMedicationRequestProfile_MedicationX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isUSCoreMedicationRequestProfile_MedicationX_Choice interface {
	isUSCoreMedicationRequestProfile_MedicationX_Choice()
}

type USCoreMedicationRequestProfile_MedicationX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type USCoreMedicationRequestProfile_MedicationX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*USCoreMedicationRequestProfile_MedicationX_CodeableConcept) isUSCoreMedicationRequestProfile_MedicationX_Choice() {
}

func (*USCoreMedicationRequestProfile_MedicationX_Reference) isUSCoreMedicationRequestProfile_MedicationX_Choice() {
}

// Medication supply authorization
type USCoreMedicationRequestProfile_DispenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                             `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	InitialFill       *USCoreMedicationRequestProfile_DispenseRequest_InitialFill `protobuf:"bytes,4,opt,name=initial_fill,json=initialFill,proto3" json:"initial_fill,omitempty"`
	// Minimum period of time between dispenses
	DispenseInterval *datatypes_go_proto.Duration `protobuf:"bytes,5,opt,name=dispense_interval,json=dispenseInterval,proto3" json:"dispense_interval,omitempty"`
	// Time period supply is authorized for
	ValidityPeriod *datatypes_go_proto.Period `protobuf:"bytes,6,opt,name=validity_period,json=validityPeriod,proto3" json:"validity_period,omitempty"`
	// Number of refills authorized
	NumberOfRepeatsAllowed *datatypes_go_proto.UnsignedInt `protobuf:"bytes,7,opt,name=number_of_repeats_allowed,json=numberOfRepeatsAllowed,proto3" json:"number_of_repeats_allowed,omitempty"`
	// Amount of medication to supply per dispense
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,8,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Number of days supply per dispense
	ExpectedSupplyDuration *datatypes_go_proto.Duration `protobuf:"bytes,9,opt,name=expected_supply_duration,json=expectedSupplyDuration,proto3" json:"expected_supply_duration,omitempty"`
	// Intended dispenser
	Performer *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=performer,proto3" json:"performer,omitempty"`
}

func (x *USCoreMedicationRequestProfile_DispenseRequest) Reset() {
	*x = USCoreMedicationRequestProfile_DispenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreMedicationRequestProfile_DispenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreMedicationRequestProfile_DispenseRequest) ProtoMessage() {}

func (x *USCoreMedicationRequestProfile_DispenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreMedicationRequestProfile_DispenseRequest.ProtoReflect.Descriptor instead.
func (*USCoreMedicationRequestProfile_DispenseRequest) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{16, 5}
}

func (x *USCoreMedicationRequestProfile_DispenseRequest) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_DispenseRequest) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_DispenseRequest) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_DispenseRequest) GetInitialFill() *USCoreMedicationRequestProfile_DispenseRequest_InitialFill {
	if x != nil {
		return x.InitialFill
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_DispenseRequest) GetDispenseInterval() *datatypes_go_proto.Duration {
	if x != nil {
		return x.DispenseInterval
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_DispenseRequest) GetValidityPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.ValidityPeriod
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_DispenseRequest) GetNumberOfRepeatsAllowed() *datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.NumberOfRepeatsAllowed
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_DispenseRequest) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_DispenseRequest) GetExpectedSupplyDuration() *datatypes_go_proto.Duration {
	if x != nil {
		return x.ExpectedSupplyDuration
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_DispenseRequest) GetPerformer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

// Any restrictions on medication substitution
type USCoreMedicationRequestProfile_Substitution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                       `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Allowed           *USCoreMedicationRequestProfile_Substitution_AllowedX `protobuf:"bytes,4,opt,name=allowed,proto3" json:"allowed,omitempty"`
	// Why should (not) substitution be made
	Reason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *USCoreMedicationRequestProfile_Substitution) Reset() {
	*x = USCoreMedicationRequestProfile_Substitution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreMedicationRequestProfile_Substitution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreMedicationRequestProfile_Substitution) ProtoMessage() {}

func (x *USCoreMedicationRequestProfile_Substitution) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreMedicationRequestProfile_Substitution.ProtoReflect.Descriptor instead.
func (*USCoreMedicationRequestProfile_Substitution) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{16, 6}
}

func (x *USCoreMedicationRequestProfile_Substitution) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_Substitution) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_Substitution) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_Substitution) GetAllowed() *USCoreMedicationRequestProfile_Substitution_AllowedX {
	if x != nil {
		return x.Allowed
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_Substitution) GetReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Reason
	}
	return nil
}

// First fill details
type USCoreMedicationRequestProfile_DispenseRequest_InitialFill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// First fill quantity
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// First fill duration
	Duration *datatypes_go_proto.Duration `protobuf:"bytes,5,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *USCoreMedicationRequestProfile_DispenseRequest_InitialFill) Reset() {
	*x = USCoreMedicationRequestProfile_DispenseRequest_InitialFill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreMedicationRequestProfile_DispenseRequest_InitialFill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreMedicationRequestProfile_DispenseRequest_InitialFill) ProtoMessage() {}

func (x *USCoreMedicationRequestProfile_DispenseRequest_InitialFill) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreMedicationRequestProfile_DispenseRequest_InitialFill.ProtoReflect.Descriptor instead.
func (*USCoreMedicationRequestProfile_DispenseRequest_InitialFill) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{16, 5, 0}
}

func (x *USCoreMedicationRequestProfile_DispenseRequest_InitialFill) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_DispenseRequest_InitialFill) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_DispenseRequest_InitialFill) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_DispenseRequest_InitialFill) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_DispenseRequest_InitialFill) GetDuration() *datatypes_go_proto.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

// Whether substitution is allowed or not
type USCoreMedicationRequestProfile_Substitution_AllowedX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCoreMedicationRequestProfile_Substitution_AllowedX_Boolean
	//	*USCoreMedicationRequestProfile_Substitution_AllowedX_CodeableConcept
	Choice isUSCoreMedicationRequestProfile_Substitution_AllowedX_Choice `protobuf_oneof:"choice"`
}

func (x *USCoreMedicationRequestProfile_Substitution_AllowedX) Reset() {
	*x = USCoreMedicationRequestProfile_Substitution_AllowedX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreMedicationRequestProfile_Substitution_AllowedX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreMedicationRequestProfile_Substitution_AllowedX) ProtoMessage() {}

func (x *USCoreMedicationRequestProfile_Substitution_AllowedX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreMedicationRequestProfile_Substitution_AllowedX.ProtoReflect.Descriptor instead.
func (*USCoreMedicationRequestProfile_Substitution_AllowedX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{16, 6, 0}
}

func (m *USCoreMedicationRequestProfile_Substitution_AllowedX) GetChoice() isUSCoreMedicationRequestProfile_Substitution_AllowedX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_Substitution_AllowedX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*USCoreMedicationRequestProfile_Substitution_AllowedX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *USCoreMedicationRequestProfile_Substitution_AllowedX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*USCoreMedicationRequestProfile_Substitution_AllowedX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isUSCoreMedicationRequestProfile_Substitution_AllowedX_Choice interface {
	isUSCoreMedicationRequestProfile_Substitution_AllowedX_Choice()
}

type USCoreMedicationRequestProfile_Substitution_AllowedX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type USCoreMedicationRequestProfile_Substitution_AllowedX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*USCoreMedicationRequestProfile_Substitution_AllowedX_Boolean) isUSCoreMedicationRequestProfile_Substitution_AllowedX_Choice() {
}

func (*USCoreMedicationRequestProfile_Substitution_AllowedX_CodeableConcept) isUSCoreMedicationRequestProfile_Substitution_AllowedX_Choice() {
}

// active | inactive | entered-in-error
type USCoreMedicationProfile_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.MedicationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.MedicationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension           `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreMedicationProfile_StatusCode) Reset() {
	*x = USCoreMedicationProfile_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreMedicationProfile_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreMedicationProfile_StatusCode) ProtoMessage() {}

func (x *USCoreMedicationProfile_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreMedicationProfile_StatusCode.ProtoReflect.Descriptor instead.
func (*USCoreMedicationProfile_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{17, 0}
}

func (x *USCoreMedicationProfile_StatusCode) GetValue() codes_go_proto.MedicationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.MedicationStatusCode_INVALID_UNINITIALIZED
}

func (x *USCoreMedicationProfile_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreMedicationProfile_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Active or inactive ingredient
type USCoreMedicationProfile_Ingredient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension           `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Item              *USCoreMedicationProfile_Ingredient_ItemX `protobuf:"bytes,4,opt,name=item,proto3" json:"item,omitempty"`
	// Active ingredient indicator
	IsActive *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// Quantity of ingredient present
	Strength *datatypes_go_proto.Ratio `protobuf:"bytes,6,opt,name=strength,proto3" json:"strength,omitempty"`
}

func (x *USCoreMedicationProfile_Ingredient) Reset() {
	*x = USCoreMedicationProfile_Ingredient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreMedicationProfile_Ingredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreMedicationProfile_Ingredient) ProtoMessage() {}

func (x *USCoreMedicationProfile_Ingredient) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreMedicationProfile_Ingredient.ProtoReflect.Descriptor instead.
func (*USCoreMedicationProfile_Ingredient) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{17, 1}
}

func (x *USCoreMedicationProfile_Ingredient) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreMedicationProfile_Ingredient) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreMedicationProfile_Ingredient) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreMedicationProfile_Ingredient) GetItem() *USCoreMedicationProfile_Ingredient_ItemX {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *USCoreMedicationProfile_Ingredient) GetIsActive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.IsActive
	}
	return nil
}

func (x *USCoreMedicationProfile_Ingredient) GetStrength() *datatypes_go_proto.Ratio {
	if x != nil {
		return x.Strength
	}
	return nil
}

// Details about packaged medications
type USCoreMedicationProfile_Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifier assigned to batch
	LotNumber *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=lot_number,json=lotNumber,proto3" json:"lot_number,omitempty"`
	// When batch will expire
	ExpirationDate *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
}

func (x *USCoreMedicationProfile_Batch) Reset() {
	*x = USCoreMedicationProfile_Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreMedicationProfile_Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreMedicationProfile_Batch) ProtoMessage() {}

func (x *USCoreMedicationProfile_Batch) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreMedicationProfile_Batch.ProtoReflect.Descriptor instead.
func (*USCoreMedicationProfile_Batch) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{17, 2}
}

func (x *USCoreMedicationProfile_Batch) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreMedicationProfile_Batch) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreMedicationProfile_Batch) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreMedicationProfile_Batch) GetLotNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.LotNumber
	}
	return nil
}

func (x *USCoreMedicationProfile_Batch) GetExpirationDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

// The actual ingredient or content
type USCoreMedicationProfile_Ingredient_ItemX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCoreMedicationProfile_Ingredient_ItemX_CodeableConcept
	//	*USCoreMedicationProfile_Ingredient_ItemX_Reference
	Choice isUSCoreMedicationProfile_Ingredient_ItemX_Choice `protobuf_oneof:"choice"`
}

func (x *USCoreMedicationProfile_Ingredient_ItemX) Reset() {
	*x = USCoreMedicationProfile_Ingredient_ItemX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreMedicationProfile_Ingredient_ItemX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreMedicationProfile_Ingredient_ItemX) ProtoMessage() {}

func (x *USCoreMedicationProfile_Ingredient_ItemX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreMedicationProfile_Ingredient_ItemX.ProtoReflect.Descriptor instead.
func (*USCoreMedicationProfile_Ingredient_ItemX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{17, 1, 0}
}

func (m *USCoreMedicationProfile_Ingredient_ItemX) GetChoice() isUSCoreMedicationProfile_Ingredient_ItemX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCoreMedicationProfile_Ingredient_ItemX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*USCoreMedicationProfile_Ingredient_ItemX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *USCoreMedicationProfile_Ingredient_ItemX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*USCoreMedicationProfile_Ingredient_ItemX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isUSCoreMedicationProfile_Ingredient_ItemX_Choice interface {
	isUSCoreMedicationProfile_Ingredient_ItemX_Choice()
}

type USCoreMedicationProfile_Ingredient_ItemX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type USCoreMedicationProfile_Ingredient_ItemX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*USCoreMedicationProfile_Ingredient_ItemX_CodeableConcept) isUSCoreMedicationProfile_Ingredient_ItemX_Choice() {
}

func (*USCoreMedicationProfile_Ingredient_ItemX_Reference) isUSCoreMedicationProfile_Ingredient_ItemX_Choice() {
}

// proposed | planned | accepted | active | on-hold | completed | cancelled |
// entered-in-error | rejected
type USCoreGoalProfile_LifecycleStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.GoalLifecycleStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.GoalLifecycleStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension              `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreGoalProfile_LifecycleStatusCode) Reset() {
	*x = USCoreGoalProfile_LifecycleStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreGoalProfile_LifecycleStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreGoalProfile_LifecycleStatusCode) ProtoMessage() {}

func (x *USCoreGoalProfile_LifecycleStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreGoalProfile_LifecycleStatusCode.ProtoReflect.Descriptor instead.
func (*USCoreGoalProfile_LifecycleStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{18, 0}
}

func (x *USCoreGoalProfile_LifecycleStatusCode) GetValue() codes_go_proto.GoalLifecycleStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.GoalLifecycleStatusCode_INVALID_UNINITIALIZED
}

func (x *USCoreGoalProfile_LifecycleStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreGoalProfile_LifecycleStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// When goal pursuit begins
type USCoreGoalProfile_StartX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCoreGoalProfile_StartX_Date
	//	*USCoreGoalProfile_StartX_CodeableConcept
	Choice isUSCoreGoalProfile_StartX_Choice `protobuf_oneof:"choice"`
}

func (x *USCoreGoalProfile_StartX) Reset() {
	*x = USCoreGoalProfile_StartX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreGoalProfile_StartX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreGoalProfile_StartX) ProtoMessage() {}

func (x *USCoreGoalProfile_StartX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreGoalProfile_StartX.ProtoReflect.Descriptor instead.
func (*USCoreGoalProfile_StartX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{18, 1}
}

func (m *USCoreGoalProfile_StartX) GetChoice() isUSCoreGoalProfile_StartX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCoreGoalProfile_StartX) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetChoice().(*USCoreGoalProfile_StartX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *USCoreGoalProfile_StartX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*USCoreGoalProfile_StartX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isUSCoreGoalProfile_StartX_Choice interface {
	isUSCoreGoalProfile_StartX_Choice()
}

type USCoreGoalProfile_StartX_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type USCoreGoalProfile_StartX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*USCoreGoalProfile_StartX_Date) isUSCoreGoalProfile_StartX_Choice() {}

func (*USCoreGoalProfile_StartX_CodeableConcept) isUSCoreGoalProfile_StartX_Choice() {}

// Target outcome for the goal
type USCoreGoalProfile_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The parameter whose value is being tracked
	Measure *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=measure,proto3" json:"measure,omitempty"`
	Detail  *USCoreGoalProfile_Target_DetailX   `protobuf:"bytes,5,opt,name=detail,proto3" json:"detail,omitempty"`
	Due     *USCoreGoalProfile_Target_DueX      `protobuf:"bytes,6,opt,name=due,proto3" json:"due,omitempty"`
}

func (x *USCoreGoalProfile_Target) Reset() {
	*x = USCoreGoalProfile_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreGoalProfile_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreGoalProfile_Target) ProtoMessage() {}

func (x *USCoreGoalProfile_Target) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreGoalProfile_Target.ProtoReflect.Descriptor instead.
func (*USCoreGoalProfile_Target) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{18, 2}
}

func (x *USCoreGoalProfile_Target) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreGoalProfile_Target) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreGoalProfile_Target) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreGoalProfile_Target) GetMeasure() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Measure
	}
	return nil
}

func (x *USCoreGoalProfile_Target) GetDetail() *USCoreGoalProfile_Target_DetailX {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *USCoreGoalProfile_Target) GetDue() *USCoreGoalProfile_Target_DueX {
	if x != nil {
		return x.Due
	}
	return nil
}

// The target value to be achieved
type USCoreGoalProfile_Target_DetailX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCoreGoalProfile_Target_DetailX_Quantity
	//	*USCoreGoalProfile_Target_DetailX_Range
	//	*USCoreGoalProfile_Target_DetailX_CodeableConcept
	//	*USCoreGoalProfile_Target_DetailX_StringValue
	//	*USCoreGoalProfile_Target_DetailX_Boolean
	//	*USCoreGoalProfile_Target_DetailX_Integer
	//	*USCoreGoalProfile_Target_DetailX_Ratio
	Choice isUSCoreGoalProfile_Target_DetailX_Choice `protobuf_oneof:"choice"`
}

func (x *USCoreGoalProfile_Target_DetailX) Reset() {
	*x = USCoreGoalProfile_Target_DetailX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreGoalProfile_Target_DetailX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreGoalProfile_Target_DetailX) ProtoMessage() {}

func (x *USCoreGoalProfile_Target_DetailX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreGoalProfile_Target_DetailX.ProtoReflect.Descriptor instead.
func (*USCoreGoalProfile_Target_DetailX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{18, 2, 0}
}

func (m *USCoreGoalProfile_Target_DetailX) GetChoice() isUSCoreGoalProfile_Target_DetailX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCoreGoalProfile_Target_DetailX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*USCoreGoalProfile_Target_DetailX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *USCoreGoalProfile_Target_DetailX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*USCoreGoalProfile_Target_DetailX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *USCoreGoalProfile_Target_DetailX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*USCoreGoalProfile_Target_DetailX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *USCoreGoalProfile_Target_DetailX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*USCoreGoalProfile_Target_DetailX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *USCoreGoalProfile_Target_DetailX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*USCoreGoalProfile_Target_DetailX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *USCoreGoalProfile_Target_DetailX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*USCoreGoalProfile_Target_DetailX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *USCoreGoalProfile_Target_DetailX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*USCoreGoalProfile_Target_DetailX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

type isUSCoreGoalProfile_Target_DetailX_Choice interface {
	isUSCoreGoalProfile_Target_DetailX_Choice()
}

type USCoreGoalProfile_Target_DetailX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type USCoreGoalProfile_Target_DetailX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

type USCoreGoalProfile_Target_DetailX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type USCoreGoalProfile_Target_DetailX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=string_value,json=string,proto3,oneof"`
}

type USCoreGoalProfile_Target_DetailX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=boolean,proto3,oneof"`
}

type USCoreGoalProfile_Target_DetailX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,6,opt,name=integer,proto3,oneof"`
}

type USCoreGoalProfile_Target_DetailX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,7,opt,name=ratio,proto3,oneof"`
}

func (*USCoreGoalProfile_Target_DetailX_Quantity) isUSCoreGoalProfile_Target_DetailX_Choice() {}

func (*USCoreGoalProfile_Target_DetailX_Range) isUSCoreGoalProfile_Target_DetailX_Choice() {}

func (*USCoreGoalProfile_Target_DetailX_CodeableConcept) isUSCoreGoalProfile_Target_DetailX_Choice() {
}

func (*USCoreGoalProfile_Target_DetailX_StringValue) isUSCoreGoalProfile_Target_DetailX_Choice() {}

func (*USCoreGoalProfile_Target_DetailX_Boolean) isUSCoreGoalProfile_Target_DetailX_Choice() {}

func (*USCoreGoalProfile_Target_DetailX_Integer) isUSCoreGoalProfile_Target_DetailX_Choice() {}

func (*USCoreGoalProfile_Target_DetailX_Ratio) isUSCoreGoalProfile_Target_DetailX_Choice() {}

// Reach goal on or before
type USCoreGoalProfile_Target_DueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCoreGoalProfile_Target_DueX_Date
	Choice isUSCoreGoalProfile_Target_DueX_Choice `protobuf_oneof:"choice"`
}

func (x *USCoreGoalProfile_Target_DueX) Reset() {
	*x = USCoreGoalProfile_Target_DueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreGoalProfile_Target_DueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreGoalProfile_Target_DueX) ProtoMessage() {}

func (x *USCoreGoalProfile_Target_DueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreGoalProfile_Target_DueX.ProtoReflect.Descriptor instead.
func (*USCoreGoalProfile_Target_DueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{18, 2, 1}
}

func (m *USCoreGoalProfile_Target_DueX) GetChoice() isUSCoreGoalProfile_Target_DueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCoreGoalProfile_Target_DueX) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetChoice().(*USCoreGoalProfile_Target_DueX_Date); ok {
		return x.Date
	}
	return nil
}

type isUSCoreGoalProfile_Target_DueX_Choice interface {
	isUSCoreGoalProfile_Target_DueX_Choice()
}

type USCoreGoalProfile_Target_DueX_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

func (*USCoreGoalProfile_Target_DueX_Date) isUSCoreGoalProfile_Target_DueX_Choice() {}

// American Indian or Alaska Native|Asian|Black or African American|Native
// Hawaiian or Other Pacific Islander|White
type PatientUSCoreRaceExtension_OmbCategoryCoding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *datatypes_go_proto.String                              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Extension    []*datatypes_go_proto.Extension                         `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Version      *datatypes_go_proto.String                              `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Code         *PatientUSCoreRaceExtension_OmbCategoryCoding_BoundCode `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	Display      *datatypes_go_proto.String                              `protobuf:"bytes,6,opt,name=display,proto3" json:"display,omitempty"`
	UserSelected *datatypes_go_proto.Boolean                             `protobuf:"bytes,7,opt,name=user_selected,json=userSelected,proto3" json:"user_selected,omitempty"`
}

func (x *PatientUSCoreRaceExtension_OmbCategoryCoding) Reset() {
	*x = PatientUSCoreRaceExtension_OmbCategoryCoding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientUSCoreRaceExtension_OmbCategoryCoding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientUSCoreRaceExtension_OmbCategoryCoding) ProtoMessage() {}

func (x *PatientUSCoreRaceExtension_OmbCategoryCoding) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientUSCoreRaceExtension_OmbCategoryCoding.ProtoReflect.Descriptor instead.
func (*PatientUSCoreRaceExtension_OmbCategoryCoding) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{19, 0}
}

func (x *PatientUSCoreRaceExtension_OmbCategoryCoding) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientUSCoreRaceExtension_OmbCategoryCoding) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PatientUSCoreRaceExtension_OmbCategoryCoding) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *PatientUSCoreRaceExtension_OmbCategoryCoding) GetCode() *PatientUSCoreRaceExtension_OmbCategoryCoding_BoundCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *PatientUSCoreRaceExtension_OmbCategoryCoding) GetDisplay() *datatypes_go_proto.String {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *PatientUSCoreRaceExtension_OmbCategoryCoding) GetUserSelected() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.UserSelected
	}
	return nil
}

// Extended race codes
type PatientUSCoreRaceExtension_DetailedCoding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *datatypes_go_proto.String                           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Extension    []*datatypes_go_proto.Extension                      `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Version      *datatypes_go_proto.String                           `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Code         *PatientUSCoreRaceExtension_DetailedCoding_BoundCode `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	Display      *datatypes_go_proto.String                           `protobuf:"bytes,6,opt,name=display,proto3" json:"display,omitempty"`
	UserSelected *datatypes_go_proto.Boolean                          `protobuf:"bytes,7,opt,name=user_selected,json=userSelected,proto3" json:"user_selected,omitempty"`
}

func (x *PatientUSCoreRaceExtension_DetailedCoding) Reset() {
	*x = PatientUSCoreRaceExtension_DetailedCoding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientUSCoreRaceExtension_DetailedCoding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientUSCoreRaceExtension_DetailedCoding) ProtoMessage() {}

func (x *PatientUSCoreRaceExtension_DetailedCoding) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientUSCoreRaceExtension_DetailedCoding.ProtoReflect.Descriptor instead.
func (*PatientUSCoreRaceExtension_DetailedCoding) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{19, 1}
}

func (x *PatientUSCoreRaceExtension_DetailedCoding) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientUSCoreRaceExtension_DetailedCoding) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PatientUSCoreRaceExtension_DetailedCoding) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *PatientUSCoreRaceExtension_DetailedCoding) GetCode() *PatientUSCoreRaceExtension_DetailedCoding_BoundCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *PatientUSCoreRaceExtension_DetailedCoding) GetDisplay() *datatypes_go_proto.String {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *PatientUSCoreRaceExtension_DetailedCoding) GetUserSelected() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.UserSelected
	}
	return nil
}

type PatientUSCoreRaceExtension_OmbCategoryCoding_BoundCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     uscore_codes_go_proto.OmbRaceCategoriesValueSet_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.uscore.OmbRaceCategoriesValueSet_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *PatientUSCoreRaceExtension_OmbCategoryCoding_BoundCode) Reset() {
	*x = PatientUSCoreRaceExtension_OmbCategoryCoding_BoundCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientUSCoreRaceExtension_OmbCategoryCoding_BoundCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientUSCoreRaceExtension_OmbCategoryCoding_BoundCode) ProtoMessage() {}

func (x *PatientUSCoreRaceExtension_OmbCategoryCoding_BoundCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientUSCoreRaceExtension_OmbCategoryCoding_BoundCode.ProtoReflect.Descriptor instead.
func (*PatientUSCoreRaceExtension_OmbCategoryCoding_BoundCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{19, 0, 0}
}

func (x *PatientUSCoreRaceExtension_OmbCategoryCoding_BoundCode) GetValue() uscore_codes_go_proto.OmbRaceCategoriesValueSet_Value {
	if x != nil {
		return x.Value
	}
	return uscore_codes_go_proto.OmbRaceCategoriesValueSet_INVALID_UNINITIALIZED
}

func (x *PatientUSCoreRaceExtension_OmbCategoryCoding_BoundCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientUSCoreRaceExtension_OmbCategoryCoding_BoundCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

type PatientUSCoreRaceExtension_DetailedCoding_BoundCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     uscore_codes_go_proto.DetailedRaceValueSet_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.uscore.DetailedRaceValueSet_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *PatientUSCoreRaceExtension_DetailedCoding_BoundCode) Reset() {
	*x = PatientUSCoreRaceExtension_DetailedCoding_BoundCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientUSCoreRaceExtension_DetailedCoding_BoundCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientUSCoreRaceExtension_DetailedCoding_BoundCode) ProtoMessage() {}

func (x *PatientUSCoreRaceExtension_DetailedCoding_BoundCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientUSCoreRaceExtension_DetailedCoding_BoundCode.ProtoReflect.Descriptor instead.
func (*PatientUSCoreRaceExtension_DetailedCoding_BoundCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{19, 1, 0}
}

func (x *PatientUSCoreRaceExtension_DetailedCoding_BoundCode) GetValue() uscore_codes_go_proto.DetailedRaceValueSet_Value {
	if x != nil {
		return x.Value
	}
	return uscore_codes_go_proto.DetailedRaceValueSet_INVALID_UNINITIALIZED
}

func (x *PatientUSCoreRaceExtension_DetailedCoding_BoundCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientUSCoreRaceExtension_DetailedCoding_BoundCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Times the Service Site is available
type USCorePractitionerRoleProfile_AvailableTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                               `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	DaysOfWeek        []*USCorePractitionerRoleProfile_AvailableTime_DaysOfWeekCode `protobuf:"bytes,4,rep,name=days_of_week,json=daysOfWeek,proto3" json:"days_of_week,omitempty"`
	// Always available? e.g. 24 hour service
	AllDay *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=all_day,json=allDay,proto3" json:"all_day,omitempty"`
	// Opening time of day (ignored if allDay = true)
	AvailableStartTime *datatypes_go_proto.Time `protobuf:"bytes,6,opt,name=available_start_time,json=availableStartTime,proto3" json:"available_start_time,omitempty"`
	// Closing time of day (ignored if allDay = true)
	AvailableEndTime *datatypes_go_proto.Time `protobuf:"bytes,7,opt,name=available_end_time,json=availableEndTime,proto3" json:"available_end_time,omitempty"`
}

func (x *USCorePractitionerRoleProfile_AvailableTime) Reset() {
	*x = USCorePractitionerRoleProfile_AvailableTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePractitionerRoleProfile_AvailableTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePractitionerRoleProfile_AvailableTime) ProtoMessage() {}

func (x *USCorePractitionerRoleProfile_AvailableTime) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePractitionerRoleProfile_AvailableTime.ProtoReflect.Descriptor instead.
func (*USCorePractitionerRoleProfile_AvailableTime) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{20, 0}
}

func (x *USCorePractitionerRoleProfile_AvailableTime) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePractitionerRoleProfile_AvailableTime) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCorePractitionerRoleProfile_AvailableTime) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCorePractitionerRoleProfile_AvailableTime) GetDaysOfWeek() []*USCorePractitionerRoleProfile_AvailableTime_DaysOfWeekCode {
	if x != nil {
		return x.DaysOfWeek
	}
	return nil
}

func (x *USCorePractitionerRoleProfile_AvailableTime) GetAllDay() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.AllDay
	}
	return nil
}

func (x *USCorePractitionerRoleProfile_AvailableTime) GetAvailableStartTime() *datatypes_go_proto.Time {
	if x != nil {
		return x.AvailableStartTime
	}
	return nil
}

func (x *USCorePractitionerRoleProfile_AvailableTime) GetAvailableEndTime() *datatypes_go_proto.Time {
	if x != nil {
		return x.AvailableEndTime
	}
	return nil
}

// Not available during this time due to provided reason
type USCorePractitionerRoleProfile_NotAvailable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Reason presented to the user explaining why time not available
	Description *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Service not available from this date
	During *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=during,proto3" json:"during,omitempty"`
}

func (x *USCorePractitionerRoleProfile_NotAvailable) Reset() {
	*x = USCorePractitionerRoleProfile_NotAvailable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePractitionerRoleProfile_NotAvailable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePractitionerRoleProfile_NotAvailable) ProtoMessage() {}

func (x *USCorePractitionerRoleProfile_NotAvailable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePractitionerRoleProfile_NotAvailable.ProtoReflect.Descriptor instead.
func (*USCorePractitionerRoleProfile_NotAvailable) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{20, 1}
}

func (x *USCorePractitionerRoleProfile_NotAvailable) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePractitionerRoleProfile_NotAvailable) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCorePractitionerRoleProfile_NotAvailable) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCorePractitionerRoleProfile_NotAvailable) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *USCorePractitionerRoleProfile_NotAvailable) GetDuring() *datatypes_go_proto.Period {
	if x != nil {
		return x.During
	}
	return nil
}

// mon | tue | wed | thu | fri | sat | sun
type USCorePractitionerRoleProfile_AvailableTime_DaysOfWeekCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.DaysOfWeekCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.DaysOfWeekCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension     `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCorePractitionerRoleProfile_AvailableTime_DaysOfWeekCode) Reset() {
	*x = USCorePractitionerRoleProfile_AvailableTime_DaysOfWeekCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePractitionerRoleProfile_AvailableTime_DaysOfWeekCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePractitionerRoleProfile_AvailableTime_DaysOfWeekCode) ProtoMessage() {}

func (x *USCorePractitionerRoleProfile_AvailableTime_DaysOfWeekCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePractitionerRoleProfile_AvailableTime_DaysOfWeekCode.ProtoReflect.Descriptor instead.
func (*USCorePractitionerRoleProfile_AvailableTime_DaysOfWeekCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{20, 0, 0}
}

func (x *USCorePractitionerRoleProfile_AvailableTime_DaysOfWeekCode) GetValue() codes_go_proto.DaysOfWeekCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.DaysOfWeekCode_INVALID_UNINITIALIZED
}

func (x *USCorePractitionerRoleProfile_AvailableTime_DaysOfWeekCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePractitionerRoleProfile_AvailableTime_DaysOfWeekCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// allergy | intolerance - Underlying mechanism (if known)
type USCoreAllergyIntolerance_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AllergyIntoleranceTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.AllergyIntoleranceTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreAllergyIntolerance_TypeCode) Reset() {
	*x = USCoreAllergyIntolerance_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreAllergyIntolerance_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreAllergyIntolerance_TypeCode) ProtoMessage() {}

func (x *USCoreAllergyIntolerance_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreAllergyIntolerance_TypeCode.ProtoReflect.Descriptor instead.
func (*USCoreAllergyIntolerance_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{21, 0}
}

func (x *USCoreAllergyIntolerance_TypeCode) GetValue() codes_go_proto.AllergyIntoleranceTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AllergyIntoleranceTypeCode_INVALID_UNINITIALIZED
}

func (x *USCoreAllergyIntolerance_TypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreAllergyIntolerance_TypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// food | medication | environment | biologic
type USCoreAllergyIntolerance_CategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AllergyIntoleranceCategoryCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.AllergyIntoleranceCategoryCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                     `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreAllergyIntolerance_CategoryCode) Reset() {
	*x = USCoreAllergyIntolerance_CategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreAllergyIntolerance_CategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreAllergyIntolerance_CategoryCode) ProtoMessage() {}

func (x *USCoreAllergyIntolerance_CategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreAllergyIntolerance_CategoryCode.ProtoReflect.Descriptor instead.
func (*USCoreAllergyIntolerance_CategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{21, 1}
}

func (x *USCoreAllergyIntolerance_CategoryCode) GetValue() codes_go_proto.AllergyIntoleranceCategoryCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AllergyIntoleranceCategoryCode_INVALID_UNINITIALIZED
}

func (x *USCoreAllergyIntolerance_CategoryCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreAllergyIntolerance_CategoryCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// low | high | unable-to-assess
type USCoreAllergyIntolerance_CriticalityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AllergyIntoleranceCriticalityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.AllergyIntoleranceCriticalityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                        `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreAllergyIntolerance_CriticalityCode) Reset() {
	*x = USCoreAllergyIntolerance_CriticalityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreAllergyIntolerance_CriticalityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreAllergyIntolerance_CriticalityCode) ProtoMessage() {}

func (x *USCoreAllergyIntolerance_CriticalityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreAllergyIntolerance_CriticalityCode.ProtoReflect.Descriptor instead.
func (*USCoreAllergyIntolerance_CriticalityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{21, 2}
}

func (x *USCoreAllergyIntolerance_CriticalityCode) GetValue() codes_go_proto.AllergyIntoleranceCriticalityCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AllergyIntoleranceCriticalityCode_INVALID_UNINITIALIZED
}

func (x *USCoreAllergyIntolerance_CriticalityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreAllergyIntolerance_CriticalityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// When allergy or intolerance was identified
type USCoreAllergyIntolerance_OnsetX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCoreAllergyIntolerance_OnsetX_DateTime
	//	*USCoreAllergyIntolerance_OnsetX_Age
	//	*USCoreAllergyIntolerance_OnsetX_Period
	//	*USCoreAllergyIntolerance_OnsetX_Range
	//	*USCoreAllergyIntolerance_OnsetX_StringValue
	Choice isUSCoreAllergyIntolerance_OnsetX_Choice `protobuf_oneof:"choice"`
}

func (x *USCoreAllergyIntolerance_OnsetX) Reset() {
	*x = USCoreAllergyIntolerance_OnsetX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreAllergyIntolerance_OnsetX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreAllergyIntolerance_OnsetX) ProtoMessage() {}

func (x *USCoreAllergyIntolerance_OnsetX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreAllergyIntolerance_OnsetX.ProtoReflect.Descriptor instead.
func (*USCoreAllergyIntolerance_OnsetX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{21, 3}
}

func (m *USCoreAllergyIntolerance_OnsetX) GetChoice() isUSCoreAllergyIntolerance_OnsetX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCoreAllergyIntolerance_OnsetX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*USCoreAllergyIntolerance_OnsetX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *USCoreAllergyIntolerance_OnsetX) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetChoice().(*USCoreAllergyIntolerance_OnsetX_Age); ok {
		return x.Age
	}
	return nil
}

func (x *USCoreAllergyIntolerance_OnsetX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*USCoreAllergyIntolerance_OnsetX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *USCoreAllergyIntolerance_OnsetX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*USCoreAllergyIntolerance_OnsetX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *USCoreAllergyIntolerance_OnsetX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*USCoreAllergyIntolerance_OnsetX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isUSCoreAllergyIntolerance_OnsetX_Choice interface {
	isUSCoreAllergyIntolerance_OnsetX_Choice()
}

type USCoreAllergyIntolerance_OnsetX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type USCoreAllergyIntolerance_OnsetX_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,2,opt,name=age,proto3,oneof"`
}

type USCoreAllergyIntolerance_OnsetX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,3,opt,name=period,proto3,oneof"`
}

type USCoreAllergyIntolerance_OnsetX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,4,opt,name=range,proto3,oneof"`
}

type USCoreAllergyIntolerance_OnsetX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=string_value,json=string,proto3,oneof"`
}

func (*USCoreAllergyIntolerance_OnsetX_DateTime) isUSCoreAllergyIntolerance_OnsetX_Choice() {}

func (*USCoreAllergyIntolerance_OnsetX_Age) isUSCoreAllergyIntolerance_OnsetX_Choice() {}

func (*USCoreAllergyIntolerance_OnsetX_Period) isUSCoreAllergyIntolerance_OnsetX_Choice() {}

func (*USCoreAllergyIntolerance_OnsetX_Range) isUSCoreAllergyIntolerance_OnsetX_Choice() {}

func (*USCoreAllergyIntolerance_OnsetX_StringValue) isUSCoreAllergyIntolerance_OnsetX_Choice() {}

// Adverse Reaction Events linked to exposure to substance
type USCoreAllergyIntolerance_Reaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Specific substance or pharmaceutical product considered to be responsible
	// for event
	Substance *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=substance,proto3" json:"substance,omitempty"`
	// Clinical symptoms/signs associated with the Event
	Manifestation []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,rep,name=manifestation,proto3" json:"manifestation,omitempty"`
	// Description of the event as a whole
	Description *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// Date(/time) when manifestations showed
	Onset    *datatypes_go_proto.DateTime                    `protobuf:"bytes,7,opt,name=onset,proto3" json:"onset,omitempty"`
	Severity *USCoreAllergyIntolerance_Reaction_SeverityCode `protobuf:"bytes,8,opt,name=severity,proto3" json:"severity,omitempty"`
	// How the subject was exposed to the substance
	ExposureRoute *datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,opt,name=exposure_route,json=exposureRoute,proto3" json:"exposure_route,omitempty"`
	// Text about event not captured in other fields
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,10,rep,name=note,proto3" json:"note,omitempty"`
}

func (x *USCoreAllergyIntolerance_Reaction) Reset() {
	*x = USCoreAllergyIntolerance_Reaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreAllergyIntolerance_Reaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreAllergyIntolerance_Reaction) ProtoMessage() {}

func (x *USCoreAllergyIntolerance_Reaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreAllergyIntolerance_Reaction.ProtoReflect.Descriptor instead.
func (*USCoreAllergyIntolerance_Reaction) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{21, 4}
}

func (x *USCoreAllergyIntolerance_Reaction) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreAllergyIntolerance_Reaction) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreAllergyIntolerance_Reaction) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreAllergyIntolerance_Reaction) GetSubstance() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Substance
	}
	return nil
}

func (x *USCoreAllergyIntolerance_Reaction) GetManifestation() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Manifestation
	}
	return nil
}

func (x *USCoreAllergyIntolerance_Reaction) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *USCoreAllergyIntolerance_Reaction) GetOnset() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Onset
	}
	return nil
}

func (x *USCoreAllergyIntolerance_Reaction) GetSeverity() *USCoreAllergyIntolerance_Reaction_SeverityCode {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *USCoreAllergyIntolerance_Reaction) GetExposureRoute() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ExposureRoute
	}
	return nil
}

func (x *USCoreAllergyIntolerance_Reaction) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

// mild | moderate | severe (of event as a whole)
type USCoreAllergyIntolerance_Reaction_SeverityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AllergyIntoleranceSeverityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.AllergyIntoleranceSeverityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                     `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreAllergyIntolerance_Reaction_SeverityCode) Reset() {
	*x = USCoreAllergyIntolerance_Reaction_SeverityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreAllergyIntolerance_Reaction_SeverityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreAllergyIntolerance_Reaction_SeverityCode) ProtoMessage() {}

func (x *USCoreAllergyIntolerance_Reaction_SeverityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreAllergyIntolerance_Reaction_SeverityCode.ProtoReflect.Descriptor instead.
func (*USCoreAllergyIntolerance_Reaction_SeverityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{21, 4, 0}
}

func (x *USCoreAllergyIntolerance_Reaction_SeverityCode) GetValue() codes_go_proto.AllergyIntoleranceSeverityCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AllergyIntoleranceSeverityCode_INVALID_UNINITIALIZED
}

func (x *USCoreAllergyIntolerance_Reaction_SeverityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreAllergyIntolerance_Reaction_SeverityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// draft | active | on-hold | revoked | completed | entered-in-error | unknown
type USCoreCarePlanProfile_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.RequestStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.RequestStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension        `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreCarePlanProfile_StatusCode) Reset() {
	*x = USCoreCarePlanProfile_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreCarePlanProfile_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreCarePlanProfile_StatusCode) ProtoMessage() {}

func (x *USCoreCarePlanProfile_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreCarePlanProfile_StatusCode.ProtoReflect.Descriptor instead.
func (*USCoreCarePlanProfile_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{22, 0}
}

func (x *USCoreCarePlanProfile_StatusCode) GetValue() codes_go_proto.RequestStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.RequestStatusCode_INVALID_UNINITIALIZED
}

func (x *USCoreCarePlanProfile_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreCarePlanProfile_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// proposal | plan | order | option
type USCoreCarePlanProfile_IntentCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     valuesets_go_proto.CarePlanIntentValueSet_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.CarePlanIntentValueSet_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreCarePlanProfile_IntentCode) Reset() {
	*x = USCoreCarePlanProfile_IntentCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreCarePlanProfile_IntentCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreCarePlanProfile_IntentCode) ProtoMessage() {}

func (x *USCoreCarePlanProfile_IntentCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreCarePlanProfile_IntentCode.ProtoReflect.Descriptor instead.
func (*USCoreCarePlanProfile_IntentCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{22, 1}
}

func (x *USCoreCarePlanProfile_IntentCode) GetValue() valuesets_go_proto.CarePlanIntentValueSet_Value {
	if x != nil {
		return x.Value
	}
	return valuesets_go_proto.CarePlanIntentValueSet_INVALID_UNINITIALIZED
}

func (x *USCoreCarePlanProfile_IntentCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreCarePlanProfile_IntentCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Action to occur as part of plan
type USCoreCarePlanProfile_Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Results of the activity
	OutcomeCodeableConcept []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,rep,name=outcome_codeable_concept,json=outcomeCodeableConcept,proto3" json:"outcome_codeable_concept,omitempty"`
	// Appointment, Encounter, Procedure, etc.
	OutcomeReference []*datatypes_go_proto.Reference `protobuf:"bytes,5,rep,name=outcome_reference,json=outcomeReference,proto3" json:"outcome_reference,omitempty"`
	// Comments about the activity status/progress
	Progress []*datatypes_go_proto.Annotation `protobuf:"bytes,6,rep,name=progress,proto3" json:"progress,omitempty"`
	// Activity details defined in specific resource
	Reference *datatypes_go_proto.Reference          `protobuf:"bytes,7,opt,name=reference,proto3" json:"reference,omitempty"`
	Detail    *USCoreCarePlanProfile_Activity_Detail `protobuf:"bytes,8,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *USCoreCarePlanProfile_Activity) Reset() {
	*x = USCoreCarePlanProfile_Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreCarePlanProfile_Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreCarePlanProfile_Activity) ProtoMessage() {}

func (x *USCoreCarePlanProfile_Activity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreCarePlanProfile_Activity.ProtoReflect.Descriptor instead.
func (*USCoreCarePlanProfile_Activity) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{22, 2}
}

func (x *USCoreCarePlanProfile_Activity) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity) GetOutcomeCodeableConcept() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.OutcomeCodeableConcept
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity) GetOutcomeReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.OutcomeReference
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity) GetProgress() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity) GetReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity) GetDetail() *USCoreCarePlanProfile_Activity_Detail {
	if x != nil {
		return x.Detail
	}
	return nil
}

// In-line definition of activity
type USCoreCarePlanProfile_Activity_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Kind              *USCoreCarePlanProfile_Activity_Detail_KindCode `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
	// Instantiates FHIR protocol or definition
	InstantiatesCanonical []*datatypes_go_proto.Canonical `protobuf:"bytes,5,rep,name=instantiates_canonical,json=instantiatesCanonical,proto3" json:"instantiates_canonical,omitempty"`
	// Instantiates external protocol or definition
	InstantiatesUri []*datatypes_go_proto.Uri `protobuf:"bytes,6,rep,name=instantiates_uri,json=instantiatesUri,proto3" json:"instantiates_uri,omitempty"`
	// Detail type of activity
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
	// Why activity should be done or why activity was prohibited
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Why activity is needed
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,9,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// Goals this activity relates to
	Goal   []*datatypes_go_proto.Reference                   `protobuf:"bytes,10,rep,name=goal,proto3" json:"goal,omitempty"`
	Status *USCoreCarePlanProfile_Activity_Detail_StatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Reason for current status
	StatusReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// If true, activity is prohibiting action
	DoNotPerform *datatypes_go_proto.Boolean                       `protobuf:"bytes,13,opt,name=do_not_perform,json=doNotPerform,proto3" json:"do_not_perform,omitempty"`
	Scheduled    *USCoreCarePlanProfile_Activity_Detail_ScheduledX `protobuf:"bytes,14,opt,name=scheduled,proto3" json:"scheduled,omitempty"`
	// Where it should happen
	Location *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=location,proto3" json:"location,omitempty"`
	// Who will be responsible?
	Performer []*datatypes_go_proto.Reference                 `protobuf:"bytes,16,rep,name=performer,proto3" json:"performer,omitempty"`
	Product   *USCoreCarePlanProfile_Activity_Detail_ProductX `protobuf:"bytes,17,opt,name=product,proto3" json:"product,omitempty"`
	// How to consume/day?
	DailyAmount *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,18,opt,name=daily_amount,json=dailyAmount,proto3" json:"daily_amount,omitempty"`
	// How much to administer/supply/consume
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,19,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Extra info describing activity to perform
	Description *datatypes_go_proto.String `protobuf:"bytes,20,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *USCoreCarePlanProfile_Activity_Detail) Reset() {
	*x = USCoreCarePlanProfile_Activity_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreCarePlanProfile_Activity_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreCarePlanProfile_Activity_Detail) ProtoMessage() {}

func (x *USCoreCarePlanProfile_Activity_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreCarePlanProfile_Activity_Detail.ProtoReflect.Descriptor instead.
func (*USCoreCarePlanProfile_Activity_Detail) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{22, 2, 0}
}

func (x *USCoreCarePlanProfile_Activity_Detail) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail) GetKind() *USCoreCarePlanProfile_Activity_Detail_KindCode {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail) GetInstantiatesCanonical() []*datatypes_go_proto.Canonical {
	if x != nil {
		return x.InstantiatesCanonical
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail) GetInstantiatesUri() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.InstantiatesUri
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail) GetGoal() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Goal
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail) GetStatus() *USCoreCarePlanProfile_Activity_Detail_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail) GetStatusReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail) GetDoNotPerform() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.DoNotPerform
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail) GetScheduled() *USCoreCarePlanProfile_Activity_Detail_ScheduledX {
	if x != nil {
		return x.Scheduled
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail) GetProduct() *USCoreCarePlanProfile_Activity_Detail_ProductX {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail) GetDailyAmount() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.DailyAmount
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

// Appointment | CommunicationRequest | DeviceRequest | MedicationRequest
// | NutritionOrder | Task | ServiceRequest | VisionPrescription
type USCoreCarePlanProfile_Activity_Detail_KindCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     valuesets_go_proto.CarePlanActivityKindValueSet_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.CarePlanActivityKindValueSet_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreCarePlanProfile_Activity_Detail_KindCode) Reset() {
	*x = USCoreCarePlanProfile_Activity_Detail_KindCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreCarePlanProfile_Activity_Detail_KindCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreCarePlanProfile_Activity_Detail_KindCode) ProtoMessage() {}

func (x *USCoreCarePlanProfile_Activity_Detail_KindCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreCarePlanProfile_Activity_Detail_KindCode.ProtoReflect.Descriptor instead.
func (*USCoreCarePlanProfile_Activity_Detail_KindCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{22, 2, 0, 0}
}

func (x *USCoreCarePlanProfile_Activity_Detail_KindCode) GetValue() valuesets_go_proto.CarePlanActivityKindValueSet_Value {
	if x != nil {
		return x.Value
	}
	return valuesets_go_proto.CarePlanActivityKindValueSet_INVALID_UNINITIALIZED
}

func (x *USCoreCarePlanProfile_Activity_Detail_KindCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail_KindCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// not-started | scheduled | in-progress | on-hold | completed | cancelled
// | stopped | unknown | entered-in-error
type USCoreCarePlanProfile_Activity_Detail_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.CarePlanActivityStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.CarePlanActivityStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreCarePlanProfile_Activity_Detail_StatusCode) Reset() {
	*x = USCoreCarePlanProfile_Activity_Detail_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreCarePlanProfile_Activity_Detail_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreCarePlanProfile_Activity_Detail_StatusCode) ProtoMessage() {}

func (x *USCoreCarePlanProfile_Activity_Detail_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreCarePlanProfile_Activity_Detail_StatusCode.ProtoReflect.Descriptor instead.
func (*USCoreCarePlanProfile_Activity_Detail_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{22, 2, 0, 1}
}

func (x *USCoreCarePlanProfile_Activity_Detail_StatusCode) GetValue() codes_go_proto.CarePlanActivityStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.CarePlanActivityStatusCode_INVALID_UNINITIALIZED
}

func (x *USCoreCarePlanProfile_Activity_Detail_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// When activity is to occur
type USCoreCarePlanProfile_Activity_Detail_ScheduledX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCoreCarePlanProfile_Activity_Detail_ScheduledX_Timing
	//	*USCoreCarePlanProfile_Activity_Detail_ScheduledX_Period
	//	*USCoreCarePlanProfile_Activity_Detail_ScheduledX_StringValue
	Choice isUSCoreCarePlanProfile_Activity_Detail_ScheduledX_Choice `protobuf_oneof:"choice"`
}

func (x *USCoreCarePlanProfile_Activity_Detail_ScheduledX) Reset() {
	*x = USCoreCarePlanProfile_Activity_Detail_ScheduledX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreCarePlanProfile_Activity_Detail_ScheduledX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreCarePlanProfile_Activity_Detail_ScheduledX) ProtoMessage() {}

func (x *USCoreCarePlanProfile_Activity_Detail_ScheduledX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreCarePlanProfile_Activity_Detail_ScheduledX.ProtoReflect.Descriptor instead.
func (*USCoreCarePlanProfile_Activity_Detail_ScheduledX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{22, 2, 0, 2}
}

func (m *USCoreCarePlanProfile_Activity_Detail_ScheduledX) GetChoice() isUSCoreCarePlanProfile_Activity_Detail_ScheduledX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail_ScheduledX) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetChoice().(*USCoreCarePlanProfile_Activity_Detail_ScheduledX_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail_ScheduledX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*USCoreCarePlanProfile_Activity_Detail_ScheduledX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail_ScheduledX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*USCoreCarePlanProfile_Activity_Detail_ScheduledX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isUSCoreCarePlanProfile_Activity_Detail_ScheduledX_Choice interface {
	isUSCoreCarePlanProfile_Activity_Detail_ScheduledX_Choice()
}

type USCoreCarePlanProfile_Activity_Detail_ScheduledX_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,1,opt,name=timing,proto3,oneof"`
}

type USCoreCarePlanProfile_Activity_Detail_ScheduledX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

type USCoreCarePlanProfile_Activity_Detail_ScheduledX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

func (*USCoreCarePlanProfile_Activity_Detail_ScheduledX_Timing) isUSCoreCarePlanProfile_Activity_Detail_ScheduledX_Choice() {
}

func (*USCoreCarePlanProfile_Activity_Detail_ScheduledX_Period) isUSCoreCarePlanProfile_Activity_Detail_ScheduledX_Choice() {
}

func (*USCoreCarePlanProfile_Activity_Detail_ScheduledX_StringValue) isUSCoreCarePlanProfile_Activity_Detail_ScheduledX_Choice() {
}

// What is to be administered/supplied
type USCoreCarePlanProfile_Activity_Detail_ProductX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCoreCarePlanProfile_Activity_Detail_ProductX_CodeableConcept
	//	*USCoreCarePlanProfile_Activity_Detail_ProductX_Reference
	Choice isUSCoreCarePlanProfile_Activity_Detail_ProductX_Choice `protobuf_oneof:"choice"`
}

func (x *USCoreCarePlanProfile_Activity_Detail_ProductX) Reset() {
	*x = USCoreCarePlanProfile_Activity_Detail_ProductX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreCarePlanProfile_Activity_Detail_ProductX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreCarePlanProfile_Activity_Detail_ProductX) ProtoMessage() {}

func (x *USCoreCarePlanProfile_Activity_Detail_ProductX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreCarePlanProfile_Activity_Detail_ProductX.ProtoReflect.Descriptor instead.
func (*USCoreCarePlanProfile_Activity_Detail_ProductX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{22, 2, 0, 3}
}

func (m *USCoreCarePlanProfile_Activity_Detail_ProductX) GetChoice() isUSCoreCarePlanProfile_Activity_Detail_ProductX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail_ProductX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*USCoreCarePlanProfile_Activity_Detail_ProductX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *USCoreCarePlanProfile_Activity_Detail_ProductX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*USCoreCarePlanProfile_Activity_Detail_ProductX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isUSCoreCarePlanProfile_Activity_Detail_ProductX_Choice interface {
	isUSCoreCarePlanProfile_Activity_Detail_ProductX_Choice()
}

type USCoreCarePlanProfile_Activity_Detail_ProductX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type USCoreCarePlanProfile_Activity_Detail_ProductX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*USCoreCarePlanProfile_Activity_Detail_ProductX_CodeableConcept) isUSCoreCarePlanProfile_Activity_Detail_ProductX_Choice() {
}

func (*USCoreCarePlanProfile_Activity_Detail_ProductX_Reference) isUSCoreCarePlanProfile_Activity_Detail_ProductX_Choice() {
}

// male | female | other | unknown
type USCorePatientProfile_GenderCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AdministrativeGenderCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.AdministrativeGenderCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension               `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCorePatientProfile_GenderCode) Reset() {
	*x = USCorePatientProfile_GenderCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePatientProfile_GenderCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePatientProfile_GenderCode) ProtoMessage() {}

func (x *USCorePatientProfile_GenderCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePatientProfile_GenderCode.ProtoReflect.Descriptor instead.
func (*USCorePatientProfile_GenderCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{23, 0}
}

func (x *USCorePatientProfile_GenderCode) GetValue() codes_go_proto.AdministrativeGenderCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AdministrativeGenderCode_INVALID_UNINITIALIZED
}

func (x *USCorePatientProfile_GenderCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePatientProfile_GenderCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Indicates if the individual is deceased or not
type USCorePatientProfile_DeceasedX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCorePatientProfile_DeceasedX_Boolean
	//	*USCorePatientProfile_DeceasedX_DateTime
	Choice isUSCorePatientProfile_DeceasedX_Choice `protobuf_oneof:"choice"`
}

func (x *USCorePatientProfile_DeceasedX) Reset() {
	*x = USCorePatientProfile_DeceasedX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePatientProfile_DeceasedX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePatientProfile_DeceasedX) ProtoMessage() {}

func (x *USCorePatientProfile_DeceasedX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePatientProfile_DeceasedX.ProtoReflect.Descriptor instead.
func (*USCorePatientProfile_DeceasedX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{23, 1}
}

func (m *USCorePatientProfile_DeceasedX) GetChoice() isUSCorePatientProfile_DeceasedX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCorePatientProfile_DeceasedX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*USCorePatientProfile_DeceasedX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *USCorePatientProfile_DeceasedX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*USCorePatientProfile_DeceasedX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

type isUSCorePatientProfile_DeceasedX_Choice interface {
	isUSCorePatientProfile_DeceasedX_Choice()
}

type USCorePatientProfile_DeceasedX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type USCorePatientProfile_DeceasedX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3,oneof"`
}

func (*USCorePatientProfile_DeceasedX_Boolean) isUSCorePatientProfile_DeceasedX_Choice() {}

func (*USCorePatientProfile_DeceasedX_DateTime) isUSCorePatientProfile_DeceasedX_Choice() {}

// Whether patient is part of a multiple birth
type USCorePatientProfile_MultipleBirthX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCorePatientProfile_MultipleBirthX_Boolean
	//	*USCorePatientProfile_MultipleBirthX_Integer
	Choice isUSCorePatientProfile_MultipleBirthX_Choice `protobuf_oneof:"choice"`
}

func (x *USCorePatientProfile_MultipleBirthX) Reset() {
	*x = USCorePatientProfile_MultipleBirthX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePatientProfile_MultipleBirthX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePatientProfile_MultipleBirthX) ProtoMessage() {}

func (x *USCorePatientProfile_MultipleBirthX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePatientProfile_MultipleBirthX.ProtoReflect.Descriptor instead.
func (*USCorePatientProfile_MultipleBirthX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{23, 2}
}

func (m *USCorePatientProfile_MultipleBirthX) GetChoice() isUSCorePatientProfile_MultipleBirthX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCorePatientProfile_MultipleBirthX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*USCorePatientProfile_MultipleBirthX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *USCorePatientProfile_MultipleBirthX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*USCorePatientProfile_MultipleBirthX_Integer); ok {
		return x.Integer
	}
	return nil
}

type isUSCorePatientProfile_MultipleBirthX_Choice interface {
	isUSCorePatientProfile_MultipleBirthX_Choice()
}

type USCorePatientProfile_MultipleBirthX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type USCorePatientProfile_MultipleBirthX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,2,opt,name=integer,proto3,oneof"`
}

func (*USCorePatientProfile_MultipleBirthX_Boolean) isUSCorePatientProfile_MultipleBirthX_Choice() {}

func (*USCorePatientProfile_MultipleBirthX_Integer) isUSCorePatientProfile_MultipleBirthX_Choice() {}

// A contact party (e.g. guardian, partner, friend) for the patient
type USCorePatientProfile_Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The kind of relationship
	Relationship []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,rep,name=relationship,proto3" json:"relationship,omitempty"`
	// A name associated with the contact person
	Name *datatypes_go_proto.HumanName `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// A contact detail for the person
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,6,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// Address for the contact person
	Address *datatypes_go_proto.Address              `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	Gender  *USCorePatientProfile_Contact_GenderCode `protobuf:"bytes,8,opt,name=gender,proto3" json:"gender,omitempty"`
	// Organization that is associated with the contact
	Organization *datatypes_go_proto.Reference `protobuf:"bytes,9,opt,name=organization,proto3" json:"organization,omitempty"`
	// The period during which this contact person or organization is valid to
	// be contacted relating to this patient
	Period *datatypes_go_proto.Period `protobuf:"bytes,10,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *USCorePatientProfile_Contact) Reset() {
	*x = USCorePatientProfile_Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePatientProfile_Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePatientProfile_Contact) ProtoMessage() {}

func (x *USCorePatientProfile_Contact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePatientProfile_Contact.ProtoReflect.Descriptor instead.
func (*USCorePatientProfile_Contact) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{23, 3}
}

func (x *USCorePatientProfile_Contact) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePatientProfile_Contact) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCorePatientProfile_Contact) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCorePatientProfile_Contact) GetRelationship() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *USCorePatientProfile_Contact) GetName() *datatypes_go_proto.HumanName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *USCorePatientProfile_Contact) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *USCorePatientProfile_Contact) GetAddress() *datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *USCorePatientProfile_Contact) GetGender() *USCorePatientProfile_Contact_GenderCode {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *USCorePatientProfile_Contact) GetOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *USCorePatientProfile_Contact) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// A language which may be used to communicate with the patient about his or
// her health
type USCorePatientProfile_Communication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The language which can be used to communicate with the patient about his
	// or her health
	Language *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Language preference indicator
	Preferred *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=preferred,proto3" json:"preferred,omitempty"`
}

func (x *USCorePatientProfile_Communication) Reset() {
	*x = USCorePatientProfile_Communication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePatientProfile_Communication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePatientProfile_Communication) ProtoMessage() {}

func (x *USCorePatientProfile_Communication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePatientProfile_Communication.ProtoReflect.Descriptor instead.
func (*USCorePatientProfile_Communication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{23, 4}
}

func (x *USCorePatientProfile_Communication) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePatientProfile_Communication) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCorePatientProfile_Communication) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCorePatientProfile_Communication) GetLanguage() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *USCorePatientProfile_Communication) GetPreferred() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Preferred
	}
	return nil
}

// Link to another patient resource that concerns the same actual person
type USCorePatientProfile_Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The other patient or related person resource that the link refers to
	Other *datatypes_go_proto.Reference       `protobuf:"bytes,4,opt,name=other,proto3" json:"other,omitempty"`
	Type  *USCorePatientProfile_Link_TypeCode `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *USCorePatientProfile_Link) Reset() {
	*x = USCorePatientProfile_Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePatientProfile_Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePatientProfile_Link) ProtoMessage() {}

func (x *USCorePatientProfile_Link) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePatientProfile_Link.ProtoReflect.Descriptor instead.
func (*USCorePatientProfile_Link) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{23, 5}
}

func (x *USCorePatientProfile_Link) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePatientProfile_Link) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCorePatientProfile_Link) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCorePatientProfile_Link) GetOther() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Other
	}
	return nil
}

func (x *USCorePatientProfile_Link) GetType() *USCorePatientProfile_Link_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

// male | female | other | unknown
type USCorePatientProfile_Contact_GenderCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AdministrativeGenderCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.AdministrativeGenderCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension               `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCorePatientProfile_Contact_GenderCode) Reset() {
	*x = USCorePatientProfile_Contact_GenderCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePatientProfile_Contact_GenderCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePatientProfile_Contact_GenderCode) ProtoMessage() {}

func (x *USCorePatientProfile_Contact_GenderCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePatientProfile_Contact_GenderCode.ProtoReflect.Descriptor instead.
func (*USCorePatientProfile_Contact_GenderCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{23, 3, 0}
}

func (x *USCorePatientProfile_Contact_GenderCode) GetValue() codes_go_proto.AdministrativeGenderCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AdministrativeGenderCode_INVALID_UNINITIALIZED
}

func (x *USCorePatientProfile_Contact_GenderCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePatientProfile_Contact_GenderCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// replaced-by | replaces | refer | seealso
type USCorePatientProfile_Link_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.LinkTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.LinkTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCorePatientProfile_Link_TypeCode) Reset() {
	*x = USCorePatientProfile_Link_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePatientProfile_Link_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePatientProfile_Link_TypeCode) ProtoMessage() {}

func (x *USCorePatientProfile_Link_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePatientProfile_Link_TypeCode.ProtoReflect.Descriptor instead.
func (*USCorePatientProfile_Link_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{23, 5, 0}
}

func (x *USCorePatientProfile_Link_TypeCode) GetValue() codes_go_proto.LinkTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.LinkTypeCode_INVALID_UNINITIALIZED
}

func (x *USCorePatientProfile_Link_TypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePatientProfile_Link_TypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Hispanic or Latino|Not Hispanic or Latino
type PatientUSCoreEthnicityExtension_OmbCategoryCoding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *datatypes_go_proto.String                                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Extension    []*datatypes_go_proto.Extension                              `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Version      *datatypes_go_proto.String                                   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Code         *PatientUSCoreEthnicityExtension_OmbCategoryCoding_BoundCode `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	Display      *datatypes_go_proto.String                                   `protobuf:"bytes,6,opt,name=display,proto3" json:"display,omitempty"`
	UserSelected *datatypes_go_proto.Boolean                                  `protobuf:"bytes,7,opt,name=user_selected,json=userSelected,proto3" json:"user_selected,omitempty"`
}

func (x *PatientUSCoreEthnicityExtension_OmbCategoryCoding) Reset() {
	*x = PatientUSCoreEthnicityExtension_OmbCategoryCoding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientUSCoreEthnicityExtension_OmbCategoryCoding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientUSCoreEthnicityExtension_OmbCategoryCoding) ProtoMessage() {}

func (x *PatientUSCoreEthnicityExtension_OmbCategoryCoding) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientUSCoreEthnicityExtension_OmbCategoryCoding.ProtoReflect.Descriptor instead.
func (*PatientUSCoreEthnicityExtension_OmbCategoryCoding) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{24, 0}
}

func (x *PatientUSCoreEthnicityExtension_OmbCategoryCoding) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientUSCoreEthnicityExtension_OmbCategoryCoding) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PatientUSCoreEthnicityExtension_OmbCategoryCoding) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *PatientUSCoreEthnicityExtension_OmbCategoryCoding) GetCode() *PatientUSCoreEthnicityExtension_OmbCategoryCoding_BoundCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *PatientUSCoreEthnicityExtension_OmbCategoryCoding) GetDisplay() *datatypes_go_proto.String {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *PatientUSCoreEthnicityExtension_OmbCategoryCoding) GetUserSelected() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.UserSelected
	}
	return nil
}

// Extended ethnicity codes
type PatientUSCoreEthnicityExtension_DetailedCoding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *datatypes_go_proto.String                                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Extension    []*datatypes_go_proto.Extension                           `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Version      *datatypes_go_proto.String                                `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Code         *PatientUSCoreEthnicityExtension_DetailedCoding_BoundCode `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	Display      *datatypes_go_proto.String                                `protobuf:"bytes,6,opt,name=display,proto3" json:"display,omitempty"`
	UserSelected *datatypes_go_proto.Boolean                               `protobuf:"bytes,7,opt,name=user_selected,json=userSelected,proto3" json:"user_selected,omitempty"`
}

func (x *PatientUSCoreEthnicityExtension_DetailedCoding) Reset() {
	*x = PatientUSCoreEthnicityExtension_DetailedCoding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientUSCoreEthnicityExtension_DetailedCoding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientUSCoreEthnicityExtension_DetailedCoding) ProtoMessage() {}

func (x *PatientUSCoreEthnicityExtension_DetailedCoding) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientUSCoreEthnicityExtension_DetailedCoding.ProtoReflect.Descriptor instead.
func (*PatientUSCoreEthnicityExtension_DetailedCoding) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{24, 1}
}

func (x *PatientUSCoreEthnicityExtension_DetailedCoding) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientUSCoreEthnicityExtension_DetailedCoding) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PatientUSCoreEthnicityExtension_DetailedCoding) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *PatientUSCoreEthnicityExtension_DetailedCoding) GetCode() *PatientUSCoreEthnicityExtension_DetailedCoding_BoundCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *PatientUSCoreEthnicityExtension_DetailedCoding) GetDisplay() *datatypes_go_proto.String {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *PatientUSCoreEthnicityExtension_DetailedCoding) GetUserSelected() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.UserSelected
	}
	return nil
}

type PatientUSCoreEthnicityExtension_OmbCategoryCoding_BoundCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     uscore_codes_go_proto.OmbEthnicityCategoriesValueSet_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.uscore.OmbEthnicityCategoriesValueSet_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                            `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *PatientUSCoreEthnicityExtension_OmbCategoryCoding_BoundCode) Reset() {
	*x = PatientUSCoreEthnicityExtension_OmbCategoryCoding_BoundCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientUSCoreEthnicityExtension_OmbCategoryCoding_BoundCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientUSCoreEthnicityExtension_OmbCategoryCoding_BoundCode) ProtoMessage() {}

func (x *PatientUSCoreEthnicityExtension_OmbCategoryCoding_BoundCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientUSCoreEthnicityExtension_OmbCategoryCoding_BoundCode.ProtoReflect.Descriptor instead.
func (*PatientUSCoreEthnicityExtension_OmbCategoryCoding_BoundCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{24, 0, 0}
}

func (x *PatientUSCoreEthnicityExtension_OmbCategoryCoding_BoundCode) GetValue() uscore_codes_go_proto.OmbEthnicityCategoriesValueSet_Value {
	if x != nil {
		return x.Value
	}
	return uscore_codes_go_proto.OmbEthnicityCategoriesValueSet_INVALID_UNINITIALIZED
}

func (x *PatientUSCoreEthnicityExtension_OmbCategoryCoding_BoundCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientUSCoreEthnicityExtension_OmbCategoryCoding_BoundCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

type PatientUSCoreEthnicityExtension_DetailedCoding_BoundCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     uscore_codes_go_proto.DetailedEthnicityValueSet_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.uscore.DetailedEthnicityValueSet_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *PatientUSCoreEthnicityExtension_DetailedCoding_BoundCode) Reset() {
	*x = PatientUSCoreEthnicityExtension_DetailedCoding_BoundCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientUSCoreEthnicityExtension_DetailedCoding_BoundCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientUSCoreEthnicityExtension_DetailedCoding_BoundCode) ProtoMessage() {}

func (x *PatientUSCoreEthnicityExtension_DetailedCoding_BoundCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientUSCoreEthnicityExtension_DetailedCoding_BoundCode.ProtoReflect.Descriptor instead.
func (*PatientUSCoreEthnicityExtension_DetailedCoding_BoundCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{24, 1, 0}
}

func (x *PatientUSCoreEthnicityExtension_DetailedCoding_BoundCode) GetValue() uscore_codes_go_proto.DetailedEthnicityValueSet_Value {
	if x != nil {
		return x.Value
	}
	return uscore_codes_go_proto.DetailedEthnicityValueSet_INVALID_UNINITIALIZED
}

func (x *PatientUSCoreEthnicityExtension_DetailedCoding_BoundCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientUSCoreEthnicityExtension_DetailedCoding_BoundCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// registered | preliminary | final | amended +
type USCoreSmokingStatusProfile_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     uscore_codes_go_proto.USCoreObservationSmokingStatusStatusValueSet_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.uscore.USCoreObservationSmokingStatusStatusValueSet_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                                               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                                          `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCoreSmokingStatusProfile_StatusCode) Reset() {
	*x = USCoreSmokingStatusProfile_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreSmokingStatusProfile_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreSmokingStatusProfile_StatusCode) ProtoMessage() {}

func (x *USCoreSmokingStatusProfile_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreSmokingStatusProfile_StatusCode.ProtoReflect.Descriptor instead.
func (*USCoreSmokingStatusProfile_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{26, 0}
}

func (x *USCoreSmokingStatusProfile_StatusCode) GetValue() uscore_codes_go_proto.USCoreObservationSmokingStatusStatusValueSet_Value {
	if x != nil {
		return x.Value
	}
	return uscore_codes_go_proto.USCoreObservationSmokingStatusStatusValueSet_INVALID_UNINITIALIZED
}

func (x *USCoreSmokingStatusProfile_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Clinically relevant time/time-period for observation
type USCoreSmokingStatusProfile_EffectiveX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCoreSmokingStatusProfile_EffectiveX_DateTime
	//	*USCoreSmokingStatusProfile_EffectiveX_Period
	//	*USCoreSmokingStatusProfile_EffectiveX_Timing
	//	*USCoreSmokingStatusProfile_EffectiveX_Instant
	Choice isUSCoreSmokingStatusProfile_EffectiveX_Choice `protobuf_oneof:"choice"`
}

func (x *USCoreSmokingStatusProfile_EffectiveX) Reset() {
	*x = USCoreSmokingStatusProfile_EffectiveX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreSmokingStatusProfile_EffectiveX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreSmokingStatusProfile_EffectiveX) ProtoMessage() {}

func (x *USCoreSmokingStatusProfile_EffectiveX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreSmokingStatusProfile_EffectiveX.ProtoReflect.Descriptor instead.
func (*USCoreSmokingStatusProfile_EffectiveX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{26, 1}
}

func (m *USCoreSmokingStatusProfile_EffectiveX) GetChoice() isUSCoreSmokingStatusProfile_EffectiveX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_EffectiveX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*USCoreSmokingStatusProfile_EffectiveX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_EffectiveX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*USCoreSmokingStatusProfile_EffectiveX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_EffectiveX) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetChoice().(*USCoreSmokingStatusProfile_EffectiveX_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_EffectiveX) GetInstant() *datatypes_go_proto.Instant {
	if x, ok := x.GetChoice().(*USCoreSmokingStatusProfile_EffectiveX_Instant); ok {
		return x.Instant
	}
	return nil
}

type isUSCoreSmokingStatusProfile_EffectiveX_Choice interface {
	isUSCoreSmokingStatusProfile_EffectiveX_Choice()
}

type USCoreSmokingStatusProfile_EffectiveX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type USCoreSmokingStatusProfile_EffectiveX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

type USCoreSmokingStatusProfile_EffectiveX_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,3,opt,name=timing,proto3,oneof"`
}

type USCoreSmokingStatusProfile_EffectiveX_Instant struct {
	Instant *datatypes_go_proto.Instant `protobuf:"bytes,4,opt,name=instant,proto3,oneof"`
}

func (*USCoreSmokingStatusProfile_EffectiveX_DateTime) isUSCoreSmokingStatusProfile_EffectiveX_Choice() {
}

func (*USCoreSmokingStatusProfile_EffectiveX_Period) isUSCoreSmokingStatusProfile_EffectiveX_Choice() {
}

func (*USCoreSmokingStatusProfile_EffectiveX_Timing) isUSCoreSmokingStatusProfile_EffectiveX_Choice() {
}

func (*USCoreSmokingStatusProfile_EffectiveX_Instant) isUSCoreSmokingStatusProfile_EffectiveX_Choice() {
}

// Actual result
type USCoreSmokingStatusProfile_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCoreSmokingStatusProfile_ValueX_CodeableConcept
	Choice isUSCoreSmokingStatusProfile_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *USCoreSmokingStatusProfile_ValueX) Reset() {
	*x = USCoreSmokingStatusProfile_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreSmokingStatusProfile_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreSmokingStatusProfile_ValueX) ProtoMessage() {}

func (x *USCoreSmokingStatusProfile_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreSmokingStatusProfile_ValueX.ProtoReflect.Descriptor instead.
func (*USCoreSmokingStatusProfile_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{26, 2}
}

func (m *USCoreSmokingStatusProfile_ValueX) GetChoice() isUSCoreSmokingStatusProfile_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*USCoreSmokingStatusProfile_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isUSCoreSmokingStatusProfile_ValueX_Choice interface {
	isUSCoreSmokingStatusProfile_ValueX_Choice()
}

type USCoreSmokingStatusProfile_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*USCoreSmokingStatusProfile_ValueX_CodeableConcept) isUSCoreSmokingStatusProfile_ValueX_Choice() {
}

// Provides guide for interpretation
type USCoreSmokingStatusProfile_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Low Range, if relevant
	Low *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// High Range, if relevant
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Reference range qualifier
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Reference range population
	AppliesTo []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
	// Applicable age range, if relevant
	Age *datatypes_go_proto.Range `protobuf:"bytes,8,opt,name=age,proto3" json:"age,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *USCoreSmokingStatusProfile_ReferenceRange) Reset() {
	*x = USCoreSmokingStatusProfile_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreSmokingStatusProfile_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreSmokingStatusProfile_ReferenceRange) ProtoMessage() {}

func (x *USCoreSmokingStatusProfile_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreSmokingStatusProfile_ReferenceRange.ProtoReflect.Descriptor instead.
func (*USCoreSmokingStatusProfile_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{26, 3}
}

func (x *USCoreSmokingStatusProfile_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_ReferenceRange) GetLow() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_ReferenceRange) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_ReferenceRange) GetAppliesTo() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AppliesTo
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_ReferenceRange) GetAge() *datatypes_go_proto.Range {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Component results
type USCoreSmokingStatusProfile_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept          `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *USCoreSmokingStatusProfile_Component_ValueX `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*USCoreSmokingStatusProfile_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *USCoreSmokingStatusProfile_Component) Reset() {
	*x = USCoreSmokingStatusProfile_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreSmokingStatusProfile_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreSmokingStatusProfile_Component) ProtoMessage() {}

func (x *USCoreSmokingStatusProfile_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreSmokingStatusProfile_Component.ProtoReflect.Descriptor instead.
func (*USCoreSmokingStatusProfile_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{26, 4}
}

func (x *USCoreSmokingStatusProfile_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_Component) GetValue() *USCoreSmokingStatusProfile_Component_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_Component) GetInterpretation() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_Component) GetReferenceRange() []*USCoreSmokingStatusProfile_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Actual component result
type USCoreSmokingStatusProfile_Component_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCoreSmokingStatusProfile_Component_ValueX_Quantity
	//	*USCoreSmokingStatusProfile_Component_ValueX_CodeableConcept
	//	*USCoreSmokingStatusProfile_Component_ValueX_StringValue
	//	*USCoreSmokingStatusProfile_Component_ValueX_Boolean
	//	*USCoreSmokingStatusProfile_Component_ValueX_Integer
	//	*USCoreSmokingStatusProfile_Component_ValueX_Range
	//	*USCoreSmokingStatusProfile_Component_ValueX_Ratio
	//	*USCoreSmokingStatusProfile_Component_ValueX_SampledData
	//	*USCoreSmokingStatusProfile_Component_ValueX_Time
	//	*USCoreSmokingStatusProfile_Component_ValueX_DateTime
	//	*USCoreSmokingStatusProfile_Component_ValueX_Period
	Choice isUSCoreSmokingStatusProfile_Component_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *USCoreSmokingStatusProfile_Component_ValueX) Reset() {
	*x = USCoreSmokingStatusProfile_Component_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreSmokingStatusProfile_Component_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreSmokingStatusProfile_Component_ValueX) ProtoMessage() {}

func (x *USCoreSmokingStatusProfile_Component_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreSmokingStatusProfile_Component_ValueX.ProtoReflect.Descriptor instead.
func (*USCoreSmokingStatusProfile_Component_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{26, 4, 0}
}

func (m *USCoreSmokingStatusProfile_Component_ValueX) GetChoice() isUSCoreSmokingStatusProfile_Component_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_Component_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*USCoreSmokingStatusProfile_Component_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_Component_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*USCoreSmokingStatusProfile_Component_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_Component_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*USCoreSmokingStatusProfile_Component_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_Component_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*USCoreSmokingStatusProfile_Component_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_Component_ValueX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*USCoreSmokingStatusProfile_Component_ValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_Component_ValueX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*USCoreSmokingStatusProfile_Component_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_Component_ValueX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*USCoreSmokingStatusProfile_Component_ValueX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_Component_ValueX) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetChoice().(*USCoreSmokingStatusProfile_Component_ValueX_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_Component_ValueX) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetChoice().(*USCoreSmokingStatusProfile_Component_ValueX_Time); ok {
		return x.Time
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_Component_ValueX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*USCoreSmokingStatusProfile_Component_ValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *USCoreSmokingStatusProfile_Component_ValueX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*USCoreSmokingStatusProfile_Component_ValueX_Period); ok {
		return x.Period
	}
	return nil
}

type isUSCoreSmokingStatusProfile_Component_ValueX_Choice interface {
	isUSCoreSmokingStatusProfile_Component_ValueX_Choice()
}

type USCoreSmokingStatusProfile_Component_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type USCoreSmokingStatusProfile_Component_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type USCoreSmokingStatusProfile_Component_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type USCoreSmokingStatusProfile_Component_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=boolean,proto3,oneof"`
}

type USCoreSmokingStatusProfile_Component_ValueX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,5,opt,name=integer,proto3,oneof"`
}

type USCoreSmokingStatusProfile_Component_ValueX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,6,opt,name=range,proto3,oneof"`
}

type USCoreSmokingStatusProfile_Component_ValueX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,7,opt,name=ratio,proto3,oneof"`
}

type USCoreSmokingStatusProfile_Component_ValueX_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,8,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type USCoreSmokingStatusProfile_Component_ValueX_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,9,opt,name=time,proto3,oneof"`
}

type USCoreSmokingStatusProfile_Component_ValueX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,10,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type USCoreSmokingStatusProfile_Component_ValueX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,11,opt,name=period,proto3,oneof"`
}

func (*USCoreSmokingStatusProfile_Component_ValueX_Quantity) isUSCoreSmokingStatusProfile_Component_ValueX_Choice() {
}

func (*USCoreSmokingStatusProfile_Component_ValueX_CodeableConcept) isUSCoreSmokingStatusProfile_Component_ValueX_Choice() {
}

func (*USCoreSmokingStatusProfile_Component_ValueX_StringValue) isUSCoreSmokingStatusProfile_Component_ValueX_Choice() {
}

func (*USCoreSmokingStatusProfile_Component_ValueX_Boolean) isUSCoreSmokingStatusProfile_Component_ValueX_Choice() {
}

func (*USCoreSmokingStatusProfile_Component_ValueX_Integer) isUSCoreSmokingStatusProfile_Component_ValueX_Choice() {
}

func (*USCoreSmokingStatusProfile_Component_ValueX_Range) isUSCoreSmokingStatusProfile_Component_ValueX_Choice() {
}

func (*USCoreSmokingStatusProfile_Component_ValueX_Ratio) isUSCoreSmokingStatusProfile_Component_ValueX_Choice() {
}

func (*USCoreSmokingStatusProfile_Component_ValueX_SampledData) isUSCoreSmokingStatusProfile_Component_ValueX_Choice() {
}

func (*USCoreSmokingStatusProfile_Component_ValueX_Time) isUSCoreSmokingStatusProfile_Component_ValueX_Choice() {
}

func (*USCoreSmokingStatusProfile_Component_ValueX_DateTime) isUSCoreSmokingStatusProfile_Component_ValueX_Choice() {
}

func (*USCoreSmokingStatusProfile_Component_ValueX_Period) isUSCoreSmokingStatusProfile_Component_ValueX_Choice() {
}

// Contact for the organization for a certain purpose
type USCoreOrganizationProfile_Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The type of contact
	Purpose *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=purpose,proto3" json:"purpose,omitempty"`
	// A name associated with the contact
	Name *datatypes_go_proto.HumanName `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Contact details (telephone, email, etc.)  for a contact
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,6,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// Visiting or postal addresses for the contact
	Address *datatypes_go_proto.Address `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *USCoreOrganizationProfile_Contact) Reset() {
	*x = USCoreOrganizationProfile_Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCoreOrganizationProfile_Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCoreOrganizationProfile_Contact) ProtoMessage() {}

func (x *USCoreOrganizationProfile_Contact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCoreOrganizationProfile_Contact.ProtoReflect.Descriptor instead.
func (*USCoreOrganizationProfile_Contact) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{27, 0}
}

func (x *USCoreOrganizationProfile_Contact) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCoreOrganizationProfile_Contact) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCoreOrganizationProfile_Contact) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCoreOrganizationProfile_Contact) GetPurpose() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Purpose
	}
	return nil
}

func (x *USCoreOrganizationProfile_Contact) GetName() *datatypes_go_proto.HumanName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *USCoreOrganizationProfile_Contact) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *USCoreOrganizationProfile_Contact) GetAddress() *datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

// registered | preliminary | final | amended +
type USCorePediatricBMIforAgeObservationProfile_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ObservationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.ObservationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension            `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *USCorePediatricBMIforAgeObservationProfile_StatusCode) Reset() {
	*x = USCorePediatricBMIforAgeObservationProfile_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePediatricBMIforAgeObservationProfile_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePediatricBMIforAgeObservationProfile_StatusCode) ProtoMessage() {}

func (x *USCorePediatricBMIforAgeObservationProfile_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePediatricBMIforAgeObservationProfile_StatusCode.ProtoReflect.Descriptor instead.
func (*USCorePediatricBMIforAgeObservationProfile_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{28, 0}
}

func (x *USCorePediatricBMIforAgeObservationProfile_StatusCode) GetValue() codes_go_proto.ObservationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ObservationStatusCode_INVALID_UNINITIALIZED
}

func (x *USCorePediatricBMIforAgeObservationProfile_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Often just a dateTime for Vital Signs
type USCorePediatricBMIforAgeObservationProfile_EffectiveX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCorePediatricBMIforAgeObservationProfile_EffectiveX_DateTime
	//	*USCorePediatricBMIforAgeObservationProfile_EffectiveX_Period
	Choice isUSCorePediatricBMIforAgeObservationProfile_EffectiveX_Choice `protobuf_oneof:"choice"`
}

func (x *USCorePediatricBMIforAgeObservationProfile_EffectiveX) Reset() {
	*x = USCorePediatricBMIforAgeObservationProfile_EffectiveX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePediatricBMIforAgeObservationProfile_EffectiveX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePediatricBMIforAgeObservationProfile_EffectiveX) ProtoMessage() {}

func (x *USCorePediatricBMIforAgeObservationProfile_EffectiveX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePediatricBMIforAgeObservationProfile_EffectiveX.ProtoReflect.Descriptor instead.
func (*USCorePediatricBMIforAgeObservationProfile_EffectiveX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{28, 1}
}

func (m *USCorePediatricBMIforAgeObservationProfile_EffectiveX) GetChoice() isUSCorePediatricBMIforAgeObservationProfile_EffectiveX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_EffectiveX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*USCorePediatricBMIforAgeObservationProfile_EffectiveX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_EffectiveX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*USCorePediatricBMIforAgeObservationProfile_EffectiveX_Period); ok {
		return x.Period
	}
	return nil
}

type isUSCorePediatricBMIforAgeObservationProfile_EffectiveX_Choice interface {
	isUSCorePediatricBMIforAgeObservationProfile_EffectiveX_Choice()
}

type USCorePediatricBMIforAgeObservationProfile_EffectiveX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type USCorePediatricBMIforAgeObservationProfile_EffectiveX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*USCorePediatricBMIforAgeObservationProfile_EffectiveX_DateTime) isUSCorePediatricBMIforAgeObservationProfile_EffectiveX_Choice() {
}

func (*USCorePediatricBMIforAgeObservationProfile_EffectiveX_Period) isUSCorePediatricBMIforAgeObservationProfile_EffectiveX_Choice() {
}

// Vital Signs value are recorded using the Quantity data type. For supporting
// observations such as Cuff size could use other datatypes such as
// CodeableConcept.
type USCorePediatricBMIforAgeObservationProfile_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCorePediatricBMIforAgeObservationProfile_ValueX_Quantity
	Choice isUSCorePediatricBMIforAgeObservationProfile_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *USCorePediatricBMIforAgeObservationProfile_ValueX) Reset() {
	*x = USCorePediatricBMIforAgeObservationProfile_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePediatricBMIforAgeObservationProfile_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePediatricBMIforAgeObservationProfile_ValueX) ProtoMessage() {}

func (x *USCorePediatricBMIforAgeObservationProfile_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePediatricBMIforAgeObservationProfile_ValueX.ProtoReflect.Descriptor instead.
func (*USCorePediatricBMIforAgeObservationProfile_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{28, 2}
}

func (m *USCorePediatricBMIforAgeObservationProfile_ValueX) GetChoice() isUSCorePediatricBMIforAgeObservationProfile_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*USCorePediatricBMIforAgeObservationProfile_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isUSCorePediatricBMIforAgeObservationProfile_ValueX_Choice interface {
	isUSCorePediatricBMIforAgeObservationProfile_ValueX_Choice()
}

type USCorePediatricBMIforAgeObservationProfile_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*USCorePediatricBMIforAgeObservationProfile_ValueX_Quantity) isUSCorePediatricBMIforAgeObservationProfile_ValueX_Choice() {
}

// Provides guide for interpretation
type USCorePediatricBMIforAgeObservationProfile_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Low Range, if relevant
	Low *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// High Range, if relevant
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Reference range qualifier
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Reference range population
	AppliesTo []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
	// Applicable age range, if relevant
	Age *datatypes_go_proto.Range `protobuf:"bytes,8,opt,name=age,proto3" json:"age,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *USCorePediatricBMIforAgeObservationProfile_ReferenceRange) Reset() {
	*x = USCorePediatricBMIforAgeObservationProfile_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePediatricBMIforAgeObservationProfile_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePediatricBMIforAgeObservationProfile_ReferenceRange) ProtoMessage() {}

func (x *USCorePediatricBMIforAgeObservationProfile_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePediatricBMIforAgeObservationProfile_ReferenceRange.ProtoReflect.Descriptor instead.
func (*USCorePediatricBMIforAgeObservationProfile_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{28, 3}
}

func (x *USCorePediatricBMIforAgeObservationProfile_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_ReferenceRange) GetLow() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_ReferenceRange) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_ReferenceRange) GetAppliesTo() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AppliesTo
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_ReferenceRange) GetAge() *datatypes_go_proto.Range {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Used when reporting systolic and diastolic blood pressure.
type USCorePediatricBMIforAgeObservationProfile_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept                          `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *USCorePediatricBMIforAgeObservationProfile_Component_ValueX `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*USCorePediatricBMIforAgeObservationProfile_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *USCorePediatricBMIforAgeObservationProfile_Component) Reset() {
	*x = USCorePediatricBMIforAgeObservationProfile_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePediatricBMIforAgeObservationProfile_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePediatricBMIforAgeObservationProfile_Component) ProtoMessage() {}

func (x *USCorePediatricBMIforAgeObservationProfile_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePediatricBMIforAgeObservationProfile_Component.ProtoReflect.Descriptor instead.
func (*USCorePediatricBMIforAgeObservationProfile_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{28, 4}
}

func (x *USCorePediatricBMIforAgeObservationProfile_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_Component) GetValue() *USCorePediatricBMIforAgeObservationProfile_Component_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_Component) GetInterpretation() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_Component) GetReferenceRange() []*USCorePediatricBMIforAgeObservationProfile_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Vital Sign Value recorded with UCUM
type USCorePediatricBMIforAgeObservationProfile_Component_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Quantity
	//	*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_CodeableConcept
	//	*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_StringValue
	//	*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Boolean
	//	*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Integer
	//	*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Range
	//	*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Ratio
	//	*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_SampledData
	//	*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Time
	//	*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_DateTime
	//	*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Period
	Choice isUSCorePediatricBMIforAgeObservationProfile_Component_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *USCorePediatricBMIforAgeObservationProfile_Component_ValueX) Reset() {
	*x = USCorePediatricBMIforAgeObservationProfile_Component_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USCorePediatricBMIforAgeObservationProfile_Component_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USCorePediatricBMIforAgeObservationProfile_Component_ValueX) ProtoMessage() {}

func (x *USCorePediatricBMIforAgeObservationProfile_Component_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USCorePediatricBMIforAgeObservationProfile_Component_ValueX.ProtoReflect.Descriptor instead.
func (*USCorePediatricBMIforAgeObservationProfile_Component_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP(), []int{28, 4, 0}
}

func (m *USCorePediatricBMIforAgeObservationProfile_Component_ValueX) GetChoice() isUSCorePediatricBMIforAgeObservationProfile_Component_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_Component_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_Component_ValueX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_Component_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_Component_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_Component_ValueX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_Component_ValueX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_Component_ValueX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_Component_ValueX) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetChoice().(*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_Component_ValueX) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetChoice().(*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Time); ok {
		return x.Time
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_Component_ValueX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *USCorePediatricBMIforAgeObservationProfile_Component_ValueX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Period); ok {
		return x.Period
	}
	return nil
}

type isUSCorePediatricBMIforAgeObservationProfile_Component_ValueX_Choice interface {
	isUSCorePediatricBMIforAgeObservationProfile_Component_ValueX_Choice()
}

type USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type USCorePediatricBMIforAgeObservationProfile_Component_ValueX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type USCorePediatricBMIforAgeObservationProfile_Component_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=boolean,proto3,oneof"`
}

type USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,5,opt,name=integer,proto3,oneof"`
}

type USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,6,opt,name=range,proto3,oneof"`
}

type USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,7,opt,name=ratio,proto3,oneof"`
}

type USCorePediatricBMIforAgeObservationProfile_Component_ValueX_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,8,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,9,opt,name=time,proto3,oneof"`
}

type USCorePediatricBMIforAgeObservationProfile_Component_ValueX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,10,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,11,opt,name=period,proto3,oneof"`
}

func (*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Quantity) isUSCorePediatricBMIforAgeObservationProfile_Component_ValueX_Choice() {
}

func (*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_CodeableConcept) isUSCorePediatricBMIforAgeObservationProfile_Component_ValueX_Choice() {
}

func (*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_StringValue) isUSCorePediatricBMIforAgeObservationProfile_Component_ValueX_Choice() {
}

func (*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Boolean) isUSCorePediatricBMIforAgeObservationProfile_Component_ValueX_Choice() {
}

func (*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Integer) isUSCorePediatricBMIforAgeObservationProfile_Component_ValueX_Choice() {
}

func (*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Range) isUSCorePediatricBMIforAgeObservationProfile_Component_ValueX_Choice() {
}

func (*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Ratio) isUSCorePediatricBMIforAgeObservationProfile_Component_ValueX_Choice() {
}

func (*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_SampledData) isUSCorePediatricBMIforAgeObservationProfile_Component_ValueX_Choice() {
}

func (*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Time) isUSCorePediatricBMIforAgeObservationProfile_Component_ValueX_Choice() {
}

func (*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_DateTime) isUSCorePediatricBMIforAgeObservationProfile_Component_ValueX_Choice() {
}

func (*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Period) isUSCorePediatricBMIforAgeObservationProfile_Component_ValueX_Choice() {
}

var File_proto_google_fhir_proto_r4_uscore_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r4_uscore_proto_rawDesc = []byte{
	0x0a, 0x27, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x75, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72,
	0x34, 0x2f, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x22, 0x0a, 0x16, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x10,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x55, 0x72,
	0x69, 0x12, 0x5d, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e,
	0x12, 0x77, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x3e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x18, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x12, 0x58, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x40,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x5e, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f,
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x58, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x12, 0x84, 0x01, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x48, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65,
	0x72, 0x74, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x48, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x55,
	0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x10, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x5c, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18,
	0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64,
	0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x76, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x3e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x48, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x20,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x41, 0x0a, 0x09, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x75, 0x70, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x70, 0x12, 0x33, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x12, 0x5c, 0x0a, 0x0c, 0x66, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x0b, 0x66, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x72, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x2b, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0xa2, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x67, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x29,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x93, 0x01, 0x0a, 0x0a,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x58, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x1a, 0x82, 0x04, 0x0a, 0x09, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa2, 0x01, 0x0a, 0x05,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x6c, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x54, 0x0a, 0x0c, 0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x6f, 0x66,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x6e, 0x42, 0x65,
	0x68, 0x61, 0x6c, 0x66, 0x4f, 0x66, 0x1a, 0xdb, 0x02, 0x0a, 0x0b, 0x46, 0x6f, 0x63, 0x61, 0x6c,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3c, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54,
	0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x12, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x3a, 0x84, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72,
	0x65, 0x2d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x4a, 0x04, 0x08, 0x07, 0x10,
	0x08, 0x22, 0xa8, 0x10, 0x0a, 0x19, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x36, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43,
	0x6f, 0x72, 0x65, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0a, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x64, 0x0a, 0x0d, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4a, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb4, 0x02, 0x0a,
	0x0a, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x3a, 0x70, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x32, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x1a, 0xcd, 0x03, 0x0a, 0x0d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x4a, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x3a, 0x8a, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x44, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63,
	0x6f, 0x72, 0x65, 0x2d, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x14, 0x10, 0x15, 0x22, 0x9b, 0x18, 0x0a,
	0x30, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xa8, 0x01, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x6d, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a,
	0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64,
	0x4f, 0x6e, 0x12, 0x72, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x52, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72,
	0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x78, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f,
	0x72, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x62, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x24, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x99, 0x01, 0x0a,
	0x13, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x65, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x48, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x12, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x12, 0x49, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x11, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x57, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x63, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x3b, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x1b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72,
	0x6d, 0x1a, 0xb9, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x93, 0x01,
	0x0a, 0x0a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x58, 0x12, 0x3c, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x1a, 0xbf, 0x02, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x11, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x3a, 0x96, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x4c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6c, 0x61, 0x62, 0x4a, 0x04,
	0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x1c, 0x10, 0x1d, 0x22, 0x87, 0x2f, 0x0a, 0x30, 0x55,
	0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x64, 0x69, 0x61, 0x74, 0x72, 0x69, 0x63, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x46, 0x6f, 0x72, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xbc, 0x01, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x80, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73,
	0x65, 0x64, 0x4f, 0x6e, 0x12, 0xbc, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x82, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x18, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49,
	0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x74, 0x4f, 0x66, 0x12, 0x72, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f,
	0x72, 0x65, 0x50, 0x65, 0x64, 0x69, 0x61, 0x74, 0x72, 0x69, 0x63, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x46, 0x6f, 0x72, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x44, 0x0a, 0x05, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x05, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x78, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x64, 0x69, 0x61, 0x74, 0x72,
	0x69, 0x63, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6f, 0x72, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x58, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0xa6, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x68, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x12, 0x6c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x72, 0x69, 0x63, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6f, 0x72,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x52,
	0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69,
	0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08,
	0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4a, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x12, 0x56, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7f, 0x0a, 0x0f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f,
	0x72, 0x65, 0x50, 0x65, 0x64, 0x69, 0x61, 0x74, 0x72, 0x69, 0x63, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x46, 0x6f, 0x72, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0a,
	0x68, 0x61, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x43, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x11, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x68, 0x61, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0xba, 0x01, 0x0a, 0x0c, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x77, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75,
	0x64, 0x79, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x6f,
	0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x6f, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x51, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x72, 0x69, 0x63, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6f,
	0x72, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a, 0xae,
	0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x3a, 0x6d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a,
	0xc5, 0x01, 0x0a, 0x0a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x58, 0x12, 0x3c,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x3a, 0x38, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x2c, 0x28, 0x24, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x61, 0x73, 0x20, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x29, 0x2e, 0x74,
	0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x29, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x38, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x57, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x58, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x1a, 0xce, 0x04, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x03, 0x6c, 0x6f, 0x77, 0x12, 0x37, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x38, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x12, 0x2c, 0x0a, 0x03,
	0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x3a, 0x34, 0x9a, 0x86, 0x93,
	0xa0, 0x08, 0x2e, 0x6c, 0x6f, 0x77, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20,
	0x6f, 0x72, 0x20, 0x68, 0x69, 0x67, 0x68, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0x20, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x1a, 0x80, 0x0b, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x6e, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x64, 0x69, 0x61, 0x74, 0x72,
	0x69, 0x63, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6f, 0x72, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x58, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64,
	0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x4c, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7f, 0x0a,
	0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x64, 0x69, 0x61, 0x74, 0x72, 0x69, 0x63, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x46, 0x6f, 0x72, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0xb0,
	0x05, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32,
	0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x45, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x3a, 0x31, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x2b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x41,
	0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x3a, 0xc1, 0x03, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x69, 0x74, 0x61, 0x6c,
	0x73, 0x69, 0x67, 0x6e, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x4b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x2d, 0x66, 0x6f, 0x72, 0x2d, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x9a,
	0x86, 0x93, 0xa0, 0x08, 0x29, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x9a, 0x86,
	0x93, 0xa0, 0x08, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x77, 0x68, 0x65, 0x72, 0x65, 0x28, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x28, 0x25, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x29, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x29, 0x2e, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x5f, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x68, 0x61, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28,
	0x29, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x28, 0x64, 0x61, 0x74, 0x61,
	0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x29, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04,
	0x08, 0x22, 0x10, 0x23, 0x22, 0x95, 0x32, 0x0a, 0x16, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x45,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53,
	0x43, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x62, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x5f, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x40, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x5b, 0x0a, 0x0f, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x66, 0x5f,
	0x63, 0x61, 0x72, 0x65, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52,
	0x0d, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x12, 0x4f,
	0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x14, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12,
	0x5b, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43,
	0x6f, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x0b,
	0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x11, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x45, 0x0a,
	0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x4f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x55, 0x0a, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x1b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43,
	0x6f, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x09, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x47, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0d, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x67, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x68, 0x6f, 0x73, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d,
	0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x48, 0x0a,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x1a, 0xaa, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x1a, 0x9b, 0x05, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x66, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x45,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0xaa, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x1a, 0xc6, 0x02, 0x0a, 0x0c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x3b,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0x8a, 0x03, 0x0a, 0x0b,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x52, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75,
	0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x6e,
	0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x1a, 0x97, 0x03, 0x0a, 0x09, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x62, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x24, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x1a, 0xc8, 0x07, 0x0a, 0x0f, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x59, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x16, 0x70, 0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x20, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x47, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x47,
	0x0a, 0x0c, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x41, 0x64,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0f, 0x64, 0x69, 0x65, 0x74, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x64, 0x69, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x74, 0x65, 0x73, 0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x72, 0x74, 0x65, 0x73, 0x79, 0x12, 0x55, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x12, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x62,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x20, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x64, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xaf, 0x06,
	0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x14, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x53, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x49, 0x0a, 0x0d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x1a, 0xbb, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x74, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a,
	0x84, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x65, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xe7, 0x22, 0x0a,
	0x1e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x11, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x10, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f,
	0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x62, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x44, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x64, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x66, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x80, 0x01, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x3a, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x09, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x12, 0x5e, 0x0a, 0x0a,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x54,
	0x6f, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x12, 0x3d, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x1a, 0xbb, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x74, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x1a, 0xb1, 0x02, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x1a, 0xc0, 0x05, 0x0a, 0x09, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x54, 0x6f, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x1d, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0xbb, 0x02, 0x0a, 0x08, 0x43, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x3a, 0x75, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x37, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xe4, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x29, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x1d,
	0x75, 0x72, 0x6c, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x1a, 0xc8,
	0x05, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x33, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x49, 0x0a, 0x0d, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x0c, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4f, 0x0a, 0x10, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x0f, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x5d, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0d, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x48, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x94, 0x01, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x49, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xbc, 0x13, 0x0a, 0x0e, 0x55, 0x53, 0x43, 0x6f, 0x72,
	0x65, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61,
	0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61,
	0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x65,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52,
	0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x5b, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43,
	0x6f, 0x72, 0x65, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0b,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x5a, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x67, 0x0a, 0x15, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65,
	0x63, 0x6f, 0x6d, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65,
	0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x16, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a, 0xa9, 0x02, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x72, 0x65, 0x2d, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x81, 0x05, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x40, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x4a, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x0c, 0x6f, 0x6e, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x6c, 0x66, 0x5f, 0x6f, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x4f, 0x66, 0x12, 0x33, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x3a, 0x66, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x60, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61,
	0x6c, 0x66, 0x4f, 0x66, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x28, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x28, 0x29, 0x2e, 0x69, 0x69, 0x66, 0x28, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x28, 0x29, 0x2c, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x6f, 0x66, 0x54, 0x79, 0x70,
	0x65, 0x28, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x29, 0x2e,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x29, 0x29, 0x3a, 0x82, 0x01, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75,
	0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x63, 0x61, 0x72, 0x65, 0x74, 0x65, 0x61, 0x6d, 0x4a,
	0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0x92, 0x16, 0x0a, 0x10, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4c, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x14, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x4d, 0x0a,
	0x08, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x64, 0x58, 0x52, 0x08, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x08,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x12, 0x30,
	0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x4a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x05,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x06, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x3c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a,
	0x92, 0x01, 0x0a, 0x09, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x58, 0x12, 0x35, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x1a, 0xf9, 0x04, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x9e, 0x01, 0x0a,
	0x03, 0x77, 0x68, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x6c, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x77, 0x68, 0x6f, 0x12, 0xa0, 0x01,
	0x0a, 0x0c, 0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x6f, 0x66, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x5e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x46, 0x28, 0x24,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x68, 0x6f, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x28, 0x29, 0x2e, 0x69, 0x73, 0x20, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x20, 0x6f, 0x72, 0x20, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x52, 0x0a, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x4f, 0x66,
	0x1a, 0xdc, 0x05, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f,
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x77, 0x68,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x14, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x04,
	0x77, 0x68, 0x61, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f,
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0xb3, 0x02, 0x0a, 0x08, 0x52, 0x6f,
	0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x76,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x6f, 0x6c, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x71, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x2d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a,
	0x86, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x32, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04,
	0x08, 0x14, 0x10, 0x15, 0x4a, 0x04, 0x08, 0x15, 0x10, 0x16, 0x22, 0xd3, 0x2b, 0x0a, 0x19, 0x55,
	0x53, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x5b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0c, 0x76, 0x61, 0x63, 0x63, 0x69, 0x6e,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0b, 0x76, 0x61, 0x63, 0x63,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4f, 0x63, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x4a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0c, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0a, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x42,
	0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x05,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x64, 0x6f, 0x73, 0x65,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x64, 0x6f, 0x73, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x58, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18,
	0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53,
	0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x36, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x52, 0x0b, 0x69, 0x73, 0x53, 0x75, 0x62, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a,
	0x10, 0x73, 0x75, 0x62, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0f, 0x73,
	0x75, 0x62, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x58,
	0x0a, 0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65,
	0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x12, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x4b, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x66,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x08,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x1a, 0xb9, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6e, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x9a, 0x01, 0x0a,
	0x0b, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x58, 0x12, 0x3c, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xff, 0x02, 0x0a, 0x09, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x40, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x88, 0x04, 0x0a, 0x09,
	0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a,
	0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x10, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x3a, 0x31, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x2b, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0x20, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x1a, 0xfc, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x49, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x11, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x38, 0x0a, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x1a, 0xd5, 0x07, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x0b, 0x64, 0x6f, 0x73, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x2e, 0x44,
	0x6f, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x0a, 0x64, 0x6f, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x70,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x64, 0x6f, 0x73, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43,
	0x6f, 0x72, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x6f, 0x73,
	0x65, 0x73, 0x58, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x6f, 0x73, 0x65, 0x73,
	0x1a, 0xa3, 0x01, 0x0a, 0x0b, 0x44, 0x6f, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x58,
	0x12, 0x45, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xa4, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x44, 0x6f, 0x73, 0x65, 0x73, 0x58, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x3b,
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83,
	0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x8a, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x34, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x69, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08,
	0x22, 0x9c, 0x05, 0x0a, 0x1e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x53, 0x43, 0x6f,
	0x72, 0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x53, 0x65, 0x78, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5e,
	0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x53, 0x65, 0x78,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0xa8,
	0x02, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x69, 0x72, 0x74, 0x68, 0x53, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6b, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x73, 0x65, 0x78, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x83, 0x01, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75,
	0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x62, 0x69, 0x72, 0x74, 0x68, 0x73, 0x65, 0x78, 0x22,
	0xf2, 0x17, 0x0a, 0x29, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x6f, 0x74, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x27, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0xa8, 0x01, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x6d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61,
	0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x6b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x71, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x6f,
	0x74, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x62,
	0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x24, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x12, 0x99, 0x01, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x48, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x12, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x12, 0x4a,
	0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e,
	0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x49, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x11, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x57, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79,
	0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x5c,
	0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x3b, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d,
	0x1a, 0xb9, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x93, 0x01, 0x0a,
	0x0a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x58, 0x12, 0x3c, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x1a, 0xbf, 0x02, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x11, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x3a, 0x97, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x4d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6e, 0x6f, 0x74, 0x65, 0x4a, 0x04,
	0x08, 0x07, 0x10, 0x08, 0x22, 0xe6, 0x32, 0x0a, 0x28, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x4c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xbc, 0x01, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x80, 0x01, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62,
	0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0xbc, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f,
	0x6f, 0x66, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x82, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x18, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73,
	0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x74, 0x4f, 0x66, 0x12, 0x6a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53,
	0x43, 0x6f, 0x72, 0x65, 0x4c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x48, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x05,
	0x66, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x66, 0x6f, 0x63,
	0x75, 0x73, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x68, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43,
	0x6f, 0x72, 0x65, 0x4c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x58,
	0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x64, 0x12, 0xa6, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x68, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x4c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x58, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61,
	0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12,
	0x41, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69,
	0x74, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x4a, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x56, 0x0a, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x77, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x4c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x82, 0x01,
	0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x43, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x68, 0x61, 0x73, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0xba, 0x01, 0x0a, 0x0c, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x77, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x75, 0x64, 0x79, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x11, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x67, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72,
	0x65, 0x4c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a, 0xae, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6d, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xc5, 0x01, 0x0a, 0x0a, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x58, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x38, 0x9a,
	0x86, 0x93, 0xa0, 0x08, 0x2c, 0x28, 0x24, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x73, 0x20, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x29, 0x2e, 0x74, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x28, 0x29, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20,
	0x38, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x1a, 0x88, 0x06, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x3b, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x32, 0x0a,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x45, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x3a, 0x5e, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x52, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x3d,
	0x20, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x6f, 0x66,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x27, 0xa0, 0x83, 0x83, 0xe8,
	0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xce, 0x04, 0x0a,
	0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x03, 0x6c, 0x6f, 0x77,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x03, 0x6c, 0x6f, 0x77,
	0x12, 0x37, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x74,
	0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x3a, 0x34, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x2e, 0x6c,
	0x6f, 0x77, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x68,
	0x69, 0x67, 0x68, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x74, 0x65, 0x78, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x1a, 0xbd, 0x0a,
	0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x66, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x53, 0x43, 0x6f, 0x72, 0x65, 0x4c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x52, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x77, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x4c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0xb0, 0x05, 0x0a, 0x06, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x38, 0x0a, 0x07,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x45,
	0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83,
	0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0xf1, 0x02,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x47, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6c, 0x61, 0x62, 0x9a, 0x86, 0x93, 0xa0,
	0x08, 0x29, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f,
	0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x77, 0x68, 0x65, 0x72, 0x65, 0x28, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x28, 0x25, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x29, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x29, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29,
	0x9a, 0x86, 0x93, 0xa0, 0x08, 0x4b, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x29, 0x20, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x28, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x20, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x29, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x22, 0x10, 0x23, 0x22, 0x90, 0x1c,
	0x0a, 0x0e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x53, 0x43, 0x6f, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x4a, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53,
	0x43, 0x6f, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63,
	0x6f, 0x6d, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x67, 0x0a, 0x15, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x5f, 0x6f, 0x66, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x74, 0x4f, 0x66, 0x12, 0x64, 0x0a, 0x12, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x5f, 0x6f, 0x66, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x4f, 0x66, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x4f, 0x66,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x17, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x4a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0xa8, 0x02, 0x0a, 0x0a,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6a, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xa2, 0x02, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x3a, 0x68, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2a, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x84, 0x03, 0x0a, 0x08,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x1a, 0x90, 0x06, 0x0a, 0x10, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x4f, 0x66, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x67, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65,
	0x6b, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x4f, 0x66, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x44, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x64, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x6c,
	0x6c, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x06, 0x61, 0x6c, 0x6c, 0x44, 0x61,
	0x79, 0x12, 0x3c, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3c, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xa5, 0x02,
	0x0a, 0x0e, 0x44, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x67, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x79, 0x73, 0x2d, 0x6f, 0x66, 0x2d, 0x77,
	0x65, 0x65, 0x6b, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x82, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72,
	0x65, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08,
	0x22, 0xd5, 0x1d, 0x0a, 0x0f, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0f, 0x63, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x13, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x12, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x48, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x41,
	0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74,
	0x65, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x43, 0x0a, 0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x6e, 0x73, 0x65, 0x74, 0x58, 0x52, 0x05, 0x6f,
	0x6e, 0x73, 0x65, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x61, 0x62, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x62, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x58, 0x52, 0x09, 0x61, 0x62, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x48, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x84, 0x01, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x65, 0x72, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x48, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x08, 0x61,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x73, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x65,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08,
	0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a, 0xae, 0x02,
	0x0a, 0x06, 0x4f, 0x6e, 0x73, 0x65, 0x74, 0x58, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x03, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xb2,
	0x02, 0x0a, 0x0a, 0x41, 0x62, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x58, 0x12, 0x3c, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x1a, 0xeb, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x7f, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x3f, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x12, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x3a, 0x2d, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x27, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x1a, 0xee, 0x02, 0x0a, 0x08, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x3a, 0x26, 0x9a, 0x86, 0x93, 0xa0,
	0x08, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20,
	0x6f, 0x72, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x28, 0x29, 0x3a, 0xed, 0x03, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0xb9, 0x01,
	0x61, 0x62, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x28, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3d, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x27, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x28, 0x63, 0x6f, 0x64, 0x65, 0x3d, 0x27, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x27, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x3d,
	0x27, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x27, 0x20, 0x6f, 0x72, 0x20, 0x63,
	0x6f, 0x64, 0x65, 0x3d, 0x27, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x27, 0x29, 0x29,
	0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0xa2, 0x01,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x77, 0x68, 0x65, 0x72, 0x65, 0x28,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3d, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x76, 0x65, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x27, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x3d, 0x27, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x27, 0x29,
	0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x28, 0x29, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xbc, 0x32, 0x0a, 0x1a, 0x55, 0x53, 0x43,
	0x6f, 0x72, 0x65, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x4f, 0x78, 0x69, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xbc, 0x01,
	0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x80, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0xbc, 0x01, 0x0a,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x82,
	0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x18, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x13, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x75, 0x64, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x12, 0x5c, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x4f,
	0x78, 0x69, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x64, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x48, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65,
	0x50, 0x75, 0x6c, 0x73, 0x65, 0x4f, 0x78, 0x69, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x05, 0x66, 0x6f, 0x63, 0x75,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x4d,
	0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x62, 0x0a,
	0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50,
	0x75, 0x6c, 0x73, 0x65, 0x4f, 0x78, 0x69, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x58, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0xa6, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x68, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x75,
	0x6c, 0x73, 0x65, 0x4f, 0x78, 0x69, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x52, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f,
	0x73, 0x69, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4a, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x12, 0x56, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x0f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53,
	0x43, 0x6f, 0x72, 0x65, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x4f, 0x78, 0x69, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x43, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d,
	0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x68, 0x61, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0xba, 0x01, 0x0a,
	0x0c, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x20, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x77, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x15, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75,
	0x6c, 0x61, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65,
	0x72, 0x69, 0x76, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x59, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x75, 0x6c, 0x73, 0x65,
	0x4f, 0x78, 0x69, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x1a, 0xae, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x88, 0x04, 0x0a, 0x16, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x2f, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x74, 0x0a, 0x0f, 0x6f, 0x78, 0x79, 0x67, 0x65, 0x6e, 0x5f, 0x73, 0x61, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x22, 0xfa, 0xe7, 0x94, 0xa8, 0x06, 0x10, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x6f, 0x72, 0x67, 0xa2, 0xbc, 0x97, 0xa9,
	0x06, 0x06, 0x32, 0x37, 0x30, 0x38, 0x2d, 0x36, 0x52, 0x0d, 0x4f, 0x78, 0x79, 0x67, 0x65, 0x6e,
	0x53, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x68, 0x0a, 0x08, 0x70, 0x75, 0x6c, 0x73, 0x65,
	0x5f, 0x6f, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x23, 0xfa, 0xe7, 0x94, 0xa8, 0x06, 0x10, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x6c, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x6f, 0x72, 0x67, 0xa2, 0xbc, 0x97, 0xa9, 0x06,
	0x07, 0x35, 0x39, 0x34, 0x30, 0x38, 0x2d, 0x35, 0x52, 0x07, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x4f,
	0x78, 0x3a, 0x3d, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x1a, 0xc5, 0x01, 0x0a, 0x0a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x58, 0x12,
	0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x3a, 0x38, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x2c, 0x28, 0x24, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x61, 0x73, 0x20, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x29, 0x2e,
	0x74, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x29, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x38, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x57, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x58, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x1a, 0xce, 0x04, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x37, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x38,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x12, 0x2c, 0x0a,
	0x03, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x3a, 0x34, 0x9a, 0x86,
	0x93, 0xa0, 0x08, 0x2e, 0x6c, 0x6f, 0x77, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0x20, 0x6f, 0x72, 0x20, 0x68, 0x69, 0x67, 0x68, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x28, 0x29, 0x1a, 0xd4, 0x0a, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x58, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x4f,
	0x78, 0x69, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61,
	0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62,
	0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65,
	0x50, 0x75, 0x6c, 0x73, 0x65, 0x4f, 0x78, 0x69, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x1a, 0xb0, 0x05, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x3b,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x10, 0x63,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3b,
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x07, 0x62,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x45, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x31, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x2b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x3a, 0xf3, 0x03, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6f, 0x78, 0x79, 0x67, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x32, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x69, 0x67, 0x6e,
	0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x46,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x2d, 0x6f, 0x78,
	0x69, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x29, 0x64, 0x61, 0x74, 0x61,
	0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x28, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63,
	0x74, 0x28, 0x25, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x29, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x29, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x5f,
	0x28, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x68, 0x61, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65,
	0x73, 0x20, 0x28, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x29, 0x4a,
	0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x22, 0x10, 0x23, 0x4a, 0x04, 0x08, 0x23, 0x10,
	0x24, 0x4a, 0x04, 0x08, 0x24, 0x10, 0x25, 0x22, 0xcb, 0x2d, 0x0a, 0x1e, 0x55, 0x53, 0x43, 0x6f,
	0x72, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x56, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x16, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x0b, 0x75, 0x64, 0x69, 0x5f,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55, 0x64, 0x69, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x75, 0x64, 0x69, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x4c, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x64, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3f,
	0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12,
	0x48, 0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x40, 0x0a,
	0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x61, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43,
	0x6f, 0x72, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x6c, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x57, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65,
	0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3b,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x4a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x21, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x61, 0x66, 0x65,
	0x74, 0x79, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06,
	0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0c, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x1a, 0xa6, 0x07, 0x0a,
	0x0a, 0x55, 0x64, 0x69, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0c, 0x6a, 0x75, 0x72,
	0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x5f, 0x61, 0x69, 0x64, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x52, 0x0b, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x41, 0x49, 0x44, 0x43, 0x12, 0x3c, 0x0a,
	0x0b, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x68, 0x72, 0x66, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x48, 0x52, 0x46, 0x12, 0x6d, 0x0a, 0x0a, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6d,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55, 0x64, 0x69, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xa8, 0x02, 0x0a, 0x0d, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x44, 0x49, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x69, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x75, 0x64, 0x69, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xa8, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x48, 0x49, 0x52, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x68, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x1a, 0x8f, 0x05, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x65, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x49,
	0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xa6, 0x02, 0x0a, 0x08, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x1a, 0xd0, 0x02, 0x0a, 0x0e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xf7, 0x02, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x91, 0x03, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x43,
	0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x3a, 0x89, 0x03, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x69, 0x6d,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x9a, 0x86, 0x93, 0xa0, 0x08, 0x59, 0x75, 0x64, 0x69, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x75, 0x64, 0x69,
	0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x41,
	0x49, 0x44, 0x43, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x75, 0x64, 0x69, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x48, 0x52, 0x46, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x29, 0x9a,
	0x86, 0x93, 0xa0, 0x08, 0x99, 0x01, 0x75, 0x64, 0x69, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x6d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0x20, 0x6f, 0x72, 0x20, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20,
	0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x29, 0x4a,
	0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xb7, 0x34, 0x0a, 0x1e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x60,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x49, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x06, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x5e, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x42, 0x0a, 0x0e, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x5b, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53,
	0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x58, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x69, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43,
	0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09,
	0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x16, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x46, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0xaa, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x6c, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0xb2, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0e, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x64, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x28, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x45, 0x0a,
	0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x6b, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x20,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x55, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x73, 0x5f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x1d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x43,
	0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x1e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x55, 0x72, 0x69, 0x12, 0x94, 0x01,
	0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x59, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x62, 0x61, 0x73,
	0x65, 0x64, 0x4f, 0x6e, 0x12, 0x4a, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x59, 0x0a, 0x16, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68,
	0x65, 0x72, 0x61, 0x70, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x13, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4f, 0x66,
	0x54, 0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x09, 0x69,
	0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x21,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x12, 0x4a, 0x0a, 0x12, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x52, 0x11, 0x64, 0x6f, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a,
	0x10, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44,
	0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f,
	0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x66, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53,
	0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5a, 0x0a, 0x0e, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x0d, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x0d, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x29, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x10, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x1a, 0xba, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x73, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a,
	0xba, 0x02, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xac, 0x02, 0x0a,
	0x0c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6b,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xf4, 0x01, 0x0a, 0x09,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x58, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x12, 0x9a, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x5a, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x1a, 0xc4, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x50, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x10, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xe2, 0x08, 0x0a, 0x0f, 0x44, 0x69,
	0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x6c,
	0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x4a, 0x0a,
	0x11, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x0f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52,
	0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x5b, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x49, 0x6e, 0x74, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x57, 0x0a,
	0x18, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x1a, 0xc3, 0x02, 0x0a, 0x0b, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa1,
	0x04, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x07, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0xa9, 0x01, 0x0a, 0x08, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x58, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x51, 0x0a,
	0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x3a, 0x94, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x49,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22,
	0x90, 0x13, 0x0a, 0x17, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f,
	0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x38,
	0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x0a,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x53, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x1a, 0xac, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x1a, 0xe6, 0x04, 0x0a, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a, 0xcd, 0x01, 0x0a, 0x05,
	0x49, 0x74, 0x65, 0x6d, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x5f, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1f, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xc5, 0x02, 0x0a, 0x05,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3a, 0x0a, 0x0a, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x09, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x3a, 0x86, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72,
	0x65, 0x2d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x07,
	0x10, 0x08, 0x22, 0x81, 0x1b, 0x0a, 0x11, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x47, 0x6f, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x6f,
	0x0a, 0x10, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0f,
	0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x53, 0x0a, 0x12, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x11, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x53, 0x43, 0x6f, 0x72, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x58, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x47,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x47, 0x6f, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x8b, 0x01, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x48, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x42, 0x79, 0x12, 0xb3, 0x01, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x75, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x13, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e,
	0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x47,
	0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x18,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x19, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x11, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0xb2, 0x02, 0x0a, 0x13, 0x4c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x66, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x67,
	0x6f, 0x61, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x9e, 0x01, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x72, 0x74, 0x58, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x06, 0xa0, 0x83, 0x83,
	0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xf4, 0x07,
	0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x07, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72,
	0x65, 0x47, 0x6f, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x58, 0x52, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x46, 0x0a, 0x03, 0x64, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x47,
	0x6f, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x2e, 0x44, 0x75, 0x65, 0x58, 0x52, 0x03, 0x64, 0x75, 0x65, 0x1a, 0xc4, 0x03, 0x0a, 0x07,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x58, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x1a, 0x49, 0x0a, 0x04, 0x44, 0x75, 0x65, 0x58, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83,
	0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x45, 0x9a,
	0x86, 0x93, 0xa0, 0x08, 0x3f, 0x28, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x2e, 0x6e,
	0x6f, 0x74, 0x28, 0x29, 0x3a, 0x7a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x47, 0x6f, 0x61, 0x6c, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x67, 0x6f, 0x61, 0x6c,
	0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0x88, 0x10, 0x0a, 0x1a, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x66, 0x0a, 0x0c, 0x6f, 0x6d, 0x62, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x63, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x6d, 0x62, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6f, 0x6d, 0x62,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x5c, 0x0a, 0x08, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65,
	0x52, 0x61, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a,
	0x85, 0x06, 0x0a, 0x11, 0x4f, 0x6d, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x35, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x63, 0x65, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x6d, 0x62, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x12, 0x41, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x1a, 0xba, 0x02, 0x0a, 0x09, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x6d, 0x62, 0x52, 0x61, 0x63,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x74, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6f, 0x6d,
	0x62, 0x2d, 0x72, 0x61, 0x63, 0x65, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64,
	0x65, 0x3a, 0x34, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0xf6, 0x05, 0x0a, 0x0e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65,
	0x52, 0x61, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x07,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x12, 0x41, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x1a, 0xb1, 0x02, 0x0a, 0x09, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x52, 0x61, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x70, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x2d, 0x72, 0x61, 0x63, 0x65, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x34, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x3a, 0x7f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x72, 0x61, 0x63,
	0x65, 0x22, 0xc8, 0x16, 0x0a, 0x1d, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x5c, 0x0a, 0x0c, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x18, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0x52, 0x0c, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x12, 0x5c, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x18, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x4a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x12, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x11, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12,
	0x69, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0d, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x66, 0x0a, 0x0d, 0x6e, 0x6f,
	0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x54, 0x0a, 0x17, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x16, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x1a, 0xb3, 0x06, 0x0a, 0x0d, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x73, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x44, 0x61, 0x79, 0x73, 0x4f,
	0x66, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x73, 0x4f,
	0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x52, 0x06, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x79, 0x12, 0x4b, 0x0a, 0x14,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x12, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x1a, 0xa5, 0x02, 0x0a, 0x0e, 0x44, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65,
	0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x79, 0x73, 0x4f,
	0x66, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x3a, 0x67, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x29, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x79, 0x73,
	0x2d, 0x6f, 0x66, 0x2d, 0x77, 0x65, 0x65, 0x6b, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xc4, 0x02, 0x0a, 0x0c, 0x4e,
	0x6f, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06,
	0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x64, 0x75, 0x72, 0x69, 0x6e,
	0x67, 0x3a, 0x92, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x38,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x48, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73,
	0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x72, 0x6f, 0x6c, 0x65, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xae, 0x24, 0x0a,
	0x18, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e,
	0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61,
	0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x4d, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e,
	0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55,
	0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f,
	0x72, 0x65, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53,
	0x43, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x61, 0x0a,
	0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72,
	0x65, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x4c, 0x0a, 0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x41, 0x6c,
	0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x4f, 0x6e, 0x73, 0x65, 0x74, 0x58, 0x52, 0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x42,
	0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x48, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x61, 0x73,
	0x73, 0x65, 0x72, 0x74, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x48, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x12, 0x46, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x63,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x54, 0x0a,
	0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x41, 0x6c,
	0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xb7, 0x02, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x2d, 0x69, 0x6e, 0x74, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xc3, 0x02,
	0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x77, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x2d, 0x69, 0x6e, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x1a, 0xcc, 0x02, 0x0a, 0x0f, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x6c,
	0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x7a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x2d, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x2d, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x1a, 0xae, 0x02, 0x0a, 0x06, 0x4f, 0x6e, 0x73, 0x65, 0x74, 0x58, 0x12, 0x3c, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x1a, 0xf6, 0x07, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x52,
	0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x61, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e,
	0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0e, 0x65, 0x78, 0x70,
	0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a, 0xbe, 0x02, 0x0a, 0x0c,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x72, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2d, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x88, 0x04, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4a, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75,
	0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f,
	0x72, 0x65, 0x2d, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0xb3, 0x01, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x77, 0x68, 0x65, 0x72, 0x65, 0x28, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x20, 0x3d, 0x20, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x67, 0x79, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x2d, 0x69, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x27, 0x29, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x9a,
	0x86, 0x93, 0xa0, 0x08, 0xb1, 0x01, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x77, 0x68, 0x65, 0x72, 0x65, 0x28, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x3d, 0x20, 0x27,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x69, 0x6e, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20,
	0x3d, 0x20, 0x27, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x2d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x27, 0x29, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xaf, 0x34,
	0x0a, 0x15, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x10,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x55, 0x72,
	0x69, 0x12, 0x49, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x4a, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x5f, 0x6f, 0x66, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x4f,
	0x66, 0x12, 0x57, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65,
	0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x06, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x31, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4d,
	0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0xac, 0x01, 0x0a, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x74, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0xb6, 0x01, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61,
	0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61,
	0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x4d, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x1c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x57, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c,
	0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0a, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x04, 0x47, 0x6f,
	0x61, 0x6c, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x51, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x1a, 0xa6, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x69,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xad, 0x02, 0x0a, 0x0a, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61,
	0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6b, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x72, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x82, 0x1c, 0x0a, 0x08, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x5e, 0x0a, 0x18, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x16, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x12, 0x5b, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x10, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0xf0, 0x01, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0xb1,
	0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x04,
	0x54, 0x61, 0x73, 0x6b, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x56, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x54, 0x0a,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x72, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x1a, 0xcd, 0x15, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x53, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x55, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x73, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x10, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x55, 0x72, 0x69, 0x12,
	0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x98, 0x01, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x4d, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x10, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x67,
	0x6f, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0a, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x04, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x67, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x42, 0x0a, 0x0e, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x65, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x53, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x58, 0x52,
	0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xca, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x8b, 0x01, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43,
	0x6f, 0x72, 0x65, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x58, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x0b, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb8, 0x02, 0x0a,
	0x08, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4b,
	0x69, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x72, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x61,
	0x72, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2d, 0x6b, 0x69, 0x6e, 0x64, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xba, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x74,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x72, 0x65, 0x2d, 0x70, 0x6c,
	0x61, 0x6e, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x1a, 0xc9, 0x01, 0x0a, 0x0a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x58, 0x12, 0x35, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x1a, 0xd0, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x58, 0x12, 0x51, 0x0a,
	0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x12, 0x5f, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x1f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x3a, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x23, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x3a, 0x82,
	0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x30, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x63, 0x61, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x6e, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x21, 0x10, 0x22, 0x22,
	0xc2, 0x27, 0x0a, 0x14, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x61, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x2d, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x21, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e,
	0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x56, 0x0a, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x51,
	0x0a, 0x08, 0x64, 0x65, 0x63, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x65,
	0x63, 0x65, 0x61, 0x73, 0x65, 0x64, 0x58, 0x52, 0x08, 0x64, 0x65, 0x63, 0x65, 0x61, 0x73, 0x65,
	0x64, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x6d, 0x61, 0x72,
	0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x61, 0x0a, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x58, 0x52, 0x0d, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x12, 0x4d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12,
	0x5f, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x8d, 0x01, 0x0a, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x3a, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x13, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0x12, 0x67, 0x0a, 0x15, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12,
	0x89, 0x01, 0x0a, 0x04, 0x72, 0x61, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x53,
	0x43, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x42, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65,
	0x2d, 0x72, 0x61, 0x63, 0x65, 0x52, 0x04, 0x72, 0x61, 0x63, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x09,
	0x65, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x55,
	0x53, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x47, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x41, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75,
	0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x65, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79,
	0x52, 0x09, 0x65, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0xa3, 0x01, 0x0a, 0x08,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x73, 0x65, 0x78, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x53,
	0x43, 0x6f, 0x72, 0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x53, 0x65, 0x78, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x46, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x73, 0x65, 0x78, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x73, 0x65,
	0x78, 0x1a, 0xb4, 0x02, 0x0a, 0x0a, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x70, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2d,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x95, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x63,
	0x65, 0x61, 0x73, 0x65, 0x64, 0x58, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x1a, 0x96, 0x01, 0x0a, 0x0e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x42, 0x69, 0x72,
	0x74, 0x68, 0x58, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x38, 0x0a,
	0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xa8, 0x08, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x48, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x75,
	0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x56, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72,
	0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0c, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0xb4, 0x02, 0x0a, 0x0a, 0x47, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x70, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x54,
	0x9a, 0x86, 0x93, 0xa0, 0x08, 0x4e, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x1a, 0xcf, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x48, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x09, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x1a, 0x92, 0x05, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x05, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x26, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53,
	0x43, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x9a,
	0x02, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x64, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x26, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x80, 0x01, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3f, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75,
	0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4a, 0x04,
	0x08, 0x07, 0x10, 0x08, 0x22, 0xbb, 0x10, 0x0a, 0x1f, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x0c, 0x6f, 0x6d, 0x62, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x45,
	0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x4f, 0x6d, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6f, 0x6d, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x61, 0x0a, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x94, 0x06, 0x0a,
	0x11, 0x4f, 0x6d, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x52, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x6d, 0x62, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x07,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x12, 0x41, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x1a, 0xc4, 0x02, 0x0a, 0x09, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x6d, 0x62, 0x45,
	0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x79, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3b,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x6f, 0x6d, 0x62, 0x2d, 0x65, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69,
	0x74, 0x79, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x34, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x1a, 0x85, 0x06, 0x0a, 0x0e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x74, 0x68, 0x6e,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a,
	0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x12, 0x41, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x1a, 0xbb, 0x02, 0x0a, 0x09, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x75,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x37, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2d, 0x65, 0x74, 0x68, 0x6e, 0x69, 0x63,
	0x69, 0x74, 0x79, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x34, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2e, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x84, 0x01, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x65, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69,
	0x74, 0x79, 0x22, 0xc5, 0x02, 0x0a, 0x11, 0x55, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x3a, 0x81, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3e, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63,
	0x6f, 0x72, 0x65, 0x2d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x22, 0x81, 0x2d, 0x0a, 0x1a, 0x55,
	0x53, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61,
	0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0xbc, 0x01, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x80, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0xbc,
	0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x82, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x18, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x13, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x12, 0x5c, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x6d, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x44,
	0x0a, 0x05, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x66,
	0x6f, 0x63, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x53, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x58, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x3c, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0xa6, 0x01,
	0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x68, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53,
	0x43, 0x6f, 0x72, 0x65, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x52,
	0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69,
	0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08,
	0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4a, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x12, 0x56, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x0f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f,
	0x72, 0x65, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x43, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x6f,
	0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x09, 0x68, 0x61, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0xba, 0x01, 0x0a, 0x0c, 0x64,
	0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x20, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x77, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x15, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c,
	0x61, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x72, 0x69,
	0x76, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x59, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x1a, 0xe7, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x5f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x8c, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x4e, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x84, 0x02, 0x0a,
	0x0a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x58, 0x12, 0x3c, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x35, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x1a, 0x6d, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x51, 0x0a,
	0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x1a, 0xce, 0x04, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x37, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12,
	0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x12, 0x2c,
	0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x3a, 0x34, 0x9a,
	0x86, 0x93, 0xa0, 0x08, 0x2e, 0x6c, 0x6f, 0x77, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x68, 0x69, 0x67, 0x68, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x1a, 0xa1, 0x0a, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x58, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x6d, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41,
	0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x0f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72,
	0x65, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x1a, 0xb0, 0x05, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12,
	0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x10,
	0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f,
	0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12,
	0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x07,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x45, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2f, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x9e, 0x02, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x45, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75,
	0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x73, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x29, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62,
	0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x77, 0x68, 0x65, 0x72, 0x65, 0x28, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x28,
	0x25, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x29, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x29,
	0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xa8,
	0x0e, 0x0a, 0x19, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x5e, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f,
	0x6d, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x21, 0xf2, 0xbe, 0xc0, 0xa4,
	0x07, 0x1b, 0x77, 0x68, 0x65, 0x72, 0x65, 0x28, 0x75, 0x73, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x68,
	0x6f, 0x6d, 0x65, 0x27, 0x29, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x52, 0x07, 0x74,
	0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x59, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x21, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x1b, 0x77, 0x68, 0x65,
	0x72, 0x65, 0x28, 0x75, 0x73, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x68, 0x6f, 0x6d, 0x65, 0x27, 0x29,
	0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x4b, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x12, 0x52,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x4a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0xac,
	0x03, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x70, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65,
	0x63, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65,
	0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0xb7, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x34, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x27,
	0x28, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x28, 0x29, 0x20, 0x2b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x28, 0x29, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08,
	0x14, 0x10, 0x15, 0x4a, 0x04, 0x08, 0x15, 0x10, 0x16, 0x22, 0xd1, 0x2e, 0x0a, 0x2a, 0x55, 0x53,
	0x43, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x64, 0x69, 0x61, 0x74, 0x72, 0x69, 0x63, 0x42, 0x4d, 0x49,
	0x66, 0x6f, 0x72, 0x41, 0x67, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xbc,
	0x01, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x80, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0xbc, 0x01,
	0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x82, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x18, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x13, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x12, 0x6c, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x72, 0x69, 0x63, 0x42, 0x4d, 0x49, 0x66, 0x6f, 0x72, 0x41, 0x67, 0x65, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x05, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x09, 0x65,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52,
	0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x72, 0x0a, 0x09, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x72, 0x69, 0x63, 0x42, 0x4d, 0x49, 0x66, 0x6f, 0x72, 0x41, 0x67, 0x65, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x34,
	0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x12, 0xa6, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x68, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x66, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x72, 0x69, 0x63, 0x42, 0x4d, 0x49, 0x66, 0x6f, 0x72, 0x41, 0x67, 0x65, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62,
	0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x09,
	0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12,
	0x3c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4a, 0x0a,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x56, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x79, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x64, 0x69, 0x61, 0x74, 0x72,
	0x69, 0x63, 0x42, 0x4d, 0x49, 0x66, 0x6f, 0x72, 0x41, 0x67, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x82, 0x01, 0x0a,
	0x0a, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x43, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x68, 0x61, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0xba, 0x01, 0x0a, 0x0c, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x77, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x75, 0x64, 0x79, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d,
	0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x69,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65,
	0x50, 0x65, 0x64, 0x69, 0x61, 0x74, 0x72, 0x69, 0x63, 0x42, 0x4d, 0x49, 0x66, 0x6f, 0x72, 0x41,
	0x67, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a, 0xae, 0x02, 0x0a, 0x0a, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6d, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xc5, 0x01, 0x0a, 0x0a, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x58, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x38,
	0x9a, 0x86, 0x93, 0xa0, 0x08, 0x2c, 0x28, 0x24, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x73, 0x20,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x29, 0x2e, 0x74, 0x6f, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x28, 0x29, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x29, 0x20, 0x3e, 0x3d,
	0x20, 0x38, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x1a, 0x57, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x3b, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xce, 0x04, 0x0a, 0x0e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12,
	0x37, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x3a, 0x34, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x2e, 0x6c, 0x6f,
	0x77, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x68, 0x69,
	0x67, 0x68, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x1a, 0xf4, 0x0a, 0x0a,
	0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x68, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53,
	0x43, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x64, 0x69, 0x61, 0x74, 0x72, 0x69, 0x63, 0x42, 0x4d, 0x49,
	0x66, 0x6f, 0x72, 0x41, 0x67, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x52, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x53, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x72, 0x69, 0x63, 0x42, 0x4d, 0x49, 0x66, 0x6f, 0x72, 0x41, 0x67, 0x65, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0xb0, 0x05,
	0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12,
	0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a,
	0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x45, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x3a, 0x31, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x2b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62,
	0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x3a, 0xbb, 0x03, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x73,
	0x69, 0x67, 0x6e, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x45, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x62, 0x6d, 0x69,
	0x2d, 0x66, 0x6f, 0x72, 0x2d, 0x61, 0x67, 0x65, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x29, 0x64, 0x61,
	0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x77, 0x68, 0x65,
	0x72, 0x65, 0x28, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x65, 0x63, 0x74, 0x28, 0x25, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x29, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x29, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0,
	0x08, 0x5f, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x68, 0x61, 0x73, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x20, 0x28, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f,
	0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0x29, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x22, 0x10, 0x23, 0x42, 0x69, 0x0a,
	0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x44, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x72, 0x34, 0x2f, 0x75, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x04, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r4_uscore_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r4_uscore_proto_rawDescData = file_proto_google_fhir_proto_r4_uscore_proto_rawDesc
)

func file_proto_google_fhir_proto_r4_uscore_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r4_uscore_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r4_uscore_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r4_uscore_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r4_uscore_proto_rawDescData
}

var file_proto_google_fhir_proto_r4_uscore_proto_msgTypes = make([]protoimpl.MessageInfo, 171)
var file_proto_google_fhir_proto_r4_uscore_proto_goTypes = []interface{}{
	(*USCoreProcedureProfile)(nil),                                                // 0: google.fhir.r4.uscore.USCoreProcedureProfile
	(*USCorePractitionerProfile)(nil),                                             // 1: google.fhir.r4.uscore.USCorePractitionerProfile
	(*USCoreDiagnosticReportProfileLaboratoryReporting)(nil),                      // 2: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting
	(*USCorePediatricWeightForHeightObservationProfile)(nil),                      // 3: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile
	(*USCoreEncounterProfile)(nil),                                                // 4: google.fhir.r4.uscore.USCoreEncounterProfile
	(*USCoreDocumentReferenceProfile)(nil),                                        // 5: google.fhir.r4.uscore.USCoreDocumentReferenceProfile
	(*USCoreCareTeam)(nil),                                                        // 6: google.fhir.r4.uscore.USCoreCareTeam
	(*USCoreProvenance)(nil),                                                      // 7: google.fhir.r4.uscore.USCoreProvenance
	(*USCoreImmunizationProfile)(nil),                                             // 8: google.fhir.r4.uscore.USCoreImmunizationProfile
	(*PatientUSCoreBirthSexExtension)(nil),                                        // 9: google.fhir.r4.uscore.PatientUSCoreBirthSexExtension
	(*USCoreDiagnosticReportProfileNoteExchange)(nil),                             // 10: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange
	(*USCoreLaboratoryResultObservationProfile)(nil),                              // 11: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile
	(*USCoreLocation)(nil),                                                        // 12: google.fhir.r4.uscore.USCoreLocation
	(*UsCoreCondition)(nil),                                                       // 13: google.fhir.r4.uscore.UsCoreCondition
	(*USCorePulseOximetryProfile)(nil),                                            // 14: google.fhir.r4.uscore.USCorePulseOximetryProfile
	(*USCoreImplantableDeviceProfile)(nil),                                        // 15: google.fhir.r4.uscore.USCoreImplantableDeviceProfile
	(*USCoreMedicationRequestProfile)(nil),                                        // 16: google.fhir.r4.uscore.USCoreMedicationRequestProfile
	(*USCoreMedicationProfile)(nil),                                               // 17: google.fhir.r4.uscore.USCoreMedicationProfile
	(*USCoreGoalProfile)(nil),                                                     // 18: google.fhir.r4.uscore.USCoreGoalProfile
	(*PatientUSCoreRaceExtension)(nil),                                            // 19: google.fhir.r4.uscore.PatientUSCoreRaceExtension
	(*USCorePractitionerRoleProfile)(nil),                                         // 20: google.fhir.r4.uscore.USCorePractitionerRoleProfile
	(*USCoreAllergyIntolerance)(nil),                                              // 21: google.fhir.r4.uscore.USCoreAllergyIntolerance
	(*USCoreCarePlanProfile)(nil),                                                 // 22: google.fhir.r4.uscore.USCoreCarePlanProfile
	(*USCorePatientProfile)(nil),                                                  // 23: google.fhir.r4.uscore.USCorePatientProfile
	(*PatientUSCoreEthnicityExtension)(nil),                                       // 24: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension
	(*UsCoreDirectEmail)(nil),                                                     // 25: google.fhir.r4.uscore.UsCoreDirectEmail
	(*USCoreSmokingStatusProfile)(nil),                                            // 26: google.fhir.r4.uscore.USCoreSmokingStatusProfile
	(*USCoreOrganizationProfile)(nil),                                             // 27: google.fhir.r4.uscore.USCoreOrganizationProfile
	(*USCorePediatricBMIforAgeObservationProfile)(nil),                            // 28: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile
	(*USCoreProcedureProfile_StatusCode)(nil),                                     // 29: google.fhir.r4.uscore.USCoreProcedureProfile.StatusCode
	(*USCoreProcedureProfile_PerformedX)(nil),                                     // 30: google.fhir.r4.uscore.USCoreProcedureProfile.PerformedX
	(*USCoreProcedureProfile_Performer)(nil),                                      // 31: google.fhir.r4.uscore.USCoreProcedureProfile.Performer
	(*USCoreProcedureProfile_FocalDevice)(nil),                                    // 32: google.fhir.r4.uscore.USCoreProcedureProfile.FocalDevice
	(*USCorePractitionerProfile_GenderCode)(nil),                                  // 33: google.fhir.r4.uscore.USCorePractitionerProfile.GenderCode
	(*USCorePractitionerProfile_Qualification)(nil),                               // 34: google.fhir.r4.uscore.USCorePractitionerProfile.Qualification
	(*USCoreDiagnosticReportProfileLaboratoryReporting_StatusCode)(nil),           // 35: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.StatusCode
	(*USCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX)(nil),           // 36: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.EffectiveX
	(*USCoreDiagnosticReportProfileLaboratoryReporting_Media)(nil),                // 37: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.Media
	(*USCorePediatricWeightForHeightObservationProfile_StatusCode)(nil),           // 38: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.StatusCode
	(*USCorePediatricWeightForHeightObservationProfile_EffectiveX)(nil),           // 39: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.EffectiveX
	(*USCorePediatricWeightForHeightObservationProfile_ValueX)(nil),               // 40: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.ValueX
	(*USCorePediatricWeightForHeightObservationProfile_ReferenceRange)(nil),       // 41: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.ReferenceRange
	(*USCorePediatricWeightForHeightObservationProfile_Component)(nil),            // 42: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.Component
	(*USCorePediatricWeightForHeightObservationProfile_Component_ValueX)(nil),     // 43: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.Component.ValueX
	(*USCoreEncounterProfile_StatusCode)(nil),                                     // 44: google.fhir.r4.uscore.USCoreEncounterProfile.StatusCode
	(*USCoreEncounterProfile_StatusHistory)(nil),                                  // 45: google.fhir.r4.uscore.USCoreEncounterProfile.StatusHistory
	(*USCoreEncounterProfile_ClassHistory)(nil),                                   // 46: google.fhir.r4.uscore.USCoreEncounterProfile.ClassHistory
	(*USCoreEncounterProfile_Participant)(nil),                                    // 47: google.fhir.r4.uscore.USCoreEncounterProfile.Participant
	(*USCoreEncounterProfile_Diagnosis)(nil),                                      // 48: google.fhir.r4.uscore.USCoreEncounterProfile.Diagnosis
	(*USCoreEncounterProfile_Hospitalization)(nil),                                // 49: google.fhir.r4.uscore.USCoreEncounterProfile.Hospitalization
	(*USCoreEncounterProfile_Location)(nil),                                       // 50: google.fhir.r4.uscore.USCoreEncounterProfile.Location
	(*USCoreEncounterProfile_StatusHistory_StatusCode)(nil),                       // 51: google.fhir.r4.uscore.USCoreEncounterProfile.StatusHistory.StatusCode
	(*USCoreEncounterProfile_Location_StatusCode)(nil),                            // 52: google.fhir.r4.uscore.USCoreEncounterProfile.Location.StatusCode
	(*USCoreDocumentReferenceProfile_StatusCode)(nil),                             // 53: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.StatusCode
	(*USCoreDocumentReferenceProfile_DocStatusCode)(nil),                          // 54: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.DocStatusCode
	(*USCoreDocumentReferenceProfile_RelatesTo)(nil),                              // 55: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.RelatesTo
	(*USCoreDocumentReferenceProfile_Content)(nil),                                // 56: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.Content
	(*USCoreDocumentReferenceProfile_Context)(nil),                                // 57: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.Context
	(*USCoreDocumentReferenceProfile_RelatesTo_CodeType)(nil),                     // 58: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.RelatesTo.CodeType
	(*USCoreCareTeam_StatusCode)(nil),                                             // 59: google.fhir.r4.uscore.USCoreCareTeam.StatusCode
	(*USCoreCareTeam_Participant)(nil),                                            // 60: google.fhir.r4.uscore.USCoreCareTeam.Participant
	(*USCoreProvenance_OccurredX)(nil),                                            // 61: google.fhir.r4.uscore.USCoreProvenance.OccurredX
	(*USCoreProvenance_Agent)(nil),                                                // 62: google.fhir.r4.uscore.USCoreProvenance.Agent
	(*USCoreProvenance_Entity)(nil),                                               // 63: google.fhir.r4.uscore.USCoreProvenance.Entity
	(*USCoreProvenance_Entity_RoleCode)(nil),                                      // 64: google.fhir.r4.uscore.USCoreProvenance.Entity.RoleCode
	(*USCoreImmunizationProfile_StatusCode)(nil),                                  // 65: google.fhir.r4.uscore.USCoreImmunizationProfile.StatusCode
	(*USCoreImmunizationProfile_OccurrenceX)(nil),                                 // 66: google.fhir.r4.uscore.USCoreImmunizationProfile.OccurrenceX
	(*USCoreImmunizationProfile_Performer)(nil),                                   // 67: google.fhir.r4.uscore.USCoreImmunizationProfile.Performer
	(*USCoreImmunizationProfile_Education)(nil),                                   // 68: google.fhir.r4.uscore.USCoreImmunizationProfile.Education
	(*USCoreImmunizationProfile_Reaction)(nil),                                    // 69: google.fhir.r4.uscore.USCoreImmunizationProfile.Reaction
	(*USCoreImmunizationProfile_ProtocolApplied)(nil),                             // 70: google.fhir.r4.uscore.USCoreImmunizationProfile.ProtocolApplied
	(*USCoreImmunizationProfile_ProtocolApplied_DoseNumberX)(nil),                 // 71: google.fhir.r4.uscore.USCoreImmunizationProfile.ProtocolApplied.DoseNumberX
	(*USCoreImmunizationProfile_ProtocolApplied_SeriesDosesX)(nil),                // 72: google.fhir.r4.uscore.USCoreImmunizationProfile.ProtocolApplied.SeriesDosesX
	(*PatientUSCoreBirthSexExtension_ValueCode)(nil),                              // 73: google.fhir.r4.uscore.PatientUSCoreBirthSexExtension.ValueCode
	(*USCoreDiagnosticReportProfileNoteExchange_StatusCode)(nil),                  // 74: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.StatusCode
	(*USCoreDiagnosticReportProfileNoteExchange_EffectiveX)(nil),                  // 75: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.EffectiveX
	(*USCoreDiagnosticReportProfileNoteExchange_Media)(nil),                       // 76: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.Media
	(*USCoreLaboratoryResultObservationProfile_StatusCode)(nil),                   // 77: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.StatusCode
	(*USCoreLaboratoryResultObservationProfile_EffectiveX)(nil),                   // 78: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.EffectiveX
	(*USCoreLaboratoryResultObservationProfile_ValueX)(nil),                       // 79: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.ValueX
	(*USCoreLaboratoryResultObservationProfile_ReferenceRange)(nil),               // 80: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.ReferenceRange
	(*USCoreLaboratoryResultObservationProfile_Component)(nil),                    // 81: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.Component
	(*USCoreLaboratoryResultObservationProfile_Component_ValueX)(nil),             // 82: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.Component.ValueX
	(*USCoreLocation_StatusCode)(nil),                                             // 83: google.fhir.r4.uscore.USCoreLocation.StatusCode
	(*USCoreLocation_ModeCode)(nil),                                               // 84: google.fhir.r4.uscore.USCoreLocation.ModeCode
	(*USCoreLocation_Position)(nil),                                               // 85: google.fhir.r4.uscore.USCoreLocation.Position
	(*USCoreLocation_HoursOfOperation)(nil),                                       // 86: google.fhir.r4.uscore.USCoreLocation.HoursOfOperation
	(*USCoreLocation_HoursOfOperation_DaysOfWeekCode)(nil),                        // 87: google.fhir.r4.uscore.USCoreLocation.HoursOfOperation.DaysOfWeekCode
	(*UsCoreCondition_OnsetX)(nil),                                                // 88: google.fhir.r4.uscore.UsCoreCondition.OnsetX
	(*UsCoreCondition_AbatementX)(nil),                                            // 89: google.fhir.r4.uscore.UsCoreCondition.AbatementX
	(*UsCoreCondition_Stage)(nil),                                                 // 90: google.fhir.r4.uscore.UsCoreCondition.Stage
	(*UsCoreCondition_Evidence)(nil),                                              // 91: google.fhir.r4.uscore.UsCoreCondition.Evidence
	(*USCorePulseOximetryProfile_StatusCode)(nil),                                 // 92: google.fhir.r4.uscore.USCorePulseOximetryProfile.StatusCode
	(*USCorePulseOximetryProfile_CodeableConceptForCode)(nil),                     // 93: google.fhir.r4.uscore.USCorePulseOximetryProfile.CodeableConceptForCode
	(*USCorePulseOximetryProfile_EffectiveX)(nil),                                 // 94: google.fhir.r4.uscore.USCorePulseOximetryProfile.EffectiveX
	(*USCorePulseOximetryProfile_ValueX)(nil),                                     // 95: google.fhir.r4.uscore.USCorePulseOximetryProfile.ValueX
	(*USCorePulseOximetryProfile_ReferenceRange)(nil),                             // 96: google.fhir.r4.uscore.USCorePulseOximetryProfile.ReferenceRange
	(*USCorePulseOximetryProfile_Component)(nil),                                  // 97: google.fhir.r4.uscore.USCorePulseOximetryProfile.Component
	(*USCorePulseOximetryProfile_Component_ValueX)(nil),                           // 98: google.fhir.r4.uscore.USCorePulseOximetryProfile.Component.ValueX
	(*USCoreImplantableDeviceProfile_UdiCarrier)(nil),                             // 99: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.UdiCarrier
	(*USCoreImplantableDeviceProfile_StatusCode)(nil),                             // 100: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.StatusCode
	(*USCoreImplantableDeviceProfile_DeviceName)(nil),                             // 101: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.DeviceName
	(*USCoreImplantableDeviceProfile_Specialization)(nil),                         // 102: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.Specialization
	(*USCoreImplantableDeviceProfile_Version)(nil),                                // 103: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.Version
	(*USCoreImplantableDeviceProfile_Property)(nil),                               // 104: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.Property
	(*USCoreImplantableDeviceProfile_UdiCarrier_EntryTypeCode)(nil),               // 105: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.UdiCarrier.EntryTypeCode
	(*USCoreImplantableDeviceProfile_DeviceName_TypeCode)(nil),                    // 106: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.DeviceName.TypeCode
	(*USCoreMedicationRequestProfile_StatusCode)(nil),                             // 107: google.fhir.r4.uscore.USCoreMedicationRequestProfile.StatusCode
	(*USCoreMedicationRequestProfile_IntentCode)(nil),                             // 108: google.fhir.r4.uscore.USCoreMedicationRequestProfile.IntentCode
	(*USCoreMedicationRequestProfile_PriorityCode)(nil),                           // 109: google.fhir.r4.uscore.USCoreMedicationRequestProfile.PriorityCode
	(*USCoreMedicationRequestProfile_ReportedX)(nil),                              // 110: google.fhir.r4.uscore.USCoreMedicationRequestProfile.ReportedX
	(*USCoreMedicationRequestProfile_MedicationX)(nil),                            // 111: google.fhir.r4.uscore.USCoreMedicationRequestProfile.MedicationX
	(*USCoreMedicationRequestProfile_DispenseRequest)(nil),                        // 112: google.fhir.r4.uscore.USCoreMedicationRequestProfile.DispenseRequest
	(*USCoreMedicationRequestProfile_Substitution)(nil),                           // 113: google.fhir.r4.uscore.USCoreMedicationRequestProfile.Substitution
	(*USCoreMedicationRequestProfile_DispenseRequest_InitialFill)(nil),            // 114: google.fhir.r4.uscore.USCoreMedicationRequestProfile.DispenseRequest.InitialFill
	(*USCoreMedicationRequestProfile_Substitution_AllowedX)(nil),                  // 115: google.fhir.r4.uscore.USCoreMedicationRequestProfile.Substitution.AllowedX
	(*USCoreMedicationProfile_StatusCode)(nil),                                    // 116: google.fhir.r4.uscore.USCoreMedicationProfile.StatusCode
	(*USCoreMedicationProfile_Ingredient)(nil),                                    // 117: google.fhir.r4.uscore.USCoreMedicationProfile.Ingredient
	(*USCoreMedicationProfile_Batch)(nil),                                         // 118: google.fhir.r4.uscore.USCoreMedicationProfile.Batch
	(*USCoreMedicationProfile_Ingredient_ItemX)(nil),                              // 119: google.fhir.r4.uscore.USCoreMedicationProfile.Ingredient.ItemX
	(*USCoreGoalProfile_LifecycleStatusCode)(nil),                                 // 120: google.fhir.r4.uscore.USCoreGoalProfile.LifecycleStatusCode
	(*USCoreGoalProfile_StartX)(nil),                                              // 121: google.fhir.r4.uscore.USCoreGoalProfile.StartX
	(*USCoreGoalProfile_Target)(nil),                                              // 122: google.fhir.r4.uscore.USCoreGoalProfile.Target
	(*USCoreGoalProfile_Target_DetailX)(nil),                                      // 123: google.fhir.r4.uscore.USCoreGoalProfile.Target.DetailX
	(*USCoreGoalProfile_Target_DueX)(nil),                                         // 124: google.fhir.r4.uscore.USCoreGoalProfile.Target.DueX
	(*PatientUSCoreRaceExtension_OmbCategoryCoding)(nil),                          // 125: google.fhir.r4.uscore.PatientUSCoreRaceExtension.OmbCategoryCoding
	(*PatientUSCoreRaceExtension_DetailedCoding)(nil),                             // 126: google.fhir.r4.uscore.PatientUSCoreRaceExtension.DetailedCoding
	(*PatientUSCoreRaceExtension_OmbCategoryCoding_BoundCode)(nil),                // 127: google.fhir.r4.uscore.PatientUSCoreRaceExtension.OmbCategoryCoding.BoundCode
	(*PatientUSCoreRaceExtension_DetailedCoding_BoundCode)(nil),                   // 128: google.fhir.r4.uscore.PatientUSCoreRaceExtension.DetailedCoding.BoundCode
	(*USCorePractitionerRoleProfile_AvailableTime)(nil),                           // 129: google.fhir.r4.uscore.USCorePractitionerRoleProfile.AvailableTime
	(*USCorePractitionerRoleProfile_NotAvailable)(nil),                            // 130: google.fhir.r4.uscore.USCorePractitionerRoleProfile.NotAvailable
	(*USCorePractitionerRoleProfile_AvailableTime_DaysOfWeekCode)(nil),            // 131: google.fhir.r4.uscore.USCorePractitionerRoleProfile.AvailableTime.DaysOfWeekCode
	(*USCoreAllergyIntolerance_TypeCode)(nil),                                     // 132: google.fhir.r4.uscore.USCoreAllergyIntolerance.TypeCode
	(*USCoreAllergyIntolerance_CategoryCode)(nil),                                 // 133: google.fhir.r4.uscore.USCoreAllergyIntolerance.CategoryCode
	(*USCoreAllergyIntolerance_CriticalityCode)(nil),                              // 134: google.fhir.r4.uscore.USCoreAllergyIntolerance.CriticalityCode
	(*USCoreAllergyIntolerance_OnsetX)(nil),                                       // 135: google.fhir.r4.uscore.USCoreAllergyIntolerance.OnsetX
	(*USCoreAllergyIntolerance_Reaction)(nil),                                     // 136: google.fhir.r4.uscore.USCoreAllergyIntolerance.Reaction
	(*USCoreAllergyIntolerance_Reaction_SeverityCode)(nil),                        // 137: google.fhir.r4.uscore.USCoreAllergyIntolerance.Reaction.SeverityCode
	(*USCoreCarePlanProfile_StatusCode)(nil),                                      // 138: google.fhir.r4.uscore.USCoreCarePlanProfile.StatusCode
	(*USCoreCarePlanProfile_IntentCode)(nil),                                      // 139: google.fhir.r4.uscore.USCoreCarePlanProfile.IntentCode
	(*USCoreCarePlanProfile_Activity)(nil),                                        // 140: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity
	(*USCoreCarePlanProfile_Activity_Detail)(nil),                                 // 141: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail
	(*USCoreCarePlanProfile_Activity_Detail_KindCode)(nil),                        // 142: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.KindCode
	(*USCoreCarePlanProfile_Activity_Detail_StatusCode)(nil),                      // 143: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.StatusCode
	(*USCoreCarePlanProfile_Activity_Detail_ScheduledX)(nil),                      // 144: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.ScheduledX
	(*USCoreCarePlanProfile_Activity_Detail_ProductX)(nil),                        // 145: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.ProductX
	(*USCorePatientProfile_GenderCode)(nil),                                       // 146: google.fhir.r4.uscore.USCorePatientProfile.GenderCode
	(*USCorePatientProfile_DeceasedX)(nil),                                        // 147: google.fhir.r4.uscore.USCorePatientProfile.DeceasedX
	(*USCorePatientProfile_MultipleBirthX)(nil),                                   // 148: google.fhir.r4.uscore.USCorePatientProfile.MultipleBirthX
	(*USCorePatientProfile_Contact)(nil),                                          // 149: google.fhir.r4.uscore.USCorePatientProfile.Contact
	(*USCorePatientProfile_Communication)(nil),                                    // 150: google.fhir.r4.uscore.USCorePatientProfile.Communication
	(*USCorePatientProfile_Link)(nil),                                             // 151: google.fhir.r4.uscore.USCorePatientProfile.Link
	(*USCorePatientProfile_Contact_GenderCode)(nil),                               // 152: google.fhir.r4.uscore.USCorePatientProfile.Contact.GenderCode
	(*USCorePatientProfile_Link_TypeCode)(nil),                                    // 153: google.fhir.r4.uscore.USCorePatientProfile.Link.TypeCode
	(*PatientUSCoreEthnicityExtension_OmbCategoryCoding)(nil),                     // 154: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.OmbCategoryCoding
	(*PatientUSCoreEthnicityExtension_DetailedCoding)(nil),                        // 155: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.DetailedCoding
	(*PatientUSCoreEthnicityExtension_OmbCategoryCoding_BoundCode)(nil),           // 156: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.OmbCategoryCoding.BoundCode
	(*PatientUSCoreEthnicityExtension_DetailedCoding_BoundCode)(nil),              // 157: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.DetailedCoding.BoundCode
	(*USCoreSmokingStatusProfile_StatusCode)(nil),                                 // 158: google.fhir.r4.uscore.USCoreSmokingStatusProfile.StatusCode
	(*USCoreSmokingStatusProfile_EffectiveX)(nil),                                 // 159: google.fhir.r4.uscore.USCoreSmokingStatusProfile.EffectiveX
	(*USCoreSmokingStatusProfile_ValueX)(nil),                                     // 160: google.fhir.r4.uscore.USCoreSmokingStatusProfile.ValueX
	(*USCoreSmokingStatusProfile_ReferenceRange)(nil),                             // 161: google.fhir.r4.uscore.USCoreSmokingStatusProfile.ReferenceRange
	(*USCoreSmokingStatusProfile_Component)(nil),                                  // 162: google.fhir.r4.uscore.USCoreSmokingStatusProfile.Component
	(*USCoreSmokingStatusProfile_Component_ValueX)(nil),                           // 163: google.fhir.r4.uscore.USCoreSmokingStatusProfile.Component.ValueX
	(*USCoreOrganizationProfile_Contact)(nil),                                     // 164: google.fhir.r4.uscore.USCoreOrganizationProfile.Contact
	(*USCorePediatricBMIforAgeObservationProfile_StatusCode)(nil),                 // 165: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.StatusCode
	(*USCorePediatricBMIforAgeObservationProfile_EffectiveX)(nil),                 // 166: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.EffectiveX
	(*USCorePediatricBMIforAgeObservationProfile_ValueX)(nil),                     // 167: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.ValueX
	(*USCorePediatricBMIforAgeObservationProfile_ReferenceRange)(nil),             // 168: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.ReferenceRange
	(*USCorePediatricBMIforAgeObservationProfile_Component)(nil),                  // 169: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.Component
	(*USCorePediatricBMIforAgeObservationProfile_Component_ValueX)(nil),           // 170: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.Component.ValueX
	(*datatypes_go_proto.Id)(nil),                                                 // 171: google.fhir.r4.core.Id
	(*datatypes_go_proto.Meta)(nil),                                               // 172: google.fhir.r4.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                                // 173: google.fhir.r4.core.Uri
	(*datatypes_go_proto.Code)(nil),                                               // 174: google.fhir.r4.core.Code
	(*datatypes_go_proto.Narrative)(nil),                                          // 175: google.fhir.r4.core.Narrative
	(*any.Any)(nil),                                                               // 176: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                                          // 177: google.fhir.r4.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                                         // 178: google.fhir.r4.core.Identifier
	(*datatypes_go_proto.Canonical)(nil),                                          // 179: google.fhir.r4.core.Canonical
	(*datatypes_go_proto.Reference)(nil),                                          // 180: google.fhir.r4.core.Reference
	(*datatypes_go_proto.CodeableConcept)(nil),                                    // 181: google.fhir.r4.core.CodeableConcept
	(*datatypes_go_proto.Annotation)(nil),                                         // 182: google.fhir.r4.core.Annotation
	(*datatypes_go_proto.Boolean)(nil),                                            // 183: google.fhir.r4.core.Boolean
	(*datatypes_go_proto.HumanName)(nil),                                          // 184: google.fhir.r4.core.HumanName
	(*datatypes_go_proto.ContactPoint)(nil),                                       // 185: google.fhir.r4.core.ContactPoint
	(*datatypes_go_proto.Address)(nil),                                            // 186: google.fhir.r4.core.Address
	(*datatypes_go_proto.Date)(nil),                                               // 187: google.fhir.r4.core.Date
	(*datatypes_go_proto.Attachment)(nil),                                         // 188: google.fhir.r4.core.Attachment
	(*datatypes_go_proto.Instant)(nil),                                            // 189: google.fhir.r4.core.Instant
	(*datatypes_go_proto.String)(nil),                                             // 190: google.fhir.r4.core.String
	(*datatypes_go_proto.Coding)(nil),                                             // 191: google.fhir.r4.core.Coding
	(*datatypes_go_proto.Period)(nil),                                             // 192: google.fhir.r4.core.Period
	(*datatypes_go_proto.Duration)(nil),                                           // 193: google.fhir.r4.core.Duration
	(*datatypes_go_proto.Signature)(nil),                                          // 194: google.fhir.r4.core.Signature
	(*datatypes_go_proto.DateTime)(nil),                                           // 195: google.fhir.r4.core.DateTime
	(*datatypes_go_proto.SimpleQuantity)(nil),                                     // 196: google.fhir.r4.core.SimpleQuantity
	(*datatypes_go_proto.Dosage)(nil),                                             // 197: google.fhir.r4.core.Dosage
	(*datatypes_go_proto.Ratio)(nil),                                              // 198: google.fhir.r4.core.Ratio
	(codes_go_proto.EventStatusCode_Value)(0),                                     // 199: google.fhir.r4.core.EventStatusCode.Value
	(codes_go_proto.AdministrativeGenderCode_Value)(0),                            // 200: google.fhir.r4.core.AdministrativeGenderCode.Value
	(codes_go_proto.DiagnosticReportStatusCode_Value)(0),                          // 201: google.fhir.r4.core.DiagnosticReportStatusCode.Value
	(codes_go_proto.ObservationStatusCode_Value)(0),                               // 202: google.fhir.r4.core.ObservationStatusCode.Value
	(*datatypes_go_proto.Quantity)(nil),                                           // 203: google.fhir.r4.core.Quantity
	(*datatypes_go_proto.Range)(nil),                                              // 204: google.fhir.r4.core.Range
	(*datatypes_go_proto.Integer)(nil),                                            // 205: google.fhir.r4.core.Integer
	(*datatypes_go_proto.SampledData)(nil),                                        // 206: google.fhir.r4.core.SampledData
	(*datatypes_go_proto.Time)(nil),                                               // 207: google.fhir.r4.core.Time
	(codes_go_proto.EncounterStatusCode_Value)(0),                                 // 208: google.fhir.r4.core.EncounterStatusCode.Value
	(*datatypes_go_proto.PositiveInt)(nil),                                        // 209: google.fhir.r4.core.PositiveInt
	(codes_go_proto.EncounterLocationStatusCode_Value)(0),                         // 210: google.fhir.r4.core.EncounterLocationStatusCode.Value
	(codes_go_proto.DocumentReferenceStatusCode_Value)(0),                         // 211: google.fhir.r4.core.DocumentReferenceStatusCode.Value
	(codes_go_proto.CompositionStatusCode_Value)(0),                               // 212: google.fhir.r4.core.CompositionStatusCode.Value
	(codes_go_proto.DocumentRelationshipTypeCode_Value)(0),                        // 213: google.fhir.r4.core.DocumentRelationshipTypeCode.Value
	(codes_go_proto.CareTeamStatusCode_Value)(0),                                  // 214: google.fhir.r4.core.CareTeamStatusCode.Value
	(codes_go_proto.ProvenanceEntityRoleCode_Value)(0),                            // 215: google.fhir.r4.core.ProvenanceEntityRoleCode.Value
	(valuesets_go_proto.ImmunizationStatusCodesValueSet_Value)(0),                 // 216: google.fhir.r4.core.ImmunizationStatusCodesValueSet.Value
	(uscore_codes_go_proto.BirthSexValueSet_Value)(0),                             // 217: google.fhir.r4.uscore.BirthSexValueSet.Value
	(codes_go_proto.LocationStatusCode_Value)(0),                                  // 218: google.fhir.r4.core.LocationStatusCode.Value
	(codes_go_proto.LocationModeCode_Value)(0),                                    // 219: google.fhir.r4.core.LocationModeCode.Value
	(*datatypes_go_proto.Decimal)(nil),                                            // 220: google.fhir.r4.core.Decimal
	(codes_go_proto.DaysOfWeekCode_Value)(0),                                      // 221: google.fhir.r4.core.DaysOfWeekCode.Value
	(*datatypes_go_proto.Age)(nil),                                                // 222: google.fhir.r4.core.Age
	(*datatypes_go_proto.CodingWithFixedCode)(nil),                                // 223: google.fhir.r4.core.CodingWithFixedCode
	(*datatypes_go_proto.Base64Binary)(nil),                                       // 224: google.fhir.r4.core.Base64Binary
	(codes_go_proto.FHIRDeviceStatusCode_Value)(0),                                // 225: google.fhir.r4.core.FHIRDeviceStatusCode.Value
	(codes_go_proto.UDIEntryTypeCode_Value)(0),                                    // 226: google.fhir.r4.core.UDIEntryTypeCode.Value
	(codes_go_proto.DeviceNameTypeCode_Value)(0),                                  // 227: google.fhir.r4.core.DeviceNameTypeCode.Value
	(codes_go_proto.MedicationrequestStatusCode_Value)(0),                         // 228: google.fhir.r4.core.MedicationrequestStatusCode.Value
	(codes_go_proto.MedicationRequestIntentCode_Value)(0),                         // 229: google.fhir.r4.core.MedicationRequestIntentCode.Value
	(codes_go_proto.RequestPriorityCode_Value)(0),                                 // 230: google.fhir.r4.core.RequestPriorityCode.Value
	(*datatypes_go_proto.UnsignedInt)(nil),                                        // 231: google.fhir.r4.core.UnsignedInt
	(codes_go_proto.MedicationStatusCode_Value)(0),                                // 232: google.fhir.r4.core.MedicationStatusCode.Value
	(codes_go_proto.GoalLifecycleStatusCode_Value)(0),                             // 233: google.fhir.r4.core.GoalLifecycleStatusCode.Value
	(uscore_codes_go_proto.OmbRaceCategoriesValueSet_Value)(0),                    // 234: google.fhir.r4.uscore.OmbRaceCategoriesValueSet.Value
	(uscore_codes_go_proto.DetailedRaceValueSet_Value)(0),                         // 235: google.fhir.r4.uscore.DetailedRaceValueSet.Value
	(codes_go_proto.AllergyIntoleranceTypeCode_Value)(0),                          // 236: google.fhir.r4.core.AllergyIntoleranceTypeCode.Value
	(codes_go_proto.AllergyIntoleranceCategoryCode_Value)(0),                      // 237: google.fhir.r4.core.AllergyIntoleranceCategoryCode.Value
	(codes_go_proto.AllergyIntoleranceCriticalityCode_Value)(0),                   // 238: google.fhir.r4.core.AllergyIntoleranceCriticalityCode.Value
	(codes_go_proto.AllergyIntoleranceSeverityCode_Value)(0),                      // 239: google.fhir.r4.core.AllergyIntoleranceSeverityCode.Value
	(codes_go_proto.RequestStatusCode_Value)(0),                                   // 240: google.fhir.r4.core.RequestStatusCode.Value
	(valuesets_go_proto.CarePlanIntentValueSet_Value)(0),                          // 241: google.fhir.r4.core.CarePlanIntentValueSet.Value
	(valuesets_go_proto.CarePlanActivityKindValueSet_Value)(0),                    // 242: google.fhir.r4.core.CarePlanActivityKindValueSet.Value
	(codes_go_proto.CarePlanActivityStatusCode_Value)(0),                          // 243: google.fhir.r4.core.CarePlanActivityStatusCode.Value
	(*datatypes_go_proto.Timing)(nil),                                             // 244: google.fhir.r4.core.Timing
	(codes_go_proto.LinkTypeCode_Value)(0),                                        // 245: google.fhir.r4.core.LinkTypeCode.Value
	(uscore_codes_go_proto.OmbEthnicityCategoriesValueSet_Value)(0),               // 246: google.fhir.r4.uscore.OmbEthnicityCategoriesValueSet.Value
	(uscore_codes_go_proto.DetailedEthnicityValueSet_Value)(0),                    // 247: google.fhir.r4.uscore.DetailedEthnicityValueSet.Value
	(uscore_codes_go_proto.USCoreObservationSmokingStatusStatusValueSet_Value)(0), // 248: google.fhir.r4.uscore.USCoreObservationSmokingStatusStatusValueSet.Value
}
var file_proto_google_fhir_proto_r4_uscore_proto_depIdxs = []int32{
	171,  // 0: google.fhir.r4.uscore.USCoreProcedureProfile.id:type_name -> google.fhir.r4.core.Id
	172,  // 1: google.fhir.r4.uscore.USCoreProcedureProfile.meta:type_name -> google.fhir.r4.core.Meta
	173,  // 2: google.fhir.r4.uscore.USCoreProcedureProfile.implicit_rules:type_name -> google.fhir.r4.core.Uri
	174,  // 3: google.fhir.r4.uscore.USCoreProcedureProfile.language:type_name -> google.fhir.r4.core.Code
	175,  // 4: google.fhir.r4.uscore.USCoreProcedureProfile.text:type_name -> google.fhir.r4.core.Narrative
	176,  // 5: google.fhir.r4.uscore.USCoreProcedureProfile.contained:type_name -> google.protobuf.Any
	177,  // 6: google.fhir.r4.uscore.USCoreProcedureProfile.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 7: google.fhir.r4.uscore.USCoreProcedureProfile.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 8: google.fhir.r4.uscore.USCoreProcedureProfile.identifier:type_name -> google.fhir.r4.core.Identifier
	179,  // 9: google.fhir.r4.uscore.USCoreProcedureProfile.instantiates_canonical:type_name -> google.fhir.r4.core.Canonical
	173,  // 10: google.fhir.r4.uscore.USCoreProcedureProfile.instantiates_uri:type_name -> google.fhir.r4.core.Uri
	180,  // 11: google.fhir.r4.uscore.USCoreProcedureProfile.based_on:type_name -> google.fhir.r4.core.Reference
	180,  // 12: google.fhir.r4.uscore.USCoreProcedureProfile.part_of:type_name -> google.fhir.r4.core.Reference
	29,   // 13: google.fhir.r4.uscore.USCoreProcedureProfile.status:type_name -> google.fhir.r4.uscore.USCoreProcedureProfile.StatusCode
	181,  // 14: google.fhir.r4.uscore.USCoreProcedureProfile.status_reason:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 15: google.fhir.r4.uscore.USCoreProcedureProfile.category:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 16: google.fhir.r4.uscore.USCoreProcedureProfile.code:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 17: google.fhir.r4.uscore.USCoreProcedureProfile.subject:type_name -> google.fhir.r4.core.Reference
	180,  // 18: google.fhir.r4.uscore.USCoreProcedureProfile.encounter:type_name -> google.fhir.r4.core.Reference
	30,   // 19: google.fhir.r4.uscore.USCoreProcedureProfile.performed:type_name -> google.fhir.r4.uscore.USCoreProcedureProfile.PerformedX
	180,  // 20: google.fhir.r4.uscore.USCoreProcedureProfile.recorder:type_name -> google.fhir.r4.core.Reference
	180,  // 21: google.fhir.r4.uscore.USCoreProcedureProfile.asserter:type_name -> google.fhir.r4.core.Reference
	31,   // 22: google.fhir.r4.uscore.USCoreProcedureProfile.performer:type_name -> google.fhir.r4.uscore.USCoreProcedureProfile.Performer
	180,  // 23: google.fhir.r4.uscore.USCoreProcedureProfile.location:type_name -> google.fhir.r4.core.Reference
	181,  // 24: google.fhir.r4.uscore.USCoreProcedureProfile.reason_code:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 25: google.fhir.r4.uscore.USCoreProcedureProfile.reason_reference:type_name -> google.fhir.r4.core.Reference
	181,  // 26: google.fhir.r4.uscore.USCoreProcedureProfile.body_site:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 27: google.fhir.r4.uscore.USCoreProcedureProfile.outcome:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 28: google.fhir.r4.uscore.USCoreProcedureProfile.report:type_name -> google.fhir.r4.core.Reference
	181,  // 29: google.fhir.r4.uscore.USCoreProcedureProfile.complication:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 30: google.fhir.r4.uscore.USCoreProcedureProfile.complication_detail:type_name -> google.fhir.r4.core.Reference
	181,  // 31: google.fhir.r4.uscore.USCoreProcedureProfile.follow_up:type_name -> google.fhir.r4.core.CodeableConcept
	182,  // 32: google.fhir.r4.uscore.USCoreProcedureProfile.note:type_name -> google.fhir.r4.core.Annotation
	32,   // 33: google.fhir.r4.uscore.USCoreProcedureProfile.focal_device:type_name -> google.fhir.r4.uscore.USCoreProcedureProfile.FocalDevice
	180,  // 34: google.fhir.r4.uscore.USCoreProcedureProfile.used_reference:type_name -> google.fhir.r4.core.Reference
	181,  // 35: google.fhir.r4.uscore.USCoreProcedureProfile.used_code:type_name -> google.fhir.r4.core.CodeableConcept
	171,  // 36: google.fhir.r4.uscore.USCorePractitionerProfile.id:type_name -> google.fhir.r4.core.Id
	172,  // 37: google.fhir.r4.uscore.USCorePractitionerProfile.meta:type_name -> google.fhir.r4.core.Meta
	173,  // 38: google.fhir.r4.uscore.USCorePractitionerProfile.implicit_rules:type_name -> google.fhir.r4.core.Uri
	174,  // 39: google.fhir.r4.uscore.USCorePractitionerProfile.language:type_name -> google.fhir.r4.core.Code
	175,  // 40: google.fhir.r4.uscore.USCorePractitionerProfile.text:type_name -> google.fhir.r4.core.Narrative
	176,  // 41: google.fhir.r4.uscore.USCorePractitionerProfile.contained:type_name -> google.protobuf.Any
	177,  // 42: google.fhir.r4.uscore.USCorePractitionerProfile.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 43: google.fhir.r4.uscore.USCorePractitionerProfile.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 44: google.fhir.r4.uscore.USCorePractitionerProfile.identifier:type_name -> google.fhir.r4.core.Identifier
	183,  // 45: google.fhir.r4.uscore.USCorePractitionerProfile.active:type_name -> google.fhir.r4.core.Boolean
	184,  // 46: google.fhir.r4.uscore.USCorePractitionerProfile.name:type_name -> google.fhir.r4.core.HumanName
	185,  // 47: google.fhir.r4.uscore.USCorePractitionerProfile.telecom:type_name -> google.fhir.r4.core.ContactPoint
	186,  // 48: google.fhir.r4.uscore.USCorePractitionerProfile.address:type_name -> google.fhir.r4.core.Address
	33,   // 49: google.fhir.r4.uscore.USCorePractitionerProfile.gender:type_name -> google.fhir.r4.uscore.USCorePractitionerProfile.GenderCode
	187,  // 50: google.fhir.r4.uscore.USCorePractitionerProfile.birth_date:type_name -> google.fhir.r4.core.Date
	188,  // 51: google.fhir.r4.uscore.USCorePractitionerProfile.photo:type_name -> google.fhir.r4.core.Attachment
	34,   // 52: google.fhir.r4.uscore.USCorePractitionerProfile.qualification:type_name -> google.fhir.r4.uscore.USCorePractitionerProfile.Qualification
	181,  // 53: google.fhir.r4.uscore.USCorePractitionerProfile.communication:type_name -> google.fhir.r4.core.CodeableConcept
	171,  // 54: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.id:type_name -> google.fhir.r4.core.Id
	172,  // 55: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.meta:type_name -> google.fhir.r4.core.Meta
	173,  // 56: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.implicit_rules:type_name -> google.fhir.r4.core.Uri
	174,  // 57: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.language:type_name -> google.fhir.r4.core.Code
	175,  // 58: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.text:type_name -> google.fhir.r4.core.Narrative
	176,  // 59: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.contained:type_name -> google.protobuf.Any
	177,  // 60: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 61: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 62: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.identifier:type_name -> google.fhir.r4.core.Identifier
	180,  // 63: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.based_on:type_name -> google.fhir.r4.core.Reference
	35,   // 64: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.status:type_name -> google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.StatusCode
	181,  // 65: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.category:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 66: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.code:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 67: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.subject:type_name -> google.fhir.r4.core.Reference
	180,  // 68: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.encounter:type_name -> google.fhir.r4.core.Reference
	36,   // 69: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.effective:type_name -> google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.EffectiveX
	189,  // 70: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.issued:type_name -> google.fhir.r4.core.Instant
	180,  // 71: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.performer:type_name -> google.fhir.r4.core.Reference
	180,  // 72: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.results_interpreter:type_name -> google.fhir.r4.core.Reference
	180,  // 73: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.specimen:type_name -> google.fhir.r4.core.Reference
	180,  // 74: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.result:type_name -> google.fhir.r4.core.Reference
	180,  // 75: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.imaging_study:type_name -> google.fhir.r4.core.Reference
	37,   // 76: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.media:type_name -> google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.Media
	190,  // 77: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.conclusion:type_name -> google.fhir.r4.core.String
	181,  // 78: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.conclusion_code:type_name -> google.fhir.r4.core.CodeableConcept
	188,  // 79: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.presented_form:type_name -> google.fhir.r4.core.Attachment
	171,  // 80: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.id:type_name -> google.fhir.r4.core.Id
	172,  // 81: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.meta:type_name -> google.fhir.r4.core.Meta
	173,  // 82: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.implicit_rules:type_name -> google.fhir.r4.core.Uri
	174,  // 83: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.language:type_name -> google.fhir.r4.core.Code
	175,  // 84: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.text:type_name -> google.fhir.r4.core.Narrative
	176,  // 85: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.contained:type_name -> google.protobuf.Any
	177,  // 86: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 87: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 88: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.identifier:type_name -> google.fhir.r4.core.Identifier
	180,  // 89: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.based_on:type_name -> google.fhir.r4.core.Reference
	180,  // 90: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.part_of:type_name -> google.fhir.r4.core.Reference
	38,   // 91: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.status:type_name -> google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.StatusCode
	181,  // 92: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.category:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 93: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.code:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 94: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.subject:type_name -> google.fhir.r4.core.Reference
	180,  // 95: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.focus:type_name -> google.fhir.r4.core.Reference
	180,  // 96: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.encounter:type_name -> google.fhir.r4.core.Reference
	39,   // 97: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.effective:type_name -> google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.EffectiveX
	189,  // 98: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.issued:type_name -> google.fhir.r4.core.Instant
	180,  // 99: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.performer:type_name -> google.fhir.r4.core.Reference
	40,   // 100: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.value:type_name -> google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.ValueX
	181,  // 101: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.data_absent_reason:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 102: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.interpretation:type_name -> google.fhir.r4.core.CodeableConcept
	182,  // 103: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.note:type_name -> google.fhir.r4.core.Annotation
	181,  // 104: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.body_site:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 105: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.method:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 106: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.specimen:type_name -> google.fhir.r4.core.Reference
	180,  // 107: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.device:type_name -> google.fhir.r4.core.Reference
	41,   // 108: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.reference_range:type_name -> google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.ReferenceRange
	180,  // 109: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.has_member:type_name -> google.fhir.r4.core.Reference
	180,  // 110: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.derived_from:type_name -> google.fhir.r4.core.Reference
	42,   // 111: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.component:type_name -> google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.Component
	171,  // 112: google.fhir.r4.uscore.USCoreEncounterProfile.id:type_name -> google.fhir.r4.core.Id
	172,  // 113: google.fhir.r4.uscore.USCoreEncounterProfile.meta:type_name -> google.fhir.r4.core.Meta
	173,  // 114: google.fhir.r4.uscore.USCoreEncounterProfile.implicit_rules:type_name -> google.fhir.r4.core.Uri
	174,  // 115: google.fhir.r4.uscore.USCoreEncounterProfile.language:type_name -> google.fhir.r4.core.Code
	175,  // 116: google.fhir.r4.uscore.USCoreEncounterProfile.text:type_name -> google.fhir.r4.core.Narrative
	176,  // 117: google.fhir.r4.uscore.USCoreEncounterProfile.contained:type_name -> google.protobuf.Any
	177,  // 118: google.fhir.r4.uscore.USCoreEncounterProfile.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 119: google.fhir.r4.uscore.USCoreEncounterProfile.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 120: google.fhir.r4.uscore.USCoreEncounterProfile.identifier:type_name -> google.fhir.r4.core.Identifier
	44,   // 121: google.fhir.r4.uscore.USCoreEncounterProfile.status:type_name -> google.fhir.r4.uscore.USCoreEncounterProfile.StatusCode
	45,   // 122: google.fhir.r4.uscore.USCoreEncounterProfile.status_history:type_name -> google.fhir.r4.uscore.USCoreEncounterProfile.StatusHistory
	191,  // 123: google.fhir.r4.uscore.USCoreEncounterProfile.class_value:type_name -> google.fhir.r4.core.Coding
	46,   // 124: google.fhir.r4.uscore.USCoreEncounterProfile.class_history:type_name -> google.fhir.r4.uscore.USCoreEncounterProfile.ClassHistory
	181,  // 125: google.fhir.r4.uscore.USCoreEncounterProfile.type:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 126: google.fhir.r4.uscore.USCoreEncounterProfile.service_type:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 127: google.fhir.r4.uscore.USCoreEncounterProfile.priority:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 128: google.fhir.r4.uscore.USCoreEncounterProfile.subject:type_name -> google.fhir.r4.core.Reference
	180,  // 129: google.fhir.r4.uscore.USCoreEncounterProfile.episode_of_care:type_name -> google.fhir.r4.core.Reference
	180,  // 130: google.fhir.r4.uscore.USCoreEncounterProfile.based_on:type_name -> google.fhir.r4.core.Reference
	47,   // 131: google.fhir.r4.uscore.USCoreEncounterProfile.participant:type_name -> google.fhir.r4.uscore.USCoreEncounterProfile.Participant
	180,  // 132: google.fhir.r4.uscore.USCoreEncounterProfile.appointment:type_name -> google.fhir.r4.core.Reference
	192,  // 133: google.fhir.r4.uscore.USCoreEncounterProfile.period:type_name -> google.fhir.r4.core.Period
	193,  // 134: google.fhir.r4.uscore.USCoreEncounterProfile.length:type_name -> google.fhir.r4.core.Duration
	181,  // 135: google.fhir.r4.uscore.USCoreEncounterProfile.reason_code:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 136: google.fhir.r4.uscore.USCoreEncounterProfile.reason_reference:type_name -> google.fhir.r4.core.Reference
	48,   // 137: google.fhir.r4.uscore.USCoreEncounterProfile.diagnosis:type_name -> google.fhir.r4.uscore.USCoreEncounterProfile.Diagnosis
	180,  // 138: google.fhir.r4.uscore.USCoreEncounterProfile.account:type_name -> google.fhir.r4.core.Reference
	49,   // 139: google.fhir.r4.uscore.USCoreEncounterProfile.hospitalization:type_name -> google.fhir.r4.uscore.USCoreEncounterProfile.Hospitalization
	50,   // 140: google.fhir.r4.uscore.USCoreEncounterProfile.location:type_name -> google.fhir.r4.uscore.USCoreEncounterProfile.Location
	180,  // 141: google.fhir.r4.uscore.USCoreEncounterProfile.service_provider:type_name -> google.fhir.r4.core.Reference
	180,  // 142: google.fhir.r4.uscore.USCoreEncounterProfile.part_of:type_name -> google.fhir.r4.core.Reference
	171,  // 143: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.id:type_name -> google.fhir.r4.core.Id
	172,  // 144: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.meta:type_name -> google.fhir.r4.core.Meta
	173,  // 145: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.implicit_rules:type_name -> google.fhir.r4.core.Uri
	174,  // 146: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.language:type_name -> google.fhir.r4.core.Code
	175,  // 147: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.text:type_name -> google.fhir.r4.core.Narrative
	176,  // 148: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.contained:type_name -> google.protobuf.Any
	177,  // 149: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 150: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 151: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.master_identifier:type_name -> google.fhir.r4.core.Identifier
	178,  // 152: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.identifier:type_name -> google.fhir.r4.core.Identifier
	53,   // 153: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.status:type_name -> google.fhir.r4.uscore.USCoreDocumentReferenceProfile.StatusCode
	54,   // 154: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.doc_status:type_name -> google.fhir.r4.uscore.USCoreDocumentReferenceProfile.DocStatusCode
	181,  // 155: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.type:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 156: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.category:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 157: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.subject:type_name -> google.fhir.r4.core.Reference
	189,  // 158: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.date:type_name -> google.fhir.r4.core.Instant
	180,  // 159: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.author:type_name -> google.fhir.r4.core.Reference
	180,  // 160: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.authenticator:type_name -> google.fhir.r4.core.Reference
	180,  // 161: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.custodian:type_name -> google.fhir.r4.core.Reference
	55,   // 162: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.relates_to:type_name -> google.fhir.r4.uscore.USCoreDocumentReferenceProfile.RelatesTo
	190,  // 163: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.description:type_name -> google.fhir.r4.core.String
	181,  // 164: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.security_label:type_name -> google.fhir.r4.core.CodeableConcept
	56,   // 165: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.content:type_name -> google.fhir.r4.uscore.USCoreDocumentReferenceProfile.Content
	57,   // 166: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.context:type_name -> google.fhir.r4.uscore.USCoreDocumentReferenceProfile.Context
	171,  // 167: google.fhir.r4.uscore.USCoreCareTeam.id:type_name -> google.fhir.r4.core.Id
	172,  // 168: google.fhir.r4.uscore.USCoreCareTeam.meta:type_name -> google.fhir.r4.core.Meta
	173,  // 169: google.fhir.r4.uscore.USCoreCareTeam.implicit_rules:type_name -> google.fhir.r4.core.Uri
	174,  // 170: google.fhir.r4.uscore.USCoreCareTeam.language:type_name -> google.fhir.r4.core.Code
	175,  // 171: google.fhir.r4.uscore.USCoreCareTeam.text:type_name -> google.fhir.r4.core.Narrative
	176,  // 172: google.fhir.r4.uscore.USCoreCareTeam.contained:type_name -> google.protobuf.Any
	177,  // 173: google.fhir.r4.uscore.USCoreCareTeam.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 174: google.fhir.r4.uscore.USCoreCareTeam.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 175: google.fhir.r4.uscore.USCoreCareTeam.identifier:type_name -> google.fhir.r4.core.Identifier
	59,   // 176: google.fhir.r4.uscore.USCoreCareTeam.status:type_name -> google.fhir.r4.uscore.USCoreCareTeam.StatusCode
	181,  // 177: google.fhir.r4.uscore.USCoreCareTeam.category:type_name -> google.fhir.r4.core.CodeableConcept
	190,  // 178: google.fhir.r4.uscore.USCoreCareTeam.name:type_name -> google.fhir.r4.core.String
	180,  // 179: google.fhir.r4.uscore.USCoreCareTeam.subject:type_name -> google.fhir.r4.core.Reference
	180,  // 180: google.fhir.r4.uscore.USCoreCareTeam.encounter:type_name -> google.fhir.r4.core.Reference
	192,  // 181: google.fhir.r4.uscore.USCoreCareTeam.period:type_name -> google.fhir.r4.core.Period
	60,   // 182: google.fhir.r4.uscore.USCoreCareTeam.participant:type_name -> google.fhir.r4.uscore.USCoreCareTeam.Participant
	181,  // 183: google.fhir.r4.uscore.USCoreCareTeam.reason_code:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 184: google.fhir.r4.uscore.USCoreCareTeam.reason_reference:type_name -> google.fhir.r4.core.Reference
	180,  // 185: google.fhir.r4.uscore.USCoreCareTeam.managing_organization:type_name -> google.fhir.r4.core.Reference
	185,  // 186: google.fhir.r4.uscore.USCoreCareTeam.telecom:type_name -> google.fhir.r4.core.ContactPoint
	182,  // 187: google.fhir.r4.uscore.USCoreCareTeam.note:type_name -> google.fhir.r4.core.Annotation
	171,  // 188: google.fhir.r4.uscore.USCoreProvenance.id:type_name -> google.fhir.r4.core.Id
	172,  // 189: google.fhir.r4.uscore.USCoreProvenance.meta:type_name -> google.fhir.r4.core.Meta
	173,  // 190: google.fhir.r4.uscore.USCoreProvenance.implicit_rules:type_name -> google.fhir.r4.core.Uri
	174,  // 191: google.fhir.r4.uscore.USCoreProvenance.language:type_name -> google.fhir.r4.core.Code
	175,  // 192: google.fhir.r4.uscore.USCoreProvenance.text:type_name -> google.fhir.r4.core.Narrative
	176,  // 193: google.fhir.r4.uscore.USCoreProvenance.contained:type_name -> google.protobuf.Any
	177,  // 194: google.fhir.r4.uscore.USCoreProvenance.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 195: google.fhir.r4.uscore.USCoreProvenance.modifier_extension:type_name -> google.fhir.r4.core.Extension
	180,  // 196: google.fhir.r4.uscore.USCoreProvenance.target:type_name -> google.fhir.r4.core.Reference
	61,   // 197: google.fhir.r4.uscore.USCoreProvenance.occurred:type_name -> google.fhir.r4.uscore.USCoreProvenance.OccurredX
	189,  // 198: google.fhir.r4.uscore.USCoreProvenance.recorded:type_name -> google.fhir.r4.core.Instant
	173,  // 199: google.fhir.r4.uscore.USCoreProvenance.policy:type_name -> google.fhir.r4.core.Uri
	180,  // 200: google.fhir.r4.uscore.USCoreProvenance.location:type_name -> google.fhir.r4.core.Reference
	181,  // 201: google.fhir.r4.uscore.USCoreProvenance.reason:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 202: google.fhir.r4.uscore.USCoreProvenance.activity:type_name -> google.fhir.r4.core.CodeableConcept
	62,   // 203: google.fhir.r4.uscore.USCoreProvenance.agent:type_name -> google.fhir.r4.uscore.USCoreProvenance.Agent
	63,   // 204: google.fhir.r4.uscore.USCoreProvenance.entity:type_name -> google.fhir.r4.uscore.USCoreProvenance.Entity
	194,  // 205: google.fhir.r4.uscore.USCoreProvenance.signature:type_name -> google.fhir.r4.core.Signature
	171,  // 206: google.fhir.r4.uscore.USCoreImmunizationProfile.id:type_name -> google.fhir.r4.core.Id
	172,  // 207: google.fhir.r4.uscore.USCoreImmunizationProfile.meta:type_name -> google.fhir.r4.core.Meta
	173,  // 208: google.fhir.r4.uscore.USCoreImmunizationProfile.implicit_rules:type_name -> google.fhir.r4.core.Uri
	174,  // 209: google.fhir.r4.uscore.USCoreImmunizationProfile.language:type_name -> google.fhir.r4.core.Code
	175,  // 210: google.fhir.r4.uscore.USCoreImmunizationProfile.text:type_name -> google.fhir.r4.core.Narrative
	176,  // 211: google.fhir.r4.uscore.USCoreImmunizationProfile.contained:type_name -> google.protobuf.Any
	177,  // 212: google.fhir.r4.uscore.USCoreImmunizationProfile.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 213: google.fhir.r4.uscore.USCoreImmunizationProfile.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 214: google.fhir.r4.uscore.USCoreImmunizationProfile.identifier:type_name -> google.fhir.r4.core.Identifier
	65,   // 215: google.fhir.r4.uscore.USCoreImmunizationProfile.status:type_name -> google.fhir.r4.uscore.USCoreImmunizationProfile.StatusCode
	181,  // 216: google.fhir.r4.uscore.USCoreImmunizationProfile.status_reason:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 217: google.fhir.r4.uscore.USCoreImmunizationProfile.vaccine_code:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 218: google.fhir.r4.uscore.USCoreImmunizationProfile.patient:type_name -> google.fhir.r4.core.Reference
	180,  // 219: google.fhir.r4.uscore.USCoreImmunizationProfile.encounter:type_name -> google.fhir.r4.core.Reference
	66,   // 220: google.fhir.r4.uscore.USCoreImmunizationProfile.occurrence:type_name -> google.fhir.r4.uscore.USCoreImmunizationProfile.OccurrenceX
	195,  // 221: google.fhir.r4.uscore.USCoreImmunizationProfile.recorded:type_name -> google.fhir.r4.core.DateTime
	183,  // 222: google.fhir.r4.uscore.USCoreImmunizationProfile.primary_source:type_name -> google.fhir.r4.core.Boolean
	181,  // 223: google.fhir.r4.uscore.USCoreImmunizationProfile.report_origin:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 224: google.fhir.r4.uscore.USCoreImmunizationProfile.location:type_name -> google.fhir.r4.core.Reference
	180,  // 225: google.fhir.r4.uscore.USCoreImmunizationProfile.manufacturer:type_name -> google.fhir.r4.core.Reference
	190,  // 226: google.fhir.r4.uscore.USCoreImmunizationProfile.lot_number:type_name -> google.fhir.r4.core.String
	187,  // 227: google.fhir.r4.uscore.USCoreImmunizationProfile.expiration_date:type_name -> google.fhir.r4.core.Date
	181,  // 228: google.fhir.r4.uscore.USCoreImmunizationProfile.site:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 229: google.fhir.r4.uscore.USCoreImmunizationProfile.route:type_name -> google.fhir.r4.core.CodeableConcept
	196,  // 230: google.fhir.r4.uscore.USCoreImmunizationProfile.dose_quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	67,   // 231: google.fhir.r4.uscore.USCoreImmunizationProfile.performer:type_name -> google.fhir.r4.uscore.USCoreImmunizationProfile.Performer
	182,  // 232: google.fhir.r4.uscore.USCoreImmunizationProfile.note:type_name -> google.fhir.r4.core.Annotation
	181,  // 233: google.fhir.r4.uscore.USCoreImmunizationProfile.reason_code:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 234: google.fhir.r4.uscore.USCoreImmunizationProfile.reason_reference:type_name -> google.fhir.r4.core.Reference
	183,  // 235: google.fhir.r4.uscore.USCoreImmunizationProfile.is_subpotent:type_name -> google.fhir.r4.core.Boolean
	181,  // 236: google.fhir.r4.uscore.USCoreImmunizationProfile.subpotent_reason:type_name -> google.fhir.r4.core.CodeableConcept
	68,   // 237: google.fhir.r4.uscore.USCoreImmunizationProfile.education:type_name -> google.fhir.r4.uscore.USCoreImmunizationProfile.Education
	181,  // 238: google.fhir.r4.uscore.USCoreImmunizationProfile.program_eligibility:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 239: google.fhir.r4.uscore.USCoreImmunizationProfile.funding_source:type_name -> google.fhir.r4.core.CodeableConcept
	69,   // 240: google.fhir.r4.uscore.USCoreImmunizationProfile.reaction:type_name -> google.fhir.r4.uscore.USCoreImmunizationProfile.Reaction
	70,   // 241: google.fhir.r4.uscore.USCoreImmunizationProfile.protocol_applied:type_name -> google.fhir.r4.uscore.USCoreImmunizationProfile.ProtocolApplied
	190,  // 242: google.fhir.r4.uscore.PatientUSCoreBirthSexExtension.id:type_name -> google.fhir.r4.core.String
	177,  // 243: google.fhir.r4.uscore.PatientUSCoreBirthSexExtension.extension:type_name -> google.fhir.r4.core.Extension
	73,   // 244: google.fhir.r4.uscore.PatientUSCoreBirthSexExtension.value_code:type_name -> google.fhir.r4.uscore.PatientUSCoreBirthSexExtension.ValueCode
	171,  // 245: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.id:type_name -> google.fhir.r4.core.Id
	172,  // 246: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.meta:type_name -> google.fhir.r4.core.Meta
	173,  // 247: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.implicit_rules:type_name -> google.fhir.r4.core.Uri
	174,  // 248: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.language:type_name -> google.fhir.r4.core.Code
	175,  // 249: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.text:type_name -> google.fhir.r4.core.Narrative
	176,  // 250: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.contained:type_name -> google.protobuf.Any
	177,  // 251: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 252: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 253: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.identifier:type_name -> google.fhir.r4.core.Identifier
	180,  // 254: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.based_on:type_name -> google.fhir.r4.core.Reference
	74,   // 255: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.status:type_name -> google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.StatusCode
	181,  // 256: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.category:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 257: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.code:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 258: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.subject:type_name -> google.fhir.r4.core.Reference
	180,  // 259: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.encounter:type_name -> google.fhir.r4.core.Reference
	75,   // 260: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.effective:type_name -> google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.EffectiveX
	189,  // 261: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.issued:type_name -> google.fhir.r4.core.Instant
	180,  // 262: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.performer:type_name -> google.fhir.r4.core.Reference
	180,  // 263: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.results_interpreter:type_name -> google.fhir.r4.core.Reference
	180,  // 264: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.specimen:type_name -> google.fhir.r4.core.Reference
	180,  // 265: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.result:type_name -> google.fhir.r4.core.Reference
	180,  // 266: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.imaging_study:type_name -> google.fhir.r4.core.Reference
	76,   // 267: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.media:type_name -> google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.Media
	190,  // 268: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.conclusion:type_name -> google.fhir.r4.core.String
	181,  // 269: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.conclusion_code:type_name -> google.fhir.r4.core.CodeableConcept
	188,  // 270: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.presented_form:type_name -> google.fhir.r4.core.Attachment
	171,  // 271: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.id:type_name -> google.fhir.r4.core.Id
	172,  // 272: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.meta:type_name -> google.fhir.r4.core.Meta
	173,  // 273: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.implicit_rules:type_name -> google.fhir.r4.core.Uri
	174,  // 274: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.language:type_name -> google.fhir.r4.core.Code
	175,  // 275: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.text:type_name -> google.fhir.r4.core.Narrative
	176,  // 276: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.contained:type_name -> google.protobuf.Any
	177,  // 277: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 278: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 279: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.identifier:type_name -> google.fhir.r4.core.Identifier
	180,  // 280: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.based_on:type_name -> google.fhir.r4.core.Reference
	180,  // 281: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.part_of:type_name -> google.fhir.r4.core.Reference
	77,   // 282: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.status:type_name -> google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.StatusCode
	181,  // 283: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.category:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 284: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.code:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 285: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.subject:type_name -> google.fhir.r4.core.Reference
	180,  // 286: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.focus:type_name -> google.fhir.r4.core.Reference
	180,  // 287: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.encounter:type_name -> google.fhir.r4.core.Reference
	78,   // 288: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.effective:type_name -> google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.EffectiveX
	189,  // 289: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.issued:type_name -> google.fhir.r4.core.Instant
	180,  // 290: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.performer:type_name -> google.fhir.r4.core.Reference
	79,   // 291: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.value:type_name -> google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.ValueX
	181,  // 292: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.data_absent_reason:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 293: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.interpretation:type_name -> google.fhir.r4.core.CodeableConcept
	182,  // 294: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.note:type_name -> google.fhir.r4.core.Annotation
	181,  // 295: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.body_site:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 296: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.method:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 297: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.specimen:type_name -> google.fhir.r4.core.Reference
	180,  // 298: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.device:type_name -> google.fhir.r4.core.Reference
	80,   // 299: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.reference_range:type_name -> google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.ReferenceRange
	180,  // 300: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.has_member:type_name -> google.fhir.r4.core.Reference
	180,  // 301: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.derived_from:type_name -> google.fhir.r4.core.Reference
	81,   // 302: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.component:type_name -> google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.Component
	171,  // 303: google.fhir.r4.uscore.USCoreLocation.id:type_name -> google.fhir.r4.core.Id
	172,  // 304: google.fhir.r4.uscore.USCoreLocation.meta:type_name -> google.fhir.r4.core.Meta
	173,  // 305: google.fhir.r4.uscore.USCoreLocation.implicit_rules:type_name -> google.fhir.r4.core.Uri
	174,  // 306: google.fhir.r4.uscore.USCoreLocation.language:type_name -> google.fhir.r4.core.Code
	175,  // 307: google.fhir.r4.uscore.USCoreLocation.text:type_name -> google.fhir.r4.core.Narrative
	176,  // 308: google.fhir.r4.uscore.USCoreLocation.contained:type_name -> google.protobuf.Any
	177,  // 309: google.fhir.r4.uscore.USCoreLocation.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 310: google.fhir.r4.uscore.USCoreLocation.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 311: google.fhir.r4.uscore.USCoreLocation.identifier:type_name -> google.fhir.r4.core.Identifier
	83,   // 312: google.fhir.r4.uscore.USCoreLocation.status:type_name -> google.fhir.r4.uscore.USCoreLocation.StatusCode
	191,  // 313: google.fhir.r4.uscore.USCoreLocation.operational_status:type_name -> google.fhir.r4.core.Coding
	190,  // 314: google.fhir.r4.uscore.USCoreLocation.name:type_name -> google.fhir.r4.core.String
	190,  // 315: google.fhir.r4.uscore.USCoreLocation.alias:type_name -> google.fhir.r4.core.String
	190,  // 316: google.fhir.r4.uscore.USCoreLocation.description:type_name -> google.fhir.r4.core.String
	84,   // 317: google.fhir.r4.uscore.USCoreLocation.mode:type_name -> google.fhir.r4.uscore.USCoreLocation.ModeCode
	181,  // 318: google.fhir.r4.uscore.USCoreLocation.type:type_name -> google.fhir.r4.core.CodeableConcept
	185,  // 319: google.fhir.r4.uscore.USCoreLocation.telecom:type_name -> google.fhir.r4.core.ContactPoint
	186,  // 320: google.fhir.r4.uscore.USCoreLocation.address:type_name -> google.fhir.r4.core.Address
	181,  // 321: google.fhir.r4.uscore.USCoreLocation.physical_type:type_name -> google.fhir.r4.core.CodeableConcept
	85,   // 322: google.fhir.r4.uscore.USCoreLocation.position:type_name -> google.fhir.r4.uscore.USCoreLocation.Position
	180,  // 323: google.fhir.r4.uscore.USCoreLocation.managing_organization:type_name -> google.fhir.r4.core.Reference
	180,  // 324: google.fhir.r4.uscore.USCoreLocation.part_of:type_name -> google.fhir.r4.core.Reference
	86,   // 325: google.fhir.r4.uscore.USCoreLocation.hours_of_operation:type_name -> google.fhir.r4.uscore.USCoreLocation.HoursOfOperation
	190,  // 326: google.fhir.r4.uscore.USCoreLocation.availability_exceptions:type_name -> google.fhir.r4.core.String
	180,  // 327: google.fhir.r4.uscore.USCoreLocation.endpoint:type_name -> google.fhir.r4.core.Reference
	171,  // 328: google.fhir.r4.uscore.UsCoreCondition.id:type_name -> google.fhir.r4.core.Id
	172,  // 329: google.fhir.r4.uscore.UsCoreCondition.meta:type_name -> google.fhir.r4.core.Meta
	173,  // 330: google.fhir.r4.uscore.UsCoreCondition.implicit_rules:type_name -> google.fhir.r4.core.Uri
	174,  // 331: google.fhir.r4.uscore.UsCoreCondition.language:type_name -> google.fhir.r4.core.Code
	175,  // 332: google.fhir.r4.uscore.UsCoreCondition.text:type_name -> google.fhir.r4.core.Narrative
	176,  // 333: google.fhir.r4.uscore.UsCoreCondition.contained:type_name -> google.protobuf.Any
	177,  // 334: google.fhir.r4.uscore.UsCoreCondition.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 335: google.fhir.r4.uscore.UsCoreCondition.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 336: google.fhir.r4.uscore.UsCoreCondition.identifier:type_name -> google.fhir.r4.core.Identifier
	181,  // 337: google.fhir.r4.uscore.UsCoreCondition.clinical_status:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 338: google.fhir.r4.uscore.UsCoreCondition.verification_status:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 339: google.fhir.r4.uscore.UsCoreCondition.category:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 340: google.fhir.r4.uscore.UsCoreCondition.severity:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 341: google.fhir.r4.uscore.UsCoreCondition.code:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 342: google.fhir.r4.uscore.UsCoreCondition.body_site:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 343: google.fhir.r4.uscore.UsCoreCondition.subject:type_name -> google.fhir.r4.core.Reference
	180,  // 344: google.fhir.r4.uscore.UsCoreCondition.encounter:type_name -> google.fhir.r4.core.Reference
	88,   // 345: google.fhir.r4.uscore.UsCoreCondition.onset:type_name -> google.fhir.r4.uscore.UsCoreCondition.OnsetX
	89,   // 346: google.fhir.r4.uscore.UsCoreCondition.abatement:type_name -> google.fhir.r4.uscore.UsCoreCondition.AbatementX
	195,  // 347: google.fhir.r4.uscore.UsCoreCondition.recorded_date:type_name -> google.fhir.r4.core.DateTime
	180,  // 348: google.fhir.r4.uscore.UsCoreCondition.recorder:type_name -> google.fhir.r4.core.Reference
	180,  // 349: google.fhir.r4.uscore.UsCoreCondition.asserter:type_name -> google.fhir.r4.core.Reference
	90,   // 350: google.fhir.r4.uscore.UsCoreCondition.stage:type_name -> google.fhir.r4.uscore.UsCoreCondition.Stage
	91,   // 351: google.fhir.r4.uscore.UsCoreCondition.evidence:type_name -> google.fhir.r4.uscore.UsCoreCondition.Evidence
	182,  // 352: google.fhir.r4.uscore.UsCoreCondition.note:type_name -> google.fhir.r4.core.Annotation
	171,  // 353: google.fhir.r4.uscore.USCorePulseOximetryProfile.id:type_name -> google.fhir.r4.core.Id
	172,  // 354: google.fhir.r4.uscore.USCorePulseOximetryProfile.meta:type_name -> google.fhir.r4.core.Meta
	173,  // 355: google.fhir.r4.uscore.USCorePulseOximetryProfile.implicit_rules:type_name -> google.fhir.r4.core.Uri
	174,  // 356: google.fhir.r4.uscore.USCorePulseOximetryProfile.language:type_name -> google.fhir.r4.core.Code
	175,  // 357: google.fhir.r4.uscore.USCorePulseOximetryProfile.text:type_name -> google.fhir.r4.core.Narrative
	176,  // 358: google.fhir.r4.uscore.USCorePulseOximetryProfile.contained:type_name -> google.protobuf.Any
	177,  // 359: google.fhir.r4.uscore.USCorePulseOximetryProfile.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 360: google.fhir.r4.uscore.USCorePulseOximetryProfile.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 361: google.fhir.r4.uscore.USCorePulseOximetryProfile.identifier:type_name -> google.fhir.r4.core.Identifier
	180,  // 362: google.fhir.r4.uscore.USCorePulseOximetryProfile.based_on:type_name -> google.fhir.r4.core.Reference
	180,  // 363: google.fhir.r4.uscore.USCorePulseOximetryProfile.part_of:type_name -> google.fhir.r4.core.Reference
	92,   // 364: google.fhir.r4.uscore.USCorePulseOximetryProfile.status:type_name -> google.fhir.r4.uscore.USCorePulseOximetryProfile.StatusCode
	181,  // 365: google.fhir.r4.uscore.USCorePulseOximetryProfile.category:type_name -> google.fhir.r4.core.CodeableConcept
	93,   // 366: google.fhir.r4.uscore.USCorePulseOximetryProfile.code:type_name -> google.fhir.r4.uscore.USCorePulseOximetryProfile.CodeableConceptForCode
	180,  // 367: google.fhir.r4.uscore.USCorePulseOximetryProfile.subject:type_name -> google.fhir.r4.core.Reference
	180,  // 368: google.fhir.r4.uscore.USCorePulseOximetryProfile.focus:type_name -> google.fhir.r4.core.Reference
	180,  // 369: google.fhir.r4.uscore.USCorePulseOximetryProfile.encounter:type_name -> google.fhir.r4.core.Reference
	94,   // 370: google.fhir.r4.uscore.USCorePulseOximetryProfile.effective:type_name -> google.fhir.r4.uscore.USCorePulseOximetryProfile.EffectiveX
	189,  // 371: google.fhir.r4.uscore.USCorePulseOximetryProfile.issued:type_name -> google.fhir.r4.core.Instant
	180,  // 372: google.fhir.r4.uscore.USCorePulseOximetryProfile.performer:type_name -> google.fhir.r4.core.Reference
	95,   // 373: google.fhir.r4.uscore.USCorePulseOximetryProfile.value:type_name -> google.fhir.r4.uscore.USCorePulseOximetryProfile.ValueX
	181,  // 374: google.fhir.r4.uscore.USCorePulseOximetryProfile.data_absent_reason:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 375: google.fhir.r4.uscore.USCorePulseOximetryProfile.interpretation:type_name -> google.fhir.r4.core.CodeableConcept
	182,  // 376: google.fhir.r4.uscore.USCorePulseOximetryProfile.note:type_name -> google.fhir.r4.core.Annotation
	181,  // 377: google.fhir.r4.uscore.USCorePulseOximetryProfile.body_site:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 378: google.fhir.r4.uscore.USCorePulseOximetryProfile.method:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 379: google.fhir.r4.uscore.USCorePulseOximetryProfile.specimen:type_name -> google.fhir.r4.core.Reference
	180,  // 380: google.fhir.r4.uscore.USCorePulseOximetryProfile.device:type_name -> google.fhir.r4.core.Reference
	96,   // 381: google.fhir.r4.uscore.USCorePulseOximetryProfile.reference_range:type_name -> google.fhir.r4.uscore.USCorePulseOximetryProfile.ReferenceRange
	180,  // 382: google.fhir.r4.uscore.USCorePulseOximetryProfile.has_member:type_name -> google.fhir.r4.core.Reference
	180,  // 383: google.fhir.r4.uscore.USCorePulseOximetryProfile.derived_from:type_name -> google.fhir.r4.core.Reference
	97,   // 384: google.fhir.r4.uscore.USCorePulseOximetryProfile.component:type_name -> google.fhir.r4.uscore.USCorePulseOximetryProfile.Component
	171,  // 385: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.id:type_name -> google.fhir.r4.core.Id
	172,  // 386: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.meta:type_name -> google.fhir.r4.core.Meta
	173,  // 387: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.implicit_rules:type_name -> google.fhir.r4.core.Uri
	174,  // 388: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.language:type_name -> google.fhir.r4.core.Code
	175,  // 389: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.text:type_name -> google.fhir.r4.core.Narrative
	176,  // 390: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.contained:type_name -> google.protobuf.Any
	177,  // 391: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 392: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 393: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.identifier:type_name -> google.fhir.r4.core.Identifier
	180,  // 394: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.definition:type_name -> google.fhir.r4.core.Reference
	99,   // 395: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.udi_carrier:type_name -> google.fhir.r4.uscore.USCoreImplantableDeviceProfile.UdiCarrier
	100,  // 396: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.status:type_name -> google.fhir.r4.uscore.USCoreImplantableDeviceProfile.StatusCode
	181,  // 397: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.status_reason:type_name -> google.fhir.r4.core.CodeableConcept
	190,  // 398: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.distinct_identifier:type_name -> google.fhir.r4.core.String
	190,  // 399: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.manufacturer:type_name -> google.fhir.r4.core.String
	195,  // 400: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.manufacture_date:type_name -> google.fhir.r4.core.DateTime
	195,  // 401: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.expiration_date:type_name -> google.fhir.r4.core.DateTime
	190,  // 402: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.lot_number:type_name -> google.fhir.r4.core.String
	190,  // 403: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.serial_number:type_name -> google.fhir.r4.core.String
	101,  // 404: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.device_name:type_name -> google.fhir.r4.uscore.USCoreImplantableDeviceProfile.DeviceName
	190,  // 405: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.model_number:type_name -> google.fhir.r4.core.String
	190,  // 406: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.part_number:type_name -> google.fhir.r4.core.String
	181,  // 407: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.type:type_name -> google.fhir.r4.core.CodeableConcept
	102,  // 408: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.specialization:type_name -> google.fhir.r4.uscore.USCoreImplantableDeviceProfile.Specialization
	103,  // 409: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.version:type_name -> google.fhir.r4.uscore.USCoreImplantableDeviceProfile.Version
	104,  // 410: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.property:type_name -> google.fhir.r4.uscore.USCoreImplantableDeviceProfile.Property
	180,  // 411: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.patient:type_name -> google.fhir.r4.core.Reference
	180,  // 412: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.owner:type_name -> google.fhir.r4.core.Reference
	185,  // 413: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.contact:type_name -> google.fhir.r4.core.ContactPoint
	180,  // 414: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.location:type_name -> google.fhir.r4.core.Reference
	173,  // 415: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.url:type_name -> google.fhir.r4.core.Uri
	182,  // 416: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.note:type_name -> google.fhir.r4.core.Annotation
	181,  // 417: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.safety:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 418: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.parent:type_name -> google.fhir.r4.core.Reference
	171,  // 419: google.fhir.r4.uscore.USCoreMedicationRequestProfile.id:type_name -> google.fhir.r4.core.Id
	172,  // 420: google.fhir.r4.uscore.USCoreMedicationRequestProfile.meta:type_name -> google.fhir.r4.core.Meta
	173,  // 421: google.fhir.r4.uscore.USCoreMedicationRequestProfile.implicit_rules:type_name -> google.fhir.r4.core.Uri
	174,  // 422: google.fhir.r4.uscore.USCoreMedicationRequestProfile.language:type_name -> google.fhir.r4.core.Code
	175,  // 423: google.fhir.r4.uscore.USCoreMedicationRequestProfile.text:type_name -> google.fhir.r4.core.Narrative
	176,  // 424: google.fhir.r4.uscore.USCoreMedicationRequestProfile.contained:type_name -> google.protobuf.Any
	177,  // 425: google.fhir.r4.uscore.USCoreMedicationRequestProfile.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 426: google.fhir.r4.uscore.USCoreMedicationRequestProfile.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 427: google.fhir.r4.uscore.USCoreMedicationRequestProfile.identifier:type_name -> google.fhir.r4.core.Identifier
	107,  // 428: google.fhir.r4.uscore.USCoreMedicationRequestProfile.status:type_name -> google.fhir.r4.uscore.USCoreMedicationRequestProfile.StatusCode
	181,  // 429: google.fhir.r4.uscore.USCoreMedicationRequestProfile.status_reason:type_name -> google.fhir.r4.core.CodeableConcept
	108,  // 430: google.fhir.r4.uscore.USCoreMedicationRequestProfile.intent:type_name -> google.fhir.r4.uscore.USCoreMedicationRequestProfile.IntentCode
	181,  // 431: google.fhir.r4.uscore.USCoreMedicationRequestProfile.category:type_name -> google.fhir.r4.core.CodeableConcept
	109,  // 432: google.fhir.r4.uscore.USCoreMedicationRequestProfile.priority:type_name -> google.fhir.r4.uscore.USCoreMedicationRequestProfile.PriorityCode
	183,  // 433: google.fhir.r4.uscore.USCoreMedicationRequestProfile.do_not_perform:type_name -> google.fhir.r4.core.Boolean
	110,  // 434: google.fhir.r4.uscore.USCoreMedicationRequestProfile.reported:type_name -> google.fhir.r4.uscore.USCoreMedicationRequestProfile.ReportedX
	111,  // 435: google.fhir.r4.uscore.USCoreMedicationRequestProfile.medication:type_name -> google.fhir.r4.uscore.USCoreMedicationRequestProfile.MedicationX
	180,  // 436: google.fhir.r4.uscore.USCoreMedicationRequestProfile.subject:type_name -> google.fhir.r4.core.Reference
	180,  // 437: google.fhir.r4.uscore.USCoreMedicationRequestProfile.encounter:type_name -> google.fhir.r4.core.Reference
	180,  // 438: google.fhir.r4.uscore.USCoreMedicationRequestProfile.supporting_information:type_name -> google.fhir.r4.core.Reference
	195,  // 439: google.fhir.r4.uscore.USCoreMedicationRequestProfile.authored_on:type_name -> google.fhir.r4.core.DateTime
	180,  // 440: google.fhir.r4.uscore.USCoreMedicationRequestProfile.requester:type_name -> google.fhir.r4.core.Reference
	180,  // 441: google.fhir.r4.uscore.USCoreMedicationRequestProfile.performer:type_name -> google.fhir.r4.core.Reference
	181,  // 442: google.fhir.r4.uscore.USCoreMedicationRequestProfile.performer_type:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 443: google.fhir.r4.uscore.USCoreMedicationRequestProfile.recorder:type_name -> google.fhir.r4.core.Reference
	181,  // 444: google.fhir.r4.uscore.USCoreMedicationRequestProfile.reason_code:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 445: google.fhir.r4.uscore.USCoreMedicationRequestProfile.reason_reference:type_name -> google.fhir.r4.core.Reference
	179,  // 446: google.fhir.r4.uscore.USCoreMedicationRequestProfile.instantiates_canonical:type_name -> google.fhir.r4.core.Canonical
	173,  // 447: google.fhir.r4.uscore.USCoreMedicationRequestProfile.instantiates_uri:type_name -> google.fhir.r4.core.Uri
	180,  // 448: google.fhir.r4.uscore.USCoreMedicationRequestProfile.based_on:type_name -> google.fhir.r4.core.Reference
	178,  // 449: google.fhir.r4.uscore.USCoreMedicationRequestProfile.group_identifier:type_name -> google.fhir.r4.core.Identifier
	181,  // 450: google.fhir.r4.uscore.USCoreMedicationRequestProfile.course_of_therapy_type:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 451: google.fhir.r4.uscore.USCoreMedicationRequestProfile.insurance:type_name -> google.fhir.r4.core.Reference
	182,  // 452: google.fhir.r4.uscore.USCoreMedicationRequestProfile.note:type_name -> google.fhir.r4.core.Annotation
	197,  // 453: google.fhir.r4.uscore.USCoreMedicationRequestProfile.dosage_instruction:type_name -> google.fhir.r4.core.Dosage
	112,  // 454: google.fhir.r4.uscore.USCoreMedicationRequestProfile.dispense_request:type_name -> google.fhir.r4.uscore.USCoreMedicationRequestProfile.DispenseRequest
	113,  // 455: google.fhir.r4.uscore.USCoreMedicationRequestProfile.substitution:type_name -> google.fhir.r4.uscore.USCoreMedicationRequestProfile.Substitution
	180,  // 456: google.fhir.r4.uscore.USCoreMedicationRequestProfile.prior_prescription:type_name -> google.fhir.r4.core.Reference
	180,  // 457: google.fhir.r4.uscore.USCoreMedicationRequestProfile.detected_issue:type_name -> google.fhir.r4.core.Reference
	180,  // 458: google.fhir.r4.uscore.USCoreMedicationRequestProfile.event_history:type_name -> google.fhir.r4.core.Reference
	171,  // 459: google.fhir.r4.uscore.USCoreMedicationProfile.id:type_name -> google.fhir.r4.core.Id
	172,  // 460: google.fhir.r4.uscore.USCoreMedicationProfile.meta:type_name -> google.fhir.r4.core.Meta
	173,  // 461: google.fhir.r4.uscore.USCoreMedicationProfile.implicit_rules:type_name -> google.fhir.r4.core.Uri
	174,  // 462: google.fhir.r4.uscore.USCoreMedicationProfile.language:type_name -> google.fhir.r4.core.Code
	175,  // 463: google.fhir.r4.uscore.USCoreMedicationProfile.text:type_name -> google.fhir.r4.core.Narrative
	176,  // 464: google.fhir.r4.uscore.USCoreMedicationProfile.contained:type_name -> google.protobuf.Any
	177,  // 465: google.fhir.r4.uscore.USCoreMedicationProfile.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 466: google.fhir.r4.uscore.USCoreMedicationProfile.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 467: google.fhir.r4.uscore.USCoreMedicationProfile.identifier:type_name -> google.fhir.r4.core.Identifier
	181,  // 468: google.fhir.r4.uscore.USCoreMedicationProfile.code:type_name -> google.fhir.r4.core.CodeableConcept
	116,  // 469: google.fhir.r4.uscore.USCoreMedicationProfile.status:type_name -> google.fhir.r4.uscore.USCoreMedicationProfile.StatusCode
	180,  // 470: google.fhir.r4.uscore.USCoreMedicationProfile.manufacturer:type_name -> google.fhir.r4.core.Reference
	181,  // 471: google.fhir.r4.uscore.USCoreMedicationProfile.form:type_name -> google.fhir.r4.core.CodeableConcept
	198,  // 472: google.fhir.r4.uscore.USCoreMedicationProfile.amount:type_name -> google.fhir.r4.core.Ratio
	117,  // 473: google.fhir.r4.uscore.USCoreMedicationProfile.ingredient:type_name -> google.fhir.r4.uscore.USCoreMedicationProfile.Ingredient
	118,  // 474: google.fhir.r4.uscore.USCoreMedicationProfile.batch:type_name -> google.fhir.r4.uscore.USCoreMedicationProfile.Batch
	171,  // 475: google.fhir.r4.uscore.USCoreGoalProfile.id:type_name -> google.fhir.r4.core.Id
	172,  // 476: google.fhir.r4.uscore.USCoreGoalProfile.meta:type_name -> google.fhir.r4.core.Meta
	173,  // 477: google.fhir.r4.uscore.USCoreGoalProfile.implicit_rules:type_name -> google.fhir.r4.core.Uri
	174,  // 478: google.fhir.r4.uscore.USCoreGoalProfile.language:type_name -> google.fhir.r4.core.Code
	175,  // 479: google.fhir.r4.uscore.USCoreGoalProfile.text:type_name -> google.fhir.r4.core.Narrative
	176,  // 480: google.fhir.r4.uscore.USCoreGoalProfile.contained:type_name -> google.protobuf.Any
	177,  // 481: google.fhir.r4.uscore.USCoreGoalProfile.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 482: google.fhir.r4.uscore.USCoreGoalProfile.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 483: google.fhir.r4.uscore.USCoreGoalProfile.identifier:type_name -> google.fhir.r4.core.Identifier
	120,  // 484: google.fhir.r4.uscore.USCoreGoalProfile.lifecycle_status:type_name -> google.fhir.r4.uscore.USCoreGoalProfile.LifecycleStatusCode
	181,  // 485: google.fhir.r4.uscore.USCoreGoalProfile.achievement_status:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 486: google.fhir.r4.uscore.USCoreGoalProfile.category:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 487: google.fhir.r4.uscore.USCoreGoalProfile.priority:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 488: google.fhir.r4.uscore.USCoreGoalProfile.description:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 489: google.fhir.r4.uscore.USCoreGoalProfile.subject:type_name -> google.fhir.r4.core.Reference
	121,  // 490: google.fhir.r4.uscore.USCoreGoalProfile.start:type_name -> google.fhir.r4.uscore.USCoreGoalProfile.StartX
	122,  // 491: google.fhir.r4.uscore.USCoreGoalProfile.target:type_name -> google.fhir.r4.uscore.USCoreGoalProfile.Target
	187,  // 492: google.fhir.r4.uscore.USCoreGoalProfile.status_date:type_name -> google.fhir.r4.core.Date
	190,  // 493: google.fhir.r4.uscore.USCoreGoalProfile.status_reason:type_name -> google.fhir.r4.core.String
	180,  // 494: google.fhir.r4.uscore.USCoreGoalProfile.expressed_by:type_name -> google.fhir.r4.core.Reference
	180,  // 495: google.fhir.r4.uscore.USCoreGoalProfile.addresses:type_name -> google.fhir.r4.core.Reference
	182,  // 496: google.fhir.r4.uscore.USCoreGoalProfile.note:type_name -> google.fhir.r4.core.Annotation
	181,  // 497: google.fhir.r4.uscore.USCoreGoalProfile.outcome_code:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 498: google.fhir.r4.uscore.USCoreGoalProfile.outcome_reference:type_name -> google.fhir.r4.core.Reference
	190,  // 499: google.fhir.r4.uscore.PatientUSCoreRaceExtension.id:type_name -> google.fhir.r4.core.String
	177,  // 500: google.fhir.r4.uscore.PatientUSCoreRaceExtension.extension:type_name -> google.fhir.r4.core.Extension
	125,  // 501: google.fhir.r4.uscore.PatientUSCoreRaceExtension.omb_category:type_name -> google.fhir.r4.uscore.PatientUSCoreRaceExtension.OmbCategoryCoding
	126,  // 502: google.fhir.r4.uscore.PatientUSCoreRaceExtension.detailed:type_name -> google.fhir.r4.uscore.PatientUSCoreRaceExtension.DetailedCoding
	190,  // 503: google.fhir.r4.uscore.PatientUSCoreRaceExtension.text:type_name -> google.fhir.r4.core.String
	171,  // 504: google.fhir.r4.uscore.USCorePractitionerRoleProfile.id:type_name -> google.fhir.r4.core.Id
	172,  // 505: google.fhir.r4.uscore.USCorePractitionerRoleProfile.meta:type_name -> google.fhir.r4.core.Meta
	173,  // 506: google.fhir.r4.uscore.USCorePractitionerRoleProfile.implicit_rules:type_name -> google.fhir.r4.core.Uri
	174,  // 507: google.fhir.r4.uscore.USCorePractitionerRoleProfile.language:type_name -> google.fhir.r4.core.Code
	175,  // 508: google.fhir.r4.uscore.USCorePractitionerRoleProfile.text:type_name -> google.fhir.r4.core.Narrative
	176,  // 509: google.fhir.r4.uscore.USCorePractitionerRoleProfile.contained:type_name -> google.protobuf.Any
	177,  // 510: google.fhir.r4.uscore.USCorePractitionerRoleProfile.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 511: google.fhir.r4.uscore.USCorePractitionerRoleProfile.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 512: google.fhir.r4.uscore.USCorePractitionerRoleProfile.identifier:type_name -> google.fhir.r4.core.Identifier
	183,  // 513: google.fhir.r4.uscore.USCorePractitionerRoleProfile.active:type_name -> google.fhir.r4.core.Boolean
	192,  // 514: google.fhir.r4.uscore.USCorePractitionerRoleProfile.period:type_name -> google.fhir.r4.core.Period
	180,  // 515: google.fhir.r4.uscore.USCorePractitionerRoleProfile.practitioner:type_name -> google.fhir.r4.core.Reference
	180,  // 516: google.fhir.r4.uscore.USCorePractitionerRoleProfile.organization:type_name -> google.fhir.r4.core.Reference
	181,  // 517: google.fhir.r4.uscore.USCorePractitionerRoleProfile.code:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 518: google.fhir.r4.uscore.USCorePractitionerRoleProfile.specialty:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 519: google.fhir.r4.uscore.USCorePractitionerRoleProfile.location:type_name -> google.fhir.r4.core.Reference
	180,  // 520: google.fhir.r4.uscore.USCorePractitionerRoleProfile.healthcare_service:type_name -> google.fhir.r4.core.Reference
	185,  // 521: google.fhir.r4.uscore.USCorePractitionerRoleProfile.telecom:type_name -> google.fhir.r4.core.ContactPoint
	129,  // 522: google.fhir.r4.uscore.USCorePractitionerRoleProfile.available_time:type_name -> google.fhir.r4.uscore.USCorePractitionerRoleProfile.AvailableTime
	130,  // 523: google.fhir.r4.uscore.USCorePractitionerRoleProfile.not_available:type_name -> google.fhir.r4.uscore.USCorePractitionerRoleProfile.NotAvailable
	190,  // 524: google.fhir.r4.uscore.USCorePractitionerRoleProfile.availability_exceptions:type_name -> google.fhir.r4.core.String
	180,  // 525: google.fhir.r4.uscore.USCorePractitionerRoleProfile.endpoint:type_name -> google.fhir.r4.core.Reference
	171,  // 526: google.fhir.r4.uscore.USCoreAllergyIntolerance.id:type_name -> google.fhir.r4.core.Id
	172,  // 527: google.fhir.r4.uscore.USCoreAllergyIntolerance.meta:type_name -> google.fhir.r4.core.Meta
	173,  // 528: google.fhir.r4.uscore.USCoreAllergyIntolerance.implicit_rules:type_name -> google.fhir.r4.core.Uri
	174,  // 529: google.fhir.r4.uscore.USCoreAllergyIntolerance.language:type_name -> google.fhir.r4.core.Code
	175,  // 530: google.fhir.r4.uscore.USCoreAllergyIntolerance.text:type_name -> google.fhir.r4.core.Narrative
	176,  // 531: google.fhir.r4.uscore.USCoreAllergyIntolerance.contained:type_name -> google.protobuf.Any
	177,  // 532: google.fhir.r4.uscore.USCoreAllergyIntolerance.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 533: google.fhir.r4.uscore.USCoreAllergyIntolerance.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 534: google.fhir.r4.uscore.USCoreAllergyIntolerance.identifier:type_name -> google.fhir.r4.core.Identifier
	181,  // 535: google.fhir.r4.uscore.USCoreAllergyIntolerance.clinical_status:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 536: google.fhir.r4.uscore.USCoreAllergyIntolerance.verification_status:type_name -> google.fhir.r4.core.CodeableConcept
	132,  // 537: google.fhir.r4.uscore.USCoreAllergyIntolerance.type:type_name -> google.fhir.r4.uscore.USCoreAllergyIntolerance.TypeCode
	133,  // 538: google.fhir.r4.uscore.USCoreAllergyIntolerance.category:type_name -> google.fhir.r4.uscore.USCoreAllergyIntolerance.CategoryCode
	134,  // 539: google.fhir.r4.uscore.USCoreAllergyIntolerance.criticality:type_name -> google.fhir.r4.uscore.USCoreAllergyIntolerance.CriticalityCode
	181,  // 540: google.fhir.r4.uscore.USCoreAllergyIntolerance.code:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 541: google.fhir.r4.uscore.USCoreAllergyIntolerance.patient:type_name -> google.fhir.r4.core.Reference
	180,  // 542: google.fhir.r4.uscore.USCoreAllergyIntolerance.encounter:type_name -> google.fhir.r4.core.Reference
	135,  // 543: google.fhir.r4.uscore.USCoreAllergyIntolerance.onset:type_name -> google.fhir.r4.uscore.USCoreAllergyIntolerance.OnsetX
	195,  // 544: google.fhir.r4.uscore.USCoreAllergyIntolerance.recorded_date:type_name -> google.fhir.r4.core.DateTime
	180,  // 545: google.fhir.r4.uscore.USCoreAllergyIntolerance.recorder:type_name -> google.fhir.r4.core.Reference
	180,  // 546: google.fhir.r4.uscore.USCoreAllergyIntolerance.asserter:type_name -> google.fhir.r4.core.Reference
	195,  // 547: google.fhir.r4.uscore.USCoreAllergyIntolerance.last_occurrence:type_name -> google.fhir.r4.core.DateTime
	182,  // 548: google.fhir.r4.uscore.USCoreAllergyIntolerance.note:type_name -> google.fhir.r4.core.Annotation
	136,  // 549: google.fhir.r4.uscore.USCoreAllergyIntolerance.reaction:type_name -> google.fhir.r4.uscore.USCoreAllergyIntolerance.Reaction
	171,  // 550: google.fhir.r4.uscore.USCoreCarePlanProfile.id:type_name -> google.fhir.r4.core.Id
	172,  // 551: google.fhir.r4.uscore.USCoreCarePlanProfile.meta:type_name -> google.fhir.r4.core.Meta
	173,  // 552: google.fhir.r4.uscore.USCoreCarePlanProfile.implicit_rules:type_name -> google.fhir.r4.core.Uri
	174,  // 553: google.fhir.r4.uscore.USCoreCarePlanProfile.language:type_name -> google.fhir.r4.core.Code
	175,  // 554: google.fhir.r4.uscore.USCoreCarePlanProfile.text:type_name -> google.fhir.r4.core.Narrative
	176,  // 555: google.fhir.r4.uscore.USCoreCarePlanProfile.contained:type_name -> google.protobuf.Any
	177,  // 556: google.fhir.r4.uscore.USCoreCarePlanProfile.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 557: google.fhir.r4.uscore.USCoreCarePlanProfile.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 558: google.fhir.r4.uscore.USCoreCarePlanProfile.identifier:type_name -> google.fhir.r4.core.Identifier
	179,  // 559: google.fhir.r4.uscore.USCoreCarePlanProfile.instantiates_canonical:type_name -> google.fhir.r4.core.Canonical
	173,  // 560: google.fhir.r4.uscore.USCoreCarePlanProfile.instantiates_uri:type_name -> google.fhir.r4.core.Uri
	180,  // 561: google.fhir.r4.uscore.USCoreCarePlanProfile.based_on:type_name -> google.fhir.r4.core.Reference
	180,  // 562: google.fhir.r4.uscore.USCoreCarePlanProfile.replaces:type_name -> google.fhir.r4.core.Reference
	180,  // 563: google.fhir.r4.uscore.USCoreCarePlanProfile.part_of:type_name -> google.fhir.r4.core.Reference
	138,  // 564: google.fhir.r4.uscore.USCoreCarePlanProfile.status:type_name -> google.fhir.r4.uscore.USCoreCarePlanProfile.StatusCode
	139,  // 565: google.fhir.r4.uscore.USCoreCarePlanProfile.intent:type_name -> google.fhir.r4.uscore.USCoreCarePlanProfile.IntentCode
	181,  // 566: google.fhir.r4.uscore.USCoreCarePlanProfile.category:type_name -> google.fhir.r4.core.CodeableConcept
	190,  // 567: google.fhir.r4.uscore.USCoreCarePlanProfile.title:type_name -> google.fhir.r4.core.String
	190,  // 568: google.fhir.r4.uscore.USCoreCarePlanProfile.description:type_name -> google.fhir.r4.core.String
	180,  // 569: google.fhir.r4.uscore.USCoreCarePlanProfile.subject:type_name -> google.fhir.r4.core.Reference
	180,  // 570: google.fhir.r4.uscore.USCoreCarePlanProfile.encounter:type_name -> google.fhir.r4.core.Reference
	192,  // 571: google.fhir.r4.uscore.USCoreCarePlanProfile.period:type_name -> google.fhir.r4.core.Period
	195,  // 572: google.fhir.r4.uscore.USCoreCarePlanProfile.created:type_name -> google.fhir.r4.core.DateTime
	180,  // 573: google.fhir.r4.uscore.USCoreCarePlanProfile.author:type_name -> google.fhir.r4.core.Reference
	180,  // 574: google.fhir.r4.uscore.USCoreCarePlanProfile.contributor:type_name -> google.fhir.r4.core.Reference
	180,  // 575: google.fhir.r4.uscore.USCoreCarePlanProfile.care_team:type_name -> google.fhir.r4.core.Reference
	180,  // 576: google.fhir.r4.uscore.USCoreCarePlanProfile.addresses:type_name -> google.fhir.r4.core.Reference
	180,  // 577: google.fhir.r4.uscore.USCoreCarePlanProfile.supporting_info:type_name -> google.fhir.r4.core.Reference
	180,  // 578: google.fhir.r4.uscore.USCoreCarePlanProfile.goal:type_name -> google.fhir.r4.core.Reference
	140,  // 579: google.fhir.r4.uscore.USCoreCarePlanProfile.activity:type_name -> google.fhir.r4.uscore.USCoreCarePlanProfile.Activity
	182,  // 580: google.fhir.r4.uscore.USCoreCarePlanProfile.note:type_name -> google.fhir.r4.core.Annotation
	171,  // 581: google.fhir.r4.uscore.USCorePatientProfile.id:type_name -> google.fhir.r4.core.Id
	172,  // 582: google.fhir.r4.uscore.USCorePatientProfile.meta:type_name -> google.fhir.r4.core.Meta
	173,  // 583: google.fhir.r4.uscore.USCorePatientProfile.implicit_rules:type_name -> google.fhir.r4.core.Uri
	174,  // 584: google.fhir.r4.uscore.USCorePatientProfile.language:type_name -> google.fhir.r4.core.Code
	175,  // 585: google.fhir.r4.uscore.USCorePatientProfile.text:type_name -> google.fhir.r4.core.Narrative
	176,  // 586: google.fhir.r4.uscore.USCorePatientProfile.contained:type_name -> google.protobuf.Any
	177,  // 587: google.fhir.r4.uscore.USCorePatientProfile.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 588: google.fhir.r4.uscore.USCorePatientProfile.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 589: google.fhir.r4.uscore.USCorePatientProfile.identifier:type_name -> google.fhir.r4.core.Identifier
	183,  // 590: google.fhir.r4.uscore.USCorePatientProfile.active:type_name -> google.fhir.r4.core.Boolean
	184,  // 591: google.fhir.r4.uscore.USCorePatientProfile.name:type_name -> google.fhir.r4.core.HumanName
	185,  // 592: google.fhir.r4.uscore.USCorePatientProfile.telecom:type_name -> google.fhir.r4.core.ContactPoint
	146,  // 593: google.fhir.r4.uscore.USCorePatientProfile.gender:type_name -> google.fhir.r4.uscore.USCorePatientProfile.GenderCode
	187,  // 594: google.fhir.r4.uscore.USCorePatientProfile.birth_date:type_name -> google.fhir.r4.core.Date
	147,  // 595: google.fhir.r4.uscore.USCorePatientProfile.deceased:type_name -> google.fhir.r4.uscore.USCorePatientProfile.DeceasedX
	186,  // 596: google.fhir.r4.uscore.USCorePatientProfile.address:type_name -> google.fhir.r4.core.Address
	181,  // 597: google.fhir.r4.uscore.USCorePatientProfile.marital_status:type_name -> google.fhir.r4.core.CodeableConcept
	148,  // 598: google.fhir.r4.uscore.USCorePatientProfile.multiple_birth:type_name -> google.fhir.r4.uscore.USCorePatientProfile.MultipleBirthX
	188,  // 599: google.fhir.r4.uscore.USCorePatientProfile.photo:type_name -> google.fhir.r4.core.Attachment
	149,  // 600: google.fhir.r4.uscore.USCorePatientProfile.contact:type_name -> google.fhir.r4.uscore.USCorePatientProfile.Contact
	150,  // 601: google.fhir.r4.uscore.USCorePatientProfile.communication:type_name -> google.fhir.r4.uscore.USCorePatientProfile.Communication
	180,  // 602: google.fhir.r4.uscore.USCorePatientProfile.general_practitioner:type_name -> google.fhir.r4.core.Reference
	180,  // 603: google.fhir.r4.uscore.USCorePatientProfile.managing_organization:type_name -> google.fhir.r4.core.Reference
	151,  // 604: google.fhir.r4.uscore.USCorePatientProfile.link:type_name -> google.fhir.r4.uscore.USCorePatientProfile.Link
	19,   // 605: google.fhir.r4.uscore.USCorePatientProfile.race:type_name -> google.fhir.r4.uscore.PatientUSCoreRaceExtension
	24,   // 606: google.fhir.r4.uscore.USCorePatientProfile.ethnicity:type_name -> google.fhir.r4.uscore.PatientUSCoreEthnicityExtension
	73,   // 607: google.fhir.r4.uscore.USCorePatientProfile.birthsex:type_name -> google.fhir.r4.uscore.PatientUSCoreBirthSexExtension.ValueCode
	190,  // 608: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.id:type_name -> google.fhir.r4.core.String
	177,  // 609: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.extension:type_name -> google.fhir.r4.core.Extension
	154,  // 610: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.omb_category:type_name -> google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.OmbCategoryCoding
	155,  // 611: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.detailed:type_name -> google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.DetailedCoding
	190,  // 612: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.text:type_name -> google.fhir.r4.core.String
	190,  // 613: google.fhir.r4.uscore.UsCoreDirectEmail.id:type_name -> google.fhir.r4.core.String
	177,  // 614: google.fhir.r4.uscore.UsCoreDirectEmail.extension:type_name -> google.fhir.r4.core.Extension
	183,  // 615: google.fhir.r4.uscore.UsCoreDirectEmail.value_boolean:type_name -> google.fhir.r4.core.Boolean
	171,  // 616: google.fhir.r4.uscore.USCoreSmokingStatusProfile.id:type_name -> google.fhir.r4.core.Id
	172,  // 617: google.fhir.r4.uscore.USCoreSmokingStatusProfile.meta:type_name -> google.fhir.r4.core.Meta
	173,  // 618: google.fhir.r4.uscore.USCoreSmokingStatusProfile.implicit_rules:type_name -> google.fhir.r4.core.Uri
	174,  // 619: google.fhir.r4.uscore.USCoreSmokingStatusProfile.language:type_name -> google.fhir.r4.core.Code
	175,  // 620: google.fhir.r4.uscore.USCoreSmokingStatusProfile.text:type_name -> google.fhir.r4.core.Narrative
	176,  // 621: google.fhir.r4.uscore.USCoreSmokingStatusProfile.contained:type_name -> google.protobuf.Any
	177,  // 622: google.fhir.r4.uscore.USCoreSmokingStatusProfile.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 623: google.fhir.r4.uscore.USCoreSmokingStatusProfile.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 624: google.fhir.r4.uscore.USCoreSmokingStatusProfile.identifier:type_name -> google.fhir.r4.core.Identifier
	180,  // 625: google.fhir.r4.uscore.USCoreSmokingStatusProfile.based_on:type_name -> google.fhir.r4.core.Reference
	180,  // 626: google.fhir.r4.uscore.USCoreSmokingStatusProfile.part_of:type_name -> google.fhir.r4.core.Reference
	158,  // 627: google.fhir.r4.uscore.USCoreSmokingStatusProfile.status:type_name -> google.fhir.r4.uscore.USCoreSmokingStatusProfile.StatusCode
	181,  // 628: google.fhir.r4.uscore.USCoreSmokingStatusProfile.category:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 629: google.fhir.r4.uscore.USCoreSmokingStatusProfile.code:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 630: google.fhir.r4.uscore.USCoreSmokingStatusProfile.subject:type_name -> google.fhir.r4.core.Reference
	180,  // 631: google.fhir.r4.uscore.USCoreSmokingStatusProfile.focus:type_name -> google.fhir.r4.core.Reference
	180,  // 632: google.fhir.r4.uscore.USCoreSmokingStatusProfile.encounter:type_name -> google.fhir.r4.core.Reference
	159,  // 633: google.fhir.r4.uscore.USCoreSmokingStatusProfile.effective:type_name -> google.fhir.r4.uscore.USCoreSmokingStatusProfile.EffectiveX
	189,  // 634: google.fhir.r4.uscore.USCoreSmokingStatusProfile.issued:type_name -> google.fhir.r4.core.Instant
	180,  // 635: google.fhir.r4.uscore.USCoreSmokingStatusProfile.performer:type_name -> google.fhir.r4.core.Reference
	160,  // 636: google.fhir.r4.uscore.USCoreSmokingStatusProfile.value:type_name -> google.fhir.r4.uscore.USCoreSmokingStatusProfile.ValueX
	181,  // 637: google.fhir.r4.uscore.USCoreSmokingStatusProfile.data_absent_reason:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 638: google.fhir.r4.uscore.USCoreSmokingStatusProfile.interpretation:type_name -> google.fhir.r4.core.CodeableConcept
	182,  // 639: google.fhir.r4.uscore.USCoreSmokingStatusProfile.note:type_name -> google.fhir.r4.core.Annotation
	181,  // 640: google.fhir.r4.uscore.USCoreSmokingStatusProfile.body_site:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 641: google.fhir.r4.uscore.USCoreSmokingStatusProfile.method:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 642: google.fhir.r4.uscore.USCoreSmokingStatusProfile.specimen:type_name -> google.fhir.r4.core.Reference
	180,  // 643: google.fhir.r4.uscore.USCoreSmokingStatusProfile.device:type_name -> google.fhir.r4.core.Reference
	161,  // 644: google.fhir.r4.uscore.USCoreSmokingStatusProfile.reference_range:type_name -> google.fhir.r4.uscore.USCoreSmokingStatusProfile.ReferenceRange
	180,  // 645: google.fhir.r4.uscore.USCoreSmokingStatusProfile.has_member:type_name -> google.fhir.r4.core.Reference
	180,  // 646: google.fhir.r4.uscore.USCoreSmokingStatusProfile.derived_from:type_name -> google.fhir.r4.core.Reference
	162,  // 647: google.fhir.r4.uscore.USCoreSmokingStatusProfile.component:type_name -> google.fhir.r4.uscore.USCoreSmokingStatusProfile.Component
	171,  // 648: google.fhir.r4.uscore.USCoreOrganizationProfile.id:type_name -> google.fhir.r4.core.Id
	172,  // 649: google.fhir.r4.uscore.USCoreOrganizationProfile.meta:type_name -> google.fhir.r4.core.Meta
	173,  // 650: google.fhir.r4.uscore.USCoreOrganizationProfile.implicit_rules:type_name -> google.fhir.r4.core.Uri
	174,  // 651: google.fhir.r4.uscore.USCoreOrganizationProfile.language:type_name -> google.fhir.r4.core.Code
	175,  // 652: google.fhir.r4.uscore.USCoreOrganizationProfile.text:type_name -> google.fhir.r4.core.Narrative
	176,  // 653: google.fhir.r4.uscore.USCoreOrganizationProfile.contained:type_name -> google.protobuf.Any
	177,  // 654: google.fhir.r4.uscore.USCoreOrganizationProfile.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 655: google.fhir.r4.uscore.USCoreOrganizationProfile.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 656: google.fhir.r4.uscore.USCoreOrganizationProfile.identifier:type_name -> google.fhir.r4.core.Identifier
	183,  // 657: google.fhir.r4.uscore.USCoreOrganizationProfile.active:type_name -> google.fhir.r4.core.Boolean
	181,  // 658: google.fhir.r4.uscore.USCoreOrganizationProfile.type:type_name -> google.fhir.r4.core.CodeableConcept
	190,  // 659: google.fhir.r4.uscore.USCoreOrganizationProfile.name:type_name -> google.fhir.r4.core.String
	190,  // 660: google.fhir.r4.uscore.USCoreOrganizationProfile.alias:type_name -> google.fhir.r4.core.String
	185,  // 661: google.fhir.r4.uscore.USCoreOrganizationProfile.telecom:type_name -> google.fhir.r4.core.ContactPoint
	186,  // 662: google.fhir.r4.uscore.USCoreOrganizationProfile.address:type_name -> google.fhir.r4.core.Address
	180,  // 663: google.fhir.r4.uscore.USCoreOrganizationProfile.part_of:type_name -> google.fhir.r4.core.Reference
	164,  // 664: google.fhir.r4.uscore.USCoreOrganizationProfile.contact:type_name -> google.fhir.r4.uscore.USCoreOrganizationProfile.Contact
	180,  // 665: google.fhir.r4.uscore.USCoreOrganizationProfile.endpoint:type_name -> google.fhir.r4.core.Reference
	171,  // 666: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.id:type_name -> google.fhir.r4.core.Id
	172,  // 667: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.meta:type_name -> google.fhir.r4.core.Meta
	173,  // 668: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.implicit_rules:type_name -> google.fhir.r4.core.Uri
	174,  // 669: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.language:type_name -> google.fhir.r4.core.Code
	175,  // 670: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.text:type_name -> google.fhir.r4.core.Narrative
	176,  // 671: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.contained:type_name -> google.protobuf.Any
	177,  // 672: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 673: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 674: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.identifier:type_name -> google.fhir.r4.core.Identifier
	180,  // 675: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.based_on:type_name -> google.fhir.r4.core.Reference
	180,  // 676: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.part_of:type_name -> google.fhir.r4.core.Reference
	165,  // 677: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.status:type_name -> google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.StatusCode
	181,  // 678: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.category:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 679: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.code:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 680: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.subject:type_name -> google.fhir.r4.core.Reference
	180,  // 681: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.focus:type_name -> google.fhir.r4.core.Reference
	180,  // 682: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.encounter:type_name -> google.fhir.r4.core.Reference
	166,  // 683: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.effective:type_name -> google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.EffectiveX
	189,  // 684: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.issued:type_name -> google.fhir.r4.core.Instant
	180,  // 685: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.performer:type_name -> google.fhir.r4.core.Reference
	167,  // 686: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.value:type_name -> google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.ValueX
	181,  // 687: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.data_absent_reason:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 688: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.interpretation:type_name -> google.fhir.r4.core.CodeableConcept
	182,  // 689: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.note:type_name -> google.fhir.r4.core.Annotation
	181,  // 690: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.body_site:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 691: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.method:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 692: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.specimen:type_name -> google.fhir.r4.core.Reference
	180,  // 693: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.device:type_name -> google.fhir.r4.core.Reference
	168,  // 694: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.reference_range:type_name -> google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.ReferenceRange
	180,  // 695: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.has_member:type_name -> google.fhir.r4.core.Reference
	180,  // 696: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.derived_from:type_name -> google.fhir.r4.core.Reference
	169,  // 697: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.component:type_name -> google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.Component
	199,  // 698: google.fhir.r4.uscore.USCoreProcedureProfile.StatusCode.value:type_name -> google.fhir.r4.core.EventStatusCode.Value
	190,  // 699: google.fhir.r4.uscore.USCoreProcedureProfile.StatusCode.id:type_name -> google.fhir.r4.core.String
	177,  // 700: google.fhir.r4.uscore.USCoreProcedureProfile.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	195,  // 701: google.fhir.r4.uscore.USCoreProcedureProfile.PerformedX.date_time:type_name -> google.fhir.r4.core.DateTime
	192,  // 702: google.fhir.r4.uscore.USCoreProcedureProfile.PerformedX.period:type_name -> google.fhir.r4.core.Period
	190,  // 703: google.fhir.r4.uscore.USCoreProcedureProfile.Performer.id:type_name -> google.fhir.r4.core.String
	177,  // 704: google.fhir.r4.uscore.USCoreProcedureProfile.Performer.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 705: google.fhir.r4.uscore.USCoreProcedureProfile.Performer.modifier_extension:type_name -> google.fhir.r4.core.Extension
	181,  // 706: google.fhir.r4.uscore.USCoreProcedureProfile.Performer.function:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 707: google.fhir.r4.uscore.USCoreProcedureProfile.Performer.actor:type_name -> google.fhir.r4.core.Reference
	180,  // 708: google.fhir.r4.uscore.USCoreProcedureProfile.Performer.on_behalf_of:type_name -> google.fhir.r4.core.Reference
	190,  // 709: google.fhir.r4.uscore.USCoreProcedureProfile.FocalDevice.id:type_name -> google.fhir.r4.core.String
	177,  // 710: google.fhir.r4.uscore.USCoreProcedureProfile.FocalDevice.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 711: google.fhir.r4.uscore.USCoreProcedureProfile.FocalDevice.modifier_extension:type_name -> google.fhir.r4.core.Extension
	181,  // 712: google.fhir.r4.uscore.USCoreProcedureProfile.FocalDevice.action:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 713: google.fhir.r4.uscore.USCoreProcedureProfile.FocalDevice.manipulated:type_name -> google.fhir.r4.core.Reference
	200,  // 714: google.fhir.r4.uscore.USCorePractitionerProfile.GenderCode.value:type_name -> google.fhir.r4.core.AdministrativeGenderCode.Value
	190,  // 715: google.fhir.r4.uscore.USCorePractitionerProfile.GenderCode.id:type_name -> google.fhir.r4.core.String
	177,  // 716: google.fhir.r4.uscore.USCorePractitionerProfile.GenderCode.extension:type_name -> google.fhir.r4.core.Extension
	190,  // 717: google.fhir.r4.uscore.USCorePractitionerProfile.Qualification.id:type_name -> google.fhir.r4.core.String
	177,  // 718: google.fhir.r4.uscore.USCorePractitionerProfile.Qualification.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 719: google.fhir.r4.uscore.USCorePractitionerProfile.Qualification.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 720: google.fhir.r4.uscore.USCorePractitionerProfile.Qualification.identifier:type_name -> google.fhir.r4.core.Identifier
	181,  // 721: google.fhir.r4.uscore.USCorePractitionerProfile.Qualification.code:type_name -> google.fhir.r4.core.CodeableConcept
	192,  // 722: google.fhir.r4.uscore.USCorePractitionerProfile.Qualification.period:type_name -> google.fhir.r4.core.Period
	180,  // 723: google.fhir.r4.uscore.USCorePractitionerProfile.Qualification.issuer:type_name -> google.fhir.r4.core.Reference
	201,  // 724: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.StatusCode.value:type_name -> google.fhir.r4.core.DiagnosticReportStatusCode.Value
	190,  // 725: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.StatusCode.id:type_name -> google.fhir.r4.core.String
	177,  // 726: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	195,  // 727: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.EffectiveX.date_time:type_name -> google.fhir.r4.core.DateTime
	192,  // 728: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.EffectiveX.period:type_name -> google.fhir.r4.core.Period
	190,  // 729: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.Media.id:type_name -> google.fhir.r4.core.String
	177,  // 730: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.Media.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 731: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.Media.modifier_extension:type_name -> google.fhir.r4.core.Extension
	190,  // 732: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.Media.comment:type_name -> google.fhir.r4.core.String
	180,  // 733: google.fhir.r4.uscore.USCoreDiagnosticReportProfileLaboratoryReporting.Media.link:type_name -> google.fhir.r4.core.Reference
	202,  // 734: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.StatusCode.value:type_name -> google.fhir.r4.core.ObservationStatusCode.Value
	190,  // 735: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.StatusCode.id:type_name -> google.fhir.r4.core.String
	177,  // 736: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	195,  // 737: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.EffectiveX.date_time:type_name -> google.fhir.r4.core.DateTime
	192,  // 738: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.EffectiveX.period:type_name -> google.fhir.r4.core.Period
	203,  // 739: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.ValueX.quantity:type_name -> google.fhir.r4.core.Quantity
	190,  // 740: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.ReferenceRange.id:type_name -> google.fhir.r4.core.String
	177,  // 741: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.ReferenceRange.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 742: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.ReferenceRange.modifier_extension:type_name -> google.fhir.r4.core.Extension
	196,  // 743: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.ReferenceRange.low:type_name -> google.fhir.r4.core.SimpleQuantity
	196,  // 744: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.ReferenceRange.high:type_name -> google.fhir.r4.core.SimpleQuantity
	181,  // 745: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.ReferenceRange.type:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 746: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.ReferenceRange.applies_to:type_name -> google.fhir.r4.core.CodeableConcept
	204,  // 747: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.ReferenceRange.age:type_name -> google.fhir.r4.core.Range
	190,  // 748: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.ReferenceRange.text:type_name -> google.fhir.r4.core.String
	190,  // 749: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.Component.id:type_name -> google.fhir.r4.core.String
	177,  // 750: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.Component.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 751: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.Component.modifier_extension:type_name -> google.fhir.r4.core.Extension
	181,  // 752: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.Component.code:type_name -> google.fhir.r4.core.CodeableConcept
	43,   // 753: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.Component.value:type_name -> google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.Component.ValueX
	181,  // 754: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.Component.data_absent_reason:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 755: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.Component.interpretation:type_name -> google.fhir.r4.core.CodeableConcept
	41,   // 756: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.Component.reference_range:type_name -> google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.ReferenceRange
	203,  // 757: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.Component.ValueX.quantity:type_name -> google.fhir.r4.core.Quantity
	181,  // 758: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.Component.ValueX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	190,  // 759: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.Component.ValueX.string_value:type_name -> google.fhir.r4.core.String
	183,  // 760: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.Component.ValueX.boolean:type_name -> google.fhir.r4.core.Boolean
	205,  // 761: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.Component.ValueX.integer:type_name -> google.fhir.r4.core.Integer
	204,  // 762: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.Component.ValueX.range:type_name -> google.fhir.r4.core.Range
	198,  // 763: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.Component.ValueX.ratio:type_name -> google.fhir.r4.core.Ratio
	206,  // 764: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.Component.ValueX.sampled_data:type_name -> google.fhir.r4.core.SampledData
	207,  // 765: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.Component.ValueX.time:type_name -> google.fhir.r4.core.Time
	195,  // 766: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.Component.ValueX.date_time:type_name -> google.fhir.r4.core.DateTime
	192,  // 767: google.fhir.r4.uscore.USCorePediatricWeightForHeightObservationProfile.Component.ValueX.period:type_name -> google.fhir.r4.core.Period
	208,  // 768: google.fhir.r4.uscore.USCoreEncounterProfile.StatusCode.value:type_name -> google.fhir.r4.core.EncounterStatusCode.Value
	190,  // 769: google.fhir.r4.uscore.USCoreEncounterProfile.StatusCode.id:type_name -> google.fhir.r4.core.String
	177,  // 770: google.fhir.r4.uscore.USCoreEncounterProfile.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	190,  // 771: google.fhir.r4.uscore.USCoreEncounterProfile.StatusHistory.id:type_name -> google.fhir.r4.core.String
	177,  // 772: google.fhir.r4.uscore.USCoreEncounterProfile.StatusHistory.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 773: google.fhir.r4.uscore.USCoreEncounterProfile.StatusHistory.modifier_extension:type_name -> google.fhir.r4.core.Extension
	51,   // 774: google.fhir.r4.uscore.USCoreEncounterProfile.StatusHistory.status:type_name -> google.fhir.r4.uscore.USCoreEncounterProfile.StatusHistory.StatusCode
	192,  // 775: google.fhir.r4.uscore.USCoreEncounterProfile.StatusHistory.period:type_name -> google.fhir.r4.core.Period
	190,  // 776: google.fhir.r4.uscore.USCoreEncounterProfile.ClassHistory.id:type_name -> google.fhir.r4.core.String
	177,  // 777: google.fhir.r4.uscore.USCoreEncounterProfile.ClassHistory.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 778: google.fhir.r4.uscore.USCoreEncounterProfile.ClassHistory.modifier_extension:type_name -> google.fhir.r4.core.Extension
	191,  // 779: google.fhir.r4.uscore.USCoreEncounterProfile.ClassHistory.class_value:type_name -> google.fhir.r4.core.Coding
	192,  // 780: google.fhir.r4.uscore.USCoreEncounterProfile.ClassHistory.period:type_name -> google.fhir.r4.core.Period
	190,  // 781: google.fhir.r4.uscore.USCoreEncounterProfile.Participant.id:type_name -> google.fhir.r4.core.String
	177,  // 782: google.fhir.r4.uscore.USCoreEncounterProfile.Participant.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 783: google.fhir.r4.uscore.USCoreEncounterProfile.Participant.modifier_extension:type_name -> google.fhir.r4.core.Extension
	181,  // 784: google.fhir.r4.uscore.USCoreEncounterProfile.Participant.type:type_name -> google.fhir.r4.core.CodeableConcept
	192,  // 785: google.fhir.r4.uscore.USCoreEncounterProfile.Participant.period:type_name -> google.fhir.r4.core.Period
	180,  // 786: google.fhir.r4.uscore.USCoreEncounterProfile.Participant.individual:type_name -> google.fhir.r4.core.Reference
	190,  // 787: google.fhir.r4.uscore.USCoreEncounterProfile.Diagnosis.id:type_name -> google.fhir.r4.core.String
	177,  // 788: google.fhir.r4.uscore.USCoreEncounterProfile.Diagnosis.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 789: google.fhir.r4.uscore.USCoreEncounterProfile.Diagnosis.modifier_extension:type_name -> google.fhir.r4.core.Extension
	180,  // 790: google.fhir.r4.uscore.USCoreEncounterProfile.Diagnosis.condition:type_name -> google.fhir.r4.core.Reference
	181,  // 791: google.fhir.r4.uscore.USCoreEncounterProfile.Diagnosis.use:type_name -> google.fhir.r4.core.CodeableConcept
	209,  // 792: google.fhir.r4.uscore.USCoreEncounterProfile.Diagnosis.rank:type_name -> google.fhir.r4.core.PositiveInt
	190,  // 793: google.fhir.r4.uscore.USCoreEncounterProfile.Hospitalization.id:type_name -> google.fhir.r4.core.String
	177,  // 794: google.fhir.r4.uscore.USCoreEncounterProfile.Hospitalization.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 795: google.fhir.r4.uscore.USCoreEncounterProfile.Hospitalization.modifier_extension:type_name -> google.fhir.r4.core.Extension
	178,  // 796: google.fhir.r4.uscore.USCoreEncounterProfile.Hospitalization.pre_admission_identifier:type_name -> google.fhir.r4.core.Identifier
	180,  // 797: google.fhir.r4.uscore.USCoreEncounterProfile.Hospitalization.origin:type_name -> google.fhir.r4.core.Reference
	181,  // 798: google.fhir.r4.uscore.USCoreEncounterProfile.Hospitalization.admit_source:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 799: google.fhir.r4.uscore.USCoreEncounterProfile.Hospitalization.re_admission:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 800: google.fhir.r4.uscore.USCoreEncounterProfile.Hospitalization.diet_preference:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 801: google.fhir.r4.uscore.USCoreEncounterProfile.Hospitalization.special_courtesy:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 802: google.fhir.r4.uscore.USCoreEncounterProfile.Hospitalization.special_arrangement:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 803: google.fhir.r4.uscore.USCoreEncounterProfile.Hospitalization.destination:type_name -> google.fhir.r4.core.Reference
	181,  // 804: google.fhir.r4.uscore.USCoreEncounterProfile.Hospitalization.discharge_disposition:type_name -> google.fhir.r4.core.CodeableConcept
	190,  // 805: google.fhir.r4.uscore.USCoreEncounterProfile.Location.id:type_name -> google.fhir.r4.core.String
	177,  // 806: google.fhir.r4.uscore.USCoreEncounterProfile.Location.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 807: google.fhir.r4.uscore.USCoreEncounterProfile.Location.modifier_extension:type_name -> google.fhir.r4.core.Extension
	180,  // 808: google.fhir.r4.uscore.USCoreEncounterProfile.Location.location:type_name -> google.fhir.r4.core.Reference
	52,   // 809: google.fhir.r4.uscore.USCoreEncounterProfile.Location.status:type_name -> google.fhir.r4.uscore.USCoreEncounterProfile.Location.StatusCode
	181,  // 810: google.fhir.r4.uscore.USCoreEncounterProfile.Location.physical_type:type_name -> google.fhir.r4.core.CodeableConcept
	192,  // 811: google.fhir.r4.uscore.USCoreEncounterProfile.Location.period:type_name -> google.fhir.r4.core.Period
	208,  // 812: google.fhir.r4.uscore.USCoreEncounterProfile.StatusHistory.StatusCode.value:type_name -> google.fhir.r4.core.EncounterStatusCode.Value
	190,  // 813: google.fhir.r4.uscore.USCoreEncounterProfile.StatusHistory.StatusCode.id:type_name -> google.fhir.r4.core.String
	177,  // 814: google.fhir.r4.uscore.USCoreEncounterProfile.StatusHistory.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	210,  // 815: google.fhir.r4.uscore.USCoreEncounterProfile.Location.StatusCode.value:type_name -> google.fhir.r4.core.EncounterLocationStatusCode.Value
	190,  // 816: google.fhir.r4.uscore.USCoreEncounterProfile.Location.StatusCode.id:type_name -> google.fhir.r4.core.String
	177,  // 817: google.fhir.r4.uscore.USCoreEncounterProfile.Location.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	211,  // 818: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.StatusCode.value:type_name -> google.fhir.r4.core.DocumentReferenceStatusCode.Value
	190,  // 819: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.StatusCode.id:type_name -> google.fhir.r4.core.String
	177,  // 820: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	212,  // 821: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.DocStatusCode.value:type_name -> google.fhir.r4.core.CompositionStatusCode.Value
	190,  // 822: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.DocStatusCode.id:type_name -> google.fhir.r4.core.String
	177,  // 823: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.DocStatusCode.extension:type_name -> google.fhir.r4.core.Extension
	190,  // 824: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.RelatesTo.id:type_name -> google.fhir.r4.core.String
	177,  // 825: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.RelatesTo.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 826: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.RelatesTo.modifier_extension:type_name -> google.fhir.r4.core.Extension
	58,   // 827: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.RelatesTo.code:type_name -> google.fhir.r4.uscore.USCoreDocumentReferenceProfile.RelatesTo.CodeType
	180,  // 828: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.RelatesTo.target:type_name -> google.fhir.r4.core.Reference
	190,  // 829: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.Content.id:type_name -> google.fhir.r4.core.String
	177,  // 830: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.Content.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 831: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.Content.modifier_extension:type_name -> google.fhir.r4.core.Extension
	188,  // 832: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.Content.attachment:type_name -> google.fhir.r4.core.Attachment
	191,  // 833: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.Content.format:type_name -> google.fhir.r4.core.Coding
	190,  // 834: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.Context.id:type_name -> google.fhir.r4.core.String
	177,  // 835: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.Context.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 836: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.Context.modifier_extension:type_name -> google.fhir.r4.core.Extension
	180,  // 837: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.Context.encounter:type_name -> google.fhir.r4.core.Reference
	181,  // 838: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.Context.event:type_name -> google.fhir.r4.core.CodeableConcept
	192,  // 839: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.Context.period:type_name -> google.fhir.r4.core.Period
	181,  // 840: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.Context.facility_type:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 841: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.Context.practice_setting:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 842: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.Context.source_patient_info:type_name -> google.fhir.r4.core.Reference
	180,  // 843: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.Context.related:type_name -> google.fhir.r4.core.Reference
	213,  // 844: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.RelatesTo.CodeType.value:type_name -> google.fhir.r4.core.DocumentRelationshipTypeCode.Value
	190,  // 845: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.RelatesTo.CodeType.id:type_name -> google.fhir.r4.core.String
	177,  // 846: google.fhir.r4.uscore.USCoreDocumentReferenceProfile.RelatesTo.CodeType.extension:type_name -> google.fhir.r4.core.Extension
	214,  // 847: google.fhir.r4.uscore.USCoreCareTeam.StatusCode.value:type_name -> google.fhir.r4.core.CareTeamStatusCode.Value
	190,  // 848: google.fhir.r4.uscore.USCoreCareTeam.StatusCode.id:type_name -> google.fhir.r4.core.String
	177,  // 849: google.fhir.r4.uscore.USCoreCareTeam.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	190,  // 850: google.fhir.r4.uscore.USCoreCareTeam.Participant.id:type_name -> google.fhir.r4.core.String
	177,  // 851: google.fhir.r4.uscore.USCoreCareTeam.Participant.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 852: google.fhir.r4.uscore.USCoreCareTeam.Participant.modifier_extension:type_name -> google.fhir.r4.core.Extension
	181,  // 853: google.fhir.r4.uscore.USCoreCareTeam.Participant.role:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 854: google.fhir.r4.uscore.USCoreCareTeam.Participant.member:type_name -> google.fhir.r4.core.Reference
	180,  // 855: google.fhir.r4.uscore.USCoreCareTeam.Participant.on_behalf_of:type_name -> google.fhir.r4.core.Reference
	192,  // 856: google.fhir.r4.uscore.USCoreCareTeam.Participant.period:type_name -> google.fhir.r4.core.Period
	192,  // 857: google.fhir.r4.uscore.USCoreProvenance.OccurredX.period:type_name -> google.fhir.r4.core.Period
	195,  // 858: google.fhir.r4.uscore.USCoreProvenance.OccurredX.date_time:type_name -> google.fhir.r4.core.DateTime
	190,  // 859: google.fhir.r4.uscore.USCoreProvenance.Agent.id:type_name -> google.fhir.r4.core.String
	177,  // 860: google.fhir.r4.uscore.USCoreProvenance.Agent.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 861: google.fhir.r4.uscore.USCoreProvenance.Agent.modifier_extension:type_name -> google.fhir.r4.core.Extension
	181,  // 862: google.fhir.r4.uscore.USCoreProvenance.Agent.type:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 863: google.fhir.r4.uscore.USCoreProvenance.Agent.role:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 864: google.fhir.r4.uscore.USCoreProvenance.Agent.who:type_name -> google.fhir.r4.core.Reference
	180,  // 865: google.fhir.r4.uscore.USCoreProvenance.Agent.on_behalf_of:type_name -> google.fhir.r4.core.Reference
	190,  // 866: google.fhir.r4.uscore.USCoreProvenance.Entity.id:type_name -> google.fhir.r4.core.String
	177,  // 867: google.fhir.r4.uscore.USCoreProvenance.Entity.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 868: google.fhir.r4.uscore.USCoreProvenance.Entity.modifier_extension:type_name -> google.fhir.r4.core.Extension
	64,   // 869: google.fhir.r4.uscore.USCoreProvenance.Entity.role:type_name -> google.fhir.r4.uscore.USCoreProvenance.Entity.RoleCode
	180,  // 870: google.fhir.r4.uscore.USCoreProvenance.Entity.what:type_name -> google.fhir.r4.core.Reference
	62,   // 871: google.fhir.r4.uscore.USCoreProvenance.Entity.agent:type_name -> google.fhir.r4.uscore.USCoreProvenance.Agent
	215,  // 872: google.fhir.r4.uscore.USCoreProvenance.Entity.RoleCode.value:type_name -> google.fhir.r4.core.ProvenanceEntityRoleCode.Value
	190,  // 873: google.fhir.r4.uscore.USCoreProvenance.Entity.RoleCode.id:type_name -> google.fhir.r4.core.String
	177,  // 874: google.fhir.r4.uscore.USCoreProvenance.Entity.RoleCode.extension:type_name -> google.fhir.r4.core.Extension
	216,  // 875: google.fhir.r4.uscore.USCoreImmunizationProfile.StatusCode.value:type_name -> google.fhir.r4.core.ImmunizationStatusCodesValueSet.Value
	190,  // 876: google.fhir.r4.uscore.USCoreImmunizationProfile.StatusCode.id:type_name -> google.fhir.r4.core.String
	177,  // 877: google.fhir.r4.uscore.USCoreImmunizationProfile.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	195,  // 878: google.fhir.r4.uscore.USCoreImmunizationProfile.OccurrenceX.date_time:type_name -> google.fhir.r4.core.DateTime
	190,  // 879: google.fhir.r4.uscore.USCoreImmunizationProfile.OccurrenceX.string_value:type_name -> google.fhir.r4.core.String
	190,  // 880: google.fhir.r4.uscore.USCoreImmunizationProfile.Performer.id:type_name -> google.fhir.r4.core.String
	177,  // 881: google.fhir.r4.uscore.USCoreImmunizationProfile.Performer.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 882: google.fhir.r4.uscore.USCoreImmunizationProfile.Performer.modifier_extension:type_name -> google.fhir.r4.core.Extension
	181,  // 883: google.fhir.r4.uscore.USCoreImmunizationProfile.Performer.function:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 884: google.fhir.r4.uscore.USCoreImmunizationProfile.Performer.actor:type_name -> google.fhir.r4.core.Reference
	190,  // 885: google.fhir.r4.uscore.USCoreImmunizationProfile.Education.id:type_name -> google.fhir.r4.core.String
	177,  // 886: google.fhir.r4.uscore.USCoreImmunizationProfile.Education.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 887: google.fhir.r4.uscore.USCoreImmunizationProfile.Education.modifier_extension:type_name -> google.fhir.r4.core.Extension
	190,  // 888: google.fhir.r4.uscore.USCoreImmunizationProfile.Education.document_type:type_name -> google.fhir.r4.core.String
	173,  // 889: google.fhir.r4.uscore.USCoreImmunizationProfile.Education.reference:type_name -> google.fhir.r4.core.Uri
	195,  // 890: google.fhir.r4.uscore.USCoreImmunizationProfile.Education.publication_date:type_name -> google.fhir.r4.core.DateTime
	195,  // 891: google.fhir.r4.uscore.USCoreImmunizationProfile.Education.presentation_date:type_name -> google.fhir.r4.core.DateTime
	190,  // 892: google.fhir.r4.uscore.USCoreImmunizationProfile.Reaction.id:type_name -> google.fhir.r4.core.String
	177,  // 893: google.fhir.r4.uscore.USCoreImmunizationProfile.Reaction.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 894: google.fhir.r4.uscore.USCoreImmunizationProfile.Reaction.modifier_extension:type_name -> google.fhir.r4.core.Extension
	195,  // 895: google.fhir.r4.uscore.USCoreImmunizationProfile.Reaction.date:type_name -> google.fhir.r4.core.DateTime
	180,  // 896: google.fhir.r4.uscore.USCoreImmunizationProfile.Reaction.detail:type_name -> google.fhir.r4.core.Reference
	183,  // 897: google.fhir.r4.uscore.USCoreImmunizationProfile.Reaction.reported:type_name -> google.fhir.r4.core.Boolean
	190,  // 898: google.fhir.r4.uscore.USCoreImmunizationProfile.ProtocolApplied.id:type_name -> google.fhir.r4.core.String
	177,  // 899: google.fhir.r4.uscore.USCoreImmunizationProfile.ProtocolApplied.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 900: google.fhir.r4.uscore.USCoreImmunizationProfile.ProtocolApplied.modifier_extension:type_name -> google.fhir.r4.core.Extension
	190,  // 901: google.fhir.r4.uscore.USCoreImmunizationProfile.ProtocolApplied.series:type_name -> google.fhir.r4.core.String
	180,  // 902: google.fhir.r4.uscore.USCoreImmunizationProfile.ProtocolApplied.authority:type_name -> google.fhir.r4.core.Reference
	181,  // 903: google.fhir.r4.uscore.USCoreImmunizationProfile.ProtocolApplied.target_disease:type_name -> google.fhir.r4.core.CodeableConcept
	71,   // 904: google.fhir.r4.uscore.USCoreImmunizationProfile.ProtocolApplied.dose_number:type_name -> google.fhir.r4.uscore.USCoreImmunizationProfile.ProtocolApplied.DoseNumberX
	72,   // 905: google.fhir.r4.uscore.USCoreImmunizationProfile.ProtocolApplied.series_doses:type_name -> google.fhir.r4.uscore.USCoreImmunizationProfile.ProtocolApplied.SeriesDosesX
	209,  // 906: google.fhir.r4.uscore.USCoreImmunizationProfile.ProtocolApplied.DoseNumberX.positive_int:type_name -> google.fhir.r4.core.PositiveInt
	190,  // 907: google.fhir.r4.uscore.USCoreImmunizationProfile.ProtocolApplied.DoseNumberX.string_value:type_name -> google.fhir.r4.core.String
	209,  // 908: google.fhir.r4.uscore.USCoreImmunizationProfile.ProtocolApplied.SeriesDosesX.positive_int:type_name -> google.fhir.r4.core.PositiveInt
	190,  // 909: google.fhir.r4.uscore.USCoreImmunizationProfile.ProtocolApplied.SeriesDosesX.string_value:type_name -> google.fhir.r4.core.String
	217,  // 910: google.fhir.r4.uscore.PatientUSCoreBirthSexExtension.ValueCode.value:type_name -> google.fhir.r4.uscore.BirthSexValueSet.Value
	190,  // 911: google.fhir.r4.uscore.PatientUSCoreBirthSexExtension.ValueCode.id:type_name -> google.fhir.r4.core.String
	177,  // 912: google.fhir.r4.uscore.PatientUSCoreBirthSexExtension.ValueCode.extension:type_name -> google.fhir.r4.core.Extension
	201,  // 913: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.StatusCode.value:type_name -> google.fhir.r4.core.DiagnosticReportStatusCode.Value
	190,  // 914: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.StatusCode.id:type_name -> google.fhir.r4.core.String
	177,  // 915: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	195,  // 916: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.EffectiveX.date_time:type_name -> google.fhir.r4.core.DateTime
	192,  // 917: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.EffectiveX.period:type_name -> google.fhir.r4.core.Period
	190,  // 918: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.Media.id:type_name -> google.fhir.r4.core.String
	177,  // 919: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.Media.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 920: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.Media.modifier_extension:type_name -> google.fhir.r4.core.Extension
	190,  // 921: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.Media.comment:type_name -> google.fhir.r4.core.String
	180,  // 922: google.fhir.r4.uscore.USCoreDiagnosticReportProfileNoteExchange.Media.link:type_name -> google.fhir.r4.core.Reference
	202,  // 923: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.StatusCode.value:type_name -> google.fhir.r4.core.ObservationStatusCode.Value
	190,  // 924: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.StatusCode.id:type_name -> google.fhir.r4.core.String
	177,  // 925: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	195,  // 926: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.EffectiveX.date_time:type_name -> google.fhir.r4.core.DateTime
	192,  // 927: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.EffectiveX.period:type_name -> google.fhir.r4.core.Period
	203,  // 928: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.ValueX.quantity:type_name -> google.fhir.r4.core.Quantity
	181,  // 929: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.ValueX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	190,  // 930: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.ValueX.string_value:type_name -> google.fhir.r4.core.String
	183,  // 931: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.ValueX.boolean:type_name -> google.fhir.r4.core.Boolean
	205,  // 932: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.ValueX.integer:type_name -> google.fhir.r4.core.Integer
	204,  // 933: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.ValueX.range:type_name -> google.fhir.r4.core.Range
	198,  // 934: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.ValueX.ratio:type_name -> google.fhir.r4.core.Ratio
	206,  // 935: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.ValueX.sampled_data:type_name -> google.fhir.r4.core.SampledData
	207,  // 936: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.ValueX.time:type_name -> google.fhir.r4.core.Time
	195,  // 937: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.ValueX.date_time:type_name -> google.fhir.r4.core.DateTime
	192,  // 938: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.ValueX.period:type_name -> google.fhir.r4.core.Period
	190,  // 939: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.ReferenceRange.id:type_name -> google.fhir.r4.core.String
	177,  // 940: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.ReferenceRange.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 941: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.ReferenceRange.modifier_extension:type_name -> google.fhir.r4.core.Extension
	196,  // 942: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.ReferenceRange.low:type_name -> google.fhir.r4.core.SimpleQuantity
	196,  // 943: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.ReferenceRange.high:type_name -> google.fhir.r4.core.SimpleQuantity
	181,  // 944: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.ReferenceRange.type:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 945: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.ReferenceRange.applies_to:type_name -> google.fhir.r4.core.CodeableConcept
	204,  // 946: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.ReferenceRange.age:type_name -> google.fhir.r4.core.Range
	190,  // 947: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.ReferenceRange.text:type_name -> google.fhir.r4.core.String
	190,  // 948: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.Component.id:type_name -> google.fhir.r4.core.String
	177,  // 949: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.Component.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 950: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.Component.modifier_extension:type_name -> google.fhir.r4.core.Extension
	181,  // 951: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.Component.code:type_name -> google.fhir.r4.core.CodeableConcept
	82,   // 952: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.Component.value:type_name -> google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.Component.ValueX
	181,  // 953: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.Component.data_absent_reason:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 954: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.Component.interpretation:type_name -> google.fhir.r4.core.CodeableConcept
	80,   // 955: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.Component.reference_range:type_name -> google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.ReferenceRange
	203,  // 956: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.Component.ValueX.quantity:type_name -> google.fhir.r4.core.Quantity
	181,  // 957: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.Component.ValueX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	190,  // 958: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.Component.ValueX.string_value:type_name -> google.fhir.r4.core.String
	183,  // 959: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.Component.ValueX.boolean:type_name -> google.fhir.r4.core.Boolean
	205,  // 960: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.Component.ValueX.integer:type_name -> google.fhir.r4.core.Integer
	204,  // 961: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.Component.ValueX.range:type_name -> google.fhir.r4.core.Range
	198,  // 962: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.Component.ValueX.ratio:type_name -> google.fhir.r4.core.Ratio
	206,  // 963: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.Component.ValueX.sampled_data:type_name -> google.fhir.r4.core.SampledData
	207,  // 964: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.Component.ValueX.time:type_name -> google.fhir.r4.core.Time
	195,  // 965: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.Component.ValueX.date_time:type_name -> google.fhir.r4.core.DateTime
	192,  // 966: google.fhir.r4.uscore.USCoreLaboratoryResultObservationProfile.Component.ValueX.period:type_name -> google.fhir.r4.core.Period
	218,  // 967: google.fhir.r4.uscore.USCoreLocation.StatusCode.value:type_name -> google.fhir.r4.core.LocationStatusCode.Value
	190,  // 968: google.fhir.r4.uscore.USCoreLocation.StatusCode.id:type_name -> google.fhir.r4.core.String
	177,  // 969: google.fhir.r4.uscore.USCoreLocation.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	219,  // 970: google.fhir.r4.uscore.USCoreLocation.ModeCode.value:type_name -> google.fhir.r4.core.LocationModeCode.Value
	190,  // 971: google.fhir.r4.uscore.USCoreLocation.ModeCode.id:type_name -> google.fhir.r4.core.String
	177,  // 972: google.fhir.r4.uscore.USCoreLocation.ModeCode.extension:type_name -> google.fhir.r4.core.Extension
	190,  // 973: google.fhir.r4.uscore.USCoreLocation.Position.id:type_name -> google.fhir.r4.core.String
	177,  // 974: google.fhir.r4.uscore.USCoreLocation.Position.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 975: google.fhir.r4.uscore.USCoreLocation.Position.modifier_extension:type_name -> google.fhir.r4.core.Extension
	220,  // 976: google.fhir.r4.uscore.USCoreLocation.Position.longitude:type_name -> google.fhir.r4.core.Decimal
	220,  // 977: google.fhir.r4.uscore.USCoreLocation.Position.latitude:type_name -> google.fhir.r4.core.Decimal
	220,  // 978: google.fhir.r4.uscore.USCoreLocation.Position.altitude:type_name -> google.fhir.r4.core.Decimal
	190,  // 979: google.fhir.r4.uscore.USCoreLocation.HoursOfOperation.id:type_name -> google.fhir.r4.core.String
	177,  // 980: google.fhir.r4.uscore.USCoreLocation.HoursOfOperation.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 981: google.fhir.r4.uscore.USCoreLocation.HoursOfOperation.modifier_extension:type_name -> google.fhir.r4.core.Extension
	87,   // 982: google.fhir.r4.uscore.USCoreLocation.HoursOfOperation.days_of_week:type_name -> google.fhir.r4.uscore.USCoreLocation.HoursOfOperation.DaysOfWeekCode
	183,  // 983: google.fhir.r4.uscore.USCoreLocation.HoursOfOperation.all_day:type_name -> google.fhir.r4.core.Boolean
	207,  // 984: google.fhir.r4.uscore.USCoreLocation.HoursOfOperation.opening_time:type_name -> google.fhir.r4.core.Time
	207,  // 985: google.fhir.r4.uscore.USCoreLocation.HoursOfOperation.closing_time:type_name -> google.fhir.r4.core.Time
	221,  // 986: google.fhir.r4.uscore.USCoreLocation.HoursOfOperation.DaysOfWeekCode.value:type_name -> google.fhir.r4.core.DaysOfWeekCode.Value
	190,  // 987: google.fhir.r4.uscore.USCoreLocation.HoursOfOperation.DaysOfWeekCode.id:type_name -> google.fhir.r4.core.String
	177,  // 988: google.fhir.r4.uscore.USCoreLocation.HoursOfOperation.DaysOfWeekCode.extension:type_name -> google.fhir.r4.core.Extension
	195,  // 989: google.fhir.r4.uscore.UsCoreCondition.OnsetX.date_time:type_name -> google.fhir.r4.core.DateTime
	222,  // 990: google.fhir.r4.uscore.UsCoreCondition.OnsetX.age:type_name -> google.fhir.r4.core.Age
	192,  // 991: google.fhir.r4.uscore.UsCoreCondition.OnsetX.period:type_name -> google.fhir.r4.core.Period
	204,  // 992: google.fhir.r4.uscore.UsCoreCondition.OnsetX.range:type_name -> google.fhir.r4.core.Range
	190,  // 993: google.fhir.r4.uscore.UsCoreCondition.OnsetX.string_value:type_name -> google.fhir.r4.core.String
	195,  // 994: google.fhir.r4.uscore.UsCoreCondition.AbatementX.date_time:type_name -> google.fhir.r4.core.DateTime
	222,  // 995: google.fhir.r4.uscore.UsCoreCondition.AbatementX.age:type_name -> google.fhir.r4.core.Age
	192,  // 996: google.fhir.r4.uscore.UsCoreCondition.AbatementX.period:type_name -> google.fhir.r4.core.Period
	204,  // 997: google.fhir.r4.uscore.UsCoreCondition.AbatementX.range:type_name -> google.fhir.r4.core.Range
	190,  // 998: google.fhir.r4.uscore.UsCoreCondition.AbatementX.string_value:type_name -> google.fhir.r4.core.String
	190,  // 999: google.fhir.r4.uscore.UsCoreCondition.Stage.id:type_name -> google.fhir.r4.core.String
	177,  // 1000: google.fhir.r4.uscore.UsCoreCondition.Stage.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1001: google.fhir.r4.uscore.UsCoreCondition.Stage.modifier_extension:type_name -> google.fhir.r4.core.Extension
	181,  // 1002: google.fhir.r4.uscore.UsCoreCondition.Stage.summary:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 1003: google.fhir.r4.uscore.UsCoreCondition.Stage.assessment:type_name -> google.fhir.r4.core.Reference
	181,  // 1004: google.fhir.r4.uscore.UsCoreCondition.Stage.type:type_name -> google.fhir.r4.core.CodeableConcept
	190,  // 1005: google.fhir.r4.uscore.UsCoreCondition.Evidence.id:type_name -> google.fhir.r4.core.String
	177,  // 1006: google.fhir.r4.uscore.UsCoreCondition.Evidence.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1007: google.fhir.r4.uscore.UsCoreCondition.Evidence.modifier_extension:type_name -> google.fhir.r4.core.Extension
	181,  // 1008: google.fhir.r4.uscore.UsCoreCondition.Evidence.code:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 1009: google.fhir.r4.uscore.UsCoreCondition.Evidence.detail:type_name -> google.fhir.r4.core.Reference
	202,  // 1010: google.fhir.r4.uscore.USCorePulseOximetryProfile.StatusCode.value:type_name -> google.fhir.r4.core.ObservationStatusCode.Value
	190,  // 1011: google.fhir.r4.uscore.USCorePulseOximetryProfile.StatusCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1012: google.fhir.r4.uscore.USCorePulseOximetryProfile.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	190,  // 1013: google.fhir.r4.uscore.USCorePulseOximetryProfile.CodeableConceptForCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1014: google.fhir.r4.uscore.USCorePulseOximetryProfile.CodeableConceptForCode.extension:type_name -> google.fhir.r4.core.Extension
	191,  // 1015: google.fhir.r4.uscore.USCorePulseOximetryProfile.CodeableConceptForCode.coding:type_name -> google.fhir.r4.core.Coding
	190,  // 1016: google.fhir.r4.uscore.USCorePulseOximetryProfile.CodeableConceptForCode.text:type_name -> google.fhir.r4.core.String
	223,  // 1017: google.fhir.r4.uscore.USCorePulseOximetryProfile.CodeableConceptForCode.oxygen_sat_code:type_name -> google.fhir.r4.core.CodingWithFixedCode
	223,  // 1018: google.fhir.r4.uscore.USCorePulseOximetryProfile.CodeableConceptForCode.pulse_ox:type_name -> google.fhir.r4.core.CodingWithFixedCode
	195,  // 1019: google.fhir.r4.uscore.USCorePulseOximetryProfile.EffectiveX.date_time:type_name -> google.fhir.r4.core.DateTime
	192,  // 1020: google.fhir.r4.uscore.USCorePulseOximetryProfile.EffectiveX.period:type_name -> google.fhir.r4.core.Period
	203,  // 1021: google.fhir.r4.uscore.USCorePulseOximetryProfile.ValueX.quantity:type_name -> google.fhir.r4.core.Quantity
	190,  // 1022: google.fhir.r4.uscore.USCorePulseOximetryProfile.ReferenceRange.id:type_name -> google.fhir.r4.core.String
	177,  // 1023: google.fhir.r4.uscore.USCorePulseOximetryProfile.ReferenceRange.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1024: google.fhir.r4.uscore.USCorePulseOximetryProfile.ReferenceRange.modifier_extension:type_name -> google.fhir.r4.core.Extension
	196,  // 1025: google.fhir.r4.uscore.USCorePulseOximetryProfile.ReferenceRange.low:type_name -> google.fhir.r4.core.SimpleQuantity
	196,  // 1026: google.fhir.r4.uscore.USCorePulseOximetryProfile.ReferenceRange.high:type_name -> google.fhir.r4.core.SimpleQuantity
	181,  // 1027: google.fhir.r4.uscore.USCorePulseOximetryProfile.ReferenceRange.type:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 1028: google.fhir.r4.uscore.USCorePulseOximetryProfile.ReferenceRange.applies_to:type_name -> google.fhir.r4.core.CodeableConcept
	204,  // 1029: google.fhir.r4.uscore.USCorePulseOximetryProfile.ReferenceRange.age:type_name -> google.fhir.r4.core.Range
	190,  // 1030: google.fhir.r4.uscore.USCorePulseOximetryProfile.ReferenceRange.text:type_name -> google.fhir.r4.core.String
	190,  // 1031: google.fhir.r4.uscore.USCorePulseOximetryProfile.Component.id:type_name -> google.fhir.r4.core.String
	177,  // 1032: google.fhir.r4.uscore.USCorePulseOximetryProfile.Component.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1033: google.fhir.r4.uscore.USCorePulseOximetryProfile.Component.modifier_extension:type_name -> google.fhir.r4.core.Extension
	181,  // 1034: google.fhir.r4.uscore.USCorePulseOximetryProfile.Component.code:type_name -> google.fhir.r4.core.CodeableConcept
	98,   // 1035: google.fhir.r4.uscore.USCorePulseOximetryProfile.Component.value:type_name -> google.fhir.r4.uscore.USCorePulseOximetryProfile.Component.ValueX
	181,  // 1036: google.fhir.r4.uscore.USCorePulseOximetryProfile.Component.data_absent_reason:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 1037: google.fhir.r4.uscore.USCorePulseOximetryProfile.Component.interpretation:type_name -> google.fhir.r4.core.CodeableConcept
	96,   // 1038: google.fhir.r4.uscore.USCorePulseOximetryProfile.Component.reference_range:type_name -> google.fhir.r4.uscore.USCorePulseOximetryProfile.ReferenceRange
	203,  // 1039: google.fhir.r4.uscore.USCorePulseOximetryProfile.Component.ValueX.quantity:type_name -> google.fhir.r4.core.Quantity
	181,  // 1040: google.fhir.r4.uscore.USCorePulseOximetryProfile.Component.ValueX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	190,  // 1041: google.fhir.r4.uscore.USCorePulseOximetryProfile.Component.ValueX.string_value:type_name -> google.fhir.r4.core.String
	183,  // 1042: google.fhir.r4.uscore.USCorePulseOximetryProfile.Component.ValueX.boolean:type_name -> google.fhir.r4.core.Boolean
	205,  // 1043: google.fhir.r4.uscore.USCorePulseOximetryProfile.Component.ValueX.integer:type_name -> google.fhir.r4.core.Integer
	204,  // 1044: google.fhir.r4.uscore.USCorePulseOximetryProfile.Component.ValueX.range:type_name -> google.fhir.r4.core.Range
	198,  // 1045: google.fhir.r4.uscore.USCorePulseOximetryProfile.Component.ValueX.ratio:type_name -> google.fhir.r4.core.Ratio
	206,  // 1046: google.fhir.r4.uscore.USCorePulseOximetryProfile.Component.ValueX.sampled_data:type_name -> google.fhir.r4.core.SampledData
	207,  // 1047: google.fhir.r4.uscore.USCorePulseOximetryProfile.Component.ValueX.time:type_name -> google.fhir.r4.core.Time
	195,  // 1048: google.fhir.r4.uscore.USCorePulseOximetryProfile.Component.ValueX.date_time:type_name -> google.fhir.r4.core.DateTime
	192,  // 1049: google.fhir.r4.uscore.USCorePulseOximetryProfile.Component.ValueX.period:type_name -> google.fhir.r4.core.Period
	190,  // 1050: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.UdiCarrier.id:type_name -> google.fhir.r4.core.String
	177,  // 1051: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.UdiCarrier.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1052: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.UdiCarrier.modifier_extension:type_name -> google.fhir.r4.core.Extension
	190,  // 1053: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.UdiCarrier.device_identifier:type_name -> google.fhir.r4.core.String
	173,  // 1054: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.UdiCarrier.issuer:type_name -> google.fhir.r4.core.Uri
	173,  // 1055: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.UdiCarrier.jurisdiction:type_name -> google.fhir.r4.core.Uri
	224,  // 1056: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.UdiCarrier.carrier_aidc:type_name -> google.fhir.r4.core.Base64Binary
	190,  // 1057: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.UdiCarrier.carrier_hrf:type_name -> google.fhir.r4.core.String
	105,  // 1058: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.UdiCarrier.entry_type:type_name -> google.fhir.r4.uscore.USCoreImplantableDeviceProfile.UdiCarrier.EntryTypeCode
	225,  // 1059: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.StatusCode.value:type_name -> google.fhir.r4.core.FHIRDeviceStatusCode.Value
	190,  // 1060: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.StatusCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1061: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	190,  // 1062: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.DeviceName.id:type_name -> google.fhir.r4.core.String
	177,  // 1063: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.DeviceName.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1064: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.DeviceName.modifier_extension:type_name -> google.fhir.r4.core.Extension
	190,  // 1065: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.DeviceName.name:type_name -> google.fhir.r4.core.String
	106,  // 1066: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.DeviceName.type:type_name -> google.fhir.r4.uscore.USCoreImplantableDeviceProfile.DeviceName.TypeCode
	190,  // 1067: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.Specialization.id:type_name -> google.fhir.r4.core.String
	177,  // 1068: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.Specialization.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1069: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.Specialization.modifier_extension:type_name -> google.fhir.r4.core.Extension
	181,  // 1070: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.Specialization.system_type:type_name -> google.fhir.r4.core.CodeableConcept
	190,  // 1071: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.Specialization.version:type_name -> google.fhir.r4.core.String
	190,  // 1072: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.Version.id:type_name -> google.fhir.r4.core.String
	177,  // 1073: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.Version.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1074: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.Version.modifier_extension:type_name -> google.fhir.r4.core.Extension
	181,  // 1075: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.Version.type:type_name -> google.fhir.r4.core.CodeableConcept
	178,  // 1076: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.Version.component:type_name -> google.fhir.r4.core.Identifier
	190,  // 1077: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.Version.value:type_name -> google.fhir.r4.core.String
	190,  // 1078: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.Property.id:type_name -> google.fhir.r4.core.String
	177,  // 1079: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.Property.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1080: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.Property.modifier_extension:type_name -> google.fhir.r4.core.Extension
	181,  // 1081: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.Property.type:type_name -> google.fhir.r4.core.CodeableConcept
	203,  // 1082: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.Property.value_quantity:type_name -> google.fhir.r4.core.Quantity
	181,  // 1083: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.Property.value_code:type_name -> google.fhir.r4.core.CodeableConcept
	226,  // 1084: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.UdiCarrier.EntryTypeCode.value:type_name -> google.fhir.r4.core.UDIEntryTypeCode.Value
	190,  // 1085: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.UdiCarrier.EntryTypeCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1086: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.UdiCarrier.EntryTypeCode.extension:type_name -> google.fhir.r4.core.Extension
	227,  // 1087: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.DeviceName.TypeCode.value:type_name -> google.fhir.r4.core.DeviceNameTypeCode.Value
	190,  // 1088: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.DeviceName.TypeCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1089: google.fhir.r4.uscore.USCoreImplantableDeviceProfile.DeviceName.TypeCode.extension:type_name -> google.fhir.r4.core.Extension
	228,  // 1090: google.fhir.r4.uscore.USCoreMedicationRequestProfile.StatusCode.value:type_name -> google.fhir.r4.core.MedicationrequestStatusCode.Value
	190,  // 1091: google.fhir.r4.uscore.USCoreMedicationRequestProfile.StatusCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1092: google.fhir.r4.uscore.USCoreMedicationRequestProfile.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	229,  // 1093: google.fhir.r4.uscore.USCoreMedicationRequestProfile.IntentCode.value:type_name -> google.fhir.r4.core.MedicationRequestIntentCode.Value
	190,  // 1094: google.fhir.r4.uscore.USCoreMedicationRequestProfile.IntentCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1095: google.fhir.r4.uscore.USCoreMedicationRequestProfile.IntentCode.extension:type_name -> google.fhir.r4.core.Extension
	230,  // 1096: google.fhir.r4.uscore.USCoreMedicationRequestProfile.PriorityCode.value:type_name -> google.fhir.r4.core.RequestPriorityCode.Value
	190,  // 1097: google.fhir.r4.uscore.USCoreMedicationRequestProfile.PriorityCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1098: google.fhir.r4.uscore.USCoreMedicationRequestProfile.PriorityCode.extension:type_name -> google.fhir.r4.core.Extension
	183,  // 1099: google.fhir.r4.uscore.USCoreMedicationRequestProfile.ReportedX.boolean:type_name -> google.fhir.r4.core.Boolean
	180,  // 1100: google.fhir.r4.uscore.USCoreMedicationRequestProfile.ReportedX.reference:type_name -> google.fhir.r4.core.Reference
	181,  // 1101: google.fhir.r4.uscore.USCoreMedicationRequestProfile.MedicationX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 1102: google.fhir.r4.uscore.USCoreMedicationRequestProfile.MedicationX.reference:type_name -> google.fhir.r4.core.Reference
	190,  // 1103: google.fhir.r4.uscore.USCoreMedicationRequestProfile.DispenseRequest.id:type_name -> google.fhir.r4.core.String
	177,  // 1104: google.fhir.r4.uscore.USCoreMedicationRequestProfile.DispenseRequest.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1105: google.fhir.r4.uscore.USCoreMedicationRequestProfile.DispenseRequest.modifier_extension:type_name -> google.fhir.r4.core.Extension
	114,  // 1106: google.fhir.r4.uscore.USCoreMedicationRequestProfile.DispenseRequest.initial_fill:type_name -> google.fhir.r4.uscore.USCoreMedicationRequestProfile.DispenseRequest.InitialFill
	193,  // 1107: google.fhir.r4.uscore.USCoreMedicationRequestProfile.DispenseRequest.dispense_interval:type_name -> google.fhir.r4.core.Duration
	192,  // 1108: google.fhir.r4.uscore.USCoreMedicationRequestProfile.DispenseRequest.validity_period:type_name -> google.fhir.r4.core.Period
	231,  // 1109: google.fhir.r4.uscore.USCoreMedicationRequestProfile.DispenseRequest.number_of_repeats_allowed:type_name -> google.fhir.r4.core.UnsignedInt
	196,  // 1110: google.fhir.r4.uscore.USCoreMedicationRequestProfile.DispenseRequest.quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	193,  // 1111: google.fhir.r4.uscore.USCoreMedicationRequestProfile.DispenseRequest.expected_supply_duration:type_name -> google.fhir.r4.core.Duration
	180,  // 1112: google.fhir.r4.uscore.USCoreMedicationRequestProfile.DispenseRequest.performer:type_name -> google.fhir.r4.core.Reference
	190,  // 1113: google.fhir.r4.uscore.USCoreMedicationRequestProfile.Substitution.id:type_name -> google.fhir.r4.core.String
	177,  // 1114: google.fhir.r4.uscore.USCoreMedicationRequestProfile.Substitution.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1115: google.fhir.r4.uscore.USCoreMedicationRequestProfile.Substitution.modifier_extension:type_name -> google.fhir.r4.core.Extension
	115,  // 1116: google.fhir.r4.uscore.USCoreMedicationRequestProfile.Substitution.allowed:type_name -> google.fhir.r4.uscore.USCoreMedicationRequestProfile.Substitution.AllowedX
	181,  // 1117: google.fhir.r4.uscore.USCoreMedicationRequestProfile.Substitution.reason:type_name -> google.fhir.r4.core.CodeableConcept
	190,  // 1118: google.fhir.r4.uscore.USCoreMedicationRequestProfile.DispenseRequest.InitialFill.id:type_name -> google.fhir.r4.core.String
	177,  // 1119: google.fhir.r4.uscore.USCoreMedicationRequestProfile.DispenseRequest.InitialFill.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1120: google.fhir.r4.uscore.USCoreMedicationRequestProfile.DispenseRequest.InitialFill.modifier_extension:type_name -> google.fhir.r4.core.Extension
	196,  // 1121: google.fhir.r4.uscore.USCoreMedicationRequestProfile.DispenseRequest.InitialFill.quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	193,  // 1122: google.fhir.r4.uscore.USCoreMedicationRequestProfile.DispenseRequest.InitialFill.duration:type_name -> google.fhir.r4.core.Duration
	183,  // 1123: google.fhir.r4.uscore.USCoreMedicationRequestProfile.Substitution.AllowedX.boolean:type_name -> google.fhir.r4.core.Boolean
	181,  // 1124: google.fhir.r4.uscore.USCoreMedicationRequestProfile.Substitution.AllowedX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	232,  // 1125: google.fhir.r4.uscore.USCoreMedicationProfile.StatusCode.value:type_name -> google.fhir.r4.core.MedicationStatusCode.Value
	190,  // 1126: google.fhir.r4.uscore.USCoreMedicationProfile.StatusCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1127: google.fhir.r4.uscore.USCoreMedicationProfile.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	190,  // 1128: google.fhir.r4.uscore.USCoreMedicationProfile.Ingredient.id:type_name -> google.fhir.r4.core.String
	177,  // 1129: google.fhir.r4.uscore.USCoreMedicationProfile.Ingredient.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1130: google.fhir.r4.uscore.USCoreMedicationProfile.Ingredient.modifier_extension:type_name -> google.fhir.r4.core.Extension
	119,  // 1131: google.fhir.r4.uscore.USCoreMedicationProfile.Ingredient.item:type_name -> google.fhir.r4.uscore.USCoreMedicationProfile.Ingredient.ItemX
	183,  // 1132: google.fhir.r4.uscore.USCoreMedicationProfile.Ingredient.is_active:type_name -> google.fhir.r4.core.Boolean
	198,  // 1133: google.fhir.r4.uscore.USCoreMedicationProfile.Ingredient.strength:type_name -> google.fhir.r4.core.Ratio
	190,  // 1134: google.fhir.r4.uscore.USCoreMedicationProfile.Batch.id:type_name -> google.fhir.r4.core.String
	177,  // 1135: google.fhir.r4.uscore.USCoreMedicationProfile.Batch.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1136: google.fhir.r4.uscore.USCoreMedicationProfile.Batch.modifier_extension:type_name -> google.fhir.r4.core.Extension
	190,  // 1137: google.fhir.r4.uscore.USCoreMedicationProfile.Batch.lot_number:type_name -> google.fhir.r4.core.String
	195,  // 1138: google.fhir.r4.uscore.USCoreMedicationProfile.Batch.expiration_date:type_name -> google.fhir.r4.core.DateTime
	181,  // 1139: google.fhir.r4.uscore.USCoreMedicationProfile.Ingredient.ItemX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 1140: google.fhir.r4.uscore.USCoreMedicationProfile.Ingredient.ItemX.reference:type_name -> google.fhir.r4.core.Reference
	233,  // 1141: google.fhir.r4.uscore.USCoreGoalProfile.LifecycleStatusCode.value:type_name -> google.fhir.r4.core.GoalLifecycleStatusCode.Value
	190,  // 1142: google.fhir.r4.uscore.USCoreGoalProfile.LifecycleStatusCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1143: google.fhir.r4.uscore.USCoreGoalProfile.LifecycleStatusCode.extension:type_name -> google.fhir.r4.core.Extension
	187,  // 1144: google.fhir.r4.uscore.USCoreGoalProfile.StartX.date:type_name -> google.fhir.r4.core.Date
	181,  // 1145: google.fhir.r4.uscore.USCoreGoalProfile.StartX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	190,  // 1146: google.fhir.r4.uscore.USCoreGoalProfile.Target.id:type_name -> google.fhir.r4.core.String
	177,  // 1147: google.fhir.r4.uscore.USCoreGoalProfile.Target.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1148: google.fhir.r4.uscore.USCoreGoalProfile.Target.modifier_extension:type_name -> google.fhir.r4.core.Extension
	181,  // 1149: google.fhir.r4.uscore.USCoreGoalProfile.Target.measure:type_name -> google.fhir.r4.core.CodeableConcept
	123,  // 1150: google.fhir.r4.uscore.USCoreGoalProfile.Target.detail:type_name -> google.fhir.r4.uscore.USCoreGoalProfile.Target.DetailX
	124,  // 1151: google.fhir.r4.uscore.USCoreGoalProfile.Target.due:type_name -> google.fhir.r4.uscore.USCoreGoalProfile.Target.DueX
	203,  // 1152: google.fhir.r4.uscore.USCoreGoalProfile.Target.DetailX.quantity:type_name -> google.fhir.r4.core.Quantity
	204,  // 1153: google.fhir.r4.uscore.USCoreGoalProfile.Target.DetailX.range:type_name -> google.fhir.r4.core.Range
	181,  // 1154: google.fhir.r4.uscore.USCoreGoalProfile.Target.DetailX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	190,  // 1155: google.fhir.r4.uscore.USCoreGoalProfile.Target.DetailX.string_value:type_name -> google.fhir.r4.core.String
	183,  // 1156: google.fhir.r4.uscore.USCoreGoalProfile.Target.DetailX.boolean:type_name -> google.fhir.r4.core.Boolean
	205,  // 1157: google.fhir.r4.uscore.USCoreGoalProfile.Target.DetailX.integer:type_name -> google.fhir.r4.core.Integer
	198,  // 1158: google.fhir.r4.uscore.USCoreGoalProfile.Target.DetailX.ratio:type_name -> google.fhir.r4.core.Ratio
	187,  // 1159: google.fhir.r4.uscore.USCoreGoalProfile.Target.DueX.date:type_name -> google.fhir.r4.core.Date
	190,  // 1160: google.fhir.r4.uscore.PatientUSCoreRaceExtension.OmbCategoryCoding.id:type_name -> google.fhir.r4.core.String
	177,  // 1161: google.fhir.r4.uscore.PatientUSCoreRaceExtension.OmbCategoryCoding.extension:type_name -> google.fhir.r4.core.Extension
	190,  // 1162: google.fhir.r4.uscore.PatientUSCoreRaceExtension.OmbCategoryCoding.version:type_name -> google.fhir.r4.core.String
	127,  // 1163: google.fhir.r4.uscore.PatientUSCoreRaceExtension.OmbCategoryCoding.code:type_name -> google.fhir.r4.uscore.PatientUSCoreRaceExtension.OmbCategoryCoding.BoundCode
	190,  // 1164: google.fhir.r4.uscore.PatientUSCoreRaceExtension.OmbCategoryCoding.display:type_name -> google.fhir.r4.core.String
	183,  // 1165: google.fhir.r4.uscore.PatientUSCoreRaceExtension.OmbCategoryCoding.user_selected:type_name -> google.fhir.r4.core.Boolean
	190,  // 1166: google.fhir.r4.uscore.PatientUSCoreRaceExtension.DetailedCoding.id:type_name -> google.fhir.r4.core.String
	177,  // 1167: google.fhir.r4.uscore.PatientUSCoreRaceExtension.DetailedCoding.extension:type_name -> google.fhir.r4.core.Extension
	190,  // 1168: google.fhir.r4.uscore.PatientUSCoreRaceExtension.DetailedCoding.version:type_name -> google.fhir.r4.core.String
	128,  // 1169: google.fhir.r4.uscore.PatientUSCoreRaceExtension.DetailedCoding.code:type_name -> google.fhir.r4.uscore.PatientUSCoreRaceExtension.DetailedCoding.BoundCode
	190,  // 1170: google.fhir.r4.uscore.PatientUSCoreRaceExtension.DetailedCoding.display:type_name -> google.fhir.r4.core.String
	183,  // 1171: google.fhir.r4.uscore.PatientUSCoreRaceExtension.DetailedCoding.user_selected:type_name -> google.fhir.r4.core.Boolean
	234,  // 1172: google.fhir.r4.uscore.PatientUSCoreRaceExtension.OmbCategoryCoding.BoundCode.value:type_name -> google.fhir.r4.uscore.OmbRaceCategoriesValueSet.Value
	190,  // 1173: google.fhir.r4.uscore.PatientUSCoreRaceExtension.OmbCategoryCoding.BoundCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1174: google.fhir.r4.uscore.PatientUSCoreRaceExtension.OmbCategoryCoding.BoundCode.extension:type_name -> google.fhir.r4.core.Extension
	235,  // 1175: google.fhir.r4.uscore.PatientUSCoreRaceExtension.DetailedCoding.BoundCode.value:type_name -> google.fhir.r4.uscore.DetailedRaceValueSet.Value
	190,  // 1176: google.fhir.r4.uscore.PatientUSCoreRaceExtension.DetailedCoding.BoundCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1177: google.fhir.r4.uscore.PatientUSCoreRaceExtension.DetailedCoding.BoundCode.extension:type_name -> google.fhir.r4.core.Extension
	190,  // 1178: google.fhir.r4.uscore.USCorePractitionerRoleProfile.AvailableTime.id:type_name -> google.fhir.r4.core.String
	177,  // 1179: google.fhir.r4.uscore.USCorePractitionerRoleProfile.AvailableTime.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1180: google.fhir.r4.uscore.USCorePractitionerRoleProfile.AvailableTime.modifier_extension:type_name -> google.fhir.r4.core.Extension
	131,  // 1181: google.fhir.r4.uscore.USCorePractitionerRoleProfile.AvailableTime.days_of_week:type_name -> google.fhir.r4.uscore.USCorePractitionerRoleProfile.AvailableTime.DaysOfWeekCode
	183,  // 1182: google.fhir.r4.uscore.USCorePractitionerRoleProfile.AvailableTime.all_day:type_name -> google.fhir.r4.core.Boolean
	207,  // 1183: google.fhir.r4.uscore.USCorePractitionerRoleProfile.AvailableTime.available_start_time:type_name -> google.fhir.r4.core.Time
	207,  // 1184: google.fhir.r4.uscore.USCorePractitionerRoleProfile.AvailableTime.available_end_time:type_name -> google.fhir.r4.core.Time
	190,  // 1185: google.fhir.r4.uscore.USCorePractitionerRoleProfile.NotAvailable.id:type_name -> google.fhir.r4.core.String
	177,  // 1186: google.fhir.r4.uscore.USCorePractitionerRoleProfile.NotAvailable.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1187: google.fhir.r4.uscore.USCorePractitionerRoleProfile.NotAvailable.modifier_extension:type_name -> google.fhir.r4.core.Extension
	190,  // 1188: google.fhir.r4.uscore.USCorePractitionerRoleProfile.NotAvailable.description:type_name -> google.fhir.r4.core.String
	192,  // 1189: google.fhir.r4.uscore.USCorePractitionerRoleProfile.NotAvailable.during:type_name -> google.fhir.r4.core.Period
	221,  // 1190: google.fhir.r4.uscore.USCorePractitionerRoleProfile.AvailableTime.DaysOfWeekCode.value:type_name -> google.fhir.r4.core.DaysOfWeekCode.Value
	190,  // 1191: google.fhir.r4.uscore.USCorePractitionerRoleProfile.AvailableTime.DaysOfWeekCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1192: google.fhir.r4.uscore.USCorePractitionerRoleProfile.AvailableTime.DaysOfWeekCode.extension:type_name -> google.fhir.r4.core.Extension
	236,  // 1193: google.fhir.r4.uscore.USCoreAllergyIntolerance.TypeCode.value:type_name -> google.fhir.r4.core.AllergyIntoleranceTypeCode.Value
	190,  // 1194: google.fhir.r4.uscore.USCoreAllergyIntolerance.TypeCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1195: google.fhir.r4.uscore.USCoreAllergyIntolerance.TypeCode.extension:type_name -> google.fhir.r4.core.Extension
	237,  // 1196: google.fhir.r4.uscore.USCoreAllergyIntolerance.CategoryCode.value:type_name -> google.fhir.r4.core.AllergyIntoleranceCategoryCode.Value
	190,  // 1197: google.fhir.r4.uscore.USCoreAllergyIntolerance.CategoryCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1198: google.fhir.r4.uscore.USCoreAllergyIntolerance.CategoryCode.extension:type_name -> google.fhir.r4.core.Extension
	238,  // 1199: google.fhir.r4.uscore.USCoreAllergyIntolerance.CriticalityCode.value:type_name -> google.fhir.r4.core.AllergyIntoleranceCriticalityCode.Value
	190,  // 1200: google.fhir.r4.uscore.USCoreAllergyIntolerance.CriticalityCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1201: google.fhir.r4.uscore.USCoreAllergyIntolerance.CriticalityCode.extension:type_name -> google.fhir.r4.core.Extension
	195,  // 1202: google.fhir.r4.uscore.USCoreAllergyIntolerance.OnsetX.date_time:type_name -> google.fhir.r4.core.DateTime
	222,  // 1203: google.fhir.r4.uscore.USCoreAllergyIntolerance.OnsetX.age:type_name -> google.fhir.r4.core.Age
	192,  // 1204: google.fhir.r4.uscore.USCoreAllergyIntolerance.OnsetX.period:type_name -> google.fhir.r4.core.Period
	204,  // 1205: google.fhir.r4.uscore.USCoreAllergyIntolerance.OnsetX.range:type_name -> google.fhir.r4.core.Range
	190,  // 1206: google.fhir.r4.uscore.USCoreAllergyIntolerance.OnsetX.string_value:type_name -> google.fhir.r4.core.String
	190,  // 1207: google.fhir.r4.uscore.USCoreAllergyIntolerance.Reaction.id:type_name -> google.fhir.r4.core.String
	177,  // 1208: google.fhir.r4.uscore.USCoreAllergyIntolerance.Reaction.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1209: google.fhir.r4.uscore.USCoreAllergyIntolerance.Reaction.modifier_extension:type_name -> google.fhir.r4.core.Extension
	181,  // 1210: google.fhir.r4.uscore.USCoreAllergyIntolerance.Reaction.substance:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 1211: google.fhir.r4.uscore.USCoreAllergyIntolerance.Reaction.manifestation:type_name -> google.fhir.r4.core.CodeableConcept
	190,  // 1212: google.fhir.r4.uscore.USCoreAllergyIntolerance.Reaction.description:type_name -> google.fhir.r4.core.String
	195,  // 1213: google.fhir.r4.uscore.USCoreAllergyIntolerance.Reaction.onset:type_name -> google.fhir.r4.core.DateTime
	137,  // 1214: google.fhir.r4.uscore.USCoreAllergyIntolerance.Reaction.severity:type_name -> google.fhir.r4.uscore.USCoreAllergyIntolerance.Reaction.SeverityCode
	181,  // 1215: google.fhir.r4.uscore.USCoreAllergyIntolerance.Reaction.exposure_route:type_name -> google.fhir.r4.core.CodeableConcept
	182,  // 1216: google.fhir.r4.uscore.USCoreAllergyIntolerance.Reaction.note:type_name -> google.fhir.r4.core.Annotation
	239,  // 1217: google.fhir.r4.uscore.USCoreAllergyIntolerance.Reaction.SeverityCode.value:type_name -> google.fhir.r4.core.AllergyIntoleranceSeverityCode.Value
	190,  // 1218: google.fhir.r4.uscore.USCoreAllergyIntolerance.Reaction.SeverityCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1219: google.fhir.r4.uscore.USCoreAllergyIntolerance.Reaction.SeverityCode.extension:type_name -> google.fhir.r4.core.Extension
	240,  // 1220: google.fhir.r4.uscore.USCoreCarePlanProfile.StatusCode.value:type_name -> google.fhir.r4.core.RequestStatusCode.Value
	190,  // 1221: google.fhir.r4.uscore.USCoreCarePlanProfile.StatusCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1222: google.fhir.r4.uscore.USCoreCarePlanProfile.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	241,  // 1223: google.fhir.r4.uscore.USCoreCarePlanProfile.IntentCode.value:type_name -> google.fhir.r4.core.CarePlanIntentValueSet.Value
	190,  // 1224: google.fhir.r4.uscore.USCoreCarePlanProfile.IntentCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1225: google.fhir.r4.uscore.USCoreCarePlanProfile.IntentCode.extension:type_name -> google.fhir.r4.core.Extension
	190,  // 1226: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.id:type_name -> google.fhir.r4.core.String
	177,  // 1227: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1228: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.modifier_extension:type_name -> google.fhir.r4.core.Extension
	181,  // 1229: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.outcome_codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 1230: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.outcome_reference:type_name -> google.fhir.r4.core.Reference
	182,  // 1231: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.progress:type_name -> google.fhir.r4.core.Annotation
	180,  // 1232: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.reference:type_name -> google.fhir.r4.core.Reference
	141,  // 1233: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.detail:type_name -> google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail
	190,  // 1234: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.id:type_name -> google.fhir.r4.core.String
	177,  // 1235: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1236: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.modifier_extension:type_name -> google.fhir.r4.core.Extension
	142,  // 1237: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.kind:type_name -> google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.KindCode
	179,  // 1238: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.instantiates_canonical:type_name -> google.fhir.r4.core.Canonical
	173,  // 1239: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.instantiates_uri:type_name -> google.fhir.r4.core.Uri
	181,  // 1240: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.code:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 1241: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.reason_code:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 1242: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.reason_reference:type_name -> google.fhir.r4.core.Reference
	180,  // 1243: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.goal:type_name -> google.fhir.r4.core.Reference
	143,  // 1244: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.status:type_name -> google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.StatusCode
	181,  // 1245: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.status_reason:type_name -> google.fhir.r4.core.CodeableConcept
	183,  // 1246: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.do_not_perform:type_name -> google.fhir.r4.core.Boolean
	144,  // 1247: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.scheduled:type_name -> google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.ScheduledX
	180,  // 1248: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.location:type_name -> google.fhir.r4.core.Reference
	180,  // 1249: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.performer:type_name -> google.fhir.r4.core.Reference
	145,  // 1250: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.product:type_name -> google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.ProductX
	196,  // 1251: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.daily_amount:type_name -> google.fhir.r4.core.SimpleQuantity
	196,  // 1252: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	190,  // 1253: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.description:type_name -> google.fhir.r4.core.String
	242,  // 1254: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.KindCode.value:type_name -> google.fhir.r4.core.CarePlanActivityKindValueSet.Value
	190,  // 1255: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.KindCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1256: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.KindCode.extension:type_name -> google.fhir.r4.core.Extension
	243,  // 1257: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.StatusCode.value:type_name -> google.fhir.r4.core.CarePlanActivityStatusCode.Value
	190,  // 1258: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.StatusCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1259: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	244,  // 1260: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.ScheduledX.timing:type_name -> google.fhir.r4.core.Timing
	192,  // 1261: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.ScheduledX.period:type_name -> google.fhir.r4.core.Period
	190,  // 1262: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.ScheduledX.string_value:type_name -> google.fhir.r4.core.String
	181,  // 1263: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.ProductX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	180,  // 1264: google.fhir.r4.uscore.USCoreCarePlanProfile.Activity.Detail.ProductX.reference:type_name -> google.fhir.r4.core.Reference
	200,  // 1265: google.fhir.r4.uscore.USCorePatientProfile.GenderCode.value:type_name -> google.fhir.r4.core.AdministrativeGenderCode.Value
	190,  // 1266: google.fhir.r4.uscore.USCorePatientProfile.GenderCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1267: google.fhir.r4.uscore.USCorePatientProfile.GenderCode.extension:type_name -> google.fhir.r4.core.Extension
	183,  // 1268: google.fhir.r4.uscore.USCorePatientProfile.DeceasedX.boolean:type_name -> google.fhir.r4.core.Boolean
	195,  // 1269: google.fhir.r4.uscore.USCorePatientProfile.DeceasedX.date_time:type_name -> google.fhir.r4.core.DateTime
	183,  // 1270: google.fhir.r4.uscore.USCorePatientProfile.MultipleBirthX.boolean:type_name -> google.fhir.r4.core.Boolean
	205,  // 1271: google.fhir.r4.uscore.USCorePatientProfile.MultipleBirthX.integer:type_name -> google.fhir.r4.core.Integer
	190,  // 1272: google.fhir.r4.uscore.USCorePatientProfile.Contact.id:type_name -> google.fhir.r4.core.String
	177,  // 1273: google.fhir.r4.uscore.USCorePatientProfile.Contact.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1274: google.fhir.r4.uscore.USCorePatientProfile.Contact.modifier_extension:type_name -> google.fhir.r4.core.Extension
	181,  // 1275: google.fhir.r4.uscore.USCorePatientProfile.Contact.relationship:type_name -> google.fhir.r4.core.CodeableConcept
	184,  // 1276: google.fhir.r4.uscore.USCorePatientProfile.Contact.name:type_name -> google.fhir.r4.core.HumanName
	185,  // 1277: google.fhir.r4.uscore.USCorePatientProfile.Contact.telecom:type_name -> google.fhir.r4.core.ContactPoint
	186,  // 1278: google.fhir.r4.uscore.USCorePatientProfile.Contact.address:type_name -> google.fhir.r4.core.Address
	152,  // 1279: google.fhir.r4.uscore.USCorePatientProfile.Contact.gender:type_name -> google.fhir.r4.uscore.USCorePatientProfile.Contact.GenderCode
	180,  // 1280: google.fhir.r4.uscore.USCorePatientProfile.Contact.organization:type_name -> google.fhir.r4.core.Reference
	192,  // 1281: google.fhir.r4.uscore.USCorePatientProfile.Contact.period:type_name -> google.fhir.r4.core.Period
	190,  // 1282: google.fhir.r4.uscore.USCorePatientProfile.Communication.id:type_name -> google.fhir.r4.core.String
	177,  // 1283: google.fhir.r4.uscore.USCorePatientProfile.Communication.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1284: google.fhir.r4.uscore.USCorePatientProfile.Communication.modifier_extension:type_name -> google.fhir.r4.core.Extension
	181,  // 1285: google.fhir.r4.uscore.USCorePatientProfile.Communication.language:type_name -> google.fhir.r4.core.CodeableConcept
	183,  // 1286: google.fhir.r4.uscore.USCorePatientProfile.Communication.preferred:type_name -> google.fhir.r4.core.Boolean
	190,  // 1287: google.fhir.r4.uscore.USCorePatientProfile.Link.id:type_name -> google.fhir.r4.core.String
	177,  // 1288: google.fhir.r4.uscore.USCorePatientProfile.Link.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1289: google.fhir.r4.uscore.USCorePatientProfile.Link.modifier_extension:type_name -> google.fhir.r4.core.Extension
	180,  // 1290: google.fhir.r4.uscore.USCorePatientProfile.Link.other:type_name -> google.fhir.r4.core.Reference
	153,  // 1291: google.fhir.r4.uscore.USCorePatientProfile.Link.type:type_name -> google.fhir.r4.uscore.USCorePatientProfile.Link.TypeCode
	200,  // 1292: google.fhir.r4.uscore.USCorePatientProfile.Contact.GenderCode.value:type_name -> google.fhir.r4.core.AdministrativeGenderCode.Value
	190,  // 1293: google.fhir.r4.uscore.USCorePatientProfile.Contact.GenderCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1294: google.fhir.r4.uscore.USCorePatientProfile.Contact.GenderCode.extension:type_name -> google.fhir.r4.core.Extension
	245,  // 1295: google.fhir.r4.uscore.USCorePatientProfile.Link.TypeCode.value:type_name -> google.fhir.r4.core.LinkTypeCode.Value
	190,  // 1296: google.fhir.r4.uscore.USCorePatientProfile.Link.TypeCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1297: google.fhir.r4.uscore.USCorePatientProfile.Link.TypeCode.extension:type_name -> google.fhir.r4.core.Extension
	190,  // 1298: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.OmbCategoryCoding.id:type_name -> google.fhir.r4.core.String
	177,  // 1299: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.OmbCategoryCoding.extension:type_name -> google.fhir.r4.core.Extension
	190,  // 1300: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.OmbCategoryCoding.version:type_name -> google.fhir.r4.core.String
	156,  // 1301: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.OmbCategoryCoding.code:type_name -> google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.OmbCategoryCoding.BoundCode
	190,  // 1302: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.OmbCategoryCoding.display:type_name -> google.fhir.r4.core.String
	183,  // 1303: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.OmbCategoryCoding.user_selected:type_name -> google.fhir.r4.core.Boolean
	190,  // 1304: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.DetailedCoding.id:type_name -> google.fhir.r4.core.String
	177,  // 1305: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.DetailedCoding.extension:type_name -> google.fhir.r4.core.Extension
	190,  // 1306: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.DetailedCoding.version:type_name -> google.fhir.r4.core.String
	157,  // 1307: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.DetailedCoding.code:type_name -> google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.DetailedCoding.BoundCode
	190,  // 1308: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.DetailedCoding.display:type_name -> google.fhir.r4.core.String
	183,  // 1309: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.DetailedCoding.user_selected:type_name -> google.fhir.r4.core.Boolean
	246,  // 1310: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.OmbCategoryCoding.BoundCode.value:type_name -> google.fhir.r4.uscore.OmbEthnicityCategoriesValueSet.Value
	190,  // 1311: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.OmbCategoryCoding.BoundCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1312: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.OmbCategoryCoding.BoundCode.extension:type_name -> google.fhir.r4.core.Extension
	247,  // 1313: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.DetailedCoding.BoundCode.value:type_name -> google.fhir.r4.uscore.DetailedEthnicityValueSet.Value
	190,  // 1314: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.DetailedCoding.BoundCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1315: google.fhir.r4.uscore.PatientUSCoreEthnicityExtension.DetailedCoding.BoundCode.extension:type_name -> google.fhir.r4.core.Extension
	248,  // 1316: google.fhir.r4.uscore.USCoreSmokingStatusProfile.StatusCode.value:type_name -> google.fhir.r4.uscore.USCoreObservationSmokingStatusStatusValueSet.Value
	190,  // 1317: google.fhir.r4.uscore.USCoreSmokingStatusProfile.StatusCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1318: google.fhir.r4.uscore.USCoreSmokingStatusProfile.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	195,  // 1319: google.fhir.r4.uscore.USCoreSmokingStatusProfile.EffectiveX.date_time:type_name -> google.fhir.r4.core.DateTime
	192,  // 1320: google.fhir.r4.uscore.USCoreSmokingStatusProfile.EffectiveX.period:type_name -> google.fhir.r4.core.Period
	244,  // 1321: google.fhir.r4.uscore.USCoreSmokingStatusProfile.EffectiveX.timing:type_name -> google.fhir.r4.core.Timing
	189,  // 1322: google.fhir.r4.uscore.USCoreSmokingStatusProfile.EffectiveX.instant:type_name -> google.fhir.r4.core.Instant
	181,  // 1323: google.fhir.r4.uscore.USCoreSmokingStatusProfile.ValueX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	190,  // 1324: google.fhir.r4.uscore.USCoreSmokingStatusProfile.ReferenceRange.id:type_name -> google.fhir.r4.core.String
	177,  // 1325: google.fhir.r4.uscore.USCoreSmokingStatusProfile.ReferenceRange.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1326: google.fhir.r4.uscore.USCoreSmokingStatusProfile.ReferenceRange.modifier_extension:type_name -> google.fhir.r4.core.Extension
	196,  // 1327: google.fhir.r4.uscore.USCoreSmokingStatusProfile.ReferenceRange.low:type_name -> google.fhir.r4.core.SimpleQuantity
	196,  // 1328: google.fhir.r4.uscore.USCoreSmokingStatusProfile.ReferenceRange.high:type_name -> google.fhir.r4.core.SimpleQuantity
	181,  // 1329: google.fhir.r4.uscore.USCoreSmokingStatusProfile.ReferenceRange.type:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 1330: google.fhir.r4.uscore.USCoreSmokingStatusProfile.ReferenceRange.applies_to:type_name -> google.fhir.r4.core.CodeableConcept
	204,  // 1331: google.fhir.r4.uscore.USCoreSmokingStatusProfile.ReferenceRange.age:type_name -> google.fhir.r4.core.Range
	190,  // 1332: google.fhir.r4.uscore.USCoreSmokingStatusProfile.ReferenceRange.text:type_name -> google.fhir.r4.core.String
	190,  // 1333: google.fhir.r4.uscore.USCoreSmokingStatusProfile.Component.id:type_name -> google.fhir.r4.core.String
	177,  // 1334: google.fhir.r4.uscore.USCoreSmokingStatusProfile.Component.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1335: google.fhir.r4.uscore.USCoreSmokingStatusProfile.Component.modifier_extension:type_name -> google.fhir.r4.core.Extension
	181,  // 1336: google.fhir.r4.uscore.USCoreSmokingStatusProfile.Component.code:type_name -> google.fhir.r4.core.CodeableConcept
	163,  // 1337: google.fhir.r4.uscore.USCoreSmokingStatusProfile.Component.value:type_name -> google.fhir.r4.uscore.USCoreSmokingStatusProfile.Component.ValueX
	181,  // 1338: google.fhir.r4.uscore.USCoreSmokingStatusProfile.Component.data_absent_reason:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 1339: google.fhir.r4.uscore.USCoreSmokingStatusProfile.Component.interpretation:type_name -> google.fhir.r4.core.CodeableConcept
	161,  // 1340: google.fhir.r4.uscore.USCoreSmokingStatusProfile.Component.reference_range:type_name -> google.fhir.r4.uscore.USCoreSmokingStatusProfile.ReferenceRange
	203,  // 1341: google.fhir.r4.uscore.USCoreSmokingStatusProfile.Component.ValueX.quantity:type_name -> google.fhir.r4.core.Quantity
	181,  // 1342: google.fhir.r4.uscore.USCoreSmokingStatusProfile.Component.ValueX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	190,  // 1343: google.fhir.r4.uscore.USCoreSmokingStatusProfile.Component.ValueX.string_value:type_name -> google.fhir.r4.core.String
	183,  // 1344: google.fhir.r4.uscore.USCoreSmokingStatusProfile.Component.ValueX.boolean:type_name -> google.fhir.r4.core.Boolean
	205,  // 1345: google.fhir.r4.uscore.USCoreSmokingStatusProfile.Component.ValueX.integer:type_name -> google.fhir.r4.core.Integer
	204,  // 1346: google.fhir.r4.uscore.USCoreSmokingStatusProfile.Component.ValueX.range:type_name -> google.fhir.r4.core.Range
	198,  // 1347: google.fhir.r4.uscore.USCoreSmokingStatusProfile.Component.ValueX.ratio:type_name -> google.fhir.r4.core.Ratio
	206,  // 1348: google.fhir.r4.uscore.USCoreSmokingStatusProfile.Component.ValueX.sampled_data:type_name -> google.fhir.r4.core.SampledData
	207,  // 1349: google.fhir.r4.uscore.USCoreSmokingStatusProfile.Component.ValueX.time:type_name -> google.fhir.r4.core.Time
	195,  // 1350: google.fhir.r4.uscore.USCoreSmokingStatusProfile.Component.ValueX.date_time:type_name -> google.fhir.r4.core.DateTime
	192,  // 1351: google.fhir.r4.uscore.USCoreSmokingStatusProfile.Component.ValueX.period:type_name -> google.fhir.r4.core.Period
	190,  // 1352: google.fhir.r4.uscore.USCoreOrganizationProfile.Contact.id:type_name -> google.fhir.r4.core.String
	177,  // 1353: google.fhir.r4.uscore.USCoreOrganizationProfile.Contact.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1354: google.fhir.r4.uscore.USCoreOrganizationProfile.Contact.modifier_extension:type_name -> google.fhir.r4.core.Extension
	181,  // 1355: google.fhir.r4.uscore.USCoreOrganizationProfile.Contact.purpose:type_name -> google.fhir.r4.core.CodeableConcept
	184,  // 1356: google.fhir.r4.uscore.USCoreOrganizationProfile.Contact.name:type_name -> google.fhir.r4.core.HumanName
	185,  // 1357: google.fhir.r4.uscore.USCoreOrganizationProfile.Contact.telecom:type_name -> google.fhir.r4.core.ContactPoint
	186,  // 1358: google.fhir.r4.uscore.USCoreOrganizationProfile.Contact.address:type_name -> google.fhir.r4.core.Address
	202,  // 1359: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.StatusCode.value:type_name -> google.fhir.r4.core.ObservationStatusCode.Value
	190,  // 1360: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.StatusCode.id:type_name -> google.fhir.r4.core.String
	177,  // 1361: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	195,  // 1362: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.EffectiveX.date_time:type_name -> google.fhir.r4.core.DateTime
	192,  // 1363: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.EffectiveX.period:type_name -> google.fhir.r4.core.Period
	203,  // 1364: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.ValueX.quantity:type_name -> google.fhir.r4.core.Quantity
	190,  // 1365: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.ReferenceRange.id:type_name -> google.fhir.r4.core.String
	177,  // 1366: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.ReferenceRange.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1367: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.ReferenceRange.modifier_extension:type_name -> google.fhir.r4.core.Extension
	196,  // 1368: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.ReferenceRange.low:type_name -> google.fhir.r4.core.SimpleQuantity
	196,  // 1369: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.ReferenceRange.high:type_name -> google.fhir.r4.core.SimpleQuantity
	181,  // 1370: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.ReferenceRange.type:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 1371: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.ReferenceRange.applies_to:type_name -> google.fhir.r4.core.CodeableConcept
	204,  // 1372: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.ReferenceRange.age:type_name -> google.fhir.r4.core.Range
	190,  // 1373: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.ReferenceRange.text:type_name -> google.fhir.r4.core.String
	190,  // 1374: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.Component.id:type_name -> google.fhir.r4.core.String
	177,  // 1375: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.Component.extension:type_name -> google.fhir.r4.core.Extension
	177,  // 1376: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.Component.modifier_extension:type_name -> google.fhir.r4.core.Extension
	181,  // 1377: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.Component.code:type_name -> google.fhir.r4.core.CodeableConcept
	170,  // 1378: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.Component.value:type_name -> google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.Component.ValueX
	181,  // 1379: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.Component.data_absent_reason:type_name -> google.fhir.r4.core.CodeableConcept
	181,  // 1380: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.Component.interpretation:type_name -> google.fhir.r4.core.CodeableConcept
	168,  // 1381: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.Component.reference_range:type_name -> google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.ReferenceRange
	203,  // 1382: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.Component.ValueX.quantity:type_name -> google.fhir.r4.core.Quantity
	181,  // 1383: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.Component.ValueX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	190,  // 1384: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.Component.ValueX.string_value:type_name -> google.fhir.r4.core.String
	183,  // 1385: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.Component.ValueX.boolean:type_name -> google.fhir.r4.core.Boolean
	205,  // 1386: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.Component.ValueX.integer:type_name -> google.fhir.r4.core.Integer
	204,  // 1387: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.Component.ValueX.range:type_name -> google.fhir.r4.core.Range
	198,  // 1388: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.Component.ValueX.ratio:type_name -> google.fhir.r4.core.Ratio
	206,  // 1389: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.Component.ValueX.sampled_data:type_name -> google.fhir.r4.core.SampledData
	207,  // 1390: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.Component.ValueX.time:type_name -> google.fhir.r4.core.Time
	195,  // 1391: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.Component.ValueX.date_time:type_name -> google.fhir.r4.core.DateTime
	192,  // 1392: google.fhir.r4.uscore.USCorePediatricBMIforAgeObservationProfile.Component.ValueX.period:type_name -> google.fhir.r4.core.Period
	1393, // [1393:1393] is the sub-list for method output_type
	1393, // [1393:1393] is the sub-list for method input_type
	1393, // [1393:1393] is the sub-list for extension type_name
	1393, // [1393:1393] is the sub-list for extension extendee
	0,    // [0:1393] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r4_uscore_proto_init() }
func file_proto_google_fhir_proto_r4_uscore_proto_init() {
	if File_proto_google_fhir_proto_r4_uscore_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreProcedureProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePractitionerProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreDiagnosticReportProfileLaboratoryReporting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePediatricWeightForHeightObservationProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreEncounterProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreDocumentReferenceProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreCareTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreProvenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreImmunizationProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientUSCoreBirthSexExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreDiagnosticReportProfileNoteExchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreLaboratoryResultObservationProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePulseOximetryProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreImplantableDeviceProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreMedicationRequestProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreMedicationProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreGoalProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientUSCoreRaceExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePractitionerRoleProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreAllergyIntolerance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreCarePlanProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePatientProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientUSCoreEthnicityExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreDirectEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreSmokingStatusProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreOrganizationProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePediatricBMIforAgeObservationProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreProcedureProfile_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreProcedureProfile_PerformedX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreProcedureProfile_Performer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreProcedureProfile_FocalDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePractitionerProfile_GenderCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePractitionerProfile_Qualification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreDiagnosticReportProfileLaboratoryReporting_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreDiagnosticReportProfileLaboratoryReporting_Media); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePediatricWeightForHeightObservationProfile_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePediatricWeightForHeightObservationProfile_EffectiveX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePediatricWeightForHeightObservationProfile_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePediatricWeightForHeightObservationProfile_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePediatricWeightForHeightObservationProfile_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePediatricWeightForHeightObservationProfile_Component_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreEncounterProfile_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreEncounterProfile_StatusHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreEncounterProfile_ClassHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreEncounterProfile_Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreEncounterProfile_Diagnosis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreEncounterProfile_Hospitalization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreEncounterProfile_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreEncounterProfile_StatusHistory_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreEncounterProfile_Location_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreDocumentReferenceProfile_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreDocumentReferenceProfile_DocStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreDocumentReferenceProfile_RelatesTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreDocumentReferenceProfile_Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreDocumentReferenceProfile_Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreDocumentReferenceProfile_RelatesTo_CodeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreCareTeam_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreCareTeam_Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreProvenance_OccurredX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreProvenance_Agent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreProvenance_Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreProvenance_Entity_RoleCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreImmunizationProfile_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreImmunizationProfile_OccurrenceX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreImmunizationProfile_Performer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreImmunizationProfile_Education); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreImmunizationProfile_Reaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreImmunizationProfile_ProtocolApplied); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreImmunizationProfile_ProtocolApplied_DoseNumberX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreImmunizationProfile_ProtocolApplied_SeriesDosesX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientUSCoreBirthSexExtension_ValueCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreDiagnosticReportProfileNoteExchange_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreDiagnosticReportProfileNoteExchange_EffectiveX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreDiagnosticReportProfileNoteExchange_Media); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreLaboratoryResultObservationProfile_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreLaboratoryResultObservationProfile_EffectiveX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreLaboratoryResultObservationProfile_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreLaboratoryResultObservationProfile_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreLaboratoryResultObservationProfile_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreLaboratoryResultObservationProfile_Component_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreLocation_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreLocation_ModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreLocation_Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreLocation_HoursOfOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreLocation_HoursOfOperation_DaysOfWeekCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreCondition_OnsetX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreCondition_AbatementX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreCondition_Stage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsCoreCondition_Evidence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePulseOximetryProfile_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePulseOximetryProfile_CodeableConceptForCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePulseOximetryProfile_EffectiveX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePulseOximetryProfile_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePulseOximetryProfile_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePulseOximetryProfile_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePulseOximetryProfile_Component_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreImplantableDeviceProfile_UdiCarrier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreImplantableDeviceProfile_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreImplantableDeviceProfile_DeviceName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreImplantableDeviceProfile_Specialization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreImplantableDeviceProfile_Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreImplantableDeviceProfile_Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreImplantableDeviceProfile_UdiCarrier_EntryTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreImplantableDeviceProfile_DeviceName_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreMedicationRequestProfile_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreMedicationRequestProfile_IntentCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreMedicationRequestProfile_PriorityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreMedicationRequestProfile_ReportedX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreMedicationRequestProfile_MedicationX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreMedicationRequestProfile_DispenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreMedicationRequestProfile_Substitution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreMedicationRequestProfile_DispenseRequest_InitialFill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreMedicationRequestProfile_Substitution_AllowedX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreMedicationProfile_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreMedicationProfile_Ingredient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreMedicationProfile_Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreMedicationProfile_Ingredient_ItemX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreGoalProfile_LifecycleStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreGoalProfile_StartX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreGoalProfile_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreGoalProfile_Target_DetailX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreGoalProfile_Target_DueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientUSCoreRaceExtension_OmbCategoryCoding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientUSCoreRaceExtension_DetailedCoding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientUSCoreRaceExtension_OmbCategoryCoding_BoundCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientUSCoreRaceExtension_DetailedCoding_BoundCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePractitionerRoleProfile_AvailableTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePractitionerRoleProfile_NotAvailable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePractitionerRoleProfile_AvailableTime_DaysOfWeekCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreAllergyIntolerance_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreAllergyIntolerance_CategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreAllergyIntolerance_CriticalityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreAllergyIntolerance_OnsetX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreAllergyIntolerance_Reaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreAllergyIntolerance_Reaction_SeverityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreCarePlanProfile_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreCarePlanProfile_IntentCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreCarePlanProfile_Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreCarePlanProfile_Activity_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreCarePlanProfile_Activity_Detail_KindCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreCarePlanProfile_Activity_Detail_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreCarePlanProfile_Activity_Detail_ScheduledX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreCarePlanProfile_Activity_Detail_ProductX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePatientProfile_GenderCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePatientProfile_DeceasedX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePatientProfile_MultipleBirthX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePatientProfile_Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePatientProfile_Communication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePatientProfile_Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePatientProfile_Contact_GenderCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePatientProfile_Link_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientUSCoreEthnicityExtension_OmbCategoryCoding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientUSCoreEthnicityExtension_DetailedCoding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientUSCoreEthnicityExtension_OmbCategoryCoding_BoundCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientUSCoreEthnicityExtension_DetailedCoding_BoundCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreSmokingStatusProfile_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreSmokingStatusProfile_EffectiveX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreSmokingStatusProfile_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreSmokingStatusProfile_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreSmokingStatusProfile_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreSmokingStatusProfile_Component_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCoreOrganizationProfile_Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePediatricBMIforAgeObservationProfile_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePediatricBMIforAgeObservationProfile_EffectiveX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePediatricBMIforAgeObservationProfile_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePediatricBMIforAgeObservationProfile_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePediatricBMIforAgeObservationProfile_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USCorePediatricBMIforAgeObservationProfile_Component_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*USCoreProcedureProfile_PerformedX_DateTime)(nil),
		(*USCoreProcedureProfile_PerformedX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[36].OneofWrappers = []interface{}{
		(*USCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX_DateTime)(nil),
		(*USCoreDiagnosticReportProfileLaboratoryReporting_EffectiveX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[39].OneofWrappers = []interface{}{
		(*USCorePediatricWeightForHeightObservationProfile_EffectiveX_DateTime)(nil),
		(*USCorePediatricWeightForHeightObservationProfile_EffectiveX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[40].OneofWrappers = []interface{}{
		(*USCorePediatricWeightForHeightObservationProfile_ValueX_Quantity)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Quantity)(nil),
		(*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_CodeableConcept)(nil),
		(*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_StringValue)(nil),
		(*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Boolean)(nil),
		(*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Integer)(nil),
		(*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Range)(nil),
		(*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Ratio)(nil),
		(*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_SampledData)(nil),
		(*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Time)(nil),
		(*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_DateTime)(nil),
		(*USCorePediatricWeightForHeightObservationProfile_Component_ValueX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[61].OneofWrappers = []interface{}{
		(*USCoreProvenance_OccurredX_Period)(nil),
		(*USCoreProvenance_OccurredX_DateTime)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[66].OneofWrappers = []interface{}{
		(*USCoreImmunizationProfile_OccurrenceX_DateTime)(nil),
		(*USCoreImmunizationProfile_OccurrenceX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[71].OneofWrappers = []interface{}{
		(*USCoreImmunizationProfile_ProtocolApplied_DoseNumberX_PositiveInt)(nil),
		(*USCoreImmunizationProfile_ProtocolApplied_DoseNumberX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[72].OneofWrappers = []interface{}{
		(*USCoreImmunizationProfile_ProtocolApplied_SeriesDosesX_PositiveInt)(nil),
		(*USCoreImmunizationProfile_ProtocolApplied_SeriesDosesX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[75].OneofWrappers = []interface{}{
		(*USCoreDiagnosticReportProfileNoteExchange_EffectiveX_DateTime)(nil),
		(*USCoreDiagnosticReportProfileNoteExchange_EffectiveX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[78].OneofWrappers = []interface{}{
		(*USCoreLaboratoryResultObservationProfile_EffectiveX_DateTime)(nil),
		(*USCoreLaboratoryResultObservationProfile_EffectiveX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[79].OneofWrappers = []interface{}{
		(*USCoreLaboratoryResultObservationProfile_ValueX_Quantity)(nil),
		(*USCoreLaboratoryResultObservationProfile_ValueX_CodeableConcept)(nil),
		(*USCoreLaboratoryResultObservationProfile_ValueX_StringValue)(nil),
		(*USCoreLaboratoryResultObservationProfile_ValueX_Boolean)(nil),
		(*USCoreLaboratoryResultObservationProfile_ValueX_Integer)(nil),
		(*USCoreLaboratoryResultObservationProfile_ValueX_Range)(nil),
		(*USCoreLaboratoryResultObservationProfile_ValueX_Ratio)(nil),
		(*USCoreLaboratoryResultObservationProfile_ValueX_SampledData)(nil),
		(*USCoreLaboratoryResultObservationProfile_ValueX_Time)(nil),
		(*USCoreLaboratoryResultObservationProfile_ValueX_DateTime)(nil),
		(*USCoreLaboratoryResultObservationProfile_ValueX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[82].OneofWrappers = []interface{}{
		(*USCoreLaboratoryResultObservationProfile_Component_ValueX_Quantity)(nil),
		(*USCoreLaboratoryResultObservationProfile_Component_ValueX_CodeableConcept)(nil),
		(*USCoreLaboratoryResultObservationProfile_Component_ValueX_StringValue)(nil),
		(*USCoreLaboratoryResultObservationProfile_Component_ValueX_Boolean)(nil),
		(*USCoreLaboratoryResultObservationProfile_Component_ValueX_Integer)(nil),
		(*USCoreLaboratoryResultObservationProfile_Component_ValueX_Range)(nil),
		(*USCoreLaboratoryResultObservationProfile_Component_ValueX_Ratio)(nil),
		(*USCoreLaboratoryResultObservationProfile_Component_ValueX_SampledData)(nil),
		(*USCoreLaboratoryResultObservationProfile_Component_ValueX_Time)(nil),
		(*USCoreLaboratoryResultObservationProfile_Component_ValueX_DateTime)(nil),
		(*USCoreLaboratoryResultObservationProfile_Component_ValueX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[88].OneofWrappers = []interface{}{
		(*UsCoreCondition_OnsetX_DateTime)(nil),
		(*UsCoreCondition_OnsetX_Age)(nil),
		(*UsCoreCondition_OnsetX_Period)(nil),
		(*UsCoreCondition_OnsetX_Range)(nil),
		(*UsCoreCondition_OnsetX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[89].OneofWrappers = []interface{}{
		(*UsCoreCondition_AbatementX_DateTime)(nil),
		(*UsCoreCondition_AbatementX_Age)(nil),
		(*UsCoreCondition_AbatementX_Period)(nil),
		(*UsCoreCondition_AbatementX_Range)(nil),
		(*UsCoreCondition_AbatementX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[94].OneofWrappers = []interface{}{
		(*USCorePulseOximetryProfile_EffectiveX_DateTime)(nil),
		(*USCorePulseOximetryProfile_EffectiveX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[95].OneofWrappers = []interface{}{
		(*USCorePulseOximetryProfile_ValueX_Quantity)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[98].OneofWrappers = []interface{}{
		(*USCorePulseOximetryProfile_Component_ValueX_Quantity)(nil),
		(*USCorePulseOximetryProfile_Component_ValueX_CodeableConcept)(nil),
		(*USCorePulseOximetryProfile_Component_ValueX_StringValue)(nil),
		(*USCorePulseOximetryProfile_Component_ValueX_Boolean)(nil),
		(*USCorePulseOximetryProfile_Component_ValueX_Integer)(nil),
		(*USCorePulseOximetryProfile_Component_ValueX_Range)(nil),
		(*USCorePulseOximetryProfile_Component_ValueX_Ratio)(nil),
		(*USCorePulseOximetryProfile_Component_ValueX_SampledData)(nil),
		(*USCorePulseOximetryProfile_Component_ValueX_Time)(nil),
		(*USCorePulseOximetryProfile_Component_ValueX_DateTime)(nil),
		(*USCorePulseOximetryProfile_Component_ValueX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[110].OneofWrappers = []interface{}{
		(*USCoreMedicationRequestProfile_ReportedX_Boolean)(nil),
		(*USCoreMedicationRequestProfile_ReportedX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[111].OneofWrappers = []interface{}{
		(*USCoreMedicationRequestProfile_MedicationX_CodeableConcept)(nil),
		(*USCoreMedicationRequestProfile_MedicationX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[115].OneofWrappers = []interface{}{
		(*USCoreMedicationRequestProfile_Substitution_AllowedX_Boolean)(nil),
		(*USCoreMedicationRequestProfile_Substitution_AllowedX_CodeableConcept)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[119].OneofWrappers = []interface{}{
		(*USCoreMedicationProfile_Ingredient_ItemX_CodeableConcept)(nil),
		(*USCoreMedicationProfile_Ingredient_ItemX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[121].OneofWrappers = []interface{}{
		(*USCoreGoalProfile_StartX_Date)(nil),
		(*USCoreGoalProfile_StartX_CodeableConcept)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[123].OneofWrappers = []interface{}{
		(*USCoreGoalProfile_Target_DetailX_Quantity)(nil),
		(*USCoreGoalProfile_Target_DetailX_Range)(nil),
		(*USCoreGoalProfile_Target_DetailX_CodeableConcept)(nil),
		(*USCoreGoalProfile_Target_DetailX_StringValue)(nil),
		(*USCoreGoalProfile_Target_DetailX_Boolean)(nil),
		(*USCoreGoalProfile_Target_DetailX_Integer)(nil),
		(*USCoreGoalProfile_Target_DetailX_Ratio)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[124].OneofWrappers = []interface{}{
		(*USCoreGoalProfile_Target_DueX_Date)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[135].OneofWrappers = []interface{}{
		(*USCoreAllergyIntolerance_OnsetX_DateTime)(nil),
		(*USCoreAllergyIntolerance_OnsetX_Age)(nil),
		(*USCoreAllergyIntolerance_OnsetX_Period)(nil),
		(*USCoreAllergyIntolerance_OnsetX_Range)(nil),
		(*USCoreAllergyIntolerance_OnsetX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[144].OneofWrappers = []interface{}{
		(*USCoreCarePlanProfile_Activity_Detail_ScheduledX_Timing)(nil),
		(*USCoreCarePlanProfile_Activity_Detail_ScheduledX_Period)(nil),
		(*USCoreCarePlanProfile_Activity_Detail_ScheduledX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[145].OneofWrappers = []interface{}{
		(*USCoreCarePlanProfile_Activity_Detail_ProductX_CodeableConcept)(nil),
		(*USCoreCarePlanProfile_Activity_Detail_ProductX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[147].OneofWrappers = []interface{}{
		(*USCorePatientProfile_DeceasedX_Boolean)(nil),
		(*USCorePatientProfile_DeceasedX_DateTime)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[148].OneofWrappers = []interface{}{
		(*USCorePatientProfile_MultipleBirthX_Boolean)(nil),
		(*USCorePatientProfile_MultipleBirthX_Integer)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[159].OneofWrappers = []interface{}{
		(*USCoreSmokingStatusProfile_EffectiveX_DateTime)(nil),
		(*USCoreSmokingStatusProfile_EffectiveX_Period)(nil),
		(*USCoreSmokingStatusProfile_EffectiveX_Timing)(nil),
		(*USCoreSmokingStatusProfile_EffectiveX_Instant)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[160].OneofWrappers = []interface{}{
		(*USCoreSmokingStatusProfile_ValueX_CodeableConcept)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[163].OneofWrappers = []interface{}{
		(*USCoreSmokingStatusProfile_Component_ValueX_Quantity)(nil),
		(*USCoreSmokingStatusProfile_Component_ValueX_CodeableConcept)(nil),
		(*USCoreSmokingStatusProfile_Component_ValueX_StringValue)(nil),
		(*USCoreSmokingStatusProfile_Component_ValueX_Boolean)(nil),
		(*USCoreSmokingStatusProfile_Component_ValueX_Integer)(nil),
		(*USCoreSmokingStatusProfile_Component_ValueX_Range)(nil),
		(*USCoreSmokingStatusProfile_Component_ValueX_Ratio)(nil),
		(*USCoreSmokingStatusProfile_Component_ValueX_SampledData)(nil),
		(*USCoreSmokingStatusProfile_Component_ValueX_Time)(nil),
		(*USCoreSmokingStatusProfile_Component_ValueX_DateTime)(nil),
		(*USCoreSmokingStatusProfile_Component_ValueX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[166].OneofWrappers = []interface{}{
		(*USCorePediatricBMIforAgeObservationProfile_EffectiveX_DateTime)(nil),
		(*USCorePediatricBMIforAgeObservationProfile_EffectiveX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[167].OneofWrappers = []interface{}{
		(*USCorePediatricBMIforAgeObservationProfile_ValueX_Quantity)(nil),
	}
	file_proto_google_fhir_proto_r4_uscore_proto_msgTypes[170].OneofWrappers = []interface{}{
		(*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Quantity)(nil),
		(*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_CodeableConcept)(nil),
		(*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_StringValue)(nil),
		(*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Boolean)(nil),
		(*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Integer)(nil),
		(*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Range)(nil),
		(*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Ratio)(nil),
		(*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_SampledData)(nil),
		(*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Time)(nil),
		(*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_DateTime)(nil),
		(*USCorePediatricBMIforAgeObservationProfile_Component_ValueX_Period)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r4_uscore_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   171,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r4_uscore_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r4_uscore_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r4_uscore_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r4_uscore_proto = out.File
	file_proto_google_fhir_proto_r4_uscore_proto_rawDesc = nil
	file_proto_google_fhir_proto_r4_uscore_proto_goTypes = nil
	file_proto_google_fhir_proto_r4_uscore_proto_depIdxs = nil
}

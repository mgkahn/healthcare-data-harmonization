//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r4/core/profiles/computable_plan_definition.proto

package computable_plan_definition_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for Computable PlanDefinition.
// The definition of a plan for a series of actions, independent of any specific
// patient or context. See
// http://hl7.org/fhir/StructureDefinition/computableplandefinition
type ComputablePlanDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Canonical identifier for this plan definition, represented as a URI
	// (globally unique)
	Url *datatypes_go_proto.Uri `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`
	// Additional identifier for the plan definition
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,11,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Business version of the plan definition
	Version *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`
	// Name for this plan definition (computer friendly)
	Name *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// Name for this plan definition (human friendly)
	Title *datatypes_go_proto.String `protobuf:"bytes,14,opt,name=title,proto3" json:"title,omitempty"`
	// Subordinate title of the plan definition
	Subtitle *datatypes_go_proto.String `protobuf:"bytes,15,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	// order-set | clinical-protocol | eca-rule | workflow-definition
	Type   *datatypes_go_proto.CodeableConcept  `protobuf:"bytes,16,opt,name=type,proto3" json:"type,omitempty"`
	Status *ComputablePlanDefinition_StatusCode `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`
	// For testing purposes, not real usage
	Experimental *datatypes_go_proto.Boolean        `protobuf:"bytes,18,opt,name=experimental,proto3" json:"experimental,omitempty"`
	Subject      *ComputablePlanDefinition_SubjectX `protobuf:"bytes,19,opt,name=subject,proto3" json:"subject,omitempty"`
	// Date last changed
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,20,opt,name=date,proto3" json:"date,omitempty"`
	// Name of the publisher (organization or individual)
	Publisher *datatypes_go_proto.String `protobuf:"bytes,21,opt,name=publisher,proto3" json:"publisher,omitempty"`
	// Contact details for the publisher
	Contact []*datatypes_go_proto.ContactDetail `protobuf:"bytes,22,rep,name=contact,proto3" json:"contact,omitempty"`
	// Natural language description of the plan definition
	Description *datatypes_go_proto.Markdown `protobuf:"bytes,23,opt,name=description,proto3" json:"description,omitempty"`
	// The context that the content is intended to support
	UseContext []*datatypes_go_proto.UsageContext `protobuf:"bytes,24,rep,name=use_context,json=useContext,proto3" json:"use_context,omitempty"`
	// Intended jurisdiction for plan definition (if applicable)
	Jurisdiction []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,25,rep,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	// Why this plan definition is defined
	Purpose *datatypes_go_proto.Markdown `protobuf:"bytes,26,opt,name=purpose,proto3" json:"purpose,omitempty"`
	// Describes the clinical usage of the plan
	Usage *datatypes_go_proto.String `protobuf:"bytes,27,opt,name=usage,proto3" json:"usage,omitempty"`
	// Use and/or publishing restrictions
	Copyright *datatypes_go_proto.Markdown `protobuf:"bytes,28,opt,name=copyright,proto3" json:"copyright,omitempty"`
	// When the plan definition was approved by publisher
	ApprovalDate *datatypes_go_proto.Date `protobuf:"bytes,29,opt,name=approval_date,json=approvalDate,proto3" json:"approval_date,omitempty"`
	// When the plan definition was last reviewed
	LastReviewDate *datatypes_go_proto.Date `protobuf:"bytes,30,opt,name=last_review_date,json=lastReviewDate,proto3" json:"last_review_date,omitempty"`
	// When the plan definition is expected to be used
	EffectivePeriod *datatypes_go_proto.Period `protobuf:"bytes,31,opt,name=effective_period,json=effectivePeriod,proto3" json:"effective_period,omitempty"`
	// E.g. Education, Treatment, Assessment
	Topic []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,32,rep,name=topic,proto3" json:"topic,omitempty"`
	// Who authored the content
	Author []*datatypes_go_proto.ContactDetail `protobuf:"bytes,33,rep,name=author,proto3" json:"author,omitempty"`
	// Who edited the content
	Editor []*datatypes_go_proto.ContactDetail `protobuf:"bytes,34,rep,name=editor,proto3" json:"editor,omitempty"`
	// Who reviewed the content
	Reviewer []*datatypes_go_proto.ContactDetail `protobuf:"bytes,35,rep,name=reviewer,proto3" json:"reviewer,omitempty"`
	// Who endorsed the content
	Endorser []*datatypes_go_proto.ContactDetail `protobuf:"bytes,36,rep,name=endorser,proto3" json:"endorser,omitempty"`
	// Additional documentation, citations
	RelatedArtifact []*datatypes_go_proto.RelatedArtifact `protobuf:"bytes,37,rep,name=related_artifact,json=relatedArtifact,proto3" json:"related_artifact,omitempty"`
	// Logic used by the plan definition
	Library *datatypes_go_proto.Canonical      `protobuf:"bytes,38,opt,name=library,proto3" json:"library,omitempty"`
	Goal    []*ComputablePlanDefinition_Goal   `protobuf:"bytes,39,rep,name=goal,proto3" json:"goal,omitempty"`
	Action  []*ComputablePlanDefinition_Action `protobuf:"bytes,40,rep,name=action,proto3" json:"action,omitempty"`
}

func (x *ComputablePlanDefinition) Reset() {
	*x = ComputablePlanDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputablePlanDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputablePlanDefinition) ProtoMessage() {}

func (x *ComputablePlanDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputablePlanDefinition.ProtoReflect.Descriptor instead.
func (*ComputablePlanDefinition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescGZIP(), []int{0}
}

func (x *ComputablePlanDefinition) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ComputablePlanDefinition) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ComputablePlanDefinition) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *ComputablePlanDefinition) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ComputablePlanDefinition) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *ComputablePlanDefinition) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *ComputablePlanDefinition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ComputablePlanDefinition) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ComputablePlanDefinition) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *ComputablePlanDefinition) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ComputablePlanDefinition) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ComputablePlanDefinition) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ComputablePlanDefinition) GetTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *ComputablePlanDefinition) GetSubtitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Subtitle
	}
	return nil
}

func (x *ComputablePlanDefinition) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ComputablePlanDefinition) GetStatus() *ComputablePlanDefinition_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ComputablePlanDefinition) GetExperimental() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Experimental
	}
	return nil
}

func (x *ComputablePlanDefinition) GetSubject() *ComputablePlanDefinition_SubjectX {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *ComputablePlanDefinition) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ComputablePlanDefinition) GetPublisher() *datatypes_go_proto.String {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *ComputablePlanDefinition) GetContact() []*datatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *ComputablePlanDefinition) GetDescription() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ComputablePlanDefinition) GetUseContext() []*datatypes_go_proto.UsageContext {
	if x != nil {
		return x.UseContext
	}
	return nil
}

func (x *ComputablePlanDefinition) GetJurisdiction() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Jurisdiction
	}
	return nil
}

func (x *ComputablePlanDefinition) GetPurpose() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Purpose
	}
	return nil
}

func (x *ComputablePlanDefinition) GetUsage() *datatypes_go_proto.String {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *ComputablePlanDefinition) GetCopyright() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Copyright
	}
	return nil
}

func (x *ComputablePlanDefinition) GetApprovalDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.ApprovalDate
	}
	return nil
}

func (x *ComputablePlanDefinition) GetLastReviewDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.LastReviewDate
	}
	return nil
}

func (x *ComputablePlanDefinition) GetEffectivePeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.EffectivePeriod
	}
	return nil
}

func (x *ComputablePlanDefinition) GetTopic() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *ComputablePlanDefinition) GetAuthor() []*datatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *ComputablePlanDefinition) GetEditor() []*datatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Editor
	}
	return nil
}

func (x *ComputablePlanDefinition) GetReviewer() []*datatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Reviewer
	}
	return nil
}

func (x *ComputablePlanDefinition) GetEndorser() []*datatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Endorser
	}
	return nil
}

func (x *ComputablePlanDefinition) GetRelatedArtifact() []*datatypes_go_proto.RelatedArtifact {
	if x != nil {
		return x.RelatedArtifact
	}
	return nil
}

func (x *ComputablePlanDefinition) GetLibrary() *datatypes_go_proto.Canonical {
	if x != nil {
		return x.Library
	}
	return nil
}

func (x *ComputablePlanDefinition) GetGoal() []*ComputablePlanDefinition_Goal {
	if x != nil {
		return x.Goal
	}
	return nil
}

func (x *ComputablePlanDefinition) GetAction() []*ComputablePlanDefinition_Action {
	if x != nil {
		return x.Action
	}
	return nil
}

// draft | active | retired | unknown
type ComputablePlanDefinition_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.PublicationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.PublicationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension            `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ComputablePlanDefinition_StatusCode) Reset() {
	*x = ComputablePlanDefinition_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputablePlanDefinition_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputablePlanDefinition_StatusCode) ProtoMessage() {}

func (x *ComputablePlanDefinition_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputablePlanDefinition_StatusCode.ProtoReflect.Descriptor instead.
func (*ComputablePlanDefinition_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ComputablePlanDefinition_StatusCode) GetValue() codes_go_proto.PublicationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.PublicationStatusCode_INVALID_UNINITIALIZED
}

func (x *ComputablePlanDefinition_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ComputablePlanDefinition_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Type of individual the plan definition is focused on
type ComputablePlanDefinition_SubjectX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*ComputablePlanDefinition_SubjectX_CodeableConcept
	//	*ComputablePlanDefinition_SubjectX_Reference
	Choice isComputablePlanDefinition_SubjectX_Choice `protobuf_oneof:"choice"`
}

func (x *ComputablePlanDefinition_SubjectX) Reset() {
	*x = ComputablePlanDefinition_SubjectX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputablePlanDefinition_SubjectX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputablePlanDefinition_SubjectX) ProtoMessage() {}

func (x *ComputablePlanDefinition_SubjectX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputablePlanDefinition_SubjectX.ProtoReflect.Descriptor instead.
func (*ComputablePlanDefinition_SubjectX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescGZIP(), []int{0, 1}
}

func (m *ComputablePlanDefinition_SubjectX) GetChoice() isComputablePlanDefinition_SubjectX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ComputablePlanDefinition_SubjectX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*ComputablePlanDefinition_SubjectX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ComputablePlanDefinition_SubjectX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*ComputablePlanDefinition_SubjectX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isComputablePlanDefinition_SubjectX_Choice interface {
	isComputablePlanDefinition_SubjectX_Choice()
}

type ComputablePlanDefinition_SubjectX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ComputablePlanDefinition_SubjectX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*ComputablePlanDefinition_SubjectX_CodeableConcept) isComputablePlanDefinition_SubjectX_Choice() {
}

func (*ComputablePlanDefinition_SubjectX_Reference) isComputablePlanDefinition_SubjectX_Choice() {}

// What the plan is trying to accomplish
type ComputablePlanDefinition_Goal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// E.g. Treatment, dietary, behavioral
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	// Code or text describing the goal
	Description *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// high-priority | medium-priority | low-priority
	Priority *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=priority,proto3" json:"priority,omitempty"`
	// When goal pursuit begins
	Start *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=start,proto3" json:"start,omitempty"`
	// What does the goal address
	Addresses []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// Supporting documentation for the goal
	Documentation []*datatypes_go_proto.RelatedArtifact   `protobuf:"bytes,9,rep,name=documentation,proto3" json:"documentation,omitempty"`
	Target        []*ComputablePlanDefinition_Goal_Target `protobuf:"bytes,10,rep,name=target,proto3" json:"target,omitempty"`
}

func (x *ComputablePlanDefinition_Goal) Reset() {
	*x = ComputablePlanDefinition_Goal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputablePlanDefinition_Goal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputablePlanDefinition_Goal) ProtoMessage() {}

func (x *ComputablePlanDefinition_Goal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputablePlanDefinition_Goal.ProtoReflect.Descriptor instead.
func (*ComputablePlanDefinition_Goal) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ComputablePlanDefinition_Goal) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ComputablePlanDefinition_Goal) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ComputablePlanDefinition_Goal) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ComputablePlanDefinition_Goal) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *ComputablePlanDefinition_Goal) GetDescription() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ComputablePlanDefinition_Goal) GetPriority() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *ComputablePlanDefinition_Goal) GetStart() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ComputablePlanDefinition_Goal) GetAddresses() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *ComputablePlanDefinition_Goal) GetDocumentation() []*datatypes_go_proto.RelatedArtifact {
	if x != nil {
		return x.Documentation
	}
	return nil
}

func (x *ComputablePlanDefinition_Goal) GetTarget() []*ComputablePlanDefinition_Goal_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

// Action defined by the plan
type ComputablePlanDefinition_Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// User-visible prefix for the action (e.g. 1. or A.)
	Prefix *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// User-visible title
	Title *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	// Brief description of the action
	Description *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// Static text equivalent of the action, used if the dynamic aspects cannot
	// be interpreted by the receiving system
	TextEquivalent *datatypes_go_proto.String                    `protobuf:"bytes,7,opt,name=text_equivalent,json=textEquivalent,proto3" json:"text_equivalent,omitempty"`
	Priority       *ComputablePlanDefinition_Action_PriorityCode `protobuf:"bytes,8,opt,name=priority,proto3" json:"priority,omitempty"`
	// Code representing the meaning of the action or sub-actions
	Code []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,rep,name=code,proto3" json:"code,omitempty"`
	// Why the action should be performed
	Reason []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,rep,name=reason,proto3" json:"reason,omitempty"`
	// Supporting documentation for the intended performer of the action
	Documentation []*datatypes_go_proto.RelatedArtifact `protobuf:"bytes,11,rep,name=documentation,proto3" json:"documentation,omitempty"`
	// What goals this action supports
	GoalId  []*datatypes_go_proto.Id                  `protobuf:"bytes,12,rep,name=goal_id,json=goalId,proto3" json:"goal_id,omitempty"`
	Subject *ComputablePlanDefinition_Action_SubjectX `protobuf:"bytes,13,opt,name=subject,proto3" json:"subject,omitempty"`
	// When the action should be triggered
	Trigger   []*datatypes_go_proto.TriggerDefinition      `protobuf:"bytes,14,rep,name=trigger,proto3" json:"trigger,omitempty"`
	Condition []*ComputablePlanDefinition_Action_Condition `protobuf:"bytes,15,rep,name=condition,proto3" json:"condition,omitempty"`
	// Input data requirements
	Input []*datatypes_go_proto.DataRequirement `protobuf:"bytes,16,rep,name=input,proto3" json:"input,omitempty"`
	// Output data definition
	Output        []*datatypes_go_proto.DataRequirement            `protobuf:"bytes,17,rep,name=output,proto3" json:"output,omitempty"`
	RelatedAction []*ComputablePlanDefinition_Action_RelatedAction `protobuf:"bytes,18,rep,name=related_action,json=relatedAction,proto3" json:"related_action,omitempty"`
	Timing        *ComputablePlanDefinition_Action_TimingX         `protobuf:"bytes,19,opt,name=timing,proto3" json:"timing,omitempty"`
	Participant   []*ComputablePlanDefinition_Action_Participant   `protobuf:"bytes,20,rep,name=participant,proto3" json:"participant,omitempty"`
	// create | update | remove | fire-event
	Type                *datatypes_go_proto.CodeableConcept                      `protobuf:"bytes,21,opt,name=type,proto3" json:"type,omitempty"`
	GroupingBehavior    *ComputablePlanDefinition_Action_GroupingBehaviorCode    `protobuf:"bytes,22,opt,name=grouping_behavior,json=groupingBehavior,proto3" json:"grouping_behavior,omitempty"`
	SelectionBehavior   *ComputablePlanDefinition_Action_SelectionBehaviorCode   `protobuf:"bytes,23,opt,name=selection_behavior,json=selectionBehavior,proto3" json:"selection_behavior,omitempty"`
	RequiredBehavior    *ComputablePlanDefinition_Action_RequiredBehaviorCode    `protobuf:"bytes,24,opt,name=required_behavior,json=requiredBehavior,proto3" json:"required_behavior,omitempty"`
	PrecheckBehavior    *ComputablePlanDefinition_Action_PrecheckBehaviorCode    `protobuf:"bytes,25,opt,name=precheck_behavior,json=precheckBehavior,proto3" json:"precheck_behavior,omitempty"`
	CardinalityBehavior *ComputablePlanDefinition_Action_CardinalityBehaviorCode `protobuf:"bytes,26,opt,name=cardinality_behavior,json=cardinalityBehavior,proto3" json:"cardinality_behavior,omitempty"`
	Definition          *ComputablePlanDefinition_Action_DefinitionX             `protobuf:"bytes,27,opt,name=definition,proto3" json:"definition,omitempty"`
	// Transform to apply the template
	Transform    *datatypes_go_proto.Canonical                   `protobuf:"bytes,28,opt,name=transform,proto3" json:"transform,omitempty"`
	DynamicValue []*ComputablePlanDefinition_Action_DynamicValue `protobuf:"bytes,29,rep,name=dynamic_value,json=dynamicValue,proto3" json:"dynamic_value,omitempty"`
	// A sub-action
	Action []*ComputablePlanDefinition_Action `protobuf:"bytes,30,rep,name=action,proto3" json:"action,omitempty"`
}

func (x *ComputablePlanDefinition_Action) Reset() {
	*x = ComputablePlanDefinition_Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputablePlanDefinition_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputablePlanDefinition_Action) ProtoMessage() {}

func (x *ComputablePlanDefinition_Action) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputablePlanDefinition_Action.ProtoReflect.Descriptor instead.
func (*ComputablePlanDefinition_Action) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescGZIP(), []int{0, 3}
}

func (x *ComputablePlanDefinition_Action) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetPrefix() *datatypes_go_proto.String {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetTextEquivalent() *datatypes_go_proto.String {
	if x != nil {
		return x.TextEquivalent
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetPriority() *ComputablePlanDefinition_Action_PriorityCode {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetDocumentation() []*datatypes_go_proto.RelatedArtifact {
	if x != nil {
		return x.Documentation
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetGoalId() []*datatypes_go_proto.Id {
	if x != nil {
		return x.GoalId
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetSubject() *ComputablePlanDefinition_Action_SubjectX {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetTrigger() []*datatypes_go_proto.TriggerDefinition {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetCondition() []*ComputablePlanDefinition_Action_Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetInput() []*datatypes_go_proto.DataRequirement {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetOutput() []*datatypes_go_proto.DataRequirement {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetRelatedAction() []*ComputablePlanDefinition_Action_RelatedAction {
	if x != nil {
		return x.RelatedAction
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetTiming() *ComputablePlanDefinition_Action_TimingX {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetParticipant() []*ComputablePlanDefinition_Action_Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetGroupingBehavior() *ComputablePlanDefinition_Action_GroupingBehaviorCode {
	if x != nil {
		return x.GroupingBehavior
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetSelectionBehavior() *ComputablePlanDefinition_Action_SelectionBehaviorCode {
	if x != nil {
		return x.SelectionBehavior
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetRequiredBehavior() *ComputablePlanDefinition_Action_RequiredBehaviorCode {
	if x != nil {
		return x.RequiredBehavior
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetPrecheckBehavior() *ComputablePlanDefinition_Action_PrecheckBehaviorCode {
	if x != nil {
		return x.PrecheckBehavior
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetCardinalityBehavior() *ComputablePlanDefinition_Action_CardinalityBehaviorCode {
	if x != nil {
		return x.CardinalityBehavior
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetDefinition() *ComputablePlanDefinition_Action_DefinitionX {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetTransform() *datatypes_go_proto.Canonical {
	if x != nil {
		return x.Transform
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetDynamicValue() []*ComputablePlanDefinition_Action_DynamicValue {
	if x != nil {
		return x.DynamicValue
	}
	return nil
}

func (x *ComputablePlanDefinition_Action) GetAction() []*ComputablePlanDefinition_Action {
	if x != nil {
		return x.Action
	}
	return nil
}

// Target outcome for the goal
type ComputablePlanDefinition_Goal_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The parameter whose value is to be tracked
	Measure *datatypes_go_proto.CodeableConcept           `protobuf:"bytes,4,opt,name=measure,proto3" json:"measure,omitempty"`
	Detail  *ComputablePlanDefinition_Goal_Target_DetailX `protobuf:"bytes,5,opt,name=detail,proto3" json:"detail,omitempty"`
	// Reach goal within
	Due *datatypes_go_proto.Duration `protobuf:"bytes,6,opt,name=due,proto3" json:"due,omitempty"`
}

func (x *ComputablePlanDefinition_Goal_Target) Reset() {
	*x = ComputablePlanDefinition_Goal_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputablePlanDefinition_Goal_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputablePlanDefinition_Goal_Target) ProtoMessage() {}

func (x *ComputablePlanDefinition_Goal_Target) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputablePlanDefinition_Goal_Target.ProtoReflect.Descriptor instead.
func (*ComputablePlanDefinition_Goal_Target) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *ComputablePlanDefinition_Goal_Target) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ComputablePlanDefinition_Goal_Target) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ComputablePlanDefinition_Goal_Target) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ComputablePlanDefinition_Goal_Target) GetMeasure() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Measure
	}
	return nil
}

func (x *ComputablePlanDefinition_Goal_Target) GetDetail() *ComputablePlanDefinition_Goal_Target_DetailX {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *ComputablePlanDefinition_Goal_Target) GetDue() *datatypes_go_proto.Duration {
	if x != nil {
		return x.Due
	}
	return nil
}

// The target value to be achieved
type ComputablePlanDefinition_Goal_Target_DetailX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*ComputablePlanDefinition_Goal_Target_DetailX_Quantity
	//	*ComputablePlanDefinition_Goal_Target_DetailX_Range
	//	*ComputablePlanDefinition_Goal_Target_DetailX_CodeableConcept
	Choice isComputablePlanDefinition_Goal_Target_DetailX_Choice `protobuf_oneof:"choice"`
}

func (x *ComputablePlanDefinition_Goal_Target_DetailX) Reset() {
	*x = ComputablePlanDefinition_Goal_Target_DetailX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputablePlanDefinition_Goal_Target_DetailX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputablePlanDefinition_Goal_Target_DetailX) ProtoMessage() {}

func (x *ComputablePlanDefinition_Goal_Target_DetailX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputablePlanDefinition_Goal_Target_DetailX.ProtoReflect.Descriptor instead.
func (*ComputablePlanDefinition_Goal_Target_DetailX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

func (m *ComputablePlanDefinition_Goal_Target_DetailX) GetChoice() isComputablePlanDefinition_Goal_Target_DetailX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ComputablePlanDefinition_Goal_Target_DetailX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*ComputablePlanDefinition_Goal_Target_DetailX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *ComputablePlanDefinition_Goal_Target_DetailX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*ComputablePlanDefinition_Goal_Target_DetailX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *ComputablePlanDefinition_Goal_Target_DetailX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*ComputablePlanDefinition_Goal_Target_DetailX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isComputablePlanDefinition_Goal_Target_DetailX_Choice interface {
	isComputablePlanDefinition_Goal_Target_DetailX_Choice()
}

type ComputablePlanDefinition_Goal_Target_DetailX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type ComputablePlanDefinition_Goal_Target_DetailX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

type ComputablePlanDefinition_Goal_Target_DetailX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*ComputablePlanDefinition_Goal_Target_DetailX_Quantity) isComputablePlanDefinition_Goal_Target_DetailX_Choice() {
}

func (*ComputablePlanDefinition_Goal_Target_DetailX_Range) isComputablePlanDefinition_Goal_Target_DetailX_Choice() {
}

func (*ComputablePlanDefinition_Goal_Target_DetailX_CodeableConcept) isComputablePlanDefinition_Goal_Target_DetailX_Choice() {
}

// routine | urgent | asap | stat
type ComputablePlanDefinition_Action_PriorityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.RequestPriorityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.RequestPriorityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension          `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ComputablePlanDefinition_Action_PriorityCode) Reset() {
	*x = ComputablePlanDefinition_Action_PriorityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputablePlanDefinition_Action_PriorityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputablePlanDefinition_Action_PriorityCode) ProtoMessage() {}

func (x *ComputablePlanDefinition_Action_PriorityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputablePlanDefinition_Action_PriorityCode.ProtoReflect.Descriptor instead.
func (*ComputablePlanDefinition_Action_PriorityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *ComputablePlanDefinition_Action_PriorityCode) GetValue() codes_go_proto.RequestPriorityCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.RequestPriorityCode_INVALID_UNINITIALIZED
}

func (x *ComputablePlanDefinition_Action_PriorityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_PriorityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Type of individual the action is focused on
type ComputablePlanDefinition_Action_SubjectX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*ComputablePlanDefinition_Action_SubjectX_CodeableConcept
	//	*ComputablePlanDefinition_Action_SubjectX_Reference
	Choice isComputablePlanDefinition_Action_SubjectX_Choice `protobuf_oneof:"choice"`
}

func (x *ComputablePlanDefinition_Action_SubjectX) Reset() {
	*x = ComputablePlanDefinition_Action_SubjectX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputablePlanDefinition_Action_SubjectX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputablePlanDefinition_Action_SubjectX) ProtoMessage() {}

func (x *ComputablePlanDefinition_Action_SubjectX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputablePlanDefinition_Action_SubjectX.ProtoReflect.Descriptor instead.
func (*ComputablePlanDefinition_Action_SubjectX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (m *ComputablePlanDefinition_Action_SubjectX) GetChoice() isComputablePlanDefinition_Action_SubjectX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_SubjectX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*ComputablePlanDefinition_Action_SubjectX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_SubjectX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*ComputablePlanDefinition_Action_SubjectX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isComputablePlanDefinition_Action_SubjectX_Choice interface {
	isComputablePlanDefinition_Action_SubjectX_Choice()
}

type ComputablePlanDefinition_Action_SubjectX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ComputablePlanDefinition_Action_SubjectX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*ComputablePlanDefinition_Action_SubjectX_CodeableConcept) isComputablePlanDefinition_Action_SubjectX_Choice() {
}

func (*ComputablePlanDefinition_Action_SubjectX_Reference) isComputablePlanDefinition_Action_SubjectX_Choice() {
}

// Whether or not the action is applicable
type ComputablePlanDefinition_Action_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                     `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Kind              *ComputablePlanDefinition_Action_Condition_KindCode `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
	// Boolean-valued expression
	Expression *datatypes_go_proto.Expression `protobuf:"bytes,5,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *ComputablePlanDefinition_Action_Condition) Reset() {
	*x = ComputablePlanDefinition_Action_Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputablePlanDefinition_Action_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputablePlanDefinition_Action_Condition) ProtoMessage() {}

func (x *ComputablePlanDefinition_Action_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputablePlanDefinition_Action_Condition.ProtoReflect.Descriptor instead.
func (*ComputablePlanDefinition_Action_Condition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescGZIP(), []int{0, 3, 2}
}

func (x *ComputablePlanDefinition_Action_Condition) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_Condition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_Condition) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_Condition) GetKind() *ComputablePlanDefinition_Action_Condition_KindCode {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_Condition) GetExpression() *datatypes_go_proto.Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

// Relationship to another action
type ComputablePlanDefinition_Action_RelatedAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// What action is this related to
	ActionId     *datatypes_go_proto.Id                                          `protobuf:"bytes,4,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	Relationship *ComputablePlanDefinition_Action_RelatedAction_RelationshipCode `protobuf:"bytes,5,opt,name=relationship,proto3" json:"relationship,omitempty"`
	Offset       *ComputablePlanDefinition_Action_RelatedAction_OffsetX          `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ComputablePlanDefinition_Action_RelatedAction) Reset() {
	*x = ComputablePlanDefinition_Action_RelatedAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputablePlanDefinition_Action_RelatedAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputablePlanDefinition_Action_RelatedAction) ProtoMessage() {}

func (x *ComputablePlanDefinition_Action_RelatedAction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputablePlanDefinition_Action_RelatedAction.ProtoReflect.Descriptor instead.
func (*ComputablePlanDefinition_Action_RelatedAction) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescGZIP(), []int{0, 3, 3}
}

func (x *ComputablePlanDefinition_Action_RelatedAction) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_RelatedAction) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_RelatedAction) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_RelatedAction) GetActionId() *datatypes_go_proto.Id {
	if x != nil {
		return x.ActionId
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_RelatedAction) GetRelationship() *ComputablePlanDefinition_Action_RelatedAction_RelationshipCode {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_RelatedAction) GetOffset() *ComputablePlanDefinition_Action_RelatedAction_OffsetX {
	if x != nil {
		return x.Offset
	}
	return nil
}

// When the action should take place
type ComputablePlanDefinition_Action_TimingX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*ComputablePlanDefinition_Action_TimingX_DateTime
	//	*ComputablePlanDefinition_Action_TimingX_Age
	//	*ComputablePlanDefinition_Action_TimingX_Period
	//	*ComputablePlanDefinition_Action_TimingX_Duration
	//	*ComputablePlanDefinition_Action_TimingX_Range
	//	*ComputablePlanDefinition_Action_TimingX_Timing
	Choice isComputablePlanDefinition_Action_TimingX_Choice `protobuf_oneof:"choice"`
}

func (x *ComputablePlanDefinition_Action_TimingX) Reset() {
	*x = ComputablePlanDefinition_Action_TimingX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputablePlanDefinition_Action_TimingX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputablePlanDefinition_Action_TimingX) ProtoMessage() {}

func (x *ComputablePlanDefinition_Action_TimingX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputablePlanDefinition_Action_TimingX.ProtoReflect.Descriptor instead.
func (*ComputablePlanDefinition_Action_TimingX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescGZIP(), []int{0, 3, 4}
}

func (m *ComputablePlanDefinition_Action_TimingX) GetChoice() isComputablePlanDefinition_Action_TimingX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_TimingX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*ComputablePlanDefinition_Action_TimingX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_TimingX) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetChoice().(*ComputablePlanDefinition_Action_TimingX_Age); ok {
		return x.Age
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_TimingX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*ComputablePlanDefinition_Action_TimingX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_TimingX) GetDuration() *datatypes_go_proto.Duration {
	if x, ok := x.GetChoice().(*ComputablePlanDefinition_Action_TimingX_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_TimingX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*ComputablePlanDefinition_Action_TimingX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_TimingX) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetChoice().(*ComputablePlanDefinition_Action_TimingX_Timing); ok {
		return x.Timing
	}
	return nil
}

type isComputablePlanDefinition_Action_TimingX_Choice interface {
	isComputablePlanDefinition_Action_TimingX_Choice()
}

type ComputablePlanDefinition_Action_TimingX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ComputablePlanDefinition_Action_TimingX_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,2,opt,name=age,proto3,oneof"`
}

type ComputablePlanDefinition_Action_TimingX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,3,opt,name=period,proto3,oneof"`
}

type ComputablePlanDefinition_Action_TimingX_Duration struct {
	Duration *datatypes_go_proto.Duration `protobuf:"bytes,4,opt,name=duration,proto3,oneof"`
}

type ComputablePlanDefinition_Action_TimingX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,5,opt,name=range,proto3,oneof"`
}

type ComputablePlanDefinition_Action_TimingX_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,6,opt,name=timing,proto3,oneof"`
}

func (*ComputablePlanDefinition_Action_TimingX_DateTime) isComputablePlanDefinition_Action_TimingX_Choice() {
}

func (*ComputablePlanDefinition_Action_TimingX_Age) isComputablePlanDefinition_Action_TimingX_Choice() {
}

func (*ComputablePlanDefinition_Action_TimingX_Period) isComputablePlanDefinition_Action_TimingX_Choice() {
}

func (*ComputablePlanDefinition_Action_TimingX_Duration) isComputablePlanDefinition_Action_TimingX_Choice() {
}

func (*ComputablePlanDefinition_Action_TimingX_Range) isComputablePlanDefinition_Action_TimingX_Choice() {
}

func (*ComputablePlanDefinition_Action_TimingX_Timing) isComputablePlanDefinition_Action_TimingX_Choice() {
}

// Who should participate in the action
type ComputablePlanDefinition_Action_Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                       `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Type              *ComputablePlanDefinition_Action_Participant_TypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// E.g. Nurse, Surgeon, Parent
	Role *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *ComputablePlanDefinition_Action_Participant) Reset() {
	*x = ComputablePlanDefinition_Action_Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputablePlanDefinition_Action_Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputablePlanDefinition_Action_Participant) ProtoMessage() {}

func (x *ComputablePlanDefinition_Action_Participant) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputablePlanDefinition_Action_Participant.ProtoReflect.Descriptor instead.
func (*ComputablePlanDefinition_Action_Participant) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescGZIP(), []int{0, 3, 5}
}

func (x *ComputablePlanDefinition_Action_Participant) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_Participant) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_Participant) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_Participant) GetType() *ComputablePlanDefinition_Action_Participant_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_Participant) GetRole() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

// visual-group | logical-group | sentence-group
type ComputablePlanDefinition_Action_GroupingBehaviorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ActionGroupingBehaviorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.ActionGroupingBehaviorCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ComputablePlanDefinition_Action_GroupingBehaviorCode) Reset() {
	*x = ComputablePlanDefinition_Action_GroupingBehaviorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputablePlanDefinition_Action_GroupingBehaviorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputablePlanDefinition_Action_GroupingBehaviorCode) ProtoMessage() {}

func (x *ComputablePlanDefinition_Action_GroupingBehaviorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputablePlanDefinition_Action_GroupingBehaviorCode.ProtoReflect.Descriptor instead.
func (*ComputablePlanDefinition_Action_GroupingBehaviorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescGZIP(), []int{0, 3, 6}
}

func (x *ComputablePlanDefinition_Action_GroupingBehaviorCode) GetValue() codes_go_proto.ActionGroupingBehaviorCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ActionGroupingBehaviorCode_INVALID_UNINITIALIZED
}

func (x *ComputablePlanDefinition_Action_GroupingBehaviorCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_GroupingBehaviorCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// any | all | all-or-none | exactly-one | at-most-one | one-or-more
type ComputablePlanDefinition_Action_SelectionBehaviorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ActionSelectionBehaviorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.ActionSelectionBehaviorCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ComputablePlanDefinition_Action_SelectionBehaviorCode) Reset() {
	*x = ComputablePlanDefinition_Action_SelectionBehaviorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputablePlanDefinition_Action_SelectionBehaviorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputablePlanDefinition_Action_SelectionBehaviorCode) ProtoMessage() {}

func (x *ComputablePlanDefinition_Action_SelectionBehaviorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputablePlanDefinition_Action_SelectionBehaviorCode.ProtoReflect.Descriptor instead.
func (*ComputablePlanDefinition_Action_SelectionBehaviorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescGZIP(), []int{0, 3, 7}
}

func (x *ComputablePlanDefinition_Action_SelectionBehaviorCode) GetValue() codes_go_proto.ActionSelectionBehaviorCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ActionSelectionBehaviorCode_INVALID_UNINITIALIZED
}

func (x *ComputablePlanDefinition_Action_SelectionBehaviorCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_SelectionBehaviorCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// must | could | must-unless-documented
type ComputablePlanDefinition_Action_RequiredBehaviorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ActionRequiredBehaviorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.ActionRequiredBehaviorCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ComputablePlanDefinition_Action_RequiredBehaviorCode) Reset() {
	*x = ComputablePlanDefinition_Action_RequiredBehaviorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputablePlanDefinition_Action_RequiredBehaviorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputablePlanDefinition_Action_RequiredBehaviorCode) ProtoMessage() {}

func (x *ComputablePlanDefinition_Action_RequiredBehaviorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputablePlanDefinition_Action_RequiredBehaviorCode.ProtoReflect.Descriptor instead.
func (*ComputablePlanDefinition_Action_RequiredBehaviorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescGZIP(), []int{0, 3, 8}
}

func (x *ComputablePlanDefinition_Action_RequiredBehaviorCode) GetValue() codes_go_proto.ActionRequiredBehaviorCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ActionRequiredBehaviorCode_INVALID_UNINITIALIZED
}

func (x *ComputablePlanDefinition_Action_RequiredBehaviorCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_RequiredBehaviorCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// yes | no
type ComputablePlanDefinition_Action_PrecheckBehaviorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ActionPrecheckBehaviorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.ActionPrecheckBehaviorCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ComputablePlanDefinition_Action_PrecheckBehaviorCode) Reset() {
	*x = ComputablePlanDefinition_Action_PrecheckBehaviorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputablePlanDefinition_Action_PrecheckBehaviorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputablePlanDefinition_Action_PrecheckBehaviorCode) ProtoMessage() {}

func (x *ComputablePlanDefinition_Action_PrecheckBehaviorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputablePlanDefinition_Action_PrecheckBehaviorCode.ProtoReflect.Descriptor instead.
func (*ComputablePlanDefinition_Action_PrecheckBehaviorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescGZIP(), []int{0, 3, 9}
}

func (x *ComputablePlanDefinition_Action_PrecheckBehaviorCode) GetValue() codes_go_proto.ActionPrecheckBehaviorCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ActionPrecheckBehaviorCode_INVALID_UNINITIALIZED
}

func (x *ComputablePlanDefinition_Action_PrecheckBehaviorCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_PrecheckBehaviorCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// single | multiple
type ComputablePlanDefinition_Action_CardinalityBehaviorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ActionCardinalityBehaviorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.ActionCardinalityBehaviorCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                    `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ComputablePlanDefinition_Action_CardinalityBehaviorCode) Reset() {
	*x = ComputablePlanDefinition_Action_CardinalityBehaviorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputablePlanDefinition_Action_CardinalityBehaviorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputablePlanDefinition_Action_CardinalityBehaviorCode) ProtoMessage() {}

func (x *ComputablePlanDefinition_Action_CardinalityBehaviorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputablePlanDefinition_Action_CardinalityBehaviorCode.ProtoReflect.Descriptor instead.
func (*ComputablePlanDefinition_Action_CardinalityBehaviorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescGZIP(), []int{0, 3, 10}
}

func (x *ComputablePlanDefinition_Action_CardinalityBehaviorCode) GetValue() codes_go_proto.ActionCardinalityBehaviorCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ActionCardinalityBehaviorCode_INVALID_UNINITIALIZED
}

func (x *ComputablePlanDefinition_Action_CardinalityBehaviorCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_CardinalityBehaviorCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Description of the activity to be performed
type ComputablePlanDefinition_Action_DefinitionX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*ComputablePlanDefinition_Action_DefinitionX_Canonical
	//	*ComputablePlanDefinition_Action_DefinitionX_Uri
	Choice isComputablePlanDefinition_Action_DefinitionX_Choice `protobuf_oneof:"choice"`
}

func (x *ComputablePlanDefinition_Action_DefinitionX) Reset() {
	*x = ComputablePlanDefinition_Action_DefinitionX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputablePlanDefinition_Action_DefinitionX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputablePlanDefinition_Action_DefinitionX) ProtoMessage() {}

func (x *ComputablePlanDefinition_Action_DefinitionX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputablePlanDefinition_Action_DefinitionX.ProtoReflect.Descriptor instead.
func (*ComputablePlanDefinition_Action_DefinitionX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescGZIP(), []int{0, 3, 11}
}

func (m *ComputablePlanDefinition_Action_DefinitionX) GetChoice() isComputablePlanDefinition_Action_DefinitionX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_DefinitionX) GetCanonical() *datatypes_go_proto.Canonical {
	if x, ok := x.GetChoice().(*ComputablePlanDefinition_Action_DefinitionX_Canonical); ok {
		return x.Canonical
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_DefinitionX) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetChoice().(*ComputablePlanDefinition_Action_DefinitionX_Uri); ok {
		return x.Uri
	}
	return nil
}

type isComputablePlanDefinition_Action_DefinitionX_Choice interface {
	isComputablePlanDefinition_Action_DefinitionX_Choice()
}

type ComputablePlanDefinition_Action_DefinitionX_Canonical struct {
	Canonical *datatypes_go_proto.Canonical `protobuf:"bytes,1,opt,name=canonical,proto3,oneof"`
}

type ComputablePlanDefinition_Action_DefinitionX_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,2,opt,name=uri,proto3,oneof"`
}

func (*ComputablePlanDefinition_Action_DefinitionX_Canonical) isComputablePlanDefinition_Action_DefinitionX_Choice() {
}

func (*ComputablePlanDefinition_Action_DefinitionX_Uri) isComputablePlanDefinition_Action_DefinitionX_Choice() {
}

// Dynamic aspects of the definition
type ComputablePlanDefinition_Action_DynamicValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The path to the element to be set dynamically
	Path *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	// An expression that provides the dynamic value for the customization
	Expression *datatypes_go_proto.Expression `protobuf:"bytes,5,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *ComputablePlanDefinition_Action_DynamicValue) Reset() {
	*x = ComputablePlanDefinition_Action_DynamicValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputablePlanDefinition_Action_DynamicValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputablePlanDefinition_Action_DynamicValue) ProtoMessage() {}

func (x *ComputablePlanDefinition_Action_DynamicValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputablePlanDefinition_Action_DynamicValue.ProtoReflect.Descriptor instead.
func (*ComputablePlanDefinition_Action_DynamicValue) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescGZIP(), []int{0, 3, 12}
}

func (x *ComputablePlanDefinition_Action_DynamicValue) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_DynamicValue) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_DynamicValue) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_DynamicValue) GetPath() *datatypes_go_proto.String {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_DynamicValue) GetExpression() *datatypes_go_proto.Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

// applicability | start | stop
type ComputablePlanDefinition_Action_Condition_KindCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ActionConditionKindCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.ActionConditionKindCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension              `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ComputablePlanDefinition_Action_Condition_KindCode) Reset() {
	*x = ComputablePlanDefinition_Action_Condition_KindCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputablePlanDefinition_Action_Condition_KindCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputablePlanDefinition_Action_Condition_KindCode) ProtoMessage() {}

func (x *ComputablePlanDefinition_Action_Condition_KindCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputablePlanDefinition_Action_Condition_KindCode.ProtoReflect.Descriptor instead.
func (*ComputablePlanDefinition_Action_Condition_KindCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescGZIP(), []int{0, 3, 2, 0}
}

func (x *ComputablePlanDefinition_Action_Condition_KindCode) GetValue() codes_go_proto.ActionConditionKindCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ActionConditionKindCode_INVALID_UNINITIALIZED
}

func (x *ComputablePlanDefinition_Action_Condition_KindCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_Condition_KindCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// before-start | before | before-end | concurrent-with-start | concurrent
// | concurrent-with-end | after-start | after | after-end
type ComputablePlanDefinition_Action_RelatedAction_RelationshipCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ActionRelationshipTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.ActionRelationshipTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ComputablePlanDefinition_Action_RelatedAction_RelationshipCode) Reset() {
	*x = ComputablePlanDefinition_Action_RelatedAction_RelationshipCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputablePlanDefinition_Action_RelatedAction_RelationshipCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputablePlanDefinition_Action_RelatedAction_RelationshipCode) ProtoMessage() {}

func (x *ComputablePlanDefinition_Action_RelatedAction_RelationshipCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputablePlanDefinition_Action_RelatedAction_RelationshipCode.ProtoReflect.Descriptor instead.
func (*ComputablePlanDefinition_Action_RelatedAction_RelationshipCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescGZIP(), []int{0, 3, 3, 0}
}

func (x *ComputablePlanDefinition_Action_RelatedAction_RelationshipCode) GetValue() codes_go_proto.ActionRelationshipTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ActionRelationshipTypeCode_INVALID_UNINITIALIZED
}

func (x *ComputablePlanDefinition_Action_RelatedAction_RelationshipCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_RelatedAction_RelationshipCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Time offset for the relationship
type ComputablePlanDefinition_Action_RelatedAction_OffsetX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*ComputablePlanDefinition_Action_RelatedAction_OffsetX_Duration
	//	*ComputablePlanDefinition_Action_RelatedAction_OffsetX_Range
	Choice isComputablePlanDefinition_Action_RelatedAction_OffsetX_Choice `protobuf_oneof:"choice"`
}

func (x *ComputablePlanDefinition_Action_RelatedAction_OffsetX) Reset() {
	*x = ComputablePlanDefinition_Action_RelatedAction_OffsetX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputablePlanDefinition_Action_RelatedAction_OffsetX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputablePlanDefinition_Action_RelatedAction_OffsetX) ProtoMessage() {}

func (x *ComputablePlanDefinition_Action_RelatedAction_OffsetX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputablePlanDefinition_Action_RelatedAction_OffsetX.ProtoReflect.Descriptor instead.
func (*ComputablePlanDefinition_Action_RelatedAction_OffsetX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescGZIP(), []int{0, 3, 3, 1}
}

func (m *ComputablePlanDefinition_Action_RelatedAction_OffsetX) GetChoice() isComputablePlanDefinition_Action_RelatedAction_OffsetX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_RelatedAction_OffsetX) GetDuration() *datatypes_go_proto.Duration {
	if x, ok := x.GetChoice().(*ComputablePlanDefinition_Action_RelatedAction_OffsetX_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_RelatedAction_OffsetX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*ComputablePlanDefinition_Action_RelatedAction_OffsetX_Range); ok {
		return x.Range
	}
	return nil
}

type isComputablePlanDefinition_Action_RelatedAction_OffsetX_Choice interface {
	isComputablePlanDefinition_Action_RelatedAction_OffsetX_Choice()
}

type ComputablePlanDefinition_Action_RelatedAction_OffsetX_Duration struct {
	Duration *datatypes_go_proto.Duration `protobuf:"bytes,1,opt,name=duration,proto3,oneof"`
}

type ComputablePlanDefinition_Action_RelatedAction_OffsetX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

func (*ComputablePlanDefinition_Action_RelatedAction_OffsetX_Duration) isComputablePlanDefinition_Action_RelatedAction_OffsetX_Choice() {
}

func (*ComputablePlanDefinition_Action_RelatedAction_OffsetX_Range) isComputablePlanDefinition_Action_RelatedAction_OffsetX_Choice() {
}

// patient | practitioner | related-person | device
type ComputablePlanDefinition_Action_Participant_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ActionParticipantTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.ActionParticipantTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ComputablePlanDefinition_Action_Participant_TypeCode) Reset() {
	*x = ComputablePlanDefinition_Action_Participant_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputablePlanDefinition_Action_Participant_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputablePlanDefinition_Action_Participant_TypeCode) ProtoMessage() {}

func (x *ComputablePlanDefinition_Action_Participant_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputablePlanDefinition_Action_Participant_TypeCode.ProtoReflect.Descriptor instead.
func (*ComputablePlanDefinition_Action_Participant_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescGZIP(), []int{0, 3, 5, 0}
}

func (x *ComputablePlanDefinition_Action_Participant_TypeCode) GetValue() codes_go_proto.ActionParticipantTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ActionParticipantTypeCode_INVALID_UNINITIALIZED
}

func (x *ComputablePlanDefinition_Action_Participant_TypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ComputablePlanDefinition_Action_Participant_TypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

var File_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDesc = []byte{
	0x0a, 0x49, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe6, 0x5e, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x37,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x58, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52,
	0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x50, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x58, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x3c, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x48, 0x0a, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x6a, 0x75,
	0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52,
	0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x3a, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x3a, 0x0a, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72,
	0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x72,
	0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x73, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e,
	0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18,
	0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12,
	0x4c, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xae, 0x02,
	0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a,
	0x6d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xbc,
	0x01, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x4b,
	0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0b, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83,
	0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xa6, 0x0a,
	0x0a, 0x04, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x40, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x4e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x42, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x6f, 0x61, 0x6c, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x1a, 0xf0, 0x04, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x07, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x07, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x59, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x58, 0x52, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x2f, 0x0a, 0x03, 0x64, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x03, 0x64, 0x75, 0x65, 0x1a, 0xdf, 0x01, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x58,
	0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xa3, 0x3c, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x31, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x4a, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x0d, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x07, 0x67,
	0x6f, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x06, 0x67, 0x6f, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x57, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x58, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x69, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x06, 0x74,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x58, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x12, 0x62, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x76, 0x0a, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x79, 0x0a, 0x12, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x12, 0x76, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x76, 0x0a, 0x11, 0x70, 0x72,
	0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x10, 0x70, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x12, 0x7f, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x13,
	0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x12, 0x60, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x66, 0x0a, 0x0d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xac, 0x02, 0x0a, 0x0c, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6b, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xbc, 0x01, 0x0a, 0x08, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x4b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0b, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x9f, 0x05, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x63, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x69,
	0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xb1, 0x02, 0x0a, 0x08, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x70, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x6b, 0x69, 0x6e, 0x64, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xbd, 0x07, 0x0a, 0x0d, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x7f, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x12, 0x62, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x58,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0xbf, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x8c, 0x01, 0x0a, 0x07, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x58, 0x12, 0x3b, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xe6, 0x02, 0x0a, 0x07, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x58, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x67,
	0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00,
	0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x74, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x1a, 0xa0, 0x05, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x1a, 0xb5, 0x02,
	0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x3a, 0x72, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xc3, 0x02, 0x0a, 0x14, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x67, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x67, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67,
	0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xc6, 0x02, 0x0a, 0x15,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x74,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x1a, 0xc3, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2d,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xc3, 0x02, 0x0a, 0x14, 0x50,
	0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x73, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x72, 0x65,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x1a, 0xcc, 0x02, 0x0a, 0x17, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x76, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a,
	0x8d, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12,
	0x3e, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12,
	0x2c, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a,
	0xba, 0x02, 0x0a, 0x0c, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3f, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x88, 0x01, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x89, 0x01,
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x66, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72,
	0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x04, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescData = file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDesc
)

func file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDescData
}

var file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_goTypes = []interface{}{
	(*ComputablePlanDefinition)(nil),                                       // 0: google.fhir.r4.core.ComputablePlanDefinition
	(*ComputablePlanDefinition_StatusCode)(nil),                            // 1: google.fhir.r4.core.ComputablePlanDefinition.StatusCode
	(*ComputablePlanDefinition_SubjectX)(nil),                              // 2: google.fhir.r4.core.ComputablePlanDefinition.SubjectX
	(*ComputablePlanDefinition_Goal)(nil),                                  // 3: google.fhir.r4.core.ComputablePlanDefinition.Goal
	(*ComputablePlanDefinition_Action)(nil),                                // 4: google.fhir.r4.core.ComputablePlanDefinition.Action
	(*ComputablePlanDefinition_Goal_Target)(nil),                           // 5: google.fhir.r4.core.ComputablePlanDefinition.Goal.Target
	(*ComputablePlanDefinition_Goal_Target_DetailX)(nil),                   // 6: google.fhir.r4.core.ComputablePlanDefinition.Goal.Target.DetailX
	(*ComputablePlanDefinition_Action_PriorityCode)(nil),                   // 7: google.fhir.r4.core.ComputablePlanDefinition.Action.PriorityCode
	(*ComputablePlanDefinition_Action_SubjectX)(nil),                       // 8: google.fhir.r4.core.ComputablePlanDefinition.Action.SubjectX
	(*ComputablePlanDefinition_Action_Condition)(nil),                      // 9: google.fhir.r4.core.ComputablePlanDefinition.Action.Condition
	(*ComputablePlanDefinition_Action_RelatedAction)(nil),                  // 10: google.fhir.r4.core.ComputablePlanDefinition.Action.RelatedAction
	(*ComputablePlanDefinition_Action_TimingX)(nil),                        // 11: google.fhir.r4.core.ComputablePlanDefinition.Action.TimingX
	(*ComputablePlanDefinition_Action_Participant)(nil),                    // 12: google.fhir.r4.core.ComputablePlanDefinition.Action.Participant
	(*ComputablePlanDefinition_Action_GroupingBehaviorCode)(nil),           // 13: google.fhir.r4.core.ComputablePlanDefinition.Action.GroupingBehaviorCode
	(*ComputablePlanDefinition_Action_SelectionBehaviorCode)(nil),          // 14: google.fhir.r4.core.ComputablePlanDefinition.Action.SelectionBehaviorCode
	(*ComputablePlanDefinition_Action_RequiredBehaviorCode)(nil),           // 15: google.fhir.r4.core.ComputablePlanDefinition.Action.RequiredBehaviorCode
	(*ComputablePlanDefinition_Action_PrecheckBehaviorCode)(nil),           // 16: google.fhir.r4.core.ComputablePlanDefinition.Action.PrecheckBehaviorCode
	(*ComputablePlanDefinition_Action_CardinalityBehaviorCode)(nil),        // 17: google.fhir.r4.core.ComputablePlanDefinition.Action.CardinalityBehaviorCode
	(*ComputablePlanDefinition_Action_DefinitionX)(nil),                    // 18: google.fhir.r4.core.ComputablePlanDefinition.Action.DefinitionX
	(*ComputablePlanDefinition_Action_DynamicValue)(nil),                   // 19: google.fhir.r4.core.ComputablePlanDefinition.Action.DynamicValue
	(*ComputablePlanDefinition_Action_Condition_KindCode)(nil),             // 20: google.fhir.r4.core.ComputablePlanDefinition.Action.Condition.KindCode
	(*ComputablePlanDefinition_Action_RelatedAction_RelationshipCode)(nil), // 21: google.fhir.r4.core.ComputablePlanDefinition.Action.RelatedAction.RelationshipCode
	(*ComputablePlanDefinition_Action_RelatedAction_OffsetX)(nil),          // 22: google.fhir.r4.core.ComputablePlanDefinition.Action.RelatedAction.OffsetX
	(*ComputablePlanDefinition_Action_Participant_TypeCode)(nil),           // 23: google.fhir.r4.core.ComputablePlanDefinition.Action.Participant.TypeCode
	(*datatypes_go_proto.Id)(nil),                                          // 24: google.fhir.r4.core.Id
	(*datatypes_go_proto.Meta)(nil),                                        // 25: google.fhir.r4.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                         // 26: google.fhir.r4.core.Uri
	(*datatypes_go_proto.Code)(nil),                                        // 27: google.fhir.r4.core.Code
	(*datatypes_go_proto.Narrative)(nil),                                   // 28: google.fhir.r4.core.Narrative
	(*any.Any)(nil),                                                        // 29: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                                   // 30: google.fhir.r4.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                                  // 31: google.fhir.r4.core.Identifier
	(*datatypes_go_proto.String)(nil),                                      // 32: google.fhir.r4.core.String
	(*datatypes_go_proto.CodeableConcept)(nil),                             // 33: google.fhir.r4.core.CodeableConcept
	(*datatypes_go_proto.Boolean)(nil),                                     // 34: google.fhir.r4.core.Boolean
	(*datatypes_go_proto.DateTime)(nil),                                    // 35: google.fhir.r4.core.DateTime
	(*datatypes_go_proto.ContactDetail)(nil),                               // 36: google.fhir.r4.core.ContactDetail
	(*datatypes_go_proto.Markdown)(nil),                                    // 37: google.fhir.r4.core.Markdown
	(*datatypes_go_proto.UsageContext)(nil),                                // 38: google.fhir.r4.core.UsageContext
	(*datatypes_go_proto.Date)(nil),                                        // 39: google.fhir.r4.core.Date
	(*datatypes_go_proto.Period)(nil),                                      // 40: google.fhir.r4.core.Period
	(*datatypes_go_proto.RelatedArtifact)(nil),                             // 41: google.fhir.r4.core.RelatedArtifact
	(*datatypes_go_proto.Canonical)(nil),                                   // 42: google.fhir.r4.core.Canonical
	(codes_go_proto.PublicationStatusCode_Value)(0),                        // 43: google.fhir.r4.core.PublicationStatusCode.Value
	(*datatypes_go_proto.Reference)(nil),                                   // 44: google.fhir.r4.core.Reference
	(*datatypes_go_proto.TriggerDefinition)(nil),                           // 45: google.fhir.r4.core.TriggerDefinition
	(*datatypes_go_proto.DataRequirement)(nil),                             // 46: google.fhir.r4.core.DataRequirement
	(*datatypes_go_proto.Duration)(nil),                                    // 47: google.fhir.r4.core.Duration
	(*datatypes_go_proto.Quantity)(nil),                                    // 48: google.fhir.r4.core.Quantity
	(*datatypes_go_proto.Range)(nil),                                       // 49: google.fhir.r4.core.Range
	(codes_go_proto.RequestPriorityCode_Value)(0),                          // 50: google.fhir.r4.core.RequestPriorityCode.Value
	(*datatypes_go_proto.Expression)(nil),                                  // 51: google.fhir.r4.core.Expression
	(*datatypes_go_proto.Age)(nil),                                         // 52: google.fhir.r4.core.Age
	(*datatypes_go_proto.Timing)(nil),                                      // 53: google.fhir.r4.core.Timing
	(codes_go_proto.ActionGroupingBehaviorCode_Value)(0),                   // 54: google.fhir.r4.core.ActionGroupingBehaviorCode.Value
	(codes_go_proto.ActionSelectionBehaviorCode_Value)(0),                  // 55: google.fhir.r4.core.ActionSelectionBehaviorCode.Value
	(codes_go_proto.ActionRequiredBehaviorCode_Value)(0),                   // 56: google.fhir.r4.core.ActionRequiredBehaviorCode.Value
	(codes_go_proto.ActionPrecheckBehaviorCode_Value)(0),                   // 57: google.fhir.r4.core.ActionPrecheckBehaviorCode.Value
	(codes_go_proto.ActionCardinalityBehaviorCode_Value)(0),                // 58: google.fhir.r4.core.ActionCardinalityBehaviorCode.Value
	(codes_go_proto.ActionConditionKindCode_Value)(0),                      // 59: google.fhir.r4.core.ActionConditionKindCode.Value
	(codes_go_proto.ActionRelationshipTypeCode_Value)(0),                   // 60: google.fhir.r4.core.ActionRelationshipTypeCode.Value
	(codes_go_proto.ActionParticipantTypeCode_Value)(0),                    // 61: google.fhir.r4.core.ActionParticipantTypeCode.Value
}
var file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_depIdxs = []int32{
	24,  // 0: google.fhir.r4.core.ComputablePlanDefinition.id:type_name -> google.fhir.r4.core.Id
	25,  // 1: google.fhir.r4.core.ComputablePlanDefinition.meta:type_name -> google.fhir.r4.core.Meta
	26,  // 2: google.fhir.r4.core.ComputablePlanDefinition.implicit_rules:type_name -> google.fhir.r4.core.Uri
	27,  // 3: google.fhir.r4.core.ComputablePlanDefinition.language:type_name -> google.fhir.r4.core.Code
	28,  // 4: google.fhir.r4.core.ComputablePlanDefinition.text:type_name -> google.fhir.r4.core.Narrative
	29,  // 5: google.fhir.r4.core.ComputablePlanDefinition.contained:type_name -> google.protobuf.Any
	30,  // 6: google.fhir.r4.core.ComputablePlanDefinition.extension:type_name -> google.fhir.r4.core.Extension
	30,  // 7: google.fhir.r4.core.ComputablePlanDefinition.modifier_extension:type_name -> google.fhir.r4.core.Extension
	26,  // 8: google.fhir.r4.core.ComputablePlanDefinition.url:type_name -> google.fhir.r4.core.Uri
	31,  // 9: google.fhir.r4.core.ComputablePlanDefinition.identifier:type_name -> google.fhir.r4.core.Identifier
	32,  // 10: google.fhir.r4.core.ComputablePlanDefinition.version:type_name -> google.fhir.r4.core.String
	32,  // 11: google.fhir.r4.core.ComputablePlanDefinition.name:type_name -> google.fhir.r4.core.String
	32,  // 12: google.fhir.r4.core.ComputablePlanDefinition.title:type_name -> google.fhir.r4.core.String
	32,  // 13: google.fhir.r4.core.ComputablePlanDefinition.subtitle:type_name -> google.fhir.r4.core.String
	33,  // 14: google.fhir.r4.core.ComputablePlanDefinition.type:type_name -> google.fhir.r4.core.CodeableConcept
	1,   // 15: google.fhir.r4.core.ComputablePlanDefinition.status:type_name -> google.fhir.r4.core.ComputablePlanDefinition.StatusCode
	34,  // 16: google.fhir.r4.core.ComputablePlanDefinition.experimental:type_name -> google.fhir.r4.core.Boolean
	2,   // 17: google.fhir.r4.core.ComputablePlanDefinition.subject:type_name -> google.fhir.r4.core.ComputablePlanDefinition.SubjectX
	35,  // 18: google.fhir.r4.core.ComputablePlanDefinition.date:type_name -> google.fhir.r4.core.DateTime
	32,  // 19: google.fhir.r4.core.ComputablePlanDefinition.publisher:type_name -> google.fhir.r4.core.String
	36,  // 20: google.fhir.r4.core.ComputablePlanDefinition.contact:type_name -> google.fhir.r4.core.ContactDetail
	37,  // 21: google.fhir.r4.core.ComputablePlanDefinition.description:type_name -> google.fhir.r4.core.Markdown
	38,  // 22: google.fhir.r4.core.ComputablePlanDefinition.use_context:type_name -> google.fhir.r4.core.UsageContext
	33,  // 23: google.fhir.r4.core.ComputablePlanDefinition.jurisdiction:type_name -> google.fhir.r4.core.CodeableConcept
	37,  // 24: google.fhir.r4.core.ComputablePlanDefinition.purpose:type_name -> google.fhir.r4.core.Markdown
	32,  // 25: google.fhir.r4.core.ComputablePlanDefinition.usage:type_name -> google.fhir.r4.core.String
	37,  // 26: google.fhir.r4.core.ComputablePlanDefinition.copyright:type_name -> google.fhir.r4.core.Markdown
	39,  // 27: google.fhir.r4.core.ComputablePlanDefinition.approval_date:type_name -> google.fhir.r4.core.Date
	39,  // 28: google.fhir.r4.core.ComputablePlanDefinition.last_review_date:type_name -> google.fhir.r4.core.Date
	40,  // 29: google.fhir.r4.core.ComputablePlanDefinition.effective_period:type_name -> google.fhir.r4.core.Period
	33,  // 30: google.fhir.r4.core.ComputablePlanDefinition.topic:type_name -> google.fhir.r4.core.CodeableConcept
	36,  // 31: google.fhir.r4.core.ComputablePlanDefinition.author:type_name -> google.fhir.r4.core.ContactDetail
	36,  // 32: google.fhir.r4.core.ComputablePlanDefinition.editor:type_name -> google.fhir.r4.core.ContactDetail
	36,  // 33: google.fhir.r4.core.ComputablePlanDefinition.reviewer:type_name -> google.fhir.r4.core.ContactDetail
	36,  // 34: google.fhir.r4.core.ComputablePlanDefinition.endorser:type_name -> google.fhir.r4.core.ContactDetail
	41,  // 35: google.fhir.r4.core.ComputablePlanDefinition.related_artifact:type_name -> google.fhir.r4.core.RelatedArtifact
	42,  // 36: google.fhir.r4.core.ComputablePlanDefinition.library:type_name -> google.fhir.r4.core.Canonical
	3,   // 37: google.fhir.r4.core.ComputablePlanDefinition.goal:type_name -> google.fhir.r4.core.ComputablePlanDefinition.Goal
	4,   // 38: google.fhir.r4.core.ComputablePlanDefinition.action:type_name -> google.fhir.r4.core.ComputablePlanDefinition.Action
	43,  // 39: google.fhir.r4.core.ComputablePlanDefinition.StatusCode.value:type_name -> google.fhir.r4.core.PublicationStatusCode.Value
	32,  // 40: google.fhir.r4.core.ComputablePlanDefinition.StatusCode.id:type_name -> google.fhir.r4.core.String
	30,  // 41: google.fhir.r4.core.ComputablePlanDefinition.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	33,  // 42: google.fhir.r4.core.ComputablePlanDefinition.SubjectX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	44,  // 43: google.fhir.r4.core.ComputablePlanDefinition.SubjectX.reference:type_name -> google.fhir.r4.core.Reference
	32,  // 44: google.fhir.r4.core.ComputablePlanDefinition.Goal.id:type_name -> google.fhir.r4.core.String
	30,  // 45: google.fhir.r4.core.ComputablePlanDefinition.Goal.extension:type_name -> google.fhir.r4.core.Extension
	30,  // 46: google.fhir.r4.core.ComputablePlanDefinition.Goal.modifier_extension:type_name -> google.fhir.r4.core.Extension
	33,  // 47: google.fhir.r4.core.ComputablePlanDefinition.Goal.category:type_name -> google.fhir.r4.core.CodeableConcept
	33,  // 48: google.fhir.r4.core.ComputablePlanDefinition.Goal.description:type_name -> google.fhir.r4.core.CodeableConcept
	33,  // 49: google.fhir.r4.core.ComputablePlanDefinition.Goal.priority:type_name -> google.fhir.r4.core.CodeableConcept
	33,  // 50: google.fhir.r4.core.ComputablePlanDefinition.Goal.start:type_name -> google.fhir.r4.core.CodeableConcept
	33,  // 51: google.fhir.r4.core.ComputablePlanDefinition.Goal.addresses:type_name -> google.fhir.r4.core.CodeableConcept
	41,  // 52: google.fhir.r4.core.ComputablePlanDefinition.Goal.documentation:type_name -> google.fhir.r4.core.RelatedArtifact
	5,   // 53: google.fhir.r4.core.ComputablePlanDefinition.Goal.target:type_name -> google.fhir.r4.core.ComputablePlanDefinition.Goal.Target
	32,  // 54: google.fhir.r4.core.ComputablePlanDefinition.Action.id:type_name -> google.fhir.r4.core.String
	30,  // 55: google.fhir.r4.core.ComputablePlanDefinition.Action.extension:type_name -> google.fhir.r4.core.Extension
	30,  // 56: google.fhir.r4.core.ComputablePlanDefinition.Action.modifier_extension:type_name -> google.fhir.r4.core.Extension
	32,  // 57: google.fhir.r4.core.ComputablePlanDefinition.Action.prefix:type_name -> google.fhir.r4.core.String
	32,  // 58: google.fhir.r4.core.ComputablePlanDefinition.Action.title:type_name -> google.fhir.r4.core.String
	32,  // 59: google.fhir.r4.core.ComputablePlanDefinition.Action.description:type_name -> google.fhir.r4.core.String
	32,  // 60: google.fhir.r4.core.ComputablePlanDefinition.Action.text_equivalent:type_name -> google.fhir.r4.core.String
	7,   // 61: google.fhir.r4.core.ComputablePlanDefinition.Action.priority:type_name -> google.fhir.r4.core.ComputablePlanDefinition.Action.PriorityCode
	33,  // 62: google.fhir.r4.core.ComputablePlanDefinition.Action.code:type_name -> google.fhir.r4.core.CodeableConcept
	33,  // 63: google.fhir.r4.core.ComputablePlanDefinition.Action.reason:type_name -> google.fhir.r4.core.CodeableConcept
	41,  // 64: google.fhir.r4.core.ComputablePlanDefinition.Action.documentation:type_name -> google.fhir.r4.core.RelatedArtifact
	24,  // 65: google.fhir.r4.core.ComputablePlanDefinition.Action.goal_id:type_name -> google.fhir.r4.core.Id
	8,   // 66: google.fhir.r4.core.ComputablePlanDefinition.Action.subject:type_name -> google.fhir.r4.core.ComputablePlanDefinition.Action.SubjectX
	45,  // 67: google.fhir.r4.core.ComputablePlanDefinition.Action.trigger:type_name -> google.fhir.r4.core.TriggerDefinition
	9,   // 68: google.fhir.r4.core.ComputablePlanDefinition.Action.condition:type_name -> google.fhir.r4.core.ComputablePlanDefinition.Action.Condition
	46,  // 69: google.fhir.r4.core.ComputablePlanDefinition.Action.input:type_name -> google.fhir.r4.core.DataRequirement
	46,  // 70: google.fhir.r4.core.ComputablePlanDefinition.Action.output:type_name -> google.fhir.r4.core.DataRequirement
	10,  // 71: google.fhir.r4.core.ComputablePlanDefinition.Action.related_action:type_name -> google.fhir.r4.core.ComputablePlanDefinition.Action.RelatedAction
	11,  // 72: google.fhir.r4.core.ComputablePlanDefinition.Action.timing:type_name -> google.fhir.r4.core.ComputablePlanDefinition.Action.TimingX
	12,  // 73: google.fhir.r4.core.ComputablePlanDefinition.Action.participant:type_name -> google.fhir.r4.core.ComputablePlanDefinition.Action.Participant
	33,  // 74: google.fhir.r4.core.ComputablePlanDefinition.Action.type:type_name -> google.fhir.r4.core.CodeableConcept
	13,  // 75: google.fhir.r4.core.ComputablePlanDefinition.Action.grouping_behavior:type_name -> google.fhir.r4.core.ComputablePlanDefinition.Action.GroupingBehaviorCode
	14,  // 76: google.fhir.r4.core.ComputablePlanDefinition.Action.selection_behavior:type_name -> google.fhir.r4.core.ComputablePlanDefinition.Action.SelectionBehaviorCode
	15,  // 77: google.fhir.r4.core.ComputablePlanDefinition.Action.required_behavior:type_name -> google.fhir.r4.core.ComputablePlanDefinition.Action.RequiredBehaviorCode
	16,  // 78: google.fhir.r4.core.ComputablePlanDefinition.Action.precheck_behavior:type_name -> google.fhir.r4.core.ComputablePlanDefinition.Action.PrecheckBehaviorCode
	17,  // 79: google.fhir.r4.core.ComputablePlanDefinition.Action.cardinality_behavior:type_name -> google.fhir.r4.core.ComputablePlanDefinition.Action.CardinalityBehaviorCode
	18,  // 80: google.fhir.r4.core.ComputablePlanDefinition.Action.definition:type_name -> google.fhir.r4.core.ComputablePlanDefinition.Action.DefinitionX
	42,  // 81: google.fhir.r4.core.ComputablePlanDefinition.Action.transform:type_name -> google.fhir.r4.core.Canonical
	19,  // 82: google.fhir.r4.core.ComputablePlanDefinition.Action.dynamic_value:type_name -> google.fhir.r4.core.ComputablePlanDefinition.Action.DynamicValue
	4,   // 83: google.fhir.r4.core.ComputablePlanDefinition.Action.action:type_name -> google.fhir.r4.core.ComputablePlanDefinition.Action
	32,  // 84: google.fhir.r4.core.ComputablePlanDefinition.Goal.Target.id:type_name -> google.fhir.r4.core.String
	30,  // 85: google.fhir.r4.core.ComputablePlanDefinition.Goal.Target.extension:type_name -> google.fhir.r4.core.Extension
	30,  // 86: google.fhir.r4.core.ComputablePlanDefinition.Goal.Target.modifier_extension:type_name -> google.fhir.r4.core.Extension
	33,  // 87: google.fhir.r4.core.ComputablePlanDefinition.Goal.Target.measure:type_name -> google.fhir.r4.core.CodeableConcept
	6,   // 88: google.fhir.r4.core.ComputablePlanDefinition.Goal.Target.detail:type_name -> google.fhir.r4.core.ComputablePlanDefinition.Goal.Target.DetailX
	47,  // 89: google.fhir.r4.core.ComputablePlanDefinition.Goal.Target.due:type_name -> google.fhir.r4.core.Duration
	48,  // 90: google.fhir.r4.core.ComputablePlanDefinition.Goal.Target.DetailX.quantity:type_name -> google.fhir.r4.core.Quantity
	49,  // 91: google.fhir.r4.core.ComputablePlanDefinition.Goal.Target.DetailX.range:type_name -> google.fhir.r4.core.Range
	33,  // 92: google.fhir.r4.core.ComputablePlanDefinition.Goal.Target.DetailX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	50,  // 93: google.fhir.r4.core.ComputablePlanDefinition.Action.PriorityCode.value:type_name -> google.fhir.r4.core.RequestPriorityCode.Value
	32,  // 94: google.fhir.r4.core.ComputablePlanDefinition.Action.PriorityCode.id:type_name -> google.fhir.r4.core.String
	30,  // 95: google.fhir.r4.core.ComputablePlanDefinition.Action.PriorityCode.extension:type_name -> google.fhir.r4.core.Extension
	33,  // 96: google.fhir.r4.core.ComputablePlanDefinition.Action.SubjectX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	44,  // 97: google.fhir.r4.core.ComputablePlanDefinition.Action.SubjectX.reference:type_name -> google.fhir.r4.core.Reference
	32,  // 98: google.fhir.r4.core.ComputablePlanDefinition.Action.Condition.id:type_name -> google.fhir.r4.core.String
	30,  // 99: google.fhir.r4.core.ComputablePlanDefinition.Action.Condition.extension:type_name -> google.fhir.r4.core.Extension
	30,  // 100: google.fhir.r4.core.ComputablePlanDefinition.Action.Condition.modifier_extension:type_name -> google.fhir.r4.core.Extension
	20,  // 101: google.fhir.r4.core.ComputablePlanDefinition.Action.Condition.kind:type_name -> google.fhir.r4.core.ComputablePlanDefinition.Action.Condition.KindCode
	51,  // 102: google.fhir.r4.core.ComputablePlanDefinition.Action.Condition.expression:type_name -> google.fhir.r4.core.Expression
	32,  // 103: google.fhir.r4.core.ComputablePlanDefinition.Action.RelatedAction.id:type_name -> google.fhir.r4.core.String
	30,  // 104: google.fhir.r4.core.ComputablePlanDefinition.Action.RelatedAction.extension:type_name -> google.fhir.r4.core.Extension
	30,  // 105: google.fhir.r4.core.ComputablePlanDefinition.Action.RelatedAction.modifier_extension:type_name -> google.fhir.r4.core.Extension
	24,  // 106: google.fhir.r4.core.ComputablePlanDefinition.Action.RelatedAction.action_id:type_name -> google.fhir.r4.core.Id
	21,  // 107: google.fhir.r4.core.ComputablePlanDefinition.Action.RelatedAction.relationship:type_name -> google.fhir.r4.core.ComputablePlanDefinition.Action.RelatedAction.RelationshipCode
	22,  // 108: google.fhir.r4.core.ComputablePlanDefinition.Action.RelatedAction.offset:type_name -> google.fhir.r4.core.ComputablePlanDefinition.Action.RelatedAction.OffsetX
	35,  // 109: google.fhir.r4.core.ComputablePlanDefinition.Action.TimingX.date_time:type_name -> google.fhir.r4.core.DateTime
	52,  // 110: google.fhir.r4.core.ComputablePlanDefinition.Action.TimingX.age:type_name -> google.fhir.r4.core.Age
	40,  // 111: google.fhir.r4.core.ComputablePlanDefinition.Action.TimingX.period:type_name -> google.fhir.r4.core.Period
	47,  // 112: google.fhir.r4.core.ComputablePlanDefinition.Action.TimingX.duration:type_name -> google.fhir.r4.core.Duration
	49,  // 113: google.fhir.r4.core.ComputablePlanDefinition.Action.TimingX.range:type_name -> google.fhir.r4.core.Range
	53,  // 114: google.fhir.r4.core.ComputablePlanDefinition.Action.TimingX.timing:type_name -> google.fhir.r4.core.Timing
	32,  // 115: google.fhir.r4.core.ComputablePlanDefinition.Action.Participant.id:type_name -> google.fhir.r4.core.String
	30,  // 116: google.fhir.r4.core.ComputablePlanDefinition.Action.Participant.extension:type_name -> google.fhir.r4.core.Extension
	30,  // 117: google.fhir.r4.core.ComputablePlanDefinition.Action.Participant.modifier_extension:type_name -> google.fhir.r4.core.Extension
	23,  // 118: google.fhir.r4.core.ComputablePlanDefinition.Action.Participant.type:type_name -> google.fhir.r4.core.ComputablePlanDefinition.Action.Participant.TypeCode
	33,  // 119: google.fhir.r4.core.ComputablePlanDefinition.Action.Participant.role:type_name -> google.fhir.r4.core.CodeableConcept
	54,  // 120: google.fhir.r4.core.ComputablePlanDefinition.Action.GroupingBehaviorCode.value:type_name -> google.fhir.r4.core.ActionGroupingBehaviorCode.Value
	32,  // 121: google.fhir.r4.core.ComputablePlanDefinition.Action.GroupingBehaviorCode.id:type_name -> google.fhir.r4.core.String
	30,  // 122: google.fhir.r4.core.ComputablePlanDefinition.Action.GroupingBehaviorCode.extension:type_name -> google.fhir.r4.core.Extension
	55,  // 123: google.fhir.r4.core.ComputablePlanDefinition.Action.SelectionBehaviorCode.value:type_name -> google.fhir.r4.core.ActionSelectionBehaviorCode.Value
	32,  // 124: google.fhir.r4.core.ComputablePlanDefinition.Action.SelectionBehaviorCode.id:type_name -> google.fhir.r4.core.String
	30,  // 125: google.fhir.r4.core.ComputablePlanDefinition.Action.SelectionBehaviorCode.extension:type_name -> google.fhir.r4.core.Extension
	56,  // 126: google.fhir.r4.core.ComputablePlanDefinition.Action.RequiredBehaviorCode.value:type_name -> google.fhir.r4.core.ActionRequiredBehaviorCode.Value
	32,  // 127: google.fhir.r4.core.ComputablePlanDefinition.Action.RequiredBehaviorCode.id:type_name -> google.fhir.r4.core.String
	30,  // 128: google.fhir.r4.core.ComputablePlanDefinition.Action.RequiredBehaviorCode.extension:type_name -> google.fhir.r4.core.Extension
	57,  // 129: google.fhir.r4.core.ComputablePlanDefinition.Action.PrecheckBehaviorCode.value:type_name -> google.fhir.r4.core.ActionPrecheckBehaviorCode.Value
	32,  // 130: google.fhir.r4.core.ComputablePlanDefinition.Action.PrecheckBehaviorCode.id:type_name -> google.fhir.r4.core.String
	30,  // 131: google.fhir.r4.core.ComputablePlanDefinition.Action.PrecheckBehaviorCode.extension:type_name -> google.fhir.r4.core.Extension
	58,  // 132: google.fhir.r4.core.ComputablePlanDefinition.Action.CardinalityBehaviorCode.value:type_name -> google.fhir.r4.core.ActionCardinalityBehaviorCode.Value
	32,  // 133: google.fhir.r4.core.ComputablePlanDefinition.Action.CardinalityBehaviorCode.id:type_name -> google.fhir.r4.core.String
	30,  // 134: google.fhir.r4.core.ComputablePlanDefinition.Action.CardinalityBehaviorCode.extension:type_name -> google.fhir.r4.core.Extension
	42,  // 135: google.fhir.r4.core.ComputablePlanDefinition.Action.DefinitionX.canonical:type_name -> google.fhir.r4.core.Canonical
	26,  // 136: google.fhir.r4.core.ComputablePlanDefinition.Action.DefinitionX.uri:type_name -> google.fhir.r4.core.Uri
	32,  // 137: google.fhir.r4.core.ComputablePlanDefinition.Action.DynamicValue.id:type_name -> google.fhir.r4.core.String
	30,  // 138: google.fhir.r4.core.ComputablePlanDefinition.Action.DynamicValue.extension:type_name -> google.fhir.r4.core.Extension
	30,  // 139: google.fhir.r4.core.ComputablePlanDefinition.Action.DynamicValue.modifier_extension:type_name -> google.fhir.r4.core.Extension
	32,  // 140: google.fhir.r4.core.ComputablePlanDefinition.Action.DynamicValue.path:type_name -> google.fhir.r4.core.String
	51,  // 141: google.fhir.r4.core.ComputablePlanDefinition.Action.DynamicValue.expression:type_name -> google.fhir.r4.core.Expression
	59,  // 142: google.fhir.r4.core.ComputablePlanDefinition.Action.Condition.KindCode.value:type_name -> google.fhir.r4.core.ActionConditionKindCode.Value
	32,  // 143: google.fhir.r4.core.ComputablePlanDefinition.Action.Condition.KindCode.id:type_name -> google.fhir.r4.core.String
	30,  // 144: google.fhir.r4.core.ComputablePlanDefinition.Action.Condition.KindCode.extension:type_name -> google.fhir.r4.core.Extension
	60,  // 145: google.fhir.r4.core.ComputablePlanDefinition.Action.RelatedAction.RelationshipCode.value:type_name -> google.fhir.r4.core.ActionRelationshipTypeCode.Value
	32,  // 146: google.fhir.r4.core.ComputablePlanDefinition.Action.RelatedAction.RelationshipCode.id:type_name -> google.fhir.r4.core.String
	30,  // 147: google.fhir.r4.core.ComputablePlanDefinition.Action.RelatedAction.RelationshipCode.extension:type_name -> google.fhir.r4.core.Extension
	47,  // 148: google.fhir.r4.core.ComputablePlanDefinition.Action.RelatedAction.OffsetX.duration:type_name -> google.fhir.r4.core.Duration
	49,  // 149: google.fhir.r4.core.ComputablePlanDefinition.Action.RelatedAction.OffsetX.range:type_name -> google.fhir.r4.core.Range
	61,  // 150: google.fhir.r4.core.ComputablePlanDefinition.Action.Participant.TypeCode.value:type_name -> google.fhir.r4.core.ActionParticipantTypeCode.Value
	32,  // 151: google.fhir.r4.core.ComputablePlanDefinition.Action.Participant.TypeCode.id:type_name -> google.fhir.r4.core.String
	30,  // 152: google.fhir.r4.core.ComputablePlanDefinition.Action.Participant.TypeCode.extension:type_name -> google.fhir.r4.core.Extension
	153, // [153:153] is the sub-list for method output_type
	153, // [153:153] is the sub-list for method input_type
	153, // [153:153] is the sub-list for extension type_name
	153, // [153:153] is the sub-list for extension extendee
	0,   // [0:153] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_init() }
func file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_init() {
	if File_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputablePlanDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputablePlanDefinition_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputablePlanDefinition_SubjectX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputablePlanDefinition_Goal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputablePlanDefinition_Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputablePlanDefinition_Goal_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputablePlanDefinition_Goal_Target_DetailX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputablePlanDefinition_Action_PriorityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputablePlanDefinition_Action_SubjectX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputablePlanDefinition_Action_Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputablePlanDefinition_Action_RelatedAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputablePlanDefinition_Action_TimingX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputablePlanDefinition_Action_Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputablePlanDefinition_Action_GroupingBehaviorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputablePlanDefinition_Action_SelectionBehaviorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputablePlanDefinition_Action_RequiredBehaviorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputablePlanDefinition_Action_PrecheckBehaviorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputablePlanDefinition_Action_CardinalityBehaviorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputablePlanDefinition_Action_DefinitionX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputablePlanDefinition_Action_DynamicValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputablePlanDefinition_Action_Condition_KindCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputablePlanDefinition_Action_RelatedAction_RelationshipCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputablePlanDefinition_Action_RelatedAction_OffsetX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputablePlanDefinition_Action_Participant_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ComputablePlanDefinition_SubjectX_CodeableConcept)(nil),
		(*ComputablePlanDefinition_SubjectX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ComputablePlanDefinition_Goal_Target_DetailX_Quantity)(nil),
		(*ComputablePlanDefinition_Goal_Target_DetailX_Range)(nil),
		(*ComputablePlanDefinition_Goal_Target_DetailX_CodeableConcept)(nil),
	}
	file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ComputablePlanDefinition_Action_SubjectX_CodeableConcept)(nil),
		(*ComputablePlanDefinition_Action_SubjectX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*ComputablePlanDefinition_Action_TimingX_DateTime)(nil),
		(*ComputablePlanDefinition_Action_TimingX_Age)(nil),
		(*ComputablePlanDefinition_Action_TimingX_Period)(nil),
		(*ComputablePlanDefinition_Action_TimingX_Duration)(nil),
		(*ComputablePlanDefinition_Action_TimingX_Range)(nil),
		(*ComputablePlanDefinition_Action_TimingX_Timing)(nil),
	}
	file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*ComputablePlanDefinition_Action_DefinitionX_Canonical)(nil),
		(*ComputablePlanDefinition_Action_DefinitionX_Uri)(nil),
	}
	file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*ComputablePlanDefinition_Action_RelatedAction_OffsetX_Duration)(nil),
		(*ComputablePlanDefinition_Action_RelatedAction_OffsetX_Range)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto = out.File
	file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_rawDesc = nil
	file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_goTypes = nil
	file_proto_google_fhir_proto_r4_core_profiles_computable_plan_definition_proto_depIdxs = nil
}
